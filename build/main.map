{"version":3,"sources":["webpack:///webpack/bootstrap 95134c597388cd33cd98","webpack:///./nuxt.config.js","webpack:///./~/_babel-runtime@6.26.0@babel-runtime/regenerator/index.js","webpack:///external \"koa\"","webpack:///external \"nuxt\"","webpack:///external \"autoprefixer\"","webpack:///external \"koa-router\"","webpack:///external \"regenerator-runtime\"","webpack:///./server/index.js","webpack:///./~/_co-body@5.1.1@co-body/lib/utils.js","webpack:///./~/_inflation@2.0.0@inflation/index.js","webpack:///external \"raw-body\"","webpack:///./~/_co-body@5.1.1@co-body/lib/form.js","webpack:///./~/_co-body@5.1.1@co-body/lib/json.js","webpack:///./~/_co-body@5.1.1@co-body/lib/text.js","webpack:///./~/_koa-bodyparser@4.2.0@koa-bodyparser/index.js","webpack:///./~/_co-body@5.1.1@co-body/index.js","webpack:///./~/_co-body@5.1.1@co-body/lib/any.js","webpack:///./~/_copy-to@2.0.1@copy-to/index.js","webpack:///external \"qs\"","webpack:///external \"type-is\"","webpack:///external \"zlib\"","webpack:///./apis/controllers/blog.js","webpack:///external \"util\"","webpack:///./~/_mongodb@3.0.4@mongodb/lib/utils.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/index.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/utils.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/error.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/error/index.js","webpack:///external \"events\"","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/topologies/shared.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/document.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/connection/utils.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/connection/commands.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/schematype.js","webpack:///./~/_mongodb@3.0.4@mongodb/lib/metadata.js","webpack:///./~/_mongodb@3.0.4@mongodb/lib/cursor.js","webpack:///./~/_mongodb@3.0.4@mongodb/lib/topologies/topology_base.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/connection/logger.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/wireprotocol/shared.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/queryhelpers.js","webpack:///external \"stream\"","webpack:///./~/_mongodb@3.0.4@mongodb/index.js","webpack:///./~/_mongodb@3.0.4@mongodb/lib/command_cursor.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/options.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/types/objectid.js","webpack:///./~/_bson@1.0.6@bson/lib/bson/long.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/topologies/read_preference.js","webpack:///./~/_mongodb@3.0.4@mongodb/lib/aggregation_cursor.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/types/documentarray.js","webpack:///external \"crypto\"","webpack:///./~/_bson@1.0.6@bson/index.js","webpack:///./~/_bson@1.0.6@bson/lib/bson/binary.js","webpack:///./~/_bson@1.0.6@bson/lib/bson/min_key.js","webpack:///./~/_mongodb@3.0.4@mongodb/lib/collection.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/drivers/index.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/error/cast.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/schema.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/schema/mixed.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/types/embedded.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/types/index.js","webpack:///./~/_mpath@0.3.0@mpath/index.js","webpack:///./~/_bson@1.0.6@bson/lib/bson/code.js","webpack:///./~/_bson@1.0.6@bson/lib/bson/db_ref.js","webpack:///./~/_bson@1.0.6@bson/lib/bson/decimal128.js","webpack:///./~/_bson@1.0.6@bson/lib/bson/double.js","webpack:///./~/_bson@1.0.6@bson/lib/bson/max_key.js","webpack:///./~/_bson@1.0.6@bson/lib/bson/objectid.js","webpack:///./~/_bson@1.0.6@bson/lib/bson/regexp.js","webpack:///./~/_bson@1.0.6@bson/lib/bson/symbol.js","webpack:///./~/_bson@1.0.6@bson/lib/bson/timestamp.js","webpack:///./~/_lodash.get@4.4.2@lodash.get/index.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/auth/gssapi.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/auth/mongocr.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/auth/plain.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/auth/scram.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/auth/x509.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/cursor.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/wireprotocol/compression.js","webpack:///./~/_mongodb@3.0.4@mongodb/lib/bulk/common.js","webpack:///./~/_mongodb@3.0.4@mongodb/lib/db.js","webpack:///./~/_mongodb@3.0.4@mongodb/lib/topologies/server.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/connectionstate.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/promise_provider.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/schema/operators/helpers.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/services/common.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/services/projection/isDefiningProjection.js","webpack:///./~/_mquery@3.0.0@mquery/lib/collection/collection.js","webpack:///./~/_require_optional@1.0.1@require_optional/index.js","webpack:///./~/_bson@1.0.6@bson/lib/bson/int_32.js","webpack:///./~/_bson@1.0.6@bson/lib/bson/map.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/auth/sspi.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/topologies/server.js","webpack:///./~/_mongodb@3.0.4@mongodb/lib/bulk/ordered.js","webpack:///./~/_mongodb@3.0.4@mongodb/lib/bulk/unordered.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/cast.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/error/strict.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/error/validation.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/query.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/schema/array.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/schema/number.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/schema/objectid.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/schema/operators/exists.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/services/document/compile.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/services/model/discriminator.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/types/array.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/types/decimal128.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/virtualtype.js","webpack:///./~/_mquery@3.0.0@mquery/lib/mquery.js","webpack:///./~/_require_optional@1.0.1@require_optional","webpack:///./~/_sliced@1.0.1@sliced/index.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/connection/connection.js","webpack:///./~/_mongodb@3.0.4@mongodb/lib/admin.js","webpack:///./~/_mongodb@3.0.4@mongodb/lib/gridfs/chunk.js","webpack:///./~/_mongodb@3.0.4@mongodb/lib/gridfs/grid_store.js","webpack:///./~/_mongodb@3.0.4@mongodb/lib/mongo_client.js","webpack:///./~/_mongodb@3.0.4@mongodb/lib/topologies/mongos.js","webpack:///./~/_mongodb@3.0.4@mongodb/lib/topologies/replset.js","webpack:///./~/_mongodb@3.0.4@mongodb/lib/url_parser.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib ^.*\\/collection$","webpack:///./~/_mongoose@5.0.11@mongoose/lib/aggregate.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/collection.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/connection.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/document_provider.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/error/objectParameter.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/internal.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/schema/boolean.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/schema/buffer.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/schema/date.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/schema/index.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/schema/operators/bitwise.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/schema/operators/geospatial.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/schema/operators/type.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/schema/string.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/services/cursor/eachAsync.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/services/document/cleanModifiedSubpaths.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/services/model/applyHooks.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/services/query/castUpdate.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/services/setDefaultsOnInsert.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/types/buffer.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/types/subdocument.js","webpack:///./~/_mquery@3.0.0@mquery/lib/env.js","webpack:///./~/_mquery@3.0.0@mquery/lib/utils.js","webpack:///./~/_regexp-clone@0.0.1@regexp-clone/index.js","webpack:///external \"assert\"","webpack:///external \"async/each\"","webpack:///external \"async/parallel\"","webpack:///external \"buffer\"","webpack:///external \"dns\"","webpack:///external \"fs\"","webpack:///external \"os\"","webpack:///external \"url\"","webpack:///./apis/models/blog.js","webpack:///./~/_bson@1.0.6@bson/lib/bson/bson.js","webpack:///./~/_bson@1.0.6@bson/lib/bson/float_parser.js","webpack:///./~/_bson@1.0.6@bson/lib/bson/parser/calculate_size.js","webpack:///./~/_bson@1.0.6@bson/lib/bson/parser/deserializer.js","webpack:///./~/_bson@1.0.6@bson/lib/bson/parser/serializer.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/package.json","webpack:///./~/_mongodb@3.0.4@mongodb/package.json","webpack:///./~/_mongoose@5.0.11@mongoose/package.json","webpack:///./~/_kareem@2.0.5@kareem/index.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/connection/command_result.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/connection/pool.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/sessions.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/topologies/mongos.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/topologies/replset.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/topologies/replset_state.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/uri_parser.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/utils.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/wireprotocol/2_6_support.js","webpack:///./~/_mongodb-core@3.0.4@mongodb-core/lib/wireprotocol/3_2_support.js","webpack:///./~/_mongodb@3.0.4@mongodb/lib/apm.js","webpack:///./~/_mongodb@3.0.4@mongodb/lib/authenticate.js","webpack:///./~/_mongodb@3.0.4@mongodb/lib/change_stream.js","webpack:///./~/_mongodb@3.0.4@mongodb/lib/gridfs-stream/download.js","webpack:///./~/_mongodb@3.0.4@mongodb/lib/gridfs-stream/index.js","webpack:///./~/_mongodb@3.0.4@mongodb/lib/gridfs-stream/upload.js","webpack:///./~/_mongoose-legacy-pluralize@1.0.2@mongoose-legacy-pluralize/index.js","webpack:///./~/_mongoose@5.0.11@mongoose/index.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib ^.*\\/connection$","webpack:///./~/_mongoose@5.0.11@mongoose/lib/browserDocument.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/cursor/AggregationCursor.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/cursor/ChangeStream.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/cursor/QueryCursor.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/drivers","webpack:///./~/_mongoose@5.0.11@mongoose/lib/drivers/browser/ReadPreference.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/drivers/browser/binary.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/drivers/browser/decimal128.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/drivers/browser/index.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/drivers/browser/objectid.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/drivers/node-mongodb-native/ReadPreference.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/drivers/node-mongodb-native/binary.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/drivers/node-mongodb-native/collection.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/drivers/node-mongodb-native/connection.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/drivers/node-mongodb-native/decimal128.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/drivers/node-mongodb-native/index.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/drivers/node-mongodb-native/objectid.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/error/divergentArray.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/error/messages.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/error/missingSchema.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/error/notFound.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/error/objectExpected.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/error/overwriteModel.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/error/validator.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/error/version.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/index.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/model.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/plugins/idGetter.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/plugins/removeSubdocs.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/plugins/saveSubdocs.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/plugins/sharding.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/plugins/validateBeforeSave.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/schema/decimal128.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/schema/documentarray.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/schema/embedded.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/services/model/applyMethods.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/services/model/applyStatics.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/services/populate/getSchemaTypes.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/services/projection/isExclusive.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/services/projection/isInclusive.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/services/projection/isPathSelectedInclusive.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/services/query/hasDollarKeys.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/services/query/selectPopulatedFields.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/services/updateValidators.js","webpack:///./~/_mongoose@5.0.11@mongoose/lib/statemachine.js","webpack:///./~/_mpath@0.3.0@mpath/lib/index.js","webpack:///./~/_mquery@3.0.0@mquery/lib/collection/index.js","webpack:///./~/_mquery@3.0.0@mquery/lib/collection/node.js","webpack:///./~/_mquery@3.0.0@mquery/lib/permissions.js","webpack:///(webpack)/buildin/module.js","webpack:///external \"async\"","webpack:///external \"async/parallelLimit\"","webpack:///external \"bluebird\"","webpack:///external \"debug\"","webpack:///external \"ms\"","webpack:///external \"net\"","webpack:///external \"path\"","webpack:///external \"querystring\"","webpack:///external \"resolve-from\"","webpack:///external \"semver\"","webpack:///external \"tls\""],"names":["module","exports","head","title","titleTemplate","meta","charset","name","content","hid","link","rel","type","href","css","loading","color","build","postcss","require","browsers","babel","plugins","libraryName","styleLibraryName","vendor","src","ssr","app","host","process","env","HOST","port","PORT","use","bodyParser","config","dev","nuxt","builder","ctx","next","status","Promise","resolve","reject","res","on","render","req","promise","then","catch","listen","console","log","start","mongoose","connect","router","Router","prefix","get","request","body","post","tags","isPublic","storeAt","Date","updateAt","Blog","create","doc","Schema","blogSchema","String","Array","Boolean","Number","blogModel","model"],"mappings":";;;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AChEAA,OAAOC,OAAP,GAAiB;AACf;;;AAGAC,QAAM;AACJC,WAAO,yBADH;AAEJC,mBAAe,aAFX;AAGJC,UAAM,CACJ,EAAEC,SAAS,OAAX,EADI,EAEJ,EAAEC,MAAM,UAAR,EAAoBC,SAAS,qCAA7B,EAFI,EAGJ,EAAEC,KAAK,UAAP,EAAmBF,MAAM,UAAzB,EAAqCC,SAAS,2CAA9C,EAHI,EAIJ,EAAEC,KAAK,aAAP,EAAsBF,MAAM,aAA5B,EAA2CC,SAAS,yBAApD,EAJI,CAHF;AASJE,UAAM,CACJ,EAAEC,KAAK,MAAP,EAAeC,MAAM,cAArB,EAAqCC,MAAM,cAA3C,EADI;AATF,GAJS;AAiBf;;;AAGAC,OAAK,CAAC,uBAAD,EACH,sBADG,EAEH,sCAFG,CApBU;AAwBf;;;AAGAC,WAAS,EAAEC,OAAO,SAAT,EA3BM;AA4Bf;;;AAGAC,SAAO;AACL;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,aAAS,CACP,mBAAAC,CAAQ,CAAR,EAAwB;AACtBC,gBAAU,CAAC,iBAAD,EAAoB,gBAApB,EAAsC,UAAtC;AADY,KAAxB,CADO,CAdJ;AAmBLC,WAAO;AACLC,eAAS,CAAC,CAAC,WAAD,EAAc,CAAC;AACvBC,qBAAa,YADU;AAEvBC,0BAAkB;AAFK,OAAD,CAAd,CAAD;AADJ,KAnBF;AAyBLC,YAAQ,CAAC,YAAD,EAAe,OAAf,EAAwB,QAAxB;AAzBH,GA/BQ;AA0DfH,WAAS,CACP,EAAEI,KAAK,qBAAP,EAA8BC,KAAK,IAAnC,EADO,EAEP,EAAED,KAAK,eAAP,EAAwBC,KAAK,IAA7B,EAFO,EAGP,EAAED,KAAK,iBAAP,EAA0BC,KAAK,IAA/B,EAHO;AA1DM,CAAjB,C;;;;;;ACAA;;;;;;;ACAA,gC;;;;;;ACAA,iC;;;;;;ACAA,yC;;;;;;ACAA,uC;;;;;;ACAA,gD;;;;;;;;;;;;;;;;;;;;;;2LCQA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,eADR,GACc,IAAI,2CAAJ,EADd;AAEQC,gBAFR,GAEeC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,WAFnC;AAGQC,gBAHR,GAGeH,QAAQC,GAAR,CAAYG,IAAZ,IAAoB,IAHnC;;;AAKEN,gBAAIO,GAAJ,CAAQ,4CAAAC,EAAR;AACAR,gBAAIO,GAAJ,CAAQ,gEAAR;AACAP,gBAAIO,GAAJ,CAAQ,wEAAR;;AAEA;AACIE,kBAVN,GAUe,mBAAAlB,CAAQ,CAAR,CAVf;;AAWEkB,mBAAOC,GAAP,GAAa,EAAEV,IAAIG,GAAJ,KAAY,YAAd,CAAb;;AAEA;AACMQ,gBAdR,GAce,IAAI,0CAAJ,CAASF,MAAT,CAdf;;AAgBE;;AAhBF,iBAiBMA,OAAOC,GAjBb;AAAA;AAAA;AAAA;;AAkBUE,mBAlBV,GAkBoB,IAAI,6CAAJ,CAAYD,IAAZ,CAlBpB;AAAA;AAAA,mBAmBUC,QAAQvB,KAAR,EAnBV;;AAAA;;AAsBEW,gBAAIO,GAAJ;AAAA,wMAAQ,iBAAOM,GAAP,EAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACAA,MADA;;AAAA;AAEND,4BAAIE,MAAJ,GAAa,GAAb,CAFM,CAEW;AAFX,yDAGC,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCL,8BAAIM,GAAJ,CAAQC,EAAR,CAAW,OAAX,EAAoBH,OAApB;AACAJ,8BAAIM,GAAJ,CAAQC,EAAR,CAAW,QAAX,EAAqBH,OAArB;AACAN,+BAAKU,MAAL,CAAYR,IAAIS,GAAhB,EAAqBT,IAAIM,GAAzB,EAA8B,mBAAW;AACvC;AACAI,oCAAQC,IAAR,CAAaP,OAAb,EAAsBQ,KAAtB,CAA4BP,MAA5B;AACD,2BAHD;AAID,yBAPM,CAHD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAR;;AAAA;AAAA;AAAA;AAAA;;AAaAlB,gBAAI0B,MAAJ,CAAWrB,IAAX,EAAiBJ,IAAjB;AACA0B,oBAAQC,GAAR,CAAY,yBAAyB3B,IAAzB,GAAgC,GAAhC,GAAsCI,IAAlD,EApCF,CAoC0D;;AApC1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAewB,K;;;;;;;AARf;AACA;AACA;AACA;;AAEA;AACA,gDAAAC,CAASC,OAAT,CAAiB,6BAAjB;;AAyCAF,Q;;;;;;;AC9CA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACXA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;AChCA,qC;;;;;;;ACCA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,qCAAqC,2BAA2B;AAChE,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;ACpDA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,+CAA+C;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,qCAAqC,2BAA2B;AAChE,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC/DA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mCAAmC,wBAAwB;AAC3D,KAAK;AACL;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,OAAO;AACf,QAAQ,OAAO;AACf,QAAQ,OAAO;AACf,QAAQ,OAAO;AACf;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;;;;;;;ACzHA;AACA;AACA;AACA,uC;;;;;;;ACHA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS,0BAA0B,MAAM,eAAe;AACxD,SAAS,0BAA0B,WAAW,eAAe;AAC7D;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;;;AAGA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,WAAW,IAAI;AACf,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AChKA,+B;;;;;;ACAA,oC;;;;;;ACAA,iC;;;;;;;;;;;;;;;;;;ACAA;AACA;;AAGA,IAAIG,SAAS,wCAAAC,CAAO;AAClBC,UAAQ;AADU,CAAP,CAAb;;AAIAF,OAAOG,GAAP,CAAW,eAAX;AAAA,2LAA4B,iBAAOtB,GAAP,EAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAC1Ba,oBAAQC,GAAR,CAAYf,IAAIuB,OAAhB;AACAvB,gBAAIwB,IAAJ,GAAW;AACTtB,sBAAQ;AADC,aAAX;;AAF0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B;;AAAA;AAAA;AAAA;AAAA;;AAOAiB,OAAOM,IAAP,CAAY,eAAZ;AAAA,4LAA6B,kBAAOzB,GAAP,EAAYC,IAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC3Ba,oBAAQC,GAAR,CAAYf,IAAIuB,OAAJ,CAAYC,IAAxB;AAD2B,gCAE6ExB,IAAIuB,OAAJ,CAAYC,IAFzF,EAErB9D,KAFqB,qBAErBA,KAFqB,EAEdgE,IAFc,qBAEdA,IAFc,EAERvD,IAFQ,qBAERA,IAFQ,EAEFJ,OAFE,qBAEFA,OAFE,EAEO4D,QAFP,qBAEOA,QAFP,4CAEiBzB,MAFjB,EAEiBA,MAFjB,yCAE0B,CAF1B,oEAE6B0B,OAF7B,EAE6BA,OAF7B,yCAEuC,IAAIC,IAAJ,EAFvC,oEAEmDC,QAFnD,EAEmDA,QAFnD,yCAE8D,IAAID,IAAJ,EAF9D;AAAA;AAAA,mBAGX,6DAAAE,CAAKC,MAAL,CAAY,EAAEtE,YAAF,EAASgE,UAAT,EAAevD,UAAf,EAAqBJ,gBAArB,EAA8B4D,kBAA9B,EAAwCzB,cAAxC,EAAgD0B,gBAAhD,EAAyDE,kBAAzD,EAAZ,CAHW;;AAAA;AAGvBG,eAHuB;;AAI3BjC,gBAAIwB,IAAJ,GAAW;AACTtB,sBAAQ,SADC;AAET+B;AAFS,aAAX;;AAJ2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7B;;AAAA;AAAA;AAAA;AAAA;;AAWAd,OAAOM,IAAP,CAAY,aAAZ;AAAA,4LAA2B,kBAAOzB,GAAP,EAAYC,IAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACzBa,oBAAQC,GAAR,CAAYf,IAAIuB,OAAJ,CAAYC,IAAxB;AADyB,iCAE+ExB,IAAIuB,OAAJ,CAAYC,IAF3F,EAEnB9D,KAFmB,sBAEnBA,KAFmB,EAEZgE,IAFY,sBAEZA,IAFY,EAENvD,IAFM,sBAENA,IAFM,EAEAJ,OAFA,sBAEAA,OAFA,EAES4D,QAFT,sBAESA,QAFT,6CAEmBzB,MAFnB,EAEmBA,MAFnB,yCAE4B,CAF5B,sEAE+B0B,OAF/B,EAE+BA,OAF/B,0CAEyC,IAAIC,IAAJ,EAFzC,sEAEqDC,QAFrD,EAEqDA,QAFrD,yCAEgE,IAAID,IAAJ,EAFhE;AAAA;AAAA,mBAGT,6DAAAE,CAAKC,MAAL,CAAY,EAAEtE,YAAF,EAASgE,UAAT,EAAevD,UAAf,EAAqBJ,gBAArB,EAA8B4D,kBAA9B,EAAwCzB,cAAxC,EAAgD0B,gBAAhD,EAAyDE,kBAAzD,EAAZ,CAHS;;AAAA;AAGrBG,eAHqB;;AAIzBjC,gBAAIwB,IAAJ,GAAW;AACTtB,sBAAQ,SADC;AAET+B;AAFS,aAAX;;AAJyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAAA;AAAA;AAAA;AAAA;;AAUA1E,OAAOC,OAAP,GAAiB2D,MAAjB,C;;;;;;ACpCA,iC;;;;;;;ACAA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B,6BAA6B;;AAE1D;AACA;;AAEA,iBAAiB,iBAAiB;AAClC;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,aAAa,cAAc;AAC3B;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP,aAAa,cAAc,GAAG,OAAO;AACrC;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA,KAAK;AACL,GAAG;AACH,QAAQ;AACR;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,6BAA6B;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,6BAA6B;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,uBAAuB,mBAAmB;AACrF,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3cA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,eAAe;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrCA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY,OAAO;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,WAAW,IAAI;AACf,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,yBAAyB,QAAQ;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,QAAQ;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iCAAiC,OAAO;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,qCAAqC,SAAS;AAC9C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,wCAAwC;AACnD;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,SAAS;AACpB;AACA;;AAEA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;AC3zBA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,WAAW,oBAAoB;AAC/B,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,YAAY,WAAW;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,oBAAoB;AAC/B,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,oBAAoB;AAC/B,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,YAAY,kBAAkB;AAC9B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,oBAAoB;AAC/B,cAAc,OAAO;AACrB,YAAY,gBAAgB;AAC5B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;AChFA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACnHA,mC;;;;;;;ACAA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mDAAmD,0BAA0B;;AAE7E;AACA,gCAAgC,iBAAiB,GAAG,mBAAmB;AACvE;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA,iBAAiB,6BAA6B;AAC9C;;AAEA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,aAAa,4BAA4B;AACzC;;AAEA;AACA,eAAe,6BAA6B;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,aAAa,6BAA6B;AAC1C;;AAEA;AACA,eAAe,4BAA4B;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,wBAAwB;AAC/B,OAAO,kDAAkD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,eAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,cAAc;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9bA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA,iBAAiB,qBAAqB;AACtC;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe,GAAG,YAAY;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,UAAU;AAC3B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,SAAS;AAC5B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,QAAQ,WAAW;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,SAAS;AAC5B;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,+CAA+C;AAC/C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO,UAAU,GAAG,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;;AAEA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,IAAI;AACf,WAAW,8BAA8B;AACzC,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,6DAA6D;AAC7D;AACA;;AAEA;AACA,qBAAqB,WAAW;;AAEhC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oCAAoC;AAC9D;AACA;AACA,OAAO;AACP;AACA,8BAA8B,iBAAiB;AAC/C,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,aAAa,sBAAsB;AACnC;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C,OAAO;AACP,uCAAuC,uBAAuB;AAC9D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,+BAA+B,cAAc,EAAE;AAC/C,OAAO;AACP,mBAAmB;AACnB,kDAAkD,cAAc,EAAE;AAClE;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gBAAgB;AAC7C;AACA,WAAW,cAAc;AACzB,WAAW,IAAI;AACf,WAAW,8BAA8B;AACzC,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA,QAAQ,OAAO;AACf;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,8BAA8B;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC,OAAO;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ,2JAA2J,mBAAmB;AACjM,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yCAAyC,QAAQ,+BAA+B,EAAE;AAClF;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,0BAA0B;AAC1B;AACA;AACA,6BAA6B;AAC7B,0BAA0B;AAC1B,QAAQ;AACR;AACA,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,SAAS;AACtB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;;AAEA,wBAAwB;AACxB;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA,0BAA0B,mBAAmB;AAC7C;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iFAAiF,eAAe;AAChG;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA,+EAA+E,eAAe;AAC9F;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA,iBAAiB,cAAc;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,WAAW,aAAa;AACxB,YAAY,wBAAwB;AACpC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,aAAa;AACb,gBAAgB;AAChB;AACA;AACA;AACA,4BAA4B,EAAE;AAC9B,QAAQ;AACR;AACA,WAAW,OAAO;AAClB,WAAW,aAAa;AACxB,WAAW,yBAAyB;AACpC,WAAW,OAAO;AAClB,YAAY,gBAAgB;AAC5B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iCAAiC;AACtD;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,KAAK;AAC3B;AACA;AACA,sBAAsB,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,sBAAsB,KAAK;AAC3B;AACA;AACA,sBAAsB,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB,mBAAmB,EAAE,KAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,0BAA0B,kDAAkD;AAC5E,sBAAsB,4CAA4C;AAClE,qBAAqB,uCAAuC,EAAE,IAAI;AAClE,qBAAqB,sCAAsC,EAAE,KAAK;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,cAAc;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,mDAAmD;AACnD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,uCAAuC;AACvC,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,SAAS;AACpB;AACA,YAAY,SAAS;AACrB;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,gDAAgD;AAChD,8BAA8B;AAC9B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,iCAAiC;AACjC,QAAQ;AACR;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,SAAS;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;AC9rFA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,eAAe;;AAElB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG,iBAAiB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChHA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClhBA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD,iDAAiD;AACjD;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAAgC,KAAK,4BAA4B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,WAAW,sCAAsC;AACjF;AACA;AACA;AACA;AACA;AACA,gCAAgC,4BAA4B;AAC5D;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,gCAAgC,4BAA4B;AAC5D,sCAAsC;AACtC;AACA;AACA;AACA,6BAA6B,KAAK;AAClC;AACA,6BAA6B,KAAK;AAClC;AACA,WAAW,aAAa;AACxB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,4BAA4B;AAC/D,2BAA2B,OAAO,kCAAkC;AACpE,2BAA2B,OAAO,4CAA4C;AAC9E,2BAA2B,OAAO,yBAAyB,kCAAkC;AAC7F,2BAA2B,QAAQ,qBAAqB,+BAA+B;AACvF;AACA,qCAAqC,cAAc;AACnD,qCAAqC,6BAA6B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC,YAAY,WAAW;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,8BAA8B;AACjE,kCAAkC,eAAe;AACjD;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,WAAW;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,mBAAmB;AACnB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA4B,QAAQ,2BAA2B;AAC/D,mCAAmC,YAAY;AAC/C,WAAW,QAAQ;AACnB,YAAY,WAAW;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH,mBAAmB;AACnB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,6BAA6B;AAChE,kCAAkC,eAAe;AACjD;AACA,WAAW,QAAQ;AACnB,YAAY,WAAW;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH,mBAAmB;AACnB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,iCAAiC;AACpE;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,QAAQ;AACR;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,uBAAuB,WAAW,GAAG,QAAQ,wBAAwB,EAAE,EAAE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS,iCAAiC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,gBAAgB,+CAA+C;AAC/D,oBAAoB;AACpB,QAAQ;AACR;AACA;AACA,0BAA0B,iDAAiD;AAC3E;AACA,2BAA2B;AAC3B,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,mCAAmC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,WAAW,SAAS;AACpB,YAAY,WAAW;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,uBAAuB;AAC1D;AACA;AACA,2BAA2B,aAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,QAAQ;AACR;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,gBAAgB,+CAA+C;AAC/D,oBAAoB;AACpB,QAAQ;AACR;AACA;AACA;AACA;AACA,iCAAiC;AACjC,qCAAqC;AACrC,QAAQ;AACR;AACA,WAAW,SAAS;AACpB,YAAY,WAAW;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ,qCAAqC;AAChE;AACA;AACA;AACA,yCAAyC,KAAK;AAC9C,mBAAmB,QAAQ,kCAAkC;AAC7D;AACA;AACA;AACA;AACA,YAAY;AACZ,YAAY;AACZ;AACA,mBAAmB,QAAQ,gCAAgC;AAC3D;AACA;AACA;AACA,gCAAgC,iBAAiB;AACjD,gEAAgE,KAAK,sBAAsB,MAAM;AACjG;AACA;AACA;AACA,iJAAiJ,KAAK,QAAQ,MAAM;AACpK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,YAAY;AACZ,UAAU;AACV;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,YAAY;AACZ;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,uBAAuB;AAClC,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,WAAW;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,wCAAwC,YAAY;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,6BAA6B;AAChE;AACA;AACA;AACA,2BAA2B,QAAQ,yBAAyB,KAAK,gBAAgB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4BAA4B;AAC7D;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4BAA4B,EAAE;AACvD;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,uBAAuB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wBAAwB;AACnC,WAAW,iBAAiB;AAC5B,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,KAAK,8BAA8B;AACxE,kBAAkB;AAClB;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,WAAW;AACvB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,IAAI;AACf,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,mCAAmC,EAAE;AAC/D;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,IAAI;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,IAAI;AACf;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;;;;;;;AC5lCA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;ACrEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,UAAU,SAAS,GAAG;AACtB,UAAU,SAAS,IAAI,IAAI;AAC3B;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,QAAQ;AACR,MAAM;AACN,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB,cAAc,eAAe;AAC7B;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA,qBAAqB,WAAW,IAAI;AACpC,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB,UAAU,IAAI;AACnC,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB,gCAAgC,IAAI,0BAA0B;AACnF,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,mBAAmB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC,YAAY;AACZ,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,+BAA+B,gCAAgC;;AAE/D;AACA;AACA;AACA,WAAW,sBAAsB;AACjC,YAAY;AACZ,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4BAA4B,gCAAgC;;AAE5D;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA,6BAA6B,4CAA4C;AACzE;;AAEA;AACA;AACA;;AAEA,8BAA8B,qDAAqD;;AAEnF;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA,6BAA6B,4CAA4C;AACzE;;AAEA;AACA;AACA;;AAEA,+BAA+B,qDAAqD;;AAEpF;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA,6BAA6B,4CAA4C;AACzE;;AAEA;AACA;AACA;;AAEA,4BAA4B,qDAAqD;;AAEjF;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;;AAEA,2BAA2B,qDAAqD;;AAEhF;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA,6BAA6B,4CAA4C;AACzE;;AAEA;AACA;AACA;;AAEA,2BAA2B,qDAAqD;;AAEhF;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA,6BAA6B,4CAA4C;AACzE;;AAEA;AACA;AACA;;AAEA,iCAAiC,qDAAqD;;AAEtF;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA,6BAA6B,4CAA4C;AACzE;;AAEA;AACA;AACA;;AAEA,oCAAoC,qDAAqD;;AAEzF;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA,6BAA6B,4CAA4C;AACzE;;AAEA;AACA;AACA;;AAEA,gCAAgC,qDAAqD;;AAErF;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA,6BAA6B,4CAA4C;AACzE;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA,uCAAuC,qDAAqD;;AAE5F;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA,6BAA6B,4CAA4C;AACzE;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,6BAA6B,oEAAoE;AACjG;;AAEA;AACA;AACA;;AAEA,qCAAqC,qDAAqD;;AAE1F;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA,6BAA6B,4CAA4C;AACzE;;AAEA;AACA,6BAA6B,+DAA+D;AAC5F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wCAAwC,qDAAqD;;AAE7F;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA,6BAA6B,4CAA4C;AACzE;;AAEA;AACA;AACA;;AAEA,+BAA+B,qDAAqD;;AAEpF;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA,6BAA6B,2DAA2D;AACxF;;AAEA;AACA,6BAA6B,4CAA4C;AACzE;;AAEA;AACA;AACA;;AAEA,sCAAsC,qDAAqD;;AAE3F;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA,6BAA6B,sDAAsD;AACnF;;AAEA;AACA,6BAA6B,4CAA4C;AACzE;;AAEA;AACA;AACA;;AAEA,iCAAiC,qDAAqD;;AAEtF;;AAEA,iCAAiC,qDAAqD;;AAEtF;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA,6BAA6B,4CAA4C;AACzE;;AAEA;AACA;AACA;;AAEA,+BAA+B,qDAAqD;;AAEpF;AACA;AACA;AACA,WAAW,sBAAsB;AACjC,WAAW,OAAO;AAClB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA,6BAA6B,mEAAmE;AAChG;;AAEA;AACA,6BAA6B,4CAA4C;AACzE;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,4BAA4B,qDAAqD;;AAEjF;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA,6BAA6B,qEAAqE;AAClG;;AAEA;AACA,6BAA6B,4CAA4C;AACzE;;AAEA;AACA,6BAA6B,yDAAyD;AACtF;;AAEA;AACA;AACA;AACA;;AAEA,iCAAiC,qDAAqD;;AAEtF;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,qDAAqD;;AAEtF;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA,6BAA6B,iEAAiE;AAC9F;;AAEA;AACA,6BAA6B,4CAA4C;AACzE;;AAEA;AACA,6BAA6B,qDAAqD;AAClF;;AAEA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,qDAAqD;;AAElF;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA,6BAA6B,gEAAgE;AAC7F;;AAEA;AACA,6BAA6B,4CAA4C;AACzE;;AAEA;AACA,6BAA6B,oDAAoD;AACjF;;AAEA;AACA;AACA;AACA;;AAEA,4BAA4B,qDAAqD;;AAEjF;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,sBAAsB;AACjC;;AAEA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4CAA4C;AACrE;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+DAA+D,eAAe;AAC9E;AACA,oBAAoB,cAAc;AAClC,MAAM,eAAe;AACrB;AACA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,iCAAiC;;AAE7D;AACA;AACA,0CAA0C,iDAAiD;AAC3F;AACA;AACA;AACA;AACA,yBAAyB,4CAA4C;AACrE;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB;;AAEA;AACA;AACA;AACA,WAAW,wBAAwB;AACnC,WAAW,mBAAmB;AAC9B,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,+BAA+B,iCAAiC;;AAEhE;AACA;AACA;AACA,WAAW,wBAAwB;AACnC,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA,yCAAyC,qDAAqD;;AAE9F;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,SAAS;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,6BAA6B;AACxC,YAAY;AACZ,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA,+BAA+B,gCAAgC;;AAE/D;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC,WAAW,2BAA2B;AACtC,YAAY,QAAQ;AACpB;AACA;AACA;AACA,6BAA6B,oEAAoE;AACjG,+DAA+D;AAC/D;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA,6BAA6B,gCAAgC;;AAE7D;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,sBAAsB;AACjC,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE,4BAA4B,GAAG,yBAAyB;;AAExD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,6BAA6B,gCAAgC;;AAE7D;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,mCAAmC;AACnC;AACA;AACA;;AAEA,2BAA2B,qDAAqD;;AAEhF;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA,gCAAgC,sDAAsD;;AAEtF;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,kCAAkC;;AAEjE;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,qDAAqD;;AAEnF;AACA;AACA;AACA,WAAW,sBAAsB;AACjC,YAAY,QAAQ;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA,+BAA+B,gCAAgC;;AAE/D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY;AACZ;;AAEA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,YAAY;AACZ;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;ACvxCA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC;;AAElC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,uCAAuC,oDAAoD;AAC3F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA,yBAAyB,qDAAqD;AAC9E;;AAEA;AACA;AACA,uCAAuC,oDAAoD;AAC3F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA,yBAAyB,0DAA0D;AACnF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,oEAAoE;AACjG;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,oBAAoB;AACjF;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;;;;;;;AC1cA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;ACrPA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrDA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;;AAEA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtQA,mC;;;;;;;ACAA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;AC7DA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,UAAU,SAAS,GAAG;AACtB,UAAU,SAAS,IAAI,IAAI;AAC3B;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,MAAM;AACN,IAAI;AACJ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,mBAAmB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,6BAA6B;AAC5C;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,wBAAwB;AACnC,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA,6BAA6B,4CAA4C;AACzE;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA,6BAA6B,yDAAyD;AACtF;AACA;AACA;AACA;;AAEA,iCAAiC,4DAA4D;;AAE7F;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,4DAA4D;;AAE7F;;AAEA,2BAA2B,iCAAiC;;AAE5D;AACA,+BAA+B,gCAAgC;AAC/D,4BAA4B,iCAAiC;AAC7D,+BAA+B,iCAAiC;AAChE,4BAA4B,gCAAgC;AAC5D,+BAA+B,gCAAgC;AAC/D,6BAA6B,gCAAgC;AAC7D,gCAAgC,sDAAsD;AACtF,8BAA8B,kCAAkC;AAChE,qCAAqC,qDAAqD;AAC1F,6CAA6C,oDAAoD;;AAEjG;AACA;AACA;AACA,WAAW,6BAA6B;AACxC,YAAY;AACZ,YAAY,QAAQ;AACpB;;AAEA;AACA;AACA;AACA,WAAW,6BAA6B;AACxC,YAAY;AACZ,YAAY,QAAQ;AACpB;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,SAAS;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,oCAAoC;AAC/C,YAAY;AACZ,YAAY,QAAQ;AACpB;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,cAAc;AACzB;;AAEA;AACA,+DAA+D,eAAe;AAC9E;AACA,oBAAoB,cAAc;AAClC,MAAM,eAAe;AACrB;AACA;AACA;AACA,WAAW,6BAA6B;AACxC,YAAY;AACZ,YAAY;AACZ;;AAEA;AACA;AACA;AACA,WAAW,6BAA6B;AACxC,YAAY,QAAQ;AACpB;;AAEA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB;;AAEA;AACA;AACA;AACA,WAAW,+BAA+B;AAC1C,WAAW,0BAA0B;AACrC,YAAY;AACZ,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA;;;;;;;;AC1VA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA,YAAY;AACZ;AACA;AACA,sBAAsB;;AAEtB;AACA,YAAY;AACZ;AACA;AACA,wBAAwB;AACxB;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,YAAY,KAAK;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,YAAY,KAAK;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,4BAA4B;AAC5B,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,YAAY,KAAK;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,YAAY,KAAK;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,YAAY,KAAK;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,YAAY,KAAK;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,KAAK;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA,WAAW,KAAK;AAChB;;AAEA,WAAW,KAAK;AAChB;;AAEA,WAAW,KAAK;AAChB;;AAEA,WAAW,KAAK;AAChB;;AAEA,WAAW,KAAK;AAChB;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;ACl1BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,+BAA+B,IAAI,cAAc;AACjF;AACA;AACA;AACA;AACA,QAAQ,2BAA2B,EAAE;AACrC,QAAQ;AACR;AACA;AACA;AACA;AACA,MAAM;AACN,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,cAAc,OAAO;AACrB,cAAc,MAAM;AACpB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;;;;;;;;AC1KA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,UAAU,SAAS,GAAG;AACtB,UAAU,SAAS,IAAI,IAAI;AAC3B;AACA;AACA,yBAAyB,GAAG,WAAW;AACvC;AACA;AACA;AACA,QAAQ;AACR,MAAM;AACN,IAAI;AACJ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kBAAkB;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,mBAAmB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA,6BAA6B,yDAAyD;AACtF;AACA;AACA;AACA;;AAEA,iCAAiC,gEAAgE;;AAEjG;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA,4BAA4B,qBAAqB;AACjD;AACA;;AAEA,+BAA+B,gEAAgE;;AAE/F;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;;AAEA,6BAA6B,gEAAgE;;AAE7F;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA,4BAA4B,gBAAgB;AAC5C;AACA;;AAEA,6BAA6B,gEAAgE;;AAE7F;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;;AAEA,6BAA6B,gEAAgE;;AAE7F;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,gEAAgE;;AAEjG;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;;AAEA,2BAA2B,gEAAgE;;AAE3F;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA,4BAA4B,qBAAqB;AACjD;AACA;;AAEA,+BAA+B,gEAAgE;;AAE/F;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;;AAEA,8BAA8B,gEAAgE;;AAE9F;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;;AAEA,8BAA8B,gEAAgE;;AAE9F;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;;AAEA,4BAA4B,gEAAgE;;AAE5F;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;;AAEA,4BAA4B,gEAAgE;;AAE5F;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA,4BAA4B,iBAAiB;AAC7C;AACA;;AAEA,8BAA8B,gEAAgE;;AAE9F;;AAEA;AACA,+BAA+B,gCAAgC;AAC/D,4BAA4B,iCAAiC;AAC7D,+BAA+B,iCAAiC;AAChE,+BAA+B,gCAAgC;AAC/D,4BAA4B,gCAAgC;AAC5D,6BAA6B,gCAAgC;AAC7D,gCAAgC,sDAAsD;AACtF,8BAA8B,kCAAkC;AAChE,qCAAqC,qDAAqD;AAC1F,6CAA6C,oDAAoD;;AAEjG;AACA;AACA;AACA,WAAW,iCAAiC;AAC5C,YAAY;AACZ,YAAY,QAAQ;AACpB;;AAEA;AACA;AACA;AACA,WAAW,iCAAiC;AAC5C,YAAY;AACZ,YAAY,QAAQ;AACpB;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,SAAS;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wCAAwC;AACnD,YAAY;AACZ,YAAY,QAAQ;AACpB;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,cAAc;AACzB;;AAEA;AACA,+DAA+D,eAAe;AAC9E;AACA,oBAAoB,cAAc;AAClC,MAAM,eAAe;AACrB;AACA;AACA;AACA,WAAW,iCAAiC;AAC5C,YAAY;AACZ,YAAY;AACZ;;AAEA;AACA;AACA;AACA,WAAW,iCAAiC;AAC5C,YAAY,QAAQ;AACpB;;AAEA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA,WAAW,iCAAiC;AAC5C,YAAY,QAAQ;AACpB;;AAEA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB;;AAEA;AACA;AACA;AACA,WAAW,mCAAmC;AAC9C,WAAW,8BAA8B;AACzC,YAAY;AACZ,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACnbA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;;AAEA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;;AAEA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,sBAAsB;AACpC,aAAa,8BAA8B;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,yDAAyD;AACzD;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,oCAAoC,OAAO;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;;;;;AC3SA,mC;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mCAAmC;AACnC,oCAAoC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;AC7CA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+CAAwC;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,qBAAqB,wBAAwB;AAC7C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;;AAEA;AACA,GAAG;AACH,eAAe,mBAAmB;AAClC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,cAAc;AACxC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;ACnXA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACbA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,MAAM;AACN,IAAI;AACJ;;AAEA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,YAAY,WAAW;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,kCAAkC;AAClC;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,WAAW,OAAO,UAAU;AAC5B,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,OAAO,kHAAkH;AACpI,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO,qGAAqG;AACvH,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,wBAAwB;AACnC,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb,SAAS;AACT;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,4DAA4D;AACzF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,qDAAqD;;AAEjF;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,oCAAoC;AAC/C,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,2DAA2D;AACpF;AACA;;AAEA;AACA;AACA;AACA;AACA,0CAA0C,UAAU,QAAQ,EAAE;AAC9D;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,aAAa,4BAA4B;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,iCAAiC,gCAAgC;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,iCAAiC;AAC5C,YAAY,QAAQ;AACpB;AACA;AACA;AACA,wEAAwE;AACxE,+CAA+C;AAC/C;AACA;AACA,yBAAyB,wEAAwE;AACjG;AACA,GAAG;AACH;AACA;AACA,2BAA2B,wEAAwE;AACnG;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA,kCAAkC,gCAAgC;;AAElE;AACA,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;;AAEA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,6BAA6B;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK,aAAa,YAAY,OAAO,EAAE;AACvC;AACA,KAAK,aAAa,UAAU,IAAI,WAAW,OAAO,KAAK,eAAe;AACtE;AACA,KAAK,cAAc,UAAU,IAAI,WAAW,OAAO,KAAK,eAAe;AACvE;AACA,KAAK,aAAa,UAAU,IAAI,EAAE;AAClC;AACA,KAAK,cAAc,UAAU,IAAI,EAAE;AACnC;AACA,KAAK,cAAc,UAAU,IAAI,gBAAgB,IAAI;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,+BAA+B;AAC1C,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE,wBAAwB;;AAExB;AACA,6BAA6B,oEAAoE;AACjG;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;;AAEA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA,wEAAwE;AACxE;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,iCAAiC,gCAAgC;;AAEjE;AACA,aAAa,OAAO;AACpB,cAAc,SAAS;AACvB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,yBAAyB;AACpC;;AAEA;AACA,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB,cAAc,SAAS;AACvB,cAAc,0BAA0B;AACxC,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;;AAEA;AACA,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB,cAAc,SAAS;AACvB,cAAc,SAAS;AACvB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,+BAA+B;AAC1C;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,kCAAkC;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,iCAAiC;AAC5C,YAAY,QAAQ;AACpB;AACA;AACA;AACA,wEAAwE;AACxE,wBAAwB;AACxB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,8BAA8B,gCAAgC;;AAE9D;AACA,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,SAAS;AACvB;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,+BAA+B;AAC1C;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,iCAAiC;AAC5C,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,UAAU,QAAQ,EAAE;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,iCAAiC,gCAAgC;;AAEjE;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,iCAAiC;AAC5C,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0CAA0C,UAAU,QAAQ,EAAE;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,kCAAkC,gCAAgC;;AAElE;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,iCAAiC;AAC5C,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,UAAU,QAAQ,EAAE;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,kCAAkC,gCAAgC;;AAElE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,2BAA2B;AACtC,YAAY;AACZ,YAAY,QAAQ;AACpB;AACA;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,gCAAgC;;AAE9D;AACA,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,+BAA+B;AAC1C;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,iCAAiC;AAC5C,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0CAA0C,UAAU,QAAQ,EAAE;AAC9D;AACA;AACA,GAAG;AACH;;AAEA,iCAAiC,gCAAgC;;AAEjE;;AAEA,iCAAiC,gCAAgC;;AAEjE;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,iCAAiC;AAC5C,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,UAAU,QAAQ,EAAE;AAC9D;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,uCAAuC;AACvC,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,YAAY;AACZ;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,kCAAkC,gCAAgC;;AAElE;;AAEA,kCAAkC,gCAAgC;;AAElE;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,2BAA2B;AACtC,YAAY,QAAQ;AACpB;AACA;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,8BAA8B,gCAAgC;;AAE9D;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,2BAA2B;AACtC,YAAY,QAAQ;AACpB;AACA;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,4BAA4B,gCAAgC;;AAE5D;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,kBAAkB;AAC7B;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,OAAO,kHAAkH;AACpI,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO,qGAAqG;AACvH,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,wBAAwB;AACnC,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,0BAA0B;AACrC,YAAY,QAAQ;AACpB;AACA;AACA,kEAAkE,gBAAgB;AAClF,wEAAwE;AACxE;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,+BAA+B,gCAAgC;;AAE/D;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,WAAW;AACtB;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,oCAAoC;AAC/C,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE,4BAA4B,YAAY,yCAAyC;;AAEjF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;;AAEA,8BAA8B,gCAAgC;;AAE9D;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,0BAA0B;AACrC,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,gCAAgC;;AAE5D;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,0BAA0B;AACrC,YAAY,QAAQ;AACpB;AACA;AACA,+DAA+D;AAC/D;;AAEA;AACA;;AAEA;AACA,6BAA6B,oBAAoB;AACjD;AACA;AACA;AACA;AACA,2BAA2B,wEAAwE;AACnG;AACA;;AAEA;AACA,GAAG;AACH;;AAEA,+BAA+B,gCAAgC;;AAE/D;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,0BAA0B;AACrC,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,gCAAgC,gCAAgC;;AAEhE;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,0BAA0B;AACrC,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,mCAAmC,gCAAgC;;AAEnE;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,0BAA0B;AACrC,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;;AAExE;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB,uBAAuB;AACxC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,4BAA4B,YAAY,yCAAyC;;AAEjF;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA,qCAAqC,gCAAgC;;AAErE;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,WAAW,0BAA0B;AACrC,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA,4CAA4C;AAC5C;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,iCAAiC,gCAAgC;;AAEjE;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,WAAW,0BAA0B;AACrC,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,mCAAmC,gCAAgC;;AAEnE;AACA;AACA;AACA;AACA,WAAW,0BAA0B;AACrC,YAAY,QAAQ;AACpB;AACA;;AAEA,sCAAsC,gCAAgC;;AAEtE;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,0BAA0B;AACrC,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,+BAA+B,gCAAgC;;AAE/D;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC,WAAW,cAAc;AACzB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,sCAAsC,+BAA+B;AACrE;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uCAAuC,mBAAmB,uBAAuB,EAAE;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mCAAmC,4DAA4D;;AAE/F;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,0BAA0B;AACrC,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,mCAAmC,gCAAgC;;AAEnE;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,0BAA0B;AACrC,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA,mCAAmC,gCAAgC;;AAEnE;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,0BAA0B;AACrC,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA,4CAA4C;;AAE5C;AACA;;AAEA;AACA;AACA;;AAEA,wCAAwC,gCAAgC;;AAExE;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,yBAAyB;AACpC,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA,0CAA0C;AAC1C,4CAA4C;;AAE5C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,6BAA6B,gCAAgC;;AAE7D;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,0BAA0B;AACrC,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA,oDAAoD;AACpD,sDAAsD;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,gCAAgC,gCAAgC;;AAEhE;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,0BAA0B;AACrC,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;;AAEA;AACA,4BAA4B,GAAG,aAAa;AAC5C;AACA;;AAEA,+BAA+B,gCAAgC;;AAE/D;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,0BAA0B;AACrC,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA,4CAA4C;;AAE5C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,6BAA6B,gCAAgC;;AAE7D;AACA,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,sCAAsC;AACjD;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,iCAAiC;AAC5C,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wCAAwC,gCAAgC;;AAExE;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,iCAAiC;AAC5C,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yCAAyC,gCAAgC;;AAEzE;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,iCAAiC;AAC5C,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,wCAAwC,gCAAgC;;AAExE;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,iCAAiC;AAC5C,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;;AAE5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,qCAAqC,gCAAgC;;AAErE;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,0BAA0B;AACrC,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;;AAE5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC,gCAAgC;;AAErE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oCAAoC,2BAA2B;AAC/D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAAgC,kDAAkD;AAClF;;AAEA;AACA,4BAA4B,2BAA2B;AACvD;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,+BAA+B;AAC1C,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB;;AAEjB;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,sCAAsC;AACtC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,iCAAiC,iCAAiC;;AAElE;AACA;AACA;AACA;AACA,WAAW,MAAM,8BAA8B,2GAA2G;AAC1J,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO,4EAA4E,4FAA4F;AAC1L,WAAW,OAAO,yEAAyE,4FAA4F;AACvL,WAAW,eAAe,wHAAwH,8FAA8F;AAChP,WAAW,cAAc;AACzB,YAAY,aAAa;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,6BAA6B,kCAAkC;;AAE/D;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,SAAS;AACpB;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,0CAA0C;AACrD,YAAY,QAAQ;AACpB;AACA;AACA,uEAAuE,gBAAgB;AACvF;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA,8CAA8C,gCAAgC;;AAE9E;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,0BAA0B;AACrC,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA,4CAA4C;;AAE5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2DAA2D,sCAAsC;;AAEjG;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,yCAAyC,gCAAgC;;AAEzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,IAAI;AACJ;AACA,gBAAgB,iCAAiC,sBAAsB,+BAA+B,yBAAyB,qBAAqB,eAAe,sCAAsC,SAAS,OAAO,kBAAkB,kBAAkB,GAAG,8BAA8B,yBAAyB,+BAA+B,OAAO,0CAA0C,uBAAuB,GAAG,iCAAiC,GAAG,YAAY,0BAA0B,GAAG;;AAE9e;AACA;AACA;AACA;AACA,WAAW,6BAA6B;AACxC,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,gBAAgB;AAC3B,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC,WAAW,cAAc;AACzB,WAAW,0BAA0B;AACrC,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;;AAE5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iDAAiD,yBAAyB;;AAE1E;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,6BAA6B,gCAAgC;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B,WAAW,kBAAkB;AAC7B,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC,WAAW,OAAO,qEAAqE,SAAS,IAAI,yBAAyB,IAAI,uBAAuB,IAAI,wBAAwB;AACpL,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,kBAAkB;AAC7B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,0BAA0B;AACrC,YAAY;AACZ,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C,wCAAwC;AACrF;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC,uCAAuC;AAC1E,GAAG;AACH;;AAEA,iCAAiC,gCAAgC;;AAEjE;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,qBAAqB;AAChC,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;;;;;;;ACtkGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACnBA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;AC3DA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C,gCAAgC,+CAA+C;AAC/E;AACA;AACA;AACA,mBAAmB,eAAe,GAAG,+BAA+B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,gCAAgC,YAAY,OAAO,YAAY;AAC/D,kBAAkB,KAAK;AACvB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA,gDAAgD,UAAU,EAAE;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,4CAA4C;AAC5C;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mDAAmD;AACzE;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,iBAAiB;AAClC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B,QAAQ;AAClC;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,0CAA0C;AAC1C;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;;AAGH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM,QAAQ,oCAAoC;AAClD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oCAAoC,OAAO;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mCAAmC,QAAQ,OAAO,gBAAgB,EAAE,GAAG;AACvE;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY,OAAO;AACnB;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,eAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B;AAC9B;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;AACA,oBAAoB;AACpB;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,QAAQ,qBAAqB;AAC7B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA,qBAAqB,qBAAqB;;AAE1C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,SAAS;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,aAAa;AACxC,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,SAAS;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qBAAqB;AAC1C;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA,wBAAwB;AACxB,0BAA0B;;AAE1B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,mCAAmC;AACnC,4BAA4B;AAC5B;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,iBAAiB;AACpC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAAS;AACxB;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,OAAO;AACP,gBAAgB;AAChB;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACzyDA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,IAAI;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;AC/EA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,sBAAsB;AACjC,WAAW,QAAQ;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,SAAS;AACtC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,aAAa;AACxB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;AC9XA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACfA;;;;;;;ACAA;AACA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;;;;;;ACvBA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC/BA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY;AACZ;;AAEA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAU;AACV;;AAEA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,8CAA8C,iBAAiB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,YAAY,WAAW;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,UAAU,mBAAmB;AAC7B;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA,UAAU,wBAAwB;AAClC;AACA;AACA;;AAEA;;AAEA,UAAU,mBAAmB;AAC7B;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wBAAwB;AACzC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,eAAe,wBAAwB;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA,iBAAiB,wBAAwB;AACzC;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,0DAA0D;AAC3E;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;AACV;;AAEA;AACA;;;;;;;ACjzBA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;AChCA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iDAAiD,GAAG;;AAEpD;AACA;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU,gBAAgB;AAC1B,aAAa,OAAO;AACpB,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,SAAS;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,oBAAoB;AACrC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU,OAAO;AACjB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB,WAAW,QAAQ;AACnB;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;;;;;;AC5XA;AACA;AACA;AACA;AACA,YAAY,WAAW;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,sBAAsB;;AAEtB;AACA,YAAY;AACZ;AACA;AACA,wBAAwB;AACxB;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,YAAY,UAAU;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,YAAY,UAAU;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,iCAAiC;AACjC,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,YAAY,UAAU;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,UAAU;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,YAAY,UAAU;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,YAAY,UAAU;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,YAAY,UAAU;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,UAAU;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA,WAAW,UAAU;AACrB;;AAEA,WAAW,UAAU;AACrB;;AAEA,WAAW,UAAU;AACrB;;AAEA,WAAW,UAAU;AACrB;;AAEA,WAAW,UAAU;AACrB;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;ACr1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oCAAoC;;AAEpC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,EAAE;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,EAAE;AACf;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,EAAE;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,aAAa;AACxB,aAAa,EAAE;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,aAAa,SAAS;AACtB;AACA;AACA,iBAAiB;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA,iBAAiB;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,aAAa;AACxB,WAAW,EAAE;AACb,aAAa,EAAE;AACf;AACA;AACA,iBAAiB,QAAQ,OAAO,SAAS,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACl6BA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC,eAAe;;AAEhB;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,OAAO,EAAE,QAAQ,EAAE,QAAQ;AACvC,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,mBAAmB;AAC9B,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,YAAY,OAAO,EAAE,QAAQ,EAAE,QAAQ;AACvC,WAAW,cAAc;AACzB,WAAW,mBAAmB;AAC9B,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB;;AAEA;;;;;;;;AC/XA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY,OAAO,EAAE,QAAQ,EAAE,QAAQ;AACvC,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,mBAAmB;AAC9B,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA,eAAe;AACf;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,YAAY,OAAO,EAAE,QAAQ,EAAE,QAAQ;AACvC,WAAW,cAAc;AACzB,WAAW,mBAAmB;AAC9B,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB;;AAEA;;;;;;;;ACrNA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,OAAO,EAAE,QAAQ,EAAE,QAAQ;AACvC,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,mBAAmB;AAC9B,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,YAAY,OAAO,EAAE,QAAQ,EAAE,QAAQ;AACvC,WAAW,cAAc;AACzB,WAAW,mBAAmB;AAC9B,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB;;AAEA;;;;;;;;ACtLA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,kBAAkB;AACnC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA,GAAG;AACH,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,OAAO,EAAE,QAAQ,EAAE,QAAQ;AACvC,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,mBAAmB;AAC9B,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,YAAY,OAAO,EAAE,QAAQ,EAAE,QAAQ;AACvC,WAAW,cAAc;AACzB,WAAW,mBAAmB;AAC9B,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AC9WA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,OAAO,EAAE,QAAQ,EAAE,QAAQ;AACvC,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,mBAAmB;AAC9B,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,YAAY,OAAO,EAAE,QAAQ,EAAE,QAAQ;AACvC,WAAW,cAAc;AACzB,WAAW,mBAAmB;AAC9B,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB;;AAEA;;;;;;;;AClLA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+BAA+B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO,MAAM;AACzB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,eAAe;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,eAAe;AAC1B;AACA;AACA;AACA;;AAEA;;;;;;;;ACzxBA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,YAAY,gBAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,qBAAqB,0CAA0C;AAC/D;AACA;;AAEA;AACA;AACA;;AAEA,oCAAoC,4CAA4C;AAChF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,YAAY,kBAAkB;AAC9B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,YAAY,kBAAkB;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,eAAe,+BAA+B;AAC9C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,oBAAoB;AAC/B,WAAW,gBAAgB;AAC3B,YAAY,eAAe;AAC3B,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,iBAAiB;AAClC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChdA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,cAAc,wBAAwB;AACtC,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,GAAG;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,WAAW,+BAA+B;AAC1C,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC,WAAW,cAAc;AACzB,WAAW,kBAAkB;AAC7B,YAAY,QAAQ;AACpB;AACA;AACA;AACA,wEAAwE;AACxE;AACA;;AAEA;AACA;;AAEA,+BAA+B,gCAAgC;;AAE/D;AACA;AACA;AACA,YAAY,MAAM;AAClB;AACA;AACA;AACA;;AAEA,6BAA6B,oDAAoD;;AAEjF;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,WAAW;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uGAAuG;AACvG;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,4BAA4B;AACvC,YAAY,WAAW;AACvB;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;;AAEA,kCAAkC,wDAAwD;;AAE1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,aAAa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO,6JAA6J;AAC/K,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,4BAA4B;AACvC,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;AACA;;AAEA;AACA;;AAEA,wCAAwC,gCAAgC;;AAExE;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,kBAAkB;AAC7B,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,6BAA6B,gCAAgC;;AAE7D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO,WAAW;AAC7B,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC,WAAW,cAAc;AACzB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,sCAAsC,+BAA+B;AACrE;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,SAAS,oBAAoB,GAAG,uBAAuB;AACrE,GAAG;AACH,cAAc;AACd;;AAEA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6DAA6D;AACxF;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,eAAe;AAC1B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,kBAAkB;AAC7B;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA,4CAA4C;;AAE5C;AACA;;AAEA,4BAA4B,gCAAgC;;AAE5D;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,4BAA4B;AACvC,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wCAAwC,gCAAgC;;AAExE;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,kBAAkB;AAC7B,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA,+BAA+B,mBAAmB,yCAAyC;AAC3F;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA,sCAAsC,gCAAgC;;AAEtE;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,kBAAkB;AAC7B,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA,MAAM;AACN,KAAK,yCAAyC;AAC9C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA,oCAAoC,gCAAgC;;AAEpE;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,6BAA6B;AACxC,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;;AAEA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;;AAEA,mCAAmC,gCAAgC;;AAEnE;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC,WAAW,cAAc;AACzB,WAAW,kBAAkB;AAC7B,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA,6CAA6C,gCAAgC;;AAE7E;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,kBAAkB;AAC7B,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC,GAAG,yCAAyC;AACjF;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,mCAAmC,gCAAgC;;AAEnE;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,kBAAkB;AAC7B,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;;AAEA,mCAAmC,gCAAgC;;AAEnE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB;AACxB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,uCAAuC,cAAc;AACrD;AACA;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB,GAAG,4BAA4B;AACjE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,QAAQ,oCAAoC,EAAE;AAC7D;AACA;AACA;AACA,0DAA0D,oCAAoC;AAC9F;AACA,iDAAiD,oCAAoC;AACrF;AACA;AACA,WAAW;AACX,OAAO;;AAEP;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,cAAc;AACzB,WAAW,kBAAkB;AAC7B,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA,4CAA4C;;AAE5C;AACA;;AAEA,+BAA+B,gCAAgC;;AAE/D;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mFAAmF,cAAc;AACjG;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,0BAA0B,iBAAiB;AAC3C;AACA,2BAA2B,iBAAiB;AAC5C;AACA,SAAS;AACT,OAAO;;AAEP;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA,kCAAkC,gCAAgC;;AAElE;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,kBAAkB;AAC7B,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA,4CAA4C;;AAE5C;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,kBAAkB;AAC7B,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,yCAAyC,gCAAgC;;AAEzE;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,kBAAkB;AAC7B,YAAY,QAAQ;AACpB;AACA;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,GAAG;AACH;AACA;AACA;;AAEA,qCAAqC,gCAAgC;;AAErE;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,kBAAkB;AAC7B,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;;AAEA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;;AAEA,sCAAsC,gCAAgC;;AAEtE;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,wBAAwB;AACnC,WAAW,cAAc;AACzB,WAAW,kBAAkB;AAC7B,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,wCAAwC,gCAAgC;;AAExE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gEAAgE;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,iBAAiB,uBAAuB;AACxC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kDAAkD;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,wCAAwC;;AAElE;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,6BAA6B,0DAA0D;AACvF;AACA,6BAA6B,oEAAoE;AACjG;;AAEA;AACA,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,4BAA4B;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AChxDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,iBAAiB;AAC5B,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,+BAA+B,kDAAkD;AACjF;;AAEA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA,+BAA+B;AAC/B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,+BAA+B,iCAAiC;AAChE,8BAA8B,iCAAiC;AAC/D,8BAA8B,iCAAiC;AAC/D,8BAA8B,iCAAiC;AAC/D,mCAAmC,sDAAsD;AACzF,mCAAmC,sDAAsD;AACzF;AACA;AACA;AACA;AACA,CAAC;;AAED,6BAA6B,kCAAkC;AAC/D,4BAA4B,iCAAiC;AAC7D,8BAA8B,iCAAiC;AAC/D,mCAAmC,oDAAoD;;AAEvF;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;;;;;;;AChcA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;ACvBA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gDAAgD,IAAI;AACpD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;;;;;;;AC9CA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;;;;;;;;ACjCA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,wCAAwC,oCAAoC;AAC5E,GAAG;AACH,mCAAmC;AACnC;;AAEA;AACA;AACA;;AAEA,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qCAAqC;AACrC;AACA;AACA;;AAEA,iBAAiB,aAAa;AAC9B;AACA;;AAEA;AACA;AACA,0BAA0B,oCAAoC;AAC9D;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtFA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,qCAAqC,SAAS;AAC9C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AC7CA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;;;;;;;AC/HA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AChCA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA,mBAAmB,kBAAkB;AACrC,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;;;;;;;AC/HA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC,eAAe;;AAEhB;AACA;AACA;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,OAAO,EAAE,QAAQ,EAAE,QAAQ;AACvC,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,mBAAmB;AAC9B,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,eAAe;AACf;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,YAAY,OAAO,EAAE,QAAQ,EAAE,QAAQ;AACvC,WAAW,cAAc;AACzB,WAAW,mBAAmB;AAC9B,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB;;AAEA;;;;;;;;AC/SA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,iBAAiB;AAC5B,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,8CAA8C;AAChE;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,sDAAsD,iBAAiB;AACvE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,oEAAoE;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,2CAA2C;AACtE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,sBAAsB;AAC9D;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uEAAuE,oBAAoB;;AAE3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kCAAkC,sBAAsB;AACxD;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA;AACA,uCAAuC,2BAA2B;AAClE;;AAEA;AACA;;AAEA;AACA,4BAA4B,YAAY,6BAA6B;;AAErE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,OAAO,yBAAyB;AAC3C,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA;AACA,uCAAuC,2BAA2B;AAClE;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,OAAO,yBAAyB;AAC3C,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA;AACA,uCAAuC,2BAA2B;AAClE;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,OAAO,yBAAyB;AAC3C,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA;AACA,uCAAuC,2BAA2B;AAClE;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,YAAY;AACvB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,mBAAmB;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,UAAU;AACrB,WAAW,mBAAmB;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kDAAkD;AAClD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,iCAAiC,sBAAsB;AACvD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;;;;;;;AC7kCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,qBAAqB;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA,yCAAyC,iDAAiD;AAC1F;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,YAAY,qBAAqB;AACjC;AACA;AACA,gCAAgC;AAChqBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oCAAoC,gBAAgB;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,gBAAgB;AAC3B;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,oCAAoC;AAC/C,YAAY;AACZ,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,+BAA+B,iCAAiC;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACxmBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,YAAY,uBAAuB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,YAAY,uBAAuB;AACnC;AACA;AACA,gCAAgC;;AAEhC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oCAAoC,iBAAiB;AACrD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,gBAAgB;AAC3B;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,sCAAsC;AACjD,YAAY;AACZ,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,+BAA+B,iCAAiC;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACtnBA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;;AAErB;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA,yBAAyB;AACzB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA,8DAA8D,kBAAkB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,0CAA0C,kBAAkB;AAC5D;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,OAAO;AACP;AACA,8BAA8B,uBAAuB;AACrD;AACA;AACA;AACA,WAAW;AACX;;AAEA,qBAAqB;AACrB,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,8BAA8B;AAC7E,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,6CAA6C,8BAA8B;AAC3E;AACA;AACA;AACA;;;;;;;AC5UA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;ACnCA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,yBAAyB,SAAS,wBAAwB;AAC1D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,yCAAyC;AACzC;AACA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACpGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,yBAAyB,cAAc;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oBAAoB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,gBAAgB;AAC1C;AACA;AACA;AACA;AACA,qBAAqB,iCAAiC;AACtD;AACA;AACA;AACA;AACA,uBAAuB,UAAU,YAAY;AAC7C;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,YAAY,MAAM;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,MAAM,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA,0BAA0B,oBAAoB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,IAAI;AACf,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,eAAe,GAAG,sBAAsB;AAC1D;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB,GAAG,eAAe;AACtD;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB,GAAG,eAAe;AACtD;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,YAAY,MAAM;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,oEAAoE;AACpE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,4BAA4B,SAAS;AACxE;AACA,yCAAyC,4BAA4B,SAAS;AAC9E;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,qBAAqB,oBAAoB;AACzC;AACA,QAAQ;AACR;AACA;AACA;AACA,WAAW,uBAAuB;AAClC,WAAW,gBAAgB;AAC3B,YAAY,MAAM;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,6DAA6D;AAC/F,kCAAkC,yCAAyC;AAC3E,kCAAkC,yBAAyB;AAC3D;AACA;AACA;AACA,kCAAkC,yCAAyC,EAAE;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,aAAa;AAClC,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,YAAY,MAAM;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,iDAAiD;AACjD,qFAAqF;AACrF;;AAEA;AACA;AACA;AACA;;AAEA,iCAAiC,SAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB,EAAE,gBAAgB;AACjE;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB;AACA;AACA,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,YAAY,MAAM;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,wBAAwB,KAAK,WAAW,SAAS;AACjD;AACA,YAAY,OAAO;AACnB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,GAAG,QAAQ,OAAO,EAAE;AAC1C,yBAAyB,KAAK,QAAQ,OAAO;AAC7C;AACA,YAAY,OAAO;AACnB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,WAAW,eAAe;AAC1B,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,2BAA2B;AAC3B,wCAAwC;AACxC;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,oCAAoC,cAAc;AAClD;AACA,uBAAuB,sBAAsB;AAC7C;AACA,QAAQ;AACR;AACA,WAAW,WAAW;AACtB,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8BAA8B;AACjD;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,YAAY,MAAM;AAClB;;AAEA;AACA;AACA;AACA;;AAEA,cAAc;;AAEd;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wCAAwC;AACxC;AACA;;AAEA;AACA,wCAAwC;AACxC;AACA;;AAEA;AACA,wCAAwC;AACxC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,SAAS;AACpB;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gDAAgD;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,iBAAiB;AACnD;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,mBAAmB;AACxD;AACA,oBAAoB,iBAAiB;AACrC;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,aAAa;AACxB,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,YAAY,MAAM;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,sBAAsB;AAC9D;AACA;AACA,qBAAqB,sBAAsB;AAC3C,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB;AACnD,4BAA4B,uBAAuB;AACnD;AACA,WAAW,aAAa;AACxB,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,sBAAsB,WAAW,EAAE;AAChE,6BAA6B,sBAAsB,WAAW,EAAE;AAChE;AACA,WAAW,aAAa;AACxB,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,SAAS;AACpB;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA;AACA,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,eAAe;AAC1B,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,UAAU,UAAU,iBAAiB;AACzD;AACA;AACA;AACA,oBAAoB,UAAU,UAAU,QAAQ,kBAAkB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,4BAA4B,UAAU;AACtC,iBAAiB,QAAQ,eAAe,WAAW;AACnD;AACA,iBAAiB,QAAQ,eAAe,SAAS;AACjD;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA;AACA,4BAA4B,UAAU,cAAc,kBAAkB;AACtE,iBAAiB,EAAE,YAAY;AAC/B;AACA;AACA,4BAA4B,UAAU;AACtC,qBAAqB,+BAA+B;AACpD,iBAAiB,EAAE;AACnB,0BAA0B;AAC1B;AACA;AACA;AACA,qBAAqB,iBAAiB,GAAG,QAAQ,WAAW,GAAG,cAAc;AAC7E;AACA;AACA;AACA,yBAAyB,cAAc;AACvC,qBAAqB,QAAQ,WAAW;AACxC;AACA;AACA,oBAAoB,+BAA+B;AACnD,qBAAqB,QAAQ,cAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,SAAS,QAAQ;AACjB,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,SAAS,QAAQ;AACjB,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,kBAAkB;AACrC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+CAA+C,0BAA0B;AACzE;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,mBAAmB;AACnB,qBAAqB,QAAQ;AAC7B,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA,sDAAsD,OAAO,YAAY;AACzE;AACA,QAAQ;AACR;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,OAAO,cAAc,oBAAoB;AAC9D;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA,mCAAmC,kBAAkB,EAAE;AACvD,+BAA+B,sBAAsB,EAAE;AACvD;AACA;AACA;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,oCAAoC,iBAAiB;AACrD,4CAA4C,aAAa;AACzD;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,gCAAgC;AACnD;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA,sCAAsC,mBAAmB;AACzD,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,sCAAsC;AACnF;AACA;AACA;AACA,6CAA6C,yCAAyC;AACtF;AACA;AACA;AACA,6CAA6C,oCAAoC;AACjF;AACA;AACA,iDAAiD,oCAAoC;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,kBAAkB;AAClB;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mBAAmB;AACnD,gCAAgC,mCAAmC;AACnE,gCAAgC,oDAAoD;AACpF,0BAA0B,mCAAmC;AAC7D;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB,wCAAwC;AAC3D,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA,mBAAmB,wDAAwD;AAC3E,KAAK;AACL;AACA,mBAAmB,wCAAwC;AAC3D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,mBAAmB,wDAAwD;AAC3E,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sCAAsC,mCAAmC;AACzE;AACA;AACA;AACA;AACA;AACA,gCAAgC,oCAAoC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,YAAY,MAAM;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kCAAkC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA,eAAe,2BAA2B;AAC1C,QAAQ,2BAA2B;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;AC9rHA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB,wCAAwC;AACxC;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,YAAY,WAAW;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yCAAyC,OAAO;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC,OAAO;AAC5C;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,IAAI;AACf;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,gBAAgB;AACjC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACzXA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,IAAI;AACf,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,KAAK,wBAAwB;AACxD;AACA,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,uCAAuC,IAAI;AAC3C,2CAA2C,KAAK,IAAI,MAAM,yBAAyB,IAAI;AACvF,gCAAgC,KAAK,yBAAyB;AAC9D;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA,QAAQ;AACR;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,WAAW;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,wBAAwB,IAAI;AAC5B;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,KAAK,wBAAwB;AACxD;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,uCAAuC,IAAI;AAC3C,2CAA2C,KAAK,IAAI,MAAM,sBAAsB,IAAI;AACpF,gCAAgC,KAAK,yBAAyB;AAC9D;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA,QAAQ;AACR;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,WAAW;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,wBAAwB,IAAI;AAC5B;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,IAAI;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACjSA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,YAAY,WAAW;AACvB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,IAAI;AACf,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,IAAI;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACtOA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACZA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA,0BAA0B,mBAAmB;AAC7C;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;;;;;;;ACjJA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,4BAA4B;AAC3C;AACA;AACA;AACA;;AAEA;AACA,aAAa,uBAAuB;AACpC;AACA;AACA;AACA,OAAO,IAAI;AACX,KAAK;;AAEL;AACA,eAAe,6BAA6B;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,mCAAmC;;AAEnC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sCAAsC;AACtC;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,yCAAyC;AACzC;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;AChKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,aAAa,iBAAiB;AAC9B,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,MAAM;AACnB,aAAa,IAAI;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL,6DAA6D;AAC7D;AACA;AACA;AACA,6BAA6B,kCAAkC;AAC/D,SAAS;AACT,OAAO;AACP,sDAAsD,QAAQ;AAC9D;AACA;AACA,KAAK;AACL,wCAAwC;AACxC;AACA,KAAK;AACL;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iCAAiC,4BAA4B,kBAAkB;;AAE/E;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;;AAEA;AACA,eAAe;AACf;;AAEA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,8BAA8B;AAChD;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,iCAAiC;AACjC;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,mCAAmC;AACnC,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,iCAAiC;AACjC;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,mCAAmC;AACnC,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C,sCAAsC;AACtC;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEA;;AAEA;AACA,sCAAsC;AACtC,6CAA6C;AAC7C;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB,cAAc,MAAM;AACpB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,kBAAkB;AACvE;AACA,4BAA4B,iBAAiB;AAC7C;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sCAAsC,SAAS;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4CAA4C,6BAA6B;AACzE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACr0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,WAAW,SAAS;AACpB,YAAY,YAAY;AACxB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,WAAW,SAAS;AACpB,YAAY,YAAY;AACxB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,IAAI;AAChB;AACA;;AAEA;AACA;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,IAAI;AAChB;AACA;;AAEA;AACA;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACtGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iBAAiB;AAC/C,yBAAyB,+BAA+B;AACxD;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oBAAoB;AAC/C,yBAAyB,oDAAoD;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gBAAgB;AACtC;AACA,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,oBAAoB;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,YAAY,MAAM;AAClB;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,WAAW,gBAAgB;AAC3B,YAAY,MAAM;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,MAAM,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA,0BAA0B,oBAAoB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,eAAe,GAAG,sBAAsB;AAC1D;AACA,WAAW,MAAM;AACjB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB,GAAG,eAAe;AACtD;AACA,WAAW,MAAM;AACjB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB,GAAG,eAAe;AACtD;AACA;AACA,WAAW,MAAM;AACjB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,oEAAoE;AACpE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,oEAAoE;AACpE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,4BAA4B,SAAS;AACxE;AACA,yCAAyC,4BAA4B,SAAS;AAC9E;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,qBAAqB,oBAAoB;AACzC;AACA,QAAQ;AACR;AACA,WAAW,uBAAuB;AAClC,WAAW,gBAAgB;AAC3B,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oEAAoE;AACpE;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,6DAA6D;AAC/F,kCAAkC,yCAAyC;AAC3E,kCAAkC,yBAAyB;AAC3D;AACA;AACA;AACA,kCAAkC,yCAAyC,EAAE;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA,oEAAoE;AACpE,8CAA8C;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,YAAY,MAAM;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA,oEAAoE;AACpE,8CAA8C;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA,oEAAoE;;AAEpE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mBAAmB;AACnD,gCAAgC,mCAAmC;AACnE,gCAAgC,oDAAoD;AACpF,0BAA0B,mCAAmC;AAC7D,mBAAmB,UAAU,oCAAoC;AACjE,8BAA8B,mCAAmC;AACjE;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA,oEAAoE;;AAEpE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,mBAAmB;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,sCAAsC;AACnF;AACA;AACA;AACA,6CAA6C,yCAAyC;AACtF;AACA;AACA;AACA,6CAA6C,oCAAoC;AACjF;AACA;AACA,iDAAiD,oCAAoC;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,kBAAkB;AAClB;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA,oEAAoE;AACpE,gCAAgC;;AAEhC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,YAAY,MAAM;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,iDAAiD;AACjD;;AAEA;AACA;AACA;AACA;;AAEA,qCAAqC,SAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,mDAAmD;AACnD,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,oBAAoB;AAC/B,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,YAAY,qBAAqB;AACjC;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;;AAEA;AACA,wCAAwC;AACxC,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA;AACA,8CAA8C,8BAA8B;AAC5E;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,YAAY,MAAM;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,2DAA2D;;AAE3D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,gBAAgB,EAAE,gBAAgB;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC;AACA;AACA,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,YAAY,MAAM;AAClB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wCAAwC;AACxC;AACA;;AAEA;AACA,wCAAwC;AACxC;AACA;;AAEA;AACA,wCAAwC;AACxC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yBAAyB;AAC9C;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mBAAmB;AACzC;AACA,sBAAsB,mBAAmB,YAAY;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,WAAW,aAAa;AACxB,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU,UAAU,iBAAiB;AACpD;AACA;AACA;AACA,0BAA0B,UAAU,GAAG,QAAQ,kBAAkB;AACjE;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,yCAAyC,UAAU;AACnD,iBAAiB,QAAQ,eAAe,WAAW;AACnD;AACA,yCAAyC,UAAU;AACnD,iBAAiB,QAAQ,eAAe,SAAS;AACjD;AACA;AACA;AACA,iBAAiB,cAAc,SAAS,UAAU;AAClD;AACA,2CAA2C;AAC3C;AACA;AACA,oBAAoB,UAAU,cAAc,kBAAkB;AAC9D,iBAAiB,EAAE,YAAY;AAC/B;AACA;AACA,yCAAyC,UAAU;AACnD,qBAAqB,+BAA+B;AACpD,iBAAiB,EAAE;AACnB,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB,GAAG,QAAQ,WAAW,GAAG,cAAc;AAC1E;AACA,eAAe,EAAE;AACjB;AACA,sBAAsB,cAAc;AACpC,kBAAkB,QAAQ,WAAW;AACrC;AACA;AACA,eAAe,+BAA+B;AAC9C;AACA,iBAAiB,QAAQ,cAAc;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gBAAgB,GAAG,aAAa;AAC5D;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gBAAgB,GAAG,aAAa;AAC5D;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,qBAAqB;AACxE,4BAA4B,SAAS,GAAG,aAAa;AACrD;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,kBAAkB;AACrC;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kCAAkC,wBAAwB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,sBAAsB;AACpE;AACA;AACA,kCAAkC,sBAAsB;AACxD,kCAAkC,sBAAsB;AACxD;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wBAAwB;AAC7D;AACA,WAAW,aAAa;AACxB,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,wBAAwB;AAC9D;AACA,WAAW,aAAa;AACxB,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,SAAS;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;;AAEA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;;AAEA,iBAAiB,iBAAiB;AAClC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;ACh+FA;AACA;AACA;AACA,uCAAuC,WAAW;AAClD;AACA;AACA;;;;;;;;ACLA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;AC/BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,iBAAiB;AAC5B,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA,YAAY,WAAW;AACvaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sEAAsE,YAAY;AAClF;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,GAAG;AACH,0BAA0B;AAC1B;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,eAAe;AACpB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,mBAAmB;AAClC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;;;;;;;ACnyBA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,IAAI;AACJ;;AAEA;AACA;AACA;AACA,YAAY,MAAM;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC,WAAW,OAAO;AAClB,WAAW,qBAAqB;AAChC,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,gCAAgC;;AAE/D;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,qBAAqB;AAChC,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,gCAAgC;;AAEjE;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,qBAAqB;AAChC,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC,gCAAgC;;AAElE;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,qBAAqB;AAChC,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;;AAEA;AACA,mCAAmC,kBAAkB;AACrD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;;AAEA,oCAAoC,gCAAgC;;AAEpE;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,qBAAqB;AAChC,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,gCAAgC;;AAE5D;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,cAAc;AACzB,WAAW,qBAAqB;AAChC,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,gCAAgC;;AAE/D;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,qBAAqB;AAChC,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC,gCAAgC;;AAElE;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,qBAAqB;AAChC,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;;AAEA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA,0CAA0C,gCAAgC;;AAE1E;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,qBAAqB;AAChC,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC,gCAAgC;;AAErE;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,qBAAqB;AAChC,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;;AAEA;AACA,mCAAmC,sBAAsB;AACzD;AACA;AACA;AACA,GAAG;AACH;;AAEA,wCAAwC,gCAAgC;;AAExE;;;;;;;;AClXA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU,MAAM,gBAAgB;AAChD,uBAAuB,OAAO;AAC9B;AACA,kDAAkD,kBAAkB;AACpE;AACA,QAAQ,aAAa,GAAG,YAAY,GAAG,aAAa,MAAM;AAC1D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iDAAiD;AACjD,uCAAuC;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wBAAwB;AACxB;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;;AAEA,+BAA+B,qBAAqB;AACpD;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA,QAAQ;AACR,GAAG;AACH;;AAEA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA,0BAA0B,OAAO;AACjC,+BAA+B,OAAO;AACtC,wBAAwB,OAAO;AAC/B,2BAA2B,YAAY;AACvC;AACA;AACA;AACA,gGAAgG,QAAQ;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACzOA;;AAEA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,UAAU;AACV,QAAQ;AACR,MAAM;AACN,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO,4DAA4D,kCAAkC;AAChH,WAAW,OAAO,mEAAmE,+BAA+B;AACpH,WAAW,OAAO,gEAAgE,yBAAyB;AAC3G,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,UAAU;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,uBAAuB;AAClC,YAAY,QAAQ;AACpB;AACA;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA,6BAA6B,qDAAqD;AAClF;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,4BAA4B,gCAAgC;;AAE5D;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,sDAAsD;;AAEjF;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA;AACA,WAAW,yBAAyB;AACpC,YAAY,QAAQ;AACpB;AACA;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;;AAEA,4BAA4B,gCAAgC;;AAE5D;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,yBAAyB;AACpC,YAAY,QAAQ;AACpB;AACA;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,4BAA4B,gCAAgC;;AAE5D;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,8DAA8D;;AAE5F;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,yBAAyB;AACpC,YAAY,QAAQ;AACpB;AACA;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,6BAA6B,gCAAgC;;AAE7D;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,kCAAkC;;AAEjE;AACA;AACA;AACA;AACA,WAAW,2BAA2B;AACtC,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,yBAAyB;AACpC,YAAY,QAAQ;AACpB;AACA;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,uCAAuC,aAAa;AACpD;AACA;;AAEA,yBAAyB;AACzB;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB,iBAAiB;AACjB,eAAe;AACf;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT;;AAEA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA,iCAAiC,gCAAgC;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,yBAAyB;AACpC,YAAY,QAAQ;AACpB;AACA;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,8BAA8B;;AAE9B;AACA,+BAA+B;AAC/B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf,aAAa;AACb;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,kCAAkC,yDAAyD;AAC3F;AACA;;AAEA,6BAA6B,gCAAgC;;AAE7D;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,WAAW;AACtB;;AAEA;AACA;AACA;AACA;AACA,WAAW,6BAA6B;AACxC,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA,uCAAuC,wDAAwD;;AAE/F;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,yBAAyB;AACpC,YAAY,QAAQ;AACpB;AACA;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,mBAAmB;AAC5C;AACA,OAAO;AACP,KAAK;AACL,GAAG;AACH;;AAEA,8BAA8B,gCAAgC;;AAE9D;AACA;AACA;AACA;AACA,WAAW,6BAA6B;AACxC,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC,wDAAwD;;AAE1F;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,SAAS;AACpB;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,4BAA4B;AACvC,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;;AAEA;AACA,GAAG;AACH;;AAEA,iCAAiC,gCAAgC;;AAEjE;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,yBAAyB;AACpC,YAAY,QAAQ;AACpB;AACA;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,6CAA6C,OAAO;AACpD;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,gCAAgC;;AAE9D;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,uBAAuB;AAClC,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,+CAA+C;AACxF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,4BAA4B,gCAAgC;;AAE5D;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,uBAAuB;AAClC,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,4BAA4B,gCAAgC;;AAE5D;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,UAAU;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,4BAA4B;AACvC,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB,6DAA6D;AACtF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA,4BAA4B,gCAAgC;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,mBAAmB,IAAI;AACnE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,+CAA+C,OAAO;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,6CAA6C,OAAO;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,+DAA+D,OAAO;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6CAA6C,OAAO;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,6DAA6D,OAAO;AACpE;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,6BAA6B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,6BAA6B;AACxE;AACA;;AAEA;AACA;AACA;AACA;;AAEA,qBAAqB,0BAA0B;AAC/C,gCAAgC;AAChC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B,OAAO;AACjC,+BAA+B,OAAO;AACtC,kCAAkC,OAAO;AACzC,6BAA6B,OAAO;AACpC,gCAAgC,OAAO;AACvC,iCAAiC;AACjC,8BAA8B;AAC9B,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,wCAAwC;AACtD;;AAEA,yCAAyC;AACzC;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,mCAAmC,wBAAwB;AAC3D;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,OAAO;AAClB,WAAW,OAAO,iGAAiG,kCAAkC;AACrJ,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,yBAAyB;AACpC,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX,WAAW,qBAAqB;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,iCAAiC;AAChE;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA,8BAA8B,gCAAgC;;AAE9D;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,OAAO,iGAAiG,kCAAkC;AACrJ,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,yBAAyB;AACpC,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,GAAG,iCAAiC;AAC1D;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;AACH;;AAEA,6BAA6B,gCAAgC;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,uBAAuB;AAClC,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,GAAG;AACH;;AAEA,6BAA6B,gCAAgC;;AAE7D;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,4BAA4B;AACvC,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,kCAAkC,gCAAgC;;AAElE;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,eAAe;AAC1B,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,yBAAyB;AACpC,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,wBAAwB;AACrD;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;;AAEA,+BAA+B,gCAAgC;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH,oBAAoB;AACpB,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,oBAAoB;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,gBAAgB;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0EAA0E;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY;AACZ;;AAEA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,YAAY;AACZ;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;;AAEA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;;;;;;;;AC95DA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,iBAAiB;AAC5B,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,4BAA4B;AACvC,YAAY,YAAY;AACxB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,eAAe;AACf;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,YAAY;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,4BAA4B;AACvC,YAAY,qBAAqB;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,6BAA6B,wDAAwD;;AAErF;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,kBAAkB;AAC7B,YAAY,QAAQ;AACpB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,8BAA8B,gCAAgC;;AAE9D;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,oBAAoB;AAC/B,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,GAAG;AACH;;AAEA,6BAA6B,gCAAgC;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC;;AAErC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,iBAAiB;AAC5B,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,4BAA4B;AACvC,YAAY,qBAAqB;AACjC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC,gCAAgC;;AAEhE;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+CAA+C;AAC/C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;AC/6BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,iBAAiB;AAC5B,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,gBAAgB;AAC3B,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA,+BAA+B;AAC/B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,+BAA+B,iCAAiC;AAChE,8BAA8B,iCAAiC;AAC/D,8BAA8B,iCAAiC;AAC/D,8BAA8B,iCAAiC;AAC/D,mCAAmC,sDAAsD;AACzF,mCAAmC,sDAAsD;AACzF;AACA;AACA;AACA;AACA,CAAC;;AAED,6BAA6B,kCAAkC;AAC/D,4BAA4B,iCAAiC;AAC7D,8BAA8B,iCAAiC;AAC/D,mCAAmC,oDAAoD;;AAEvF;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;;;;;;;AC7bA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,iBAAiB;AAC5B,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd,KAAK;;AAEL;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA,+BAA+B;AAC/B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,+BAA+B,iCAAiC;AAChE,8BAA8B,iCAAiC;AAC/D,8BAA8B,iCAAiC;AAC/D,8BAA8B,iCAAiC;AAC/D,mCAAmC,sDAAsD;AACzF;AACA;AACA;AACA;AACA,CAAC;;AAED,6BAA6B,kCAAkC;AAC/D,4BAA4B,iCAAiC;AAC7D,8BAA8B,iCAAiC;AAC/D,mCAAmC,oDAAoD;;AAEvF;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;;;;;;;ACzeA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oCAAoC,YAAY;AAChD;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;;AAEA,0CAA0C,YAAY;AACtD;AACA,6BAA6B,KAAK,EAAE,aAAa,GAAG,aAAa;AACjE,qBAAqB,aAAa,GAAG,aAAa;AAClD,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gCAAgC,kCAAkC;AAClE;;AAEA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA,gBAAgB,8BAA8B;AAC9C,mBAAmB,gCAAgC;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,oBAAoB;AACrC;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC;AACxC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC,mBAAmB;AACnB,+BAA+B,kBAAkB;AACjD,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8BAA8B;AAC9C,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB;AAChB,OAAO;AACP;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,WAAW;AACX;AACA;AACA,SAAS;AACT,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,KAAK;AAC9B;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;ACjmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,YAAY,aAAa,EAAE;AACrC,UAAU;AACV;AACA;AACA;AACA,qBAAqB,UAAU,OAAO,aAAa;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,UAAU,kCAAkC,EAAE;AACnE;AACA,qBAAqB,UAAU,2DAA2D,EAAE;AAC5F;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB,YAAY,YAAY,GAAG,YAAY;AAChE;AACA;AACA,wBAAwB,UAAU,wBAAwB;AAC1D;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,4BAA4B,YAAY,+BAA+B,EAAE;AACzE;AACA,WAAW,OAAO;AAClB;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA,sBAAsB,mBAAmB;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,mBAAmB;AAC7C;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,0BAA0B,YAAY,+BAA+B,EAAE;AACvE;AACA,WAAW,cAAc;AACzB;AACA,YAAY;AACZ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA,sBAAsB,iBAAiB;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,cAAc,kCAAkC,EAAE;AAC1E;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA,gBAAgB,eAAe;AAC/B,KAAK;AACL;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA,sBAAsB,oBAAoB;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8CAA8C;AAC5E;AACA;AACA,WAAW,cAAc;AACzB,YAAY,UAAU;AACtB;AACA;;AAEA;AACA;AACA,wBAAwB,oBAAoB;AAC5C,GAAG;AACH;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wEAAwE;AACjG;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA,sBAAsB,iBAAiB;AACvC;;AAEA;AACA;AACA;AACA,yGAAyG,qBAAqB;AAC9H;AACA;AACA,uFAAuF,wDAAwD,QAAQ,wDAAwD;AAC/M,+BAA+B,0IAA0I;AACzK;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,6BAA6B;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA,sBAAsB,UAAU,YAAY;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA,WAAW,cAAc;AACzB,YAAY,UAAU;AACtB;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA,sBAAsB,YAAY;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,MAAM;AACjB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6CAA6C,qBAAqB,EAAE;AACpE,mBAAmB,MAAM,qBAAqB;AAC9C;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA,YAAY,UAAU;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,kBAAkB;AAClE;AACA;AACA,QAAQ;AACR;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sCAAsC,+BAA+B;AACrE;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC,mBAAmB,eAAe,gCAAgC,EAAE;AACpE,SAAS;AACT;AACA;AACA,mBAAmB,wBAAwB,IAAI,GAAG,IAAI;AACtD;AACA,WAAW,OAAO;AAClB,YAAY,UAAU;AACtB;AACA;AACA;;AAEA;AACA,sBAAsB,gBAAgB;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA,kCAAkC,UAAU,aAAa,MAAM,UAAU,UAAU,EAAE;AACrF;AACA,YAAY;AACZ;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;;AAEA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mCAAmC,gBAAgB;AACnD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACv3BA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,OAAO;AAC/C;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACvPA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA,kDAAkD,aAAa;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,uBAAuB;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,SAAS;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa,WAAW;AACxB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,YAAY,WAAW;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,WAAW;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,eAAe,GAAG,sBAAsB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc;AACd;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;ACvsBA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC7BA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;ACnCA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,6BAA6B;AAC7B,4BAA4B;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;AC/BA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+DAA+D;;AAE/D;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,IAAI;AACf;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;AC1GA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,2BAA2B;AAC9D;AACA,sBAAsB,sBAAsB;AAC5C,uBAAuB;AACvB;AACA,WAAW,OAAO;AAClB,YAAY,WAAW;AACvB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,IAAI;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oCAAoC;AACvE;;AAEA;AACA;AACA;;AAEA;;;;;;;ACvNA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,aAAa,iCAAiC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,aAAa,8BAA8B;AAC9D;AACA;AACA,mBAAmB,aAAa,+BAA+B;AAC/D;AACA;AACA,gCAAgC,kBAAkB;AAClD;AACA;AACA,WAAW,cAAc;AACzB;AACA,YAAY,WAAW;AACvB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,KAAK,sCAAsC;AACtE;AACA,sBAAsB,wBAAwB;AAC9C;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,uCAAuC,IAAI;AAC3C,2DAA2D,KAAK,IAAI,MAAM,yBAAyB,IAAI;AACvG,gCAAgC,KAAK,uBAAuB;AAC5D;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA,QAAQ;AACR;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,YAAY,WAAW;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,wBAAwB,IAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,KAAK,sCAAsC;AACtE;AACA,sBAAsB,wBAAwB;AAC9C;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,uCAAuC,IAAI;AAC3C,2DAA2D,KAAK,IAAI,MAAM,sBAAsB,IAAI;AACpG,gCAAgC,KAAK,uBAAuB;AAC5D;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA,QAAQ;AACR;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,YAAY,WAAW;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,wBAAwB,IAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,IAAI;AACf;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACxSA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;;;;;;AC/BA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACnCA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;ACZA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,SAAS,8BAA8B;AAClE;AACA,sBAAsB,mBAAmB;AACzC;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,oDAAoD,KAAK,eAAe,MAAM;AAC9E;AACA,2BAA2B,SAAS,2BAA2B;AAC/D;AACA,sBAAsB,mBAAmB;AACzC;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,WAAW,cAAc;AACzB,YAAY,WAAW;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,SAAS,iCAAiC;AACrE;AACA,sBAAsB,iCAAiC;AACvD;AACA,eAAe,iCAAiC,EAAE;AAClD;AACA;AACA,YAAY,WAAW;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,iCAAiC;AACpE;AACA,sBAAsB,qBAAqB;AAC3C;AACA,eAAe,qBAAqB;AACpC;AACA;AACA,YAAY,WAAW;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,4BAA4B;AAC/D;AACA;AACA;AACA,sBAAsB,eAAe;AACrC;AACA;AACA;AACA,YAAY,WAAW;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAAgC,cAAc,6BAA6B;AAC3E;AACA,kCAAkC,qBAAqB;AACvD;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,uCAAuC,UAAU;AACjD,gDAAgD,KAAK,KAAK,MAAM,gDAAgD,UAAU;AAC1H,gCAAgC,cAAc,qCAAqC;AACnF;AACA,kCAAkC,qBAAqB;AACvD;AACA;AACA,QAAQ;AACR;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,WAAW;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,wBAAwB,UAAU;AAClC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAAgC,cAAc,6BAA6B;AAC3E;AACA,kCAAkC,2BAA2B;AAC7D;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,uCAAuC,UAAU;AACjD,gDAAgD,KAAK,KAAK,MAAM,wCAAwC,UAAU;AAClH,gCAAgC,cAAc,qCAAqC;AACnF;AACA,kCAAkC,2BAA2B;AAC7D;AACA;AACA,QAAQ;AACR;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,WAAW;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,wBAAwB,UAAU;AAClC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,6BAA6B;AAChE;AACA,sBAAsB,uBAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA,kEAAkE,MAAM;AACxE,2BAA2B,QAAQ,8BAA8B;AACjE;AACA,sBAAsB,kBAAkB;AACxC;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,2BAA2B,QAAQ,6CAA6C;AAChF;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,WAAW;AACvB;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,IAAI;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACzgBA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB,EAAE;AACtC,yBAAyB,8EAA8E,EAAE;AACzG,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,GAAG;AACH;;;;;;;;ACtEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,gCAAgC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClDA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,eAAe;AAC1B,WAAW,MAAM;AACjB,YAAY,QAAQ;AACpB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA,wBAAwB;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,YAAY,KAAK;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAyC,6BAA6B;AACtE;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,qCAAqC,6BAA6B;AAClE;;;;;;;;ACvXA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjHA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;;;;;;;ACtSA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACpMA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;ACrBA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,OAAO;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,wCAAwC;AACnD,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,IAAI;AACf,YAAY;AACZ;;AAEA;AACA;AACA;;;;;;;;AC9TA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClBA,mC;;;;;;ACAA,uC;;;;;;ACAA,2C;;;;;;ACAA,mC;;;;;;ACAA,gC;;;;;;ACAA,+B;;;;;;ACAA,+B;;;;;;ACAA,gC;;;;;;;;;ACAA;AACA,IAAMe,SAAS,gDAAAjB,CAASiB,MAAxB;;AAEA,IAAMC,aAAa,IAAID,MAAJ,CAAW;AAC5BxE,SAAO0E,MADqB;AAE5BV,QAAMW,KAFsB;AAG5BlE,QAAMiE,MAHsB;AAI5BrE,WAASqE,MAJmB;AAK5BT,YAAUW,OALkB;AAM5BpC,UAAQqC,MANoB,EAMZ;AAChBX,WAASC,IAPmB;AAQ5BC,YAAUD;AARkB,CAAX,CAAnB;;AAWA,IAAMW,YAAY,gDAAAvB,CAASwB,KAAT,CAAe,MAAf,EAAuBN,UAAvB,EAAmC,OAAnC,CAAlB;;AAEA,4CAAeK,SAAf,C;;;;;;;AChBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mCAAmC;AACnC,oCAAoC;;AAEpC;AACA,2DAA2D;AAC3D,4DAA4D;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AChYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,+BAA+B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,QAAQ,WAAW;;AAEnB;AACA;AACA;AACA,QAAQ,WAAW;;AAEnB;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA,QAAQ,WAAW;;AAEnB;AACA;AACA,QAAQ,UAAU;;AAElB;AACA;;AAEA;AACA;;;;;;;;AC3HA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,mCAAmC;AACnC,oCAAoC;;AAEpC;;;;;;;;AC5PA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,gBAAgB;AACnC;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB,0BAA0B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mCAAmC;AACnC,oCAAoC;;AAEpC;AACA,wDAAwD;AACxD,yDAAyD;;AAEzD;;;;;;;;AC3wBA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA,oBAAoB;;AAEpB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,+CAA+C;AAC/C,8CAA8C;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClmBAAmB,mBAAmB;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,YAAY;AACZ,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mCAAmC;AACnC,oCAAoC;;AAEpC;AACA,2DAA2D;AAC3D,4DAA4D;;AAE5D;;;;;;;AC1pCA,kBAAkB,6LAA6L,gbAAgb,eAAe,kEAAkE,+CAA+C,4CAA4C,oBAAoB,6OAA6O,6BAA6B,0DAA0D,8DAA8D,0DAA0D,gL;;;;;;ACA3vC,kBAAkB,2HAA2H,oEAAoE,4DAA4D,uBAAuB,oBAAoB,8ZAA8Z,iEAAiE,aAAa,SAAS,8DAA8D,YAAY,yWAAyW,qK;;;;;;ACAhuC,kBAAkB,kRAAkR,kNAAkN,oBAAoB,ocAAoc,gBAAgB,uBAAuB,YAAY,+VAA+V,gCAAgC,iBAAiB,SAAS,0DAA0D,eAAe,8DAA8D,6EAA6E,kDAAkD,mBAAmB,QAAQ,oCAAoC,UAAU,+EAA+E,sCAAsC,gTAAgT,8G;;;;;;;ACA9oE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,KAAK;AACL;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,aAAa;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,cAAc;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,oCAAoC,uBAAuB;AAC3D;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,2BAA2B;AAC7C,GAAG;AACH,eAAe,2BAA2B;AAC1C;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AC3aA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,WAAW;AACtB,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;;;;;;;;ACjCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,iBAAiB;AAC5B,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,iCAAiC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,aAAa;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB,wBAAwB;AACzC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,yBAAyB,kBAAkB;AAC3C;;AAEA;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,UAAU;AACrB,WAAW,mBAAmB;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,mBAAmB;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,wBAAwB;AACzC;AACA;AACA;AACA;AACA;AACA,SAAS,YAAY;AACrB,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oFAAoF;AACpF,uDAAuD;AACvD,mCAAmC;AACnC,wDAAwD;;AAExD;AACA;AACA,gEAAgE;AAChE,uEAAuE;AACvE,qFAAqF;;AAErF;AACA;;AAEA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,iBAAiB,wBAAwB;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA,wBAAwB,kEAAkE;AAC1F;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sCAAsC;AAC7D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,sCAAsC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;;;;;;;ACplDA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,0EAA0E;AAC1E;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;AC9LA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,+BAA+B;AAC5D;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,iBAAiB;AAC5B,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,0CAA0C,sBAAsB;;AAEhE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,kCAAkC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,6BAA6B,qBAAqB;AAClD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB,6BAA6B;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;;AAEA,aAAa,eAAe;AAC5B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,qBAAqB;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,qDAAqD,6BAA6B;;AAElF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,OAAO;AACP;;AAEA;AACA,mBAAmB,oBAAoB;AACvC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,yCAAyC,sBAAsB;AAC/D;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,OAAO,yBAAyB;AAC3C,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA,uCAAuC,2BAA2B;AAClE;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,OAAO,yBAAyB;AAC3C,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA,uCAAuC,2BAA2B;AAClE;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,OAAO,yBAAyB;AAC3C,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA,uCAAuC,2BAA2B;AAClE;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,WAAW;AACtB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA,uCAAuC,2BAA2B;AAClE;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,YAAY;AACvB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,UAAU;AACrB,WAAW,mBAAmB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+DAA+D;AAC/D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8BAA8B;AAC5D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,mBAAmB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,+BAA+B;AAC3D;AACA,KAAK;AACL;;AAEA;AACA,aAAa,oBAAoB;AACjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA,iBAAiB,kCAAkC;AACnD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;;;;;;;AC36CA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,iBAAiB;AAC5B,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,sCAAsC,uBAAuB;AAC7D,GAAG;AACH,sCAAsC,yBAAyB;AAC/D;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,cAAc;AAC3C;;AAEA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C;;AAEA;AACA;AACA;AACA;AACA,kCAAkC,cAAc;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,qBAAqB;AAChD;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,2DAA2D;;AAE3D;AACA;AACA,WAAW;AACX,2BAA2B,cAAc;AACzC;AACA,SAAS;AACT,OAAO;AACP,sBAAsB,cAAc;AACpC,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;;AAEA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iDAAiD,4BAA4B;;AAE7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,wBAAwB,cAAc;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA,oCAAoC;AACpC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B,cAAc;AAC3C,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B,cAAc;AAC3C;;AAEA,qBAAqB,oBAAoB;AACzC;AACA;AACA,KAAK;AACL,GAAG;AACH,mBAAmB,oBAAoB;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB,iBAAiB;AAClC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,cAAc;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,qBAAqB;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb,oCAAoC;AACpC;AACA,SAAS;AACT,yBAAyB,cAAc;AACvC,wBAAwB,cAAc;AACtC;AACA,SAAS;AACT,yBAAyB,cAAc;AACvC;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,mBAAmB,qCAAqC;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,gBAAgB;AAC7C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0CAA0C,sBAAsB;AAChE;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA,iBAAiB,6BAA6B;AAC9C;AACA;AACA;;AAEA;AACA;;AAEA;AACA,yCAAyC,sBAAsB;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,SAAS,iBAAiB;AAChE;AACA;;AAEA;AACA,mEAAmE,cAAc;;AAEjF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,OAAO,yBAAyB;AAC3C,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA,yBAAyB,oCAAoC;AAC7D;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,OAAO,yBAAyB;AAC3C,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA,yBAAyB,oCAAoC;AAC7D;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,OAAO,yBAAyB;AAC3C,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA,yBAAyB,oCAAoC;AAC7D;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,WAAW;AACtB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA,uCAAuC,2BAA2B;AAClE;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,UAAU;AACrB,WAAW,mBAAmB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iEAAiE;AACjE,KAAK;AACL;AACA;AACA;AACA,iEAAiE;AACjE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8BAA8B;AAC5D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,mBAAmB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,+BAA+B;AAC3D;AACA,KAAK;AACL;;AAEA;AACA,aAAa,oBAAoB;AACjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,YAAY;AACvB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;;;;;;;ACzoDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB,cAAc;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB,cAAc;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,6BAA6B;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,6BAA6B;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,eAAe;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,sBAAsB;AACvC;;AAEA;AACA,mBAAmB,oBAAoB;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,6BAA6B;AAC9C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,6BAA6B;AAC9C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;AC/kCA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;AACA;AACA,kBAAkB,8BAA8B;AAChD,qBAAqB,gCAAgC;AACrD;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oEAAoE,qBAAqB;AACzF;;AAEA,oCAAoC,YAAY;AAChD;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C,YAAY;AACtD;AACA;AACA,qBAAqB,KAAK,EAAE,aAAa,GAAG,aAAa,OAAO,aAAa,GAAG,aAAa;AAC7F;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gCAAgC,kCAAkC;AAClE;;AAEA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,aAAa;AACxB,YAAY,oBAAoB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK,IAAI;AACT,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,aAAa;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC;AAClC,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8CAA8C,KAAK;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;;;;;;;AC/SA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACbA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,4BAA4B;;AAEzF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACrXA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,mCAAmC;AACtD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,MAAM;AACxB,gBAAgB,MAAM;AACtB,sBAAsB,MAAM;AAC5B,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA,KAAK;AACL,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;AC7kBA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,oCAAoC;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA,2BAA2B;AAC3B;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,oCAAoC;;AAE/D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,oCAAoC;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW;;AAEX;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf,WAAW;AACX;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;;AAEA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AC9nBA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA,wEAAwE;AACxE;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;;;;;;;ACjIA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,iEAAiE,0CAA0C;AAC3G;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,MAAM,uBAAuB,2GAA2G;AACnJ,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO,4EAA4E,4FAA4F;AAC1L,WAAW,OAAO,yEAAyE,4FAA4F;AACvL,WAAW,eAAe,wHAAwH,8FAA8F;AAChP;AACA;AACA;AACA;AACA,YAAY,aAAa;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,+BAA+B,0CAA0C;;AAEzE;;AAEA;AACA;AACA;AACA,kBAAkB,oBAAoB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,4BAA4B;AACvC,YAAY;AACZ,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,4BAA4B;AACvC,YAAY;AACZ,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,4BAA4B;AACvC,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO,YAAY;AAC9B,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,cAAc;AACzB;;AAEA;;;;;;;;ACtWA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA,YAAY,uBAAuB;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,2BAA2B;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,qDAAqD,OAAO;;AAE5D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;AC9ZA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO,qGAAqG,OAAO;AAC9H,WAAW,OAAO;AAClB;AACA,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,YAAY;AACZ;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,YAAY;AACZ;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,2BAA2B;AACtC;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA,sCAAsC,UAAU;AAChD;AACA;AACA;;AAEA,0CAA0C,eAAe;AACzD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA,KAAK;AACL;AACA;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,2BAA2B;AACtC;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB;AAChB,gBAAgB,QAAQ,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,2BAA2B;AACtC;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB;;;;;;;;ACzVA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,qBAAqB;AAChC,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA,YAAY,wBAAwB;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY,QAAQ;AACpB;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,2BAA2B;AACtC,YAAY,QAAQ;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oBAAoB;AAC9C;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,yCAAyC,kCAAkC;AAC3E;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL,eAAe;AACf;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wBAAwB,GAAG,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,0CAA0C,oBAAoB;AAC9D;AACA;AACA;;AAEA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;AACP,iBAAiB;;AAEjB;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AChhBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7FA;AACA;AACA;AACA;;AAEA;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA,iBAAiB,qBAAqB;AACtC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,4BAA4B,oBAAoB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;;;;;;ACrHA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,mBAAmB;;AAE1C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4EAA4E;AAC5E;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA,8EAA8E;AAC9E;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA,UAAU;AACV,mCAAmC,sBAAsB,EAAE;AAC3D;AACA;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,yBAAyB,EAAE;AAC5D;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,YAAY,kBAAkB;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;;AAEA;;;;;;;;ACxRA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;AC/CA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,mBAAmB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA,UAAU;AACV,mCAAmC,sBAAsB,EAAE;AAC3D;AACA;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,yBAAyB,EAAE;AAC5D;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,YAAY,kBAAkB;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK,0BAA0B;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;;;;;;ACtTA;AACA;AACA;AACA,uCAAuC,WAAW;AAClD;AACA;AACA;;;;;;;ACNA;AACA;AACA;;AAEA;;;;;;;;ACHA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACXA;AACA;AACA;;AAEA;;;;;;;ACJA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;ACNA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACbA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,MAAM;AACjB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC3CA;AACA;AACA;;AAEA;;AAEA;;;;;;;ACPA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,+BAA+B;;AAE/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B;AAC3B;AACA;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,qBAAqB,uBAAuB;AACxD;AACA;AACA;AACA,YAAY,qBAAqB,uBAAuB;AACxD;AACA;AACA;AACA;AACA;AACA,4BAA4B,iBAAiB;AAC7C;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,WAAW,qBAAqB,uBAAuB;AACvD,KAAK;AACL;AACA,WAAW,qBAAqB,uBAAuB;AACvD,KAAK;AACL;AACA;AACA;AACA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,GAAG;AACpB;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACvRA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,WAAW;AACvB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,YAAY,WAAW;AACvB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACvKA;AACA;AACA;;AAEA;;;;;;;ACJA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;ACNA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACZA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA,wEAAwE,KAAK;AAC7E;AACA;AACA;AACA,OAAO,KAAK;AACZ,OAAO,MAAM;AACb,OAAO,KAAK;AACZ,OAAO,IAAI;AACX,OAAO,IAAI;AACX;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,mDAAmD,KAAK,eAAe,MAAM;AAC7E,+BAA+B,KAAK;;AAEpC;AACA,yBAAyB,KAAK,IAAI,MAAM,uCAAuC,IAAI;AACnF,yBAAyB,KAAK,IAAI,MAAM,uCAAuC,IAAI;;AAEnF;AACA,uBAAuB,KAAK,IAAI,MAAM,oCAAoC,IAAI;AAC9E,uBAAuB,KAAK,IAAI,MAAM,mCAAmC,IAAI;;AAE7E;AACA,qBAAqB,MAAM,uCAAuC,KAAK;AACvE,2BAA2B,KAAK,eAAe,MAAM;AACrD,+BAA+B,KAAK,KAAK,MAAM,gDAAgD,UAAU;AACzG,+BAA+B,KAAK,KAAK,MAAM,+CAA+C,UAAU;;;;;;;;AC1CxG;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACpCA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACjDA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;ACjCA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;AClCA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,0BAA0B;AAC3C;AACA;AACA;AACA;AACA,wBAAwB,mCAAmC;AAC3D;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACjFA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;AChCA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oBAAoB;AACzC,4BAA4B,oBAAoB;AAChD,wBAAwB,oBAAoB;AAC5C,uBAAuB,oBAAoB;AAC3C;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,EAAE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,wBAAwB;AACnC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,MAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,WAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU,wBAAwB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY,WAAW;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB;AACA;AACA,YAAY,QAAQ;AACpB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,cAAc;AACzB,YAAY,cAAc;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,eAAe;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,eAAe,GAAG,sBAAsB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,SAAS;AACjD;AACA;AACA;AACA,+CAA+C,SAAS;AACxD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,YAAY,SAAS;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,IAAI;AACf,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACztBA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,uEAAuE,eAAe;AACtF;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yEAAyE,eAAe;AACxF;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,YAAY,QAAQ;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,8BAA8B,+BAA+B;AAC7D,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sBAAsB,+BAA+B;AACrD;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0BAA0B,oDAAoD;AAC9E,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gBAAgB;AAChB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA,oCAAoC,qCAAqC;AACzE;;AAEA,QAAQ,SAAS;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,KAAK;AACvC,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB;;AAEtB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,WAAW,sBAAsB;AACjC,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,wCAAwC,qBAAqB;AAC7D;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,SAAS,gCAAgC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,qCAAqC,SAAS,gCAAgC;AAC9E;AACA;AACA;AACA,qCAAqC;AACrC,QAAQ;AACR;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,2CAA2C;AAC3C;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB,mBAAmB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,IAAI;;AAEhC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB,mBAAmB;AACtE;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC;;AAExC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,sBAAsB,WAAW,EAAE,mBAAmB;AACnF;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC;;AAExC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qBAAqB,YAAY;AACtD;AACA;AACA,qBAAqB,qBAAqB,YAAY,yBAAyB;AAC/E;AACA;AACA,qBAAqB,gBAAgB,wCAAwC,EAAE;AAC/E;AACA;AACA,qBAAqB,gBAAgB,SAAS,WAAW;AACzD;AACA;AACA,qBAAqB,gBAAgB,SAAS,WAAW,yBAAyB;AAClF;AACA;AACA,iCAAiC,gBAAgB,SAAS,WAAW;AACrE,yCAAyC;AACzC;AACA;AACA,iCAAiC,gBAAgB,SAAS,WAAW;AACrE;AACA,8CAA8C;AAC9C;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,4BAA4B,IAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,iBAAiB;AAC5D,iBAAiB;AACjB,mDAAmD,YAAY;AAC/D;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA,0EAA0E;AAC1E;AACA;AACA,uCAAuC,aAAa,wBAAwB;AAC5E;AACA;AACA,wEAAwE;AACxE;AACA,WAAW,qBAAqB;AAChC,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uBAAuB,QAAQ;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,iBAAiB,8BAA8B;AACzE;AACA;AACA,0BAA0B,iBAAiB,mCAAmC;AAC9E;AACA;AACA,0BAA0B,iBAAiB,sCAAsC;AACjF;AACA;AACA,0BAA0B,iBAAiB,2CAA2C;AACtF;AACA;AACA,0BAA0B,iBAAiB,WAAW,aAAa;AACnE;AACA;AACA,0BAA0B,iBAAiB,WAAW,aAAa;AACnE;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,IAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA,QAAQ;AACR;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,IAAI;;AAEhC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,UAAU,UAAU;AACjD;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA,4BAA4B,IAAI;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,MAAM,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA,WAAW;AACX;AACA,4BAA4B,IAAI,gCAAgC;AAChE;AACA;;AAEA;AACA;AACA;AACA,6GAA6G,qBAAqB;AAClI;AACA,sFAAsF;AACtF;AACA,WAAW,gBAAgB;AAC3B;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA,4BAA4B,IAAI,gCAAgC;AAChE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,sCAAsC,uBAAuB;AAC7D;AACA;AACA,sCAAsC,QAAQ,wBAAwB;AACtE;AACA,oEAAoE,uBAAuB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gCAAgC,+BAA+B;AAC/D;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,IAAI;AAChC;;AAEA;AACA;;AAEA;AACA;AACA,oEAAoE,UAAU;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,uBAAuB;AAC3D;AACA;AACA,oCAAoC,QAAQ,wBAAwB;AACpE;AACA,oEAAoE,uBAAuB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,WAAW,qBAAqB;AAChC,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,QAAQ;AAC1C;;AAEA;AACA;AACA;AACA;;AAEA,2CAA2C,QAAQ;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,IAAI;AAChC;;AAEA;AACA;;AAEA;AACA,4IAA4I,UAAU;AACtJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC,QAAQ;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qBAAqB,GAAG,mBAAmB;AAChE;AACA,QAAQ;AACR;AACA;AACA,qBAAqB,qBAAqB,GAAG,mBAAmB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,+BAA+B;AAC/B,mCAAmC,qBAAqB;AACxD;AACA;AACA,QAAQ;AACR;AACA,WAAW,eAAe;AAC1B,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,eAAe;AAClD;AACA,0BAA0B,WAAW;AACrC;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA,WAAW,OAAO,aAAa;AAC/B;AACA,iBAAiB,6BAA6B;AAC9C,0BAA0B,gCAAgC;AAC1D;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,YAAY,aAAa;AACzB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB,GAAG,kCAAkC;AAC5E,sDAAsD;AACtD;AACA,WAAW,eAAe;AAC1B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oBAAoB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,sBAAsB,uBAAuB;AAC7C;AACA,0BAA0B,QAAQ,aAAa,EAAE;AACjD;AACA,sBAAsB;AACtB;AACA,UAAU;AACV;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,SAAS,2DAA2D;AAC/E,YAAY,QAAQ;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8CAA8C,oBAAoB;AAClE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,kDAAkD,oBAAoB;AACtE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,sDAAsD;AAChG;AACA,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO,UAAU,EAAE,GAAG,kBAAkB;AAC/D,uBAAuB,eAAe,GAAG,eAAe,GAAG,cAAc;AACzE;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,4BAA4B,uBAAuB;AACnD;AACA;AACA,4BAA4B,QAAQ,wBAAwB;AAC5D;AACA;AACA,uFAAuF,uBAAuB;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,UAAU,GAAG,QAAQ,mBAAmB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gBAAgB;AACtC;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,6BAA6B,IAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,sCAAsC;AACtC;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,cAAc,OAAO;AACrB,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB,iBAAiB,uBAAuB;AACxC,iBAAiB,SAAS;AAC1B,cAAc,OAAO;AACrB,eAAe,uBAAuB;AACtC,gBAAgB,uBAAuB;AACvC,uBAAuB;AACvB,aAAa,kBAAkB,UAAU;AACzC;AACA;AACA;AACA,OAAO,SAAS;AAChB,OAAO,0BAA0B;AACjC,OAAO,yBAAyB;AAChC,OAAO,wBAAwB;AAC/B;AACA,0MAA0M;AAC1M;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,sCAAsC;AACtC,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,4CAA4C;AAC5C;;AAEA,yBAAyB;AACzB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,UAAU,yBAAyB,qBAAqB;AAClE,UAAU,YAAY;AACtB;AACA;AACA,0BAA0B,OAAO,oBAAoB;AACrD,QAAQ;AACR;AACA;AACA;AACA,iBAAiB,yBAAyB,mBAAmB,EAAE;AAC/D;AACA;AACA;AACA,4BAA4B,OAAO,iBAAiB;AACpD,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB,SAAS,GAAG,QAAQ;AAC7C,0BAA0B,SAAS,GAAG,QAAQ;AAC9C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,4BAA4B,iBAAiB;AAC7C;AACA,QAAQ;AACR;AACA;AACA,aAAa,MAAM;AACnB,oBAAoB,OAAO;AAC3B,cAAc,OAAO;AACrB,aAAa,QAAQ;AACrB;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,qBAAqB,wBAAwB;AAC7C;AACA;AACA,oCAAoC;AACpC;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,0BAA0B,OAAO;AAC/C,cAAc,0BAA0B,YAAY;AACpD;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA,sBAAsB,0BAA0B,OAAO,kBAAkB;AACzE;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,aAAa;AACb,aAAa;AACb;AACA;AACA;AACA,qBAAqB;AACrB,WAAW;AACX;AACA,mBAAmB;AACnB,8BAA8B,kCAAkC;AAChE;AACA,QAAQ;AACR;AACA;AACA,qBAAqB,qCAAqC;AAC1D,mBAAmB,+BAA+B;AAClD,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,eAAe;AAC1B,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC;AACjC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA,yBAAyB,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,mBAAmB;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,aAAa,SAAS;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP,0CAA0C;AAC1C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B,YAAY;AACZ;;AAEA;AACA;;AAEA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,WAAW;AACtB,WAAW,SAAS;AACpB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACt2HA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACzBA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA,8EAA8E,eAAe;AAC7F;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL,GAAG;AACH;;;;;;;;ACrCA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA,4EAA4E,eAAe;AAC3F;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL,GAAG;AACH;;;;;;;;ACrCA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;AACA,qCAAqC,kCAAkC;AACvE,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;;;;;;;AC3EA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,6EAA6E,eAAe;AAC5F;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA,GAAG;AACH;;;;;;;ACrCA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,IAAI;AACf,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;;;;;;;ACrJA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC,SAAS;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,8BAA8B,SAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oCAAoC,oCAAoC;AACxE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,iBAAiB;AAC5B,WAAW,kBAAkB;AAC7B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;AC7YA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,+BAA+B;AAC/B;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,IAAI;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;;;;;;;AC5RA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,gCAAgC;AACjD;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1CA;;AAEA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACXA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,oBAAoB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClHA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC3BA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC7BA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC3BA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACfA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA,KAAK;AACL,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5CA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,cAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,eAAe,sBAAsB;AACrC,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa,sBAAsB;AACnC,SAAS;AACT;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B;AACA;;AAEA;AACA;AACA,aAAa,qBAAqB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT,OAAO;AACP;AACA,uBAAuB,gDAAgD;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB,wBAAwB;AACzC,aAAa;AACb,WAAW;AACX;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;ACzLA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,SAAS;AACrB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,oCAAoC;AACpC,oBAAoB;AACpB;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,oCAAoC;AACpC,oBAAoB;AACpB;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;;;;;;;ACjLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4BAA4B;AAC5C,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,kBAAkB;AACnC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yCAAyC,SAAS;AAClD;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,kCAAkC;AACzD;AACA;AACA;AACA,OAAO;AACP,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,kCAAkC;AAC7D;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;AClRA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;ACXA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACtJA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC,GAAG;AACH;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC,GAAG;AACH;AACA;AACA;AACA;;;;;;;ACnBA,kC;;;;;;ACAA,gD;;;;;;ACAA,qC;;;;;;ACAA,kC;;;;;;ACAA,+B;;;;;;ACAA,gC;;;;;;ACAA,iC;;;;;;ACAA,wC;;;;;;ACAA,yC;;;;;;ACAA,mC;;;;;;ACAA,gC","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 95134c597388cd33cd98","module.exports = {\n  /*\n  ** Headers of the page\n  */\n  head: {\n    title: 'soonfy personal website',\n    titleTemplate: '%s - soonfy',\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport', content: 'width=device-width, initial-scale=1' },\n      { hid: 'keywords', name: 'keywords', content: 'nuxt,vue,koa,element-ui,echarts,socket.io' },\n      { hid: 'description', name: 'description', content: 'soonfy personal website' }\n    ],\n    link: [\n      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }\n    ]\n  },\n  /*\n  ** Global CSS\n  */\n  css: ['~assets/css/reset.css',\n    '~assets/css/main.css',\n    'element-ui/lib/theme-chalk/index.css'\n  ],\n  /*\n  ** Customize the progress-bar color\n  */\n  loading: { color: '#3B8070' },\n  /*\n   ** Build configuration\n   */\n  build: {\n    /*\n     ** Run ESLINT on save\n     */\n    // extend(config, ctx) {\n    //   if (ctx.isClient) {\n    //     config.module.rules.push({\n    //       enforce: 'pre',\n    //       test: /\\.(js|vue)$/,\n    //       loader: 'eslint-loader',\n    //       exclude: /(node_modules)/\n    //     })\n    //   }\n    // },\n    postcss: [\n      require('autoprefixer')({\n        browsers: ['last 3 versions', 'Android >= 4.4', 'iOS >= 6']\n      })\n    ],\n    babel: {\n      plugins: [['component', [{\n        libraryName: 'element-ui',\n        styleLibraryName: 'theme-chalk'\n      }]]]\n    },\n    vendor: ['element-ui', 'axios', 'lodash']\n  },\n  plugins: [\n    { src: '~plugins/element-ui', ssr: true },\n    { src: '~plugins/font', ssr: true },\n    { src: '~plugins/method', ssr: true },\n  ]\n}\n\n\n\n// WEBPACK FOOTER //\n// ./nuxt.config.js","module.exports = require(\"regenerator-runtime\");\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_babel-runtime@6.26.0@babel-runtime/regenerator/index.js\n// module id = 2\n// module chunks = 0","module.exports = require(\"koa\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"koa\"\n// module id = 3\n// module chunks = 0","module.exports = require(\"nuxt\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"nuxt\"\n// module id = 4\n// module chunks = 0","module.exports = require(\"autoprefixer\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"autoprefixer\"\n// module id = 5\n// module chunks = 0","module.exports = require(\"koa-router\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"koa-router\"\n// module id = 6\n// module chunks = 0","module.exports = require(\"regenerator-runtime\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"regenerator-runtime\"\n// module id = 7\n// module chunks = 0","import Koa from 'koa'\nimport { Nuxt, Builder } from 'nuxt'\nimport * as bodyParser from 'koa-bodyparser'\nimport mongoose from 'mongoose';\n\nimport * as blog from '../apis/controllers/blog';\nmongoose.connect('mongodb://localhost/website');\n\nasync function start () {\n  const app = new Koa()\n  const host = process.env.HOST || '127.0.0.1'\n  const port = process.env.PORT || 3000\n\n  app.use(bodyParser());\n  app.use(blog.routes());\n  app.use(blog.allowedMethods());\n\n  // Import and Set Nuxt.js options\n  let config = require('../nuxt.config.js')\n  config.dev = !(app.env === 'production')\n\n  // Instantiate nuxt.js\n  const nuxt = new Nuxt(config)\n\n  // Build in development\n  if (config.dev) {\n    const builder = new Builder(nuxt)\n    await builder.build()\n  }\n\n  app.use(async (ctx, next) => {\n    await next()\n    ctx.status = 200 // koa defaults to 404 when it sees that status is unset\n    return new Promise((resolve, reject) => {\n      ctx.res.on('close', resolve)\n      ctx.res.on('finish', resolve)\n      nuxt.render(ctx.req, ctx.res, promise => {\n        // nuxt.render passes a rejected promise into callback on error.\n        promise.then(resolve).catch(reject)\n      })\n    })\n  })\n\n  app.listen(port, host)\n  console.log('Server listening on ' + host + ':' + port) // eslint-disable-line no-console\n}\n\nstart()\n\n\n\n// WEBPACK FOOTER //\n// ./server/index.js","\n/**\n * Module dependencies.\n */\n\nexports.clone = function (opts) {\n  var options = {};\n  opts = opts || {};\n  for (var key in opts) {\n    options[key] = opts[key];\n  }\n  return options;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_co-body@5.1.1@co-body/lib/utils.js\n// module id = 9\n// module chunks = 0","\nvar zlib = require('zlib')\n\nmodule.exports = inflate\n\nfunction inflate(stream, options) {\n  if (!stream) {\n    throw new TypeError('argument stream is required')\n  }\n\n  options = options || {}\n\n  var encoding = options.encoding\n    || (stream.headers && stream.headers['content-encoding'])\n    || 'identity'\n\n  switch (encoding) {\n  case 'gzip':\n  case 'deflate':\n    break\n  case 'identity':\n    return stream\n  default:\n    var err = new Error('Unsupported Content-Encoding: ' + encoding)\n    err.status = 415\n    throw err\n  }\n\n  // no not pass-through encoding\n  delete options.encoding\n\n  return stream.pipe(zlib.Unzip(options))\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_inflation@2.0.0@inflation/index.js\n// module id = 10\n// module chunks = 0","module.exports = require(\"raw-body\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"raw-body\"\n// module id = 11\n// module chunks = 0","\n/**\n * Module dependencies.\n */\n\nvar raw = require('raw-body');\nvar inflate = require('inflation');\nvar qs = require('qs');\nvar utils = require('./utils');\n\n/**\n * Return a Promise which parses x-www-form-urlencoded requests.\n *\n * Pass a node request or an object with `.req`,\n * such as a koa Context.\n *\n * @param {Request} req\n * @param {Options} [opts]\n * @return {Function}\n * @api public\n */\n\nmodule.exports = function(req, opts){\n  req = req.req || req;\n  opts = utils.clone(opts);\n  var queryString = opts.queryString || {};\n\n  // keep compatibility with qs@4\n  if (queryString.allowDots === undefined) queryString.allowDots = true;\n\n  // defaults\n  var len = req.headers['content-length'];\n  var encoding = req.headers['content-encoding'] || 'identity';\n  if (len && encoding === 'identity') opts.length = ~~len;\n  opts.encoding = opts.encoding || 'utf8';\n  opts.limit = opts.limit || '56kb';\n  opts.qs = opts.qs || qs;\n\n  // raw-body returns a Promise when no callback is specified\n  return Promise.resolve()\n    .then(function() {\n      return raw(inflate(req), opts);\n    })\n    .then(function(str){\n      try {\n        var parsed = opts.qs.parse(str, queryString);\n        return opts.returnRawBody ? { parsed: parsed, raw: str } : parsed;\n      } catch (err) {\n        err.status = 400;\n        err.body = str;\n        throw err;\n      }\n    });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_co-body@5.1.1@co-body/lib/form.js\n// module id = 12\n// module chunks = 0","\n/**\n * Module dependencies.\n */\n\nvar raw = require('raw-body');\nvar inflate = require('inflation');\nvar utils = require('./utils');\n\n// Allowed whitespace is defined in RFC 7159\n// http://www.rfc-editor.org/rfc/rfc7159.txt\nvar strictJSONReg = /^[\\x20\\x09\\x0a\\x0d]*(\\[|\\{)/;\n\n/**\n * Return a Promise which parses json requests.\n *\n * Pass a node request or an object with `.req`,\n * such as a koa Context.\n *\n * @param {Request} req\n * @param {Options} [opts]\n * @return {Function}\n * @api public\n */\n\nmodule.exports = function(req, opts){\n  req = req.req || req;\n  opts = utils.clone(opts);\n\n  // defaults\n  var len = req.headers['content-length'];\n  var encoding = req.headers['content-encoding'] || 'identity';\n  if (len && encoding === 'identity') opts.length = len = ~~len;\n  opts.encoding = opts.encoding || 'utf8';\n  opts.limit = opts.limit || '1mb';\n  var strict = opts.strict !== false;\n\n  // raw-body returns a promise when no callback is specified\n  return Promise.resolve()\n    .then(function() {\n      return raw(inflate(req), opts);\n    })\n    .then(function(str) {\n      try {\n        var parsed = parse(str);\n        return opts.returnRawBody ? { parsed: parsed, raw: str } : parsed;\n      } catch (err) {\n        err.status = 400;\n        err.body = str;\n        throw err;\n      }\n    });\n\n  function parse(str){\n    if (!strict) return str ? JSON.parse(str) : str;\n    // strict mode always return object\n    if (!str) return {};\n    // strict JSON test\n    if (!strictJSONReg.test(str)) {\n      throw new Error('invalid JSON, only supports object and array');\n    }\n    return JSON.parse(str);\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_co-body@5.1.1@co-body/lib/json.js\n// module id = 13\n// module chunks = 0","/**\n * Module dependencies.\n */\n\nvar raw = require('raw-body');\nvar inflate = require('inflation');\nvar utils = require('./utils');\n\n/**\n * Return a Promise which parses text/plain requests.\n *\n * Pass a node request or an object with `.req`,\n * such as a koa Context.\n *\n * @param {Request} req\n * @param {Options} [opts]\n * @return {Function}\n * @api public\n */\n\nmodule.exports = function(req, opts){\n  req = req.req || req;\n  opts = utils.clone(opts);\n\n  // defaults\n  var len = req.headers['content-length'];\n  var encoding = req.headers['content-encoding'] || 'identity';\n  if (len && encoding === 'identity') opts.length = ~~len;\n  opts.encoding = opts.encoding || 'utf8';\n  opts.limit = opts.limit || '1mb';\n\n  // raw-body returns a Promise when no callback is specified\n  return Promise.resolve()\n    .then(function() {\n      return raw(inflate(req), opts);\n    })\n    .then(str => {\n      // ensure return the same format with json / form\n      return opts.returnRawBody ? { parsed: str, raw: str } : str;\n    });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_co-body@5.1.1@co-body/lib/text.js\n// module id = 14\n// module chunks = 0","/**!\n * koa-body-parser - index.js\n * Copyright(c) 2014\n * MIT Licensed\n *\n * Authors:\n *   dead_horse <dead_horse@qq.com> (http://deadhorse.me)\n *   fengmk2 <m@fengmk2.com> (http://fengmk2.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar parse = require('co-body');\nvar copy = require('copy-to');\n\n/**\n * @param [Object] opts\n *   - {String} jsonLimit default '1mb'\n *   - {String} formLimit default '56kb'\n *   - {string} encoding default 'utf-8'\n *   - {Object} extendTypes\n */\n\nmodule.exports = function (opts) {\n  opts = opts || {};\n  var detectJSON = opts.detectJSON;\n  var onerror = opts.onerror;\n\n  var enableTypes = opts.enableTypes || ['json', 'form'];\n  var enableForm = checkEnable(enableTypes, 'form');\n  var enableJson = checkEnable(enableTypes, 'json');\n  var enableText = checkEnable(enableTypes, 'text');\n\n  opts.detectJSON = undefined;\n  opts.onerror = undefined;\n\n  // force co-body return raw body\n  opts.returnRawBody = true;\n\n  // default json types\n  var jsonTypes = [\n    'application/json',\n    'application/json-patch+json',\n    'application/vnd.api+json',\n    'application/csp-report',\n  ];\n\n  // default form types\n  var formTypes = [\n    'application/x-www-form-urlencoded',\n  ];\n\n  // default text types\n  var textTypes = [\n    'text/plain',\n  ];\n\n  var jsonOpts = formatOptions(opts, 'json');\n  var formOpts = formatOptions(opts, 'form');\n  var textOpts = formatOptions(opts, 'text');\n\n  var extendTypes = opts.extendTypes || {};\n\n  extendType(jsonTypes, extendTypes.json);\n  extendType(formTypes, extendTypes.form);\n  extendType(textTypes, extendTypes.text);\n\n  return async function bodyParser(ctx, next) {\n    if (ctx.request.body !== undefined) return await next();\n    if (ctx.disableBodyParser) return await next();\n    try {\n      const res = await parseBody(ctx);\n      ctx.request.body = 'parsed' in res ? res.parsed : {};\n      if (ctx.request.rawBody === undefined) ctx.request.rawBody = res.raw;\n    } catch (err) {\n      if (onerror) {\n        onerror(err, ctx);\n      } else {\n        throw err;\n      }\n    }\n    await next();\n  };\n\n  async function parseBody(ctx) {\n    if (enableJson && ((detectJSON && detectJSON(ctx)) || ctx.request.is(jsonTypes))) {\n      return await parse.json(ctx, jsonOpts);\n    }\n    if (enableForm && ctx.request.is(formTypes)) {\n      return await parse.form(ctx, formOpts);\n    }\n    if (enableText && ctx.request.is(textTypes)) {\n      return await parse.text(ctx, textOpts) || '';\n    }\n    return {};\n  }\n};\n\nfunction formatOptions(opts, type) {\n  var res = {};\n  copy(opts).to(res);\n  res.limit = opts[type + 'Limit'];\n  return res;\n}\n\nfunction extendType(original, extend) {\n  if (extend) {\n    if (!Array.isArray(extend)) {\n      extend = [extend];\n    }\n    extend.forEach(function (extend) {\n      original.push(extend);\n    });\n  }\n}\n\nfunction checkEnable(types, type) {\n  return types.indexOf(type) >= 0;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_koa-bodyparser@4.2.0@koa-bodyparser/index.js\n// module id = 15\n// module chunks = 0","\nexports = module.exports = require('./lib/any');\nexports.json = require('./lib/json');\nexports.form = require('./lib/form');\nexports.text = require('./lib/text');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_co-body@5.1.1@co-body/index.js\n// module id = 16\n// module chunks = 0","\n/**\n * Module dependencies.\n */\n\nvar typeis = require('type-is');\nvar json = require('./json');\nvar form = require('./form');\nvar text = require('./text');\n\nvar jsonTypes = ['json', 'application/*+json', 'application/csp-report'];\nvar formTypes = ['urlencoded'];\nvar textTypes = ['text'];\n\n/**\n * Return a Promise which parses form and json requests\n * depending on the Content-Type.\n *\n * Pass a node request or an object with `.req`,\n * such as a koa Context.\n *\n * @param {Request} req\n * @param {Options} [opts]\n * @return {Function}\n * @api public\n */\n\nmodule.exports = function(req, opts){\n  req = req.req || req;\n  opts = opts || {};\n\n  // json\n  var jsonType = opts.jsonTypes || jsonTypes;\n  if (typeis(req, jsonType)) return json(req, opts);\n\n  // form\n  var formType = opts.formTypes || formTypes;\n  if (typeis(req, formType)) return form(req, opts);\n\n  // text\n  var textType = opts.textTypes || textTypes;\n  if (typeis(req, textType)) return text(req, opts);\n\n  // invalid\n  var type = req.headers['content-type'] || '';\n  var message = type ? 'Unsupported content-type: ' + type : 'Missing content-type';\n  var err = new Error(message);\n  err.status = 415;\n  return Promise.reject(err);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_co-body@5.1.1@co-body/lib/any.js\n// module id = 17\n// module chunks = 0","/*!\n * copy-to - index.js\n * Copyright(c) 2014 dead_horse <dead_horse@qq.com>\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * slice() reference.\n */\n\nvar slice = Array.prototype.slice;\n\n/**\n * Expose copy\n *\n * ```\n * copy({foo: 'nar', hello: 'copy'}).to({hello: 'world'});\n * copy({foo: 'nar', hello: 'copy'}).toCover({hello: 'world'});\n * ```\n *\n * @param {Object} src\n * @return {Copy}\n */\n\nmodule.exports = Copy;\n\n\n/**\n * Copy\n * @param {Object} src\n * @param {Boolean} withAccess\n */\n\nfunction Copy(src, withAccess) {\n  if (!(this instanceof Copy)) return new Copy(src, withAccess);\n  this.src = src;\n  this._withAccess = withAccess;\n}\n\n/**\n * copy properties include getter and setter\n * @param {[type]} val [description]\n * @return {[type]} [description]\n */\n\nCopy.prototype.withAccess = function (w) {\n  this._withAccess = w !== false;\n  return this;\n};\n\n/**\n * pick keys in src\n *\n * @api: public\n */\n\nCopy.prototype.pick = function(keys) {\n  if (!Array.isArray(keys)) {\n    keys = slice.call(arguments);\n  }\n  if (keys.length) {\n    this.keys = keys;\n  }\n  return this;\n};\n\n/**\n * copy src to target,\n * do not cover any property target has\n * @param {Object} to\n *\n * @api: public\n */\n\nCopy.prototype.to = function(to) {\n  to = to || {};\n\n  if (!this.src) return to;\n  var keys = this.keys || Object.keys(this.src);\n\n  if (!this._withAccess) {\n    for (var i = 0; i < keys.length; i++) {\n      key = keys[i];\n      if (to[key] !== undefined) continue;\n      to[key] = this.src[key];\n    }\n    return to;\n  }\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (!notDefined(to, key)) continue;\n    var getter = this.src.__lookupGetter__(key);\n    var setter = this.src.__lookupSetter__(key);\n    if (getter) to.__defineGetter__(key, getter);\n    if (setter) to.__defineSetter__(key, setter);\n\n    if (!getter && !setter) {\n      to[key] = this.src[key];\n    }\n  }\n  return to;\n};\n\n/**\n * copy src to target,\n * override any property target has\n * @param {Object} to\n *\n * @api: public\n */\n\nCopy.prototype.toCover = function(to) {\n  var keys = this.keys || Object.keys(this.src);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    delete to[key];\n    var getter = this.src.__lookupGetter__(key);\n    var setter = this.src.__lookupSetter__(key);\n    if (getter) to.__defineGetter__(key, getter);\n    if (setter) to.__defineSetter__(key, setter);\n\n    if (!getter && !setter) {\n      to[key] = this.src[key];\n    }\n  }\n};\n\nCopy.prototype.override = Copy.prototype.toCover;\n\n/**\n * append another object to src\n * @param {Obj} obj\n * @return {Copy}\n */\n\nCopy.prototype.and = function (obj) {\n  var src = {};\n  this.to(src);\n  this.src = obj;\n  this.to(src);\n  this.src = src;\n\n  return this;\n};\n\n/**\n * check obj[key] if not defiend\n * @param {Object} obj\n * @param {String} key\n * @return {Boolean}\n */\n\nfunction notDefined(obj, key) {\n  return obj[key] === undefined\n    && obj.__lookupGetter__(key) === undefined\n    && obj.__lookupSetter__(key) === undefined;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_copy-to@2.0.1@copy-to/index.js\n// module id = 18\n// module chunks = 0","module.exports = require(\"qs\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"qs\"\n// module id = 19\n// module chunks = 0","module.exports = require(\"type-is\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"type-is\"\n// module id = 20\n// module chunks = 0","module.exports = require(\"zlib\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"zlib\"\n// module id = 21\n// module chunks = 0","import * as Router from 'koa-router'\nimport Blog from '../models/blog'\n\n\nlet router = Router({\n  prefix: '/apis'\n});\n\nrouter.get('/blog/publish', async (ctx, next) => {\n  console.log(ctx.request);\n  ctx.body = {\n    status: 'success'\n  }\n});\n\nrouter.post('/blog/publish', async (ctx, next) => {\n  console.log(ctx.request.body);\n  let { title, tags, type, content, isPublic, status = 0, storeAt = new Date(), updateAt = new Date() } = ctx.request.body;\n  let doc = await Blog.create({ title, tags, type, content, isPublic, status, storeAt, updateAt });\n  ctx.body = {\n    status: 'success',\n    doc\n  }\n});\n\n\nrouter.post('/blog/draft', async (ctx, next) => {\n  console.log(ctx.request.body);\n  let { title, tags, type, content, isPublic, status = 1, storeAt = new Date(), updateAt = new Date() } = ctx.request.body;\n  let doc = await Blog.create({ title, tags, type, content, isPublic, status, storeAt, updateAt });\n  ctx.body = {\n    status: 'success',\n    doc\n  }\n});\n\nmodule.exports = router;\n\n\n// WEBPACK FOOTER //\n// ./apis/controllers/blog.js","module.exports = require(\"util\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"util\"\n// module id = 23\n// module chunks = 0","'use strict';\n\nvar MongoError = require('mongodb-core').MongoError,\n  ReadPreference = require('mongodb-core').ReadPreference;\n\nvar shallowClone = function(obj) {\n  var copy = {};\n  for (var name in obj) copy[name] = obj[name];\n  return copy;\n};\n\n// Figure out the read preference\nvar translateReadPreference = function(options) {\n  var r = null;\n  if (options.readPreference) {\n    r = options.readPreference;\n  } else {\n    return options;\n  }\n\n  if (typeof r === 'string') {\n    options.readPreference = new ReadPreference(r);\n  } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n    const mode = r.mode || r.preference;\n    if (mode && typeof mode === 'string') {\n      options.readPreference = new ReadPreference(mode, r.tags, {\n        maxStalenessSeconds: r.maxStalenessSeconds\n      });\n    }\n  } else if (!(r instanceof ReadPreference)) {\n    throw new TypeError('Invalid read preference: ' + r);\n  }\n\n  return options;\n};\n\n// Set simple property\nvar getSingleProperty = function(obj, name, value) {\n  Object.defineProperty(obj, name, {\n    enumerable: true,\n    get: function() {\n      return value;\n    }\n  });\n};\n\nvar formatSortValue = (exports.formatSortValue = function(sortDirection) {\n  var value = ('' + sortDirection).toLowerCase();\n\n  switch (value) {\n    case 'ascending':\n    case 'asc':\n    case '1':\n      return 1;\n    case 'descending':\n    case 'desc':\n    case '-1':\n      return -1;\n    default:\n      throw new Error(\n        'Illegal sort clause, must be of the form ' +\n          \"[['field1', '(ascending|descending)'], \" +\n          \"['field2', '(ascending|descending)']]\"\n      );\n  }\n});\n\nvar formattedOrderClause = (exports.formattedOrderClause = function(sortValue) {\n  var orderBy = {};\n  if (sortValue == null) return null;\n  if (Array.isArray(sortValue)) {\n    if (sortValue.length === 0) {\n      return null;\n    }\n\n    for (var i = 0; i < sortValue.length; i++) {\n      if (sortValue[i].constructor === String) {\n        orderBy[sortValue[i]] = 1;\n      } else {\n        orderBy[sortValue[i][0]] = formatSortValue(sortValue[i][1]);\n      }\n    }\n  } else if (sortValue != null && typeof sortValue === 'object') {\n    orderBy = sortValue;\n  } else if (typeof sortValue === 'string') {\n    orderBy[sortValue] = 1;\n  } else {\n    throw new Error(\n      'Illegal sort clause, must be of the form ' +\n        \"[['field1', '(ascending|descending)'], ['field2', '(ascending|descending)']]\"\n    );\n  }\n\n  return orderBy;\n});\n\nvar checkCollectionName = function checkCollectionName(collectionName) {\n  if ('string' !== typeof collectionName) {\n    throw new MongoError('collection name must be a String');\n  }\n\n  if (!collectionName || collectionName.indexOf('..') !== -1) {\n    throw new MongoError('collection names cannot be empty');\n  }\n\n  if (\n    collectionName.indexOf('$') !== -1 &&\n    collectionName.match(/((^\\$cmd)|(oplog\\.\\$main))/) == null\n  ) {\n    throw new MongoError(\"collection names must not contain '$'\");\n  }\n\n  if (collectionName.match(/^\\.|\\.$/) != null) {\n    throw new MongoError(\"collection names must not start or end with '.'\");\n  }\n\n  // Validate that we are not passing 0x00 in the colletion name\n  if (collectionName.indexOf('\\x00') !== -1) {\n    throw new MongoError('collection names cannot contain a null character');\n  }\n};\n\nvar handleCallback = function(callback, err, value1, value2) {\n  try {\n    if (callback == null) return;\n\n    if (callback) {\n      return value2 ? callback(err, value1, value2) : callback(err, value1);\n    }\n  } catch (err) {\n    process.nextTick(function() {\n      throw err;\n    });\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Wrap a Mongo error document in an Error instance\n * @ignore\n * @api private\n */\nvar toError = function(error) {\n  if (error instanceof Error) return error;\n\n  var msg = error.err || error.errmsg || error.errMessage || error;\n  var e = MongoError.create({ message: msg, driver: true });\n\n  // Get all object keys\n  var keys = typeof error === 'object' ? Object.keys(error) : [];\n\n  for (var i = 0; i < keys.length; i++) {\n    try {\n      e[keys[i]] = error[keys[i]];\n    } catch (err) {\n      // continue\n    }\n  }\n\n  return e;\n};\n\n/**\n * @ignore\n */\nvar normalizeHintField = function normalizeHintField(hint) {\n  var finalHint = null;\n\n  if (typeof hint === 'string') {\n    finalHint = hint;\n  } else if (Array.isArray(hint)) {\n    finalHint = {};\n\n    hint.forEach(function(param) {\n      finalHint[param] = 1;\n    });\n  } else if (hint != null && typeof hint === 'object') {\n    finalHint = {};\n    for (var name in hint) {\n      finalHint[name] = hint[name];\n    }\n  }\n\n  return finalHint;\n};\n\n/**\n * Create index name based on field spec\n *\n * @ignore\n * @api private\n */\nvar parseIndexOptions = function(fieldOrSpec) {\n  var fieldHash = {};\n  var indexes = [];\n  var keys;\n\n  // Get all the fields accordingly\n  if ('string' === typeof fieldOrSpec) {\n    // 'type'\n    indexes.push(fieldOrSpec + '_' + 1);\n    fieldHash[fieldOrSpec] = 1;\n  } else if (Array.isArray(fieldOrSpec)) {\n    fieldOrSpec.forEach(function(f) {\n      if ('string' === typeof f) {\n        // [{location:'2d'}, 'type']\n        indexes.push(f + '_' + 1);\n        fieldHash[f] = 1;\n      } else if (Array.isArray(f)) {\n        // [['location', '2d'],['type', 1]]\n        indexes.push(f[0] + '_' + (f[1] || 1));\n        fieldHash[f[0]] = f[1] || 1;\n      } else if (isObject(f)) {\n        // [{location:'2d'}, {type:1}]\n        keys = Object.keys(f);\n        keys.forEach(function(k) {\n          indexes.push(k + '_' + f[k]);\n          fieldHash[k] = f[k];\n        });\n      } else {\n        // undefined (ignore)\n      }\n    });\n  } else if (isObject(fieldOrSpec)) {\n    // {location:'2d', type:1}\n    keys = Object.keys(fieldOrSpec);\n    keys.forEach(function(key) {\n      indexes.push(key + '_' + fieldOrSpec[key]);\n      fieldHash[key] = fieldOrSpec[key];\n    });\n  }\n\n  return {\n    name: indexes.join('_'),\n    keys: keys,\n    fieldHash: fieldHash\n  };\n};\n\nvar isObject = (exports.isObject = function(arg) {\n  return '[object Object]' === Object.prototype.toString.call(arg);\n});\n\nvar debugOptions = function(debugFields, options) {\n  var finaloptions = {};\n  debugFields.forEach(function(n) {\n    finaloptions[n] = options[n];\n  });\n\n  return finaloptions;\n};\n\nvar decorateCommand = function(command, options, exclude) {\n  for (var name in options) {\n    if (exclude[name] == null) command[name] = options[name];\n  }\n\n  return command;\n};\n\nvar mergeOptions = function(target, source) {\n  for (var name in source) {\n    target[name] = source[name];\n  }\n\n  return target;\n};\n\n// Merge options with translation\nvar translateOptions = function(target, source) {\n  var translations = {\n    // SSL translation options\n    sslCA: 'ca',\n    sslCRL: 'crl',\n    sslValidate: 'rejectUnauthorized',\n    sslKey: 'key',\n    sslCert: 'cert',\n    sslPass: 'passphrase',\n    // SocketTimeout translation options\n    socketTimeoutMS: 'socketTimeout',\n    connectTimeoutMS: 'connectionTimeout',\n    // Replicaset options\n    replicaSet: 'setName',\n    rs_name: 'setName',\n    secondaryAcceptableLatencyMS: 'acceptableLatency',\n    connectWithNoPrimary: 'secondaryOnlyConnectionAllowed',\n    // Mongos options\n    acceptableLatencyMS: 'localThresholdMS'\n  };\n\n  for (var name in source) {\n    if (translations[name]) {\n      target[translations[name]] = source[name];\n    } else {\n      target[name] = source[name];\n    }\n  }\n\n  return target;\n};\n\nvar filterOptions = function(options, names) {\n  var filterOptions = {};\n\n  for (var name in options) {\n    if (names.indexOf(name) !== -1) filterOptions[name] = options[name];\n  }\n\n  // Filtered options\n  return filterOptions;\n};\n\n// Write concern keys\nvar writeConcernKeys = ['w', 'j', 'wtimeout', 'fsync'];\n\n// Merge the write concern options\nvar mergeOptionsAndWriteConcern = function(targetOptions, sourceOptions, keys, mergeWriteConcern) {\n  // Mix in any allowed options\n  for (var i = 0; i < keys.length; i++) {\n    if (!targetOptions[keys[i]] && sourceOptions[keys[i]] !== undefined) {\n      targetOptions[keys[i]] = sourceOptions[keys[i]];\n    }\n  }\n\n  // No merging of write concern\n  if (!mergeWriteConcern) return targetOptions;\n\n  // Found no write Concern options\n  var found = false;\n  for (i = 0; i < writeConcernKeys.length; i++) {\n    if (targetOptions[writeConcernKeys[i]]) {\n      found = true;\n      break;\n    }\n  }\n\n  if (!found) {\n    for (i = 0; i < writeConcernKeys.length; i++) {\n      if (sourceOptions[writeConcernKeys[i]]) {\n        targetOptions[writeConcernKeys[i]] = sourceOptions[writeConcernKeys[i]];\n      }\n    }\n  }\n\n  return targetOptions;\n};\n\n/**\n * Executes the given operation with provided arguments.\n *\n * This method reduces large amounts of duplication in the entire codebase by providing\n * a single point for determining whether callbacks or promises should be used. Additionally\n * it allows for a single point of entry to provide features such as implicit sessions, which\n * are required by the Driver Sessions specification in the event that a ClientSession is\n * not provided\n *\n * @param {object} topology The topology to execute this operation on\n * @param {function} operation The operation to execute\n * @param {array} args Arguments to apply the provided operation\n * @param {object} [options] Options that modify the behavior of the method\n * @param {function]} [options.resultMutator] Allows for the result of the operation to be changed for custom return types\n */\nconst executeOperation = (topology, operation, args, options) => {\n  if (topology == null) {\n    throw new TypeError('This method requires a valid topology instance');\n  }\n\n  if (!Array.isArray(args)) {\n    throw new TypeError('This method requires an array of arguments to apply');\n  }\n\n  options = options || {};\n  const Promise = topology.s.promiseLibrary;\n  let resultMutator = options.resultMutator;\n  let callback = args[args.length - 1];\n\n  // The driver sessions spec mandates that we implicitly create sessions for operations\n  // that are not explicitly provided with a session.\n  let session, opOptions;\n  if (!options.skipSessions && topology.hasSessionSupport()) {\n    opOptions = args[args.length - 2];\n    if (opOptions == null || opOptions.session == null) {\n      session = topology.startSession();\n      const optionsIndex = args.length - 2;\n      args[optionsIndex] = Object.assign({}, args[optionsIndex], { session: session });\n    } else if (opOptions.session && opOptions.session.hasEnded) {\n      throw new MongoError('Use of expired sessions is not permitted');\n    }\n  }\n\n  const makeExecuteCallback = (resolve, reject) =>\n    function executeCallback(err, result) {\n      if (session && !options.returnsCursor) {\n        session.endSession(() => {\n          delete opOptions.session;\n          if (err) return reject(err);\n          if (resultMutator) return resolve(resultMutator(result));\n          resolve(result);\n        });\n      } else {\n        if (err) return reject(err);\n        if (resultMutator) return resolve(resultMutator(result));\n        resolve(result);\n      }\n    };\n\n  // Execute using callback\n  if (typeof callback === 'function') {\n    callback = args.pop();\n    const handler = makeExecuteCallback(\n      result => callback(null, result),\n      err => callback(err, null)\n    );\n    args.push(handler);\n\n    try {\n      return operation.apply(null, args);\n    } catch (e) {\n      handler(e);\n      throw e;\n    }\n  }\n\n  // Return a Promise\n  if (args[args.length - 1] != null) {\n    throw new TypeError('final argument to `executeOperation` must be a callback');\n  }\n\n  return new Promise(function(resolve, reject) {\n    const handler = makeExecuteCallback(resolve, reject);\n    args[args.length - 1] = handler;\n\n    try {\n      return operation.apply(null, args);\n    } catch (e) {\n      handler(e);\n    }\n  });\n};\n\nexports.filterOptions = filterOptions;\nexports.mergeOptions = mergeOptions;\nexports.translateOptions = translateOptions;\nexports.shallowClone = shallowClone;\nexports.getSingleProperty = getSingleProperty;\nexports.checkCollectionName = checkCollectionName;\nexports.toError = toError;\nexports.formattedOrderClause = formattedOrderClause;\nexports.parseIndexOptions = parseIndexOptions;\nexports.normalizeHintField = normalizeHintField;\nexports.handleCallback = handleCallback;\nexports.decorateCommand = decorateCommand;\nexports.isObject = isObject;\nexports.debugOptions = debugOptions;\nexports.MAX_JS_INT = 0x20000000000000;\nexports.mergeOptionsAndWriteConcern = mergeOptionsAndWriteConcern;\nexports.translateReadPreference = translateReadPreference;\nexports.executeOperation = executeOperation;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/utils.js\n// module id = 24\n// module chunks = 0","'use strict';\n\nvar BSON = require('bson');\nvar require_optional = require('require_optional');\n\ntry {\n  // Attempt to grab the native BSON parser\n  var BSONNative = require_optional('bson-ext');\n  // If we got the native parser, use it instead of the\n  // Javascript one\n  if (BSONNative) {\n    BSON = BSONNative;\n  }\n} catch (err) {} // eslint-disable-line\n\nmodule.exports = {\n  MongoError: require('./lib/error').MongoError,\n  MongoNetworkError: require('./lib/error').MongoNetworkError,\n  Connection: require('./lib/connection/connection'),\n  Server: require('./lib/topologies/server'),\n  ReplSet: require('./lib/topologies/replset'),\n  Mongos: require('./lib/topologies/mongos'),\n  Logger: require('./lib/connection/logger'),\n  Cursor: require('./lib/cursor'),\n  ReadPreference: require('./lib/topologies/read_preference'),\n  Sessions: require('./lib/sessions'),\n  BSON: BSON,\n  // Raw operations\n  Query: require('./lib/connection/commands').Query,\n  // Auth mechanisms\n  MongoCR: require('./lib/auth/mongocr'),\n  X509: require('./lib/auth/x509'),\n  Plain: require('./lib/auth/plain'),\n  GSSAPI: require('./lib/auth/gssapi'),\n  ScramSHA1: require('./lib/auth/scram'),\n  // Utilities\n  parseConnectionString: require('./lib/uri_parser')\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/index.js\n// module id = 25\n// module chunks = 0","'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst Decimal = require('./types/decimal128');\nconst ObjectId = require('./types/objectid');\nconst PromiseProvider = require('./promise_provider');\nconst cloneRegExp = require('regexp-clone');\nconst sliced = require('sliced');\nconst mpath = require('mpath');\nconst ms = require('ms');\n\nlet MongooseBuffer;\nlet MongooseArray;\nlet Document;\n\n/*!\n * Produces a collection name from model `name`. By default, just returns\n * the model name\n *\n * @param {String} name a model name\n * @param {Function} pluralize function that pluralizes the collection name\n * @return {String} a collection name\n * @api private\n */\n\nexports.toCollectionName = function(name, pluralize) {\n  if (name === 'system.profile') {\n    return name;\n  }\n  if (name === 'system.indexes') {\n    return name;\n  }\n  if (typeof pluralize === 'function') {\n    return pluralize(name);\n  }\n  return name;\n};\n\n/*!\n * Determines if `a` and `b` are deep equal.\n *\n * Modified from node/lib/assert.js\n *\n * @param {any} a a value to compare to `b`\n * @param {any} b a value to compare to `a`\n * @return {Boolean}\n * @api private\n */\n\nexports.deepEqual = function deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a instanceof Date && b instanceof Date) {\n    return a.getTime() === b.getTime();\n  }\n\n  if ((a instanceof ObjectId && b instanceof ObjectId) ||\n      (a instanceof Decimal && b instanceof Decimal)) {\n    return a.toString() === b.toString();\n  }\n\n  if (a instanceof RegExp && b instanceof RegExp) {\n    return a.source === b.source &&\n        a.ignoreCase === b.ignoreCase &&\n        a.multiline === b.multiline &&\n        a.global === b.global;\n  }\n\n  if (typeof a !== 'object' && typeof b !== 'object') {\n    return a == b;\n  }\n\n  if (a === null || b === null || a === undefined || b === undefined) {\n    return false;\n  }\n\n  if (a.prototype !== b.prototype) {\n    return false;\n  }\n\n  // Handle MongooseNumbers\n  if (a instanceof Number && b instanceof Number) {\n    return a.valueOf() === b.valueOf();\n  }\n\n  if (Buffer.isBuffer(a)) {\n    return exports.buffer.areEqual(a, b);\n  }\n\n  if (isMongooseObject(a)) {\n    a = a.toObject();\n  }\n  if (isMongooseObject(b)) {\n    b = b.toObject();\n  }\n\n  try {\n    var ka = Object.keys(a),\n        kb = Object.keys(b),\n        key, i;\n  } catch (e) {\n    // happens when one is a string literal and the other isn't\n    return false;\n  }\n\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length !== kb.length) {\n    return false;\n  }\n\n  // the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n\n  // ~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i]) {\n      return false;\n    }\n  }\n\n  // equivalent values for every corresponding key, and\n  // ~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*!\n * Object clone with Mongoose natives support.\n *\n * If options.minimize is true, creates a minimal data object. Empty objects and undefined values will not be cloned. This makes the data payload sent to MongoDB as small as possible.\n *\n * Functions are never cloned.\n *\n * @param {Object} obj the object to clone\n * @param {Object} options\n * @return {Object} the cloned object\n * @api private\n */\n\nexports.clone = function clone(obj, options) {\n  if (obj === undefined || obj === null) {\n    return obj;\n  }\n\n  if (Array.isArray(obj)) {\n    return cloneArray(obj, options);\n  }\n\n  if (isMongooseObject(obj)) {\n    if (options && options.json && typeof obj.toJSON === 'function') {\n      return obj.toJSON(options);\n    }\n    return obj.toObject(options);\n  }\n\n  if (obj.constructor) {\n    switch (exports.getFunctionName(obj.constructor)) {\n      case 'Object':\n        return cloneObject(obj, options);\n      case 'Date':\n        return new obj.constructor(+obj);\n      case 'RegExp':\n        return cloneRegExp(obj);\n      default:\n        // ignore\n        break;\n    }\n  }\n\n  if (obj instanceof ObjectId) {\n    return new ObjectId(obj.id);\n  }\n  if (obj instanceof Decimal) {\n    if (options && options.flattenDecimals) {\n      return obj.toJSON();\n    }\n    return Decimal.fromString(obj.toString());\n  }\n\n  if (!obj.constructor && exports.isObject(obj)) {\n    // object created with Object.create(null)\n    return cloneObject(obj, options);\n  }\n\n  if (obj.valueOf) {\n    return obj.valueOf();\n  }\n};\nvar clone = exports.clone;\n\n/*!\n * ignore\n */\n\nexports.promiseOrCallback = function promiseOrCallback(callback, fn) {\n  if (typeof callback === 'function') {\n    try {\n      return fn(callback);\n    } catch (error) {\n      return process.nextTick(() => {\n        throw error;\n      });\n    }\n  }\n\n  const Promise = PromiseProvider.get();\n\n  return new Promise((resolve, reject) => {\n    fn(function(error, res) {\n      if (error != null) {\n        return reject(error);\n      }\n      if (arguments.length > 2) {\n        return resolve(Array.prototype.slice.call(arguments, 1));\n      }\n      resolve(res);\n    });\n  });\n};\n\n/*!\n * ignore\n */\n\nfunction cloneObject(obj, options) {\n  const minimize = options && options.minimize;\n  const ret = {};\n  let hasKeys;\n  let val;\n  let k;\n\n  for (k in obj) {\n    val = clone(obj[k], options);\n\n    if (!minimize || (typeof val !== 'undefined')) {\n      hasKeys || (hasKeys = true);\n      ret[k] = val;\n    }\n  }\n\n  return minimize ? hasKeys && ret : ret;\n}\n\nfunction cloneArray(arr, options) {\n  var ret = [];\n  for (var i = 0, l = arr.length; i < l; i++) {\n    ret.push(clone(arr[i], options));\n  }\n  return ret;\n}\n\n/*!\n * Shallow copies defaults into options.\n *\n * @param {Object} defaults\n * @param {Object} options\n * @return {Object} the merged object\n * @api private\n */\n\nexports.options = function(defaults, options) {\n  var keys = Object.keys(defaults),\n      i = keys.length,\n      k;\n\n  options = options || {};\n\n  while (i--) {\n    k = keys[i];\n    if (!(k in options)) {\n      options[k] = defaults[k];\n    }\n  }\n\n  return options;\n};\n\n/*!\n * Generates a random string\n *\n * @api private\n */\n\nexports.random = function() {\n  return Math.random().toString().substr(3);\n};\n\n/*!\n * Merges `from` into `to` without overwriting existing properties.\n *\n * @param {Object} to\n * @param {Object} from\n * @api private\n */\n\nexports.merge = function merge(to, from, options, path) {\n  options = options || {};\n\n  const keys = Object.keys(from);\n  let i = 0;\n  const len = keys.length;\n  let key;\n\n  path = path || '';\n  const omitNested = options.omitNested || {};\n\n  while (i < len) {\n    key = keys[i++];\n    if (options.omit && options.omit[key]) {\n      continue;\n    }\n    if (omitNested[path]) {\n      continue;\n    }\n    if (to[key] == null) {\n      to[key] = from[key];\n    } else if (exports.isObject(from[key])) {\n      if (!exports.isObject(to[key])) {\n        to[key] = {};\n      }\n      merge(to[key], from[key], options, path ? path + '.' + key : key);\n    } else if (options.overwrite) {\n      to[key] = from[key];\n    }\n  }\n};\n\n/*!\n * Applies toObject recursively.\n *\n * @param {Document|Array|Object} obj\n * @return {Object}\n * @api private\n */\n\nexports.toObject = function toObject(obj) {\n  Document || (Document = require('./document'));\n  var ret;\n\n  if (obj == null) {\n    return obj;\n  }\n\n  if (obj instanceof Document) {\n    return obj.toObject();\n  }\n\n  if (Array.isArray(obj)) {\n    ret = [];\n\n    for (var i = 0, len = obj.length; i < len; ++i) {\n      ret.push(toObject(obj[i]));\n    }\n\n    return ret;\n  }\n\n  if ((obj.constructor && exports.getFunctionName(obj.constructor) === 'Object') ||\n      (!obj.constructor && exports.isObject(obj))) {\n    ret = {};\n\n    for (var k in obj) {\n      ret[k] = toObject(obj[k]);\n    }\n\n    return ret;\n  }\n\n  return obj;\n};\n\n/*!\n * Determines if `arg` is an object.\n *\n * @param {Object|Array|String|Function|RegExp|any} arg\n * @api private\n * @return {Boolean}\n */\n\nexports.isObject = function(arg) {\n  if (Buffer.isBuffer(arg)) {\n    return true;\n  }\n  return Object.prototype.toString.call(arg) === '[object Object]';\n};\n\n/*!\n * A faster Array.prototype.slice.call(arguments) alternative\n * @api private\n */\n\nexports.args = sliced;\n\n/*!\n * process.nextTick helper.\n *\n * Wraps `callback` in a try/catch + nextTick.\n *\n * node-mongodb-native has a habit of state corruption when an error is immediately thrown from within a collection callback.\n *\n * @param {Function} callback\n * @api private\n */\n\nexports.tick = function tick(callback) {\n  if (typeof callback !== 'function') {\n    return;\n  }\n  return function() {\n    try {\n      callback.apply(this, arguments);\n    } catch (err) {\n      // only nextTick on err to get out of\n      // the event loop and avoid state corruption.\n      process.nextTick(function() {\n        throw err;\n      });\n    }\n  };\n};\n\n/*!\n * Returns if `v` is a mongoose object that has a `toObject()` method we can use.\n *\n * This is for compatibility with libs like Date.js which do foolish things to Natives.\n *\n * @param {any} v\n * @api private\n */\n\nexports.isMongooseObject = function(v) {\n  Document || (Document = require('./document'));\n  MongooseArray || (MongooseArray = require('./types').Array);\n  MongooseBuffer || (MongooseBuffer = require('./types').Buffer);\n\n  return v instanceof Document ||\n      (v && v.isMongooseArray) ||\n      (v && v.isMongooseBuffer);\n};\nvar isMongooseObject = exports.isMongooseObject;\n\n/*!\n * Converts `expires` options of index objects to `expiresAfterSeconds` options for MongoDB.\n *\n * @param {Object} object\n * @api private\n */\n\nexports.expires = function expires(object) {\n  if (!(object && object.constructor.name === 'Object')) {\n    return;\n  }\n  if (!('expires' in object)) {\n    return;\n  }\n\n  var when;\n  if (typeof object.expires !== 'string') {\n    when = object.expires;\n  } else {\n    when = Math.round(ms(object.expires) / 1000);\n  }\n  object.expireAfterSeconds = when;\n  delete object.expires;\n};\n\n/*!\n * Populate options constructor\n */\n\nfunction PopulateOptions(path, select, match, options, model, subPopulate) {\n  this.path = path;\n  this.match = match;\n  this.select = select;\n  this.options = options;\n  this.model = model;\n  if (typeof subPopulate === 'object') {\n    this.populate = subPopulate;\n  }\n  this._docs = {};\n}\n\n// make it compatible with utils.clone\nPopulateOptions.prototype.constructor = Object;\n\n// expose\nexports.PopulateOptions = PopulateOptions;\n\n/*!\n * populate helper\n */\n\nexports.populate = function populate(path, select, model, match, options, subPopulate) {\n  // The order of select/conditions args is opposite Model.find but\n  // necessary to keep backward compatibility (select could be\n  // an array, string, or object literal).\n\n  // might have passed an object specifying all arguments\n  if (arguments.length === 1) {\n    if (path instanceof PopulateOptions) {\n      return [path];\n    }\n\n    if (Array.isArray(path)) {\n      return path.map(function(o) {\n        return exports.populate(o)[0];\n      });\n    }\n\n    if (exports.isObject(path)) {\n      match = path.match;\n      options = path.options;\n      select = path.select;\n      model = path.model;\n      subPopulate = path.populate;\n      path = path.path;\n    }\n  } else if (typeof model !== 'string' && typeof model !== 'function') {\n    options = match;\n    match = model;\n    model = undefined;\n  }\n\n  if (typeof path !== 'string') {\n    throw new TypeError('utils.populate: invalid path. Expected string. Got typeof `' + typeof path + '`');\n  }\n\n  if (typeof subPopulate === 'object') {\n    subPopulate = exports.populate(subPopulate);\n  }\n\n  var ret = [];\n  var paths = path.split(' ');\n  options = exports.clone(options);\n  for (var i = 0; i < paths.length; ++i) {\n    ret.push(new PopulateOptions(paths[i], select, match, options, model, subPopulate));\n  }\n\n  return ret;\n};\n\n/*!\n * Return the value of `obj` at the given `path`.\n *\n * @param {String} path\n * @param {Object} obj\n */\n\nexports.getValue = function(path, obj, map) {\n  return mpath.get(path, obj, '_doc', map);\n};\n\n/*!\n * Sets the value of `obj` at the given `path`.\n *\n * @param {String} path\n * @param {Anything} val\n * @param {Object} obj\n */\n\nexports.setValue = function(path, val, obj, map) {\n  mpath.set(path, val, obj, '_doc', map);\n};\n\n/*!\n * Returns an array of values from object `o`.\n *\n * @param {Object} o\n * @return {Array}\n * @private\n */\n\nexports.object = {};\nexports.object.vals = function vals(o) {\n  var keys = Object.keys(o),\n      i = keys.length,\n      ret = [];\n\n  while (i--) {\n    ret.push(o[keys[i]]);\n  }\n\n  return ret;\n};\n\n/*!\n * @see exports.options\n */\n\nexports.object.shallowCopy = exports.options;\n\n/*!\n * Safer helper for hasOwnProperty checks\n *\n * @param {Object} obj\n * @param {String} prop\n */\n\nvar hop = Object.prototype.hasOwnProperty;\nexports.object.hasOwnProperty = function(obj, prop) {\n  return hop.call(obj, prop);\n};\n\n/*!\n * Determine if `val` is null or undefined\n *\n * @return {Boolean}\n */\n\nexports.isNullOrUndefined = function(val) {\n  return val === null || val === undefined;\n};\n\n/*!\n * ignore\n */\n\nexports.array = {};\n\n/*!\n * Flattens an array.\n *\n * [ 1, [ 2, 3, [4] ]] -> [1,2,3,4]\n *\n * @param {Array} arr\n * @param {Function} [filter] If passed, will be invoked with each item in the array. If `filter` returns a falsey value, the item will not be included in the results.\n * @return {Array}\n * @private\n */\n\nexports.array.flatten = function flatten(arr, filter, ret) {\n  ret || (ret = []);\n\n  arr.forEach(function(item) {\n    if (Array.isArray(item)) {\n      flatten(item, filter, ret);\n    } else {\n      if (!filter || filter(item)) {\n        ret.push(item);\n      }\n    }\n  });\n\n  return ret;\n};\n\n/*!\n * Removes duplicate values from an array\n *\n * [1, 2, 3, 3, 5] => [1, 2, 3, 5]\n * [ ObjectId(\"550988ba0c19d57f697dc45e\"), ObjectId(\"550988ba0c19d57f697dc45e\") ]\n *    => [ObjectId(\"550988ba0c19d57f697dc45e\")]\n *\n * @param {Array} arr\n * @return {Array}\n * @private\n */\n\nexports.array.unique = function(arr) {\n  var primitives = {};\n  var ids = {};\n  var ret = [];\n  var length = arr.length;\n  for (var i = 0; i < length; ++i) {\n    if (typeof arr[i] === 'number' || typeof arr[i] === 'string') {\n      if (primitives[arr[i]]) {\n        continue;\n      }\n      ret.push(arr[i]);\n      primitives[arr[i]] = true;\n    } else if (arr[i] instanceof ObjectId) {\n      if (ids[arr[i].toString()]) {\n        continue;\n      }\n      ret.push(arr[i]);\n      ids[arr[i].toString()] = true;\n    } else {\n      ret.push(arr[i]);\n    }\n  }\n\n  return ret;\n};\n\n/*!\n * Determines if two buffers are equal.\n *\n * @param {Buffer} a\n * @param {Object} b\n */\n\nexports.buffer = {};\nexports.buffer.areEqual = function(a, b) {\n  if (!Buffer.isBuffer(a)) {\n    return false;\n  }\n  if (!Buffer.isBuffer(b)) {\n    return false;\n  }\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (var i = 0, len = a.length; i < len; ++i) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexports.getFunctionName = function(fn) {\n  if (fn.name) {\n    return fn.name;\n  }\n  return (fn.toString().trim().match(/^function\\s*([^\\s(]+)/) || [])[1];\n};\n\nexports.decorate = function(destination, source) {\n  for (var key in source) {\n    destination[key] = source[key];\n  }\n};\n\n/**\n * merges to with a copy of from\n *\n * @param {Object} to\n * @param {Object} fromObj\n * @api private\n */\n\nexports.mergeClone = function(to, fromObj) {\n  if (isMongooseObject(fromObj)) {\n    fromObj = fromObj.toObject({\n      transform: false,\n      virtuals: false,\n      depopulate: true,\n      getters: false,\n      flattenDecimals: false\n    });\n  }\n  var keys = Object.keys(fromObj);\n  var len = keys.length;\n  var i = 0;\n  var key;\n\n  while (i < len) {\n    key = keys[i++];\n    if (typeof to[key] === 'undefined') {\n      to[key] = exports.clone(fromObj[key], {\n        transform: false,\n        virtuals: false,\n        depopulate: true,\n        getters: false,\n        flattenDecimals: false\n      });\n    } else {\n      var val = fromObj[key];\n      if (val != null && val.valueOf && !(val instanceof Date)) {\n        val = val.valueOf();\n      }\n      if (exports.isObject(val)) {\n        var obj = val;\n        if (isMongooseObject(val) && !val.isMongooseBuffer) {\n          obj = obj.toObject({\n            transform: false,\n            virtuals: false,\n            depopulate: true,\n            getters: false,\n            flattenDecimals: false\n          });\n        }\n        if (val.isMongooseBuffer) {\n          obj = new Buffer(obj);\n        }\n        exports.mergeClone(to[key], obj);\n      } else {\n        to[key] = exports.clone(val, {\n          flattenDecimals: false\n        });\n      }\n    }\n  }\n};\n\n/**\n * Executes a function on each element of an array (like _.each)\n *\n * @param {Array} arr\n * @param {Function} fn\n * @api private\n */\n\nexports.each = function(arr, fn) {\n  for (var i = 0; i < arr.length; ++i) {\n    fn(arr[i]);\n  }\n};\n\n/*!\n * Centralize this so we can more easily work around issues with people\n * stubbing out `process.nextTick()` in tests using sinon:\n * https://github.com/sinonjs/lolex#automatically-incrementing-mocked-time\n * See gh-6074\n */\n\nexports.immediate = function immediate(cb) {\n  return process.nextTick(cb);\n};\n\n/*!\n * ignore\n */\n\nexports.noop = function() {};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/utils.js\n// module id = 26\n// module chunks = 0","'use strict';\n\nvar util = require('util');\n\n/**\n * Creates a new MongoError\n * @class\n * @augments Error\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {string} stack The error call stack\n * @return {MongoError} A MongoError instance\n */\nfunction MongoError(message) {\n  var tmp = Error.apply(this, arguments);\n  tmp.name = this.name = 'MongoError';\n\n  if (message instanceof Error) {\n    this.message = message.message;\n    this.stack = message.stack;\n  } else {\n    if (typeof message === 'string') {\n      this.message = message;\n    } else {\n      this.message = message.message || message.errmsg || message.$err || 'n/a';\n      for (var name in message) {\n        this[name] = message[name];\n      }\n    }\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\nutil.inherits(MongoError, Error);\n\n/**\n * Creates a new MongoError object\n * @method\n * @param {Error|string|object} options The options used to create the error.\n * @return {MongoError} A MongoError instance\n * @deprecated Use `new MongoError()` instead.\n */\nMongoError.create = function(options) {\n  return new MongoError(options);\n};\n\n/**\n * Creates a new MongoNetworkError\n * @class\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {string} stack The error call stack\n * @return {MongoNetworkError} A MongoNetworkError instance\n * @extends {MongoError}\n */\nvar MongoNetworkError = function(message) {\n  MongoError.call(this, message);\n  this.name = 'MongoNetworkError';\n};\nutil.inherits(MongoNetworkError, MongoError);\n\n/**\n * An error used when attempting to parse a value (like a connection string)\n *\n * @class\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @return {MongoParseError} A MongoNetworkError instance\n * @extends {MongoError}\n */\nconst MongoParseError = function(message) {\n  MongoError.call(this, message);\n  this.name = 'MongoParseError';\n};\nutil.inherits(MongoParseError, MongoError);\n\nmodule.exports = {\n  MongoError: MongoError,\n  MongoNetworkError: MongoNetworkError,\n  MongoParseError: MongoParseError\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/error.js\n// module id = 27\n// module chunks = 0","\n/**\n * MongooseError constructor\n *\n * @param {String} msg Error message\n * @inherits Error https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error\n */\n\nfunction MongooseError(msg) {\n  Error.call(this);\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this);\n  } else {\n    this.stack = new Error().stack;\n  }\n  this.message = msg;\n  this.name = 'MongooseError';\n}\n\n/*!\n * Inherits from Error.\n */\n\nMongooseError.prototype = Object.create(Error.prototype);\nMongooseError.prototype.constructor = Error;\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = MongooseError;\n\n/**\n * The default built-in validator error messages.\n *\n * @see Error.messages #error_messages_MongooseError-messages\n * @api public\n */\n\nMongooseError.messages = require('./messages');\n\n// backward compat\nMongooseError.Messages = MongooseError.messages;\n\n/**\n * An instance of this error class will be returned when `save()` fails\n * because the underlying\n * document was not found. The constructor takes one parameter, the\n * conditions that mongoose passed to `update()` when trying to update\n * the document.\n *\n * @api public\n */\n\nMongooseError.DocumentNotFoundError = require('./notFound');\n\n/**\n * An instance of this error class will be returned when mongoose failed to\n * cast a value.\n *\n * @api public\n */\n\nMongooseError.CastError = require('./cast');\n\n/**\n * An instance of this error class will be returned when [validation](/docs/validation.html) failed.\n *\n * @api public\n */\n\nMongooseError.ValidationError = require('./validation');\n\n/**\n * A `ValidationError` has a hash of `errors` that contain individual `ValidatorError` instances\n *\n * @api public\n */\n\nMongooseError.ValidatorError = require('./validator');\n\n/**\n * An instance of this error class will be returned when you call `save()` after\n * the document in the database was changed in a potentially unsafe way. See\n * the [`versionKey` option](/docs/guide.html#versionKey) for more information.\n *\n * @api public\n */\n\nMongooseError.VersionError = require('./version');\n\n/**\n * Thrown when a model with the given name was already registered on the connection.\n * See [the FAQ about `OverwriteModelError`](/docs/faq.html#overwrite-model-error).\n *\n * @api public\n */\n\nMongooseError.OverwriteModelError = require('./overwriteModel');\n\n/**\n * Thrown when you try to access a model that has not been registered yet\n *\n * @api public\n */\n\nMongooseError.MissingSchemaError = require('./missingSchema');\n\n/**\n * An instance of this error will be returned if you used an array projection\n * and then modified the array in an unsafe way.\n *\n * @api public\n */\n\nMongooseError.DivergentArrayError = require('./divergentArray');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/error/index.js\n// module id = 28\n// module chunks = 0","module.exports = require(\"events\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"events\"\n// module id = 29\n// module chunks = 0","'use strict';\n\nconst os = require('os'),\n  f = require('util').format,\n  ReadPreference = require('./read_preference'),\n  retrieveBSON = require('../connection/utils').retrieveBSON;\n\nconst BSON = retrieveBSON();\n\n/**\n * Emit event if it exists\n * @method\n */\nfunction emitSDAMEvent(self, event, description) {\n  if (self.listeners(event).length > 0) {\n    self.emit(event, description);\n  }\n}\n\n// Get package.json variable\nvar driverVersion = require('../../package.json').version;\nvar nodejsversion = f('Node.js %s, %s', process.version, os.endianness());\nvar type = os.type();\nvar name = process.platform;\nvar architecture = process.arch;\nvar release = os.release();\n\nfunction createClientInfo(options) {\n  // Build default client information\n  var clientInfo = options.clientInfo\n    ? clone(options.clientInfo)\n    : {\n        driver: {\n          name: 'nodejs-core',\n          version: driverVersion\n        },\n        os: {\n          type: type,\n          name: name,\n          architecture: architecture,\n          version: release\n        }\n      };\n\n  // Is platform specified\n  if (clientInfo.platform && clientInfo.platform.indexOf('mongodb-core') === -1) {\n    clientInfo.platform = f('%s, mongodb-core: %s', clientInfo.platform, driverVersion);\n  } else if (!clientInfo.platform) {\n    clientInfo.platform = nodejsversion;\n  }\n\n  // Do we have an application specific string\n  if (options.appname) {\n    // Cut at 128 bytes\n    var buffer = new Buffer(options.appname);\n    // Return the truncated appname\n    var appname = buffer.length > 128 ? buffer.slice(0, 128).toString('utf8') : options.appname;\n    // Add to the clientInfo\n    clientInfo.application = { name: appname };\n  }\n\n  return clientInfo;\n}\n\nfunction createCompressionInfo(options) {\n  if (!options.compression || !options.compression.compressors) {\n    return [];\n  }\n\n  // Check that all supplied compressors are valid\n  options.compression.compressors.forEach(function(compressor) {\n    if (compressor !== 'snappy' && compressor !== 'zlib') {\n      throw new Error('compressors must be at least one of snappy or zlib');\n    }\n  });\n\n  return options.compression.compressors;\n}\n\nfunction clone(object) {\n  return JSON.parse(JSON.stringify(object));\n}\n\nvar getPreviousDescription = function(self) {\n  if (!self.s.serverDescription) {\n    self.s.serverDescription = {\n      address: self.name,\n      arbiters: [],\n      hosts: [],\n      passives: [],\n      type: 'Unknown'\n    };\n  }\n\n  return self.s.serverDescription;\n};\n\nvar emitServerDescriptionChanged = function(self, description) {\n  if (self.listeners('serverDescriptionChanged').length > 0) {\n    // Emit the server description changed events\n    self.emit('serverDescriptionChanged', {\n      topologyId: self.s.topologyId !== -1 ? self.s.topologyId : self.id,\n      address: self.name,\n      previousDescription: getPreviousDescription(self),\n      newDescription: description\n    });\n\n    self.s.serverDescription = description;\n  }\n};\n\nvar getPreviousTopologyDescription = function(self) {\n  if (!self.s.topologyDescription) {\n    self.s.topologyDescription = {\n      topologyType: 'Unknown',\n      servers: [\n        {\n          address: self.name,\n          arbiters: [],\n          hosts: [],\n          passives: [],\n          type: 'Unknown'\n        }\n      ]\n    };\n  }\n\n  return self.s.topologyDescription;\n};\n\nvar emitTopologyDescriptionChanged = function(self, description) {\n  if (self.listeners('topologyDescriptionChanged').length > 0) {\n    // Emit the server description changed events\n    self.emit('topologyDescriptionChanged', {\n      topologyId: self.s.topologyId !== -1 ? self.s.topologyId : self.id,\n      address: self.name,\n      previousDescription: getPreviousTopologyDescription(self),\n      newDescription: description\n    });\n\n    self.s.serverDescription = description;\n  }\n};\n\nvar changedIsMaster = function(self, currentIsmaster, ismaster) {\n  var currentType = getTopologyType(self, currentIsmaster);\n  var newType = getTopologyType(self, ismaster);\n  if (newType !== currentType) return true;\n  return false;\n};\n\nvar getTopologyType = function(self, ismaster) {\n  if (!ismaster) {\n    ismaster = self.ismaster;\n  }\n\n  if (!ismaster) return 'Unknown';\n  if (ismaster.ismaster && ismaster.msg === 'isdbgrid') return 'Mongos';\n  if (ismaster.ismaster && !ismaster.hosts) return 'Standalone';\n  if (ismaster.ismaster) return 'RSPrimary';\n  if (ismaster.secondary) return 'RSSecondary';\n  if (ismaster.arbiterOnly) return 'RSArbiter';\n  return 'Unknown';\n};\n\nvar inquireServerState = function(self) {\n  return function(callback) {\n    if (self.s.state === 'destroyed') return;\n    // Record response time\n    var start = new Date().getTime();\n\n    // emitSDAMEvent\n    emitSDAMEvent(self, 'serverHeartbeatStarted', { connectionId: self.name });\n\n    // Attempt to execute ismaster command\n    self.command('admin.$cmd', { ismaster: true }, { monitoring: true }, function(err, r) {\n      if (!err) {\n        // Legacy event sender\n        self.emit('ismaster', r, self);\n\n        // Calculate latencyMS\n        var latencyMS = new Date().getTime() - start;\n\n        // Server heart beat event\n        emitSDAMEvent(self, 'serverHeartbeatSucceeded', {\n          durationMS: latencyMS,\n          reply: r.result,\n          connectionId: self.name\n        });\n\n        // Did the server change\n        if (changedIsMaster(self, self.s.ismaster, r.result)) {\n          // Emit server description changed if something listening\n          emitServerDescriptionChanged(self, {\n            address: self.name,\n            arbiters: [],\n            hosts: [],\n            passives: [],\n            type: !self.s.inTopology ? 'Standalone' : getTopologyType(self)\n          });\n        }\n\n        // Updat ismaster view\n        self.s.ismaster = r.result;\n\n        // Set server response time\n        self.s.isMasterLatencyMS = latencyMS;\n      } else {\n        emitSDAMEvent(self, 'serverHeartbeatFailed', {\n          durationMS: latencyMS,\n          failure: err,\n          connectionId: self.name\n        });\n      }\n\n      // Peforming an ismaster monitoring callback operation\n      if (typeof callback === 'function') {\n        return callback(err, r);\n      }\n\n      // Perform another sweep\n      self.s.inquireServerStateTimeout = setTimeout(inquireServerState(self), self.s.haInterval);\n    });\n  };\n};\n\n//\n// Clone the options\nvar cloneOptions = function(options) {\n  var opts = {};\n  for (var name in options) {\n    opts[name] = options[name];\n  }\n  return opts;\n};\n\nfunction Interval(fn, time) {\n  var timer = false;\n\n  this.start = function() {\n    if (!this.isRunning()) {\n      timer = setInterval(fn, time);\n    }\n\n    return this;\n  };\n\n  this.stop = function() {\n    clearInterval(timer);\n    timer = false;\n    return this;\n  };\n\n  this.isRunning = function() {\n    return timer !== false;\n  };\n}\n\nfunction Timeout(fn, time) {\n  var timer = false;\n\n  this.start = function() {\n    if (!this.isRunning()) {\n      timer = setTimeout(fn, time);\n    }\n    return this;\n  };\n\n  this.stop = function() {\n    clearTimeout(timer);\n    timer = false;\n    return this;\n  };\n\n  this.isRunning = function() {\n    if (timer && timer._called) return false;\n    return timer !== false;\n  };\n}\n\nfunction diff(previous, current) {\n  // Difference document\n  var diff = {\n    servers: []\n  };\n\n  // Previous entry\n  if (!previous) {\n    previous = { servers: [] };\n  }\n\n  // Check if we have any previous servers missing in the current ones\n  for (var i = 0; i < previous.servers.length; i++) {\n    var found = false;\n\n    for (var j = 0; j < current.servers.length; j++) {\n      if (current.servers[j].address.toLowerCase() === previous.servers[i].address.toLowerCase()) {\n        found = true;\n        break;\n      }\n    }\n\n    if (!found) {\n      // Add to the diff\n      diff.servers.push({\n        address: previous.servers[i].address,\n        from: previous.servers[i].type,\n        to: 'Unknown'\n      });\n    }\n  }\n\n  // Check if there are any severs that don't exist\n  for (j = 0; j < current.servers.length; j++) {\n    found = false;\n\n    // Go over all the previous servers\n    for (i = 0; i < previous.servers.length; i++) {\n      if (previous.servers[i].address.toLowerCase() === current.servers[j].address.toLowerCase()) {\n        found = true;\n        break;\n      }\n    }\n\n    // Add the server to the diff\n    if (!found) {\n      diff.servers.push({\n        address: current.servers[j].address,\n        from: 'Unknown',\n        to: current.servers[j].type\n      });\n    }\n  }\n\n  // Got through all the servers\n  for (i = 0; i < previous.servers.length; i++) {\n    var prevServer = previous.servers[i];\n\n    // Go through all current servers\n    for (j = 0; j < current.servers.length; j++) {\n      var currServer = current.servers[j];\n\n      // Matching server\n      if (prevServer.address.toLowerCase() === currServer.address.toLowerCase()) {\n        // We had a change in state\n        if (prevServer.type !== currServer.type) {\n          diff.servers.push({\n            address: prevServer.address,\n            from: prevServer.type,\n            to: currServer.type\n          });\n        }\n      }\n    }\n  }\n\n  // Return difference\n  return diff;\n}\n\n/**\n * Shared function to determine clusterTime for a given topology\n *\n * @param {*} topology\n * @param {*} clusterTime\n */\nfunction resolveClusterTime(topology, $clusterTime) {\n  if (topology.clusterTime == null) {\n    topology.clusterTime = $clusterTime;\n  } else {\n    if ($clusterTime.clusterTime.greaterThan(topology.clusterTime.clusterTime)) {\n      topology.clusterTime = $clusterTime;\n    }\n  }\n}\n\n// NOTE: this is a temporary move until the topologies can be more formally refactored\n//       to share code.\nconst SessionMixins = {\n  endSessions: function(sessions, callback) {\n    if (!Array.isArray(sessions)) {\n      sessions = [sessions];\n    }\n\n    // TODO:\n    //   When connected to a sharded cluster the endSessions command\n    //   can be sent to any mongos. When connected to a replica set the\n    //   endSessions command MUST be sent to the primary if the primary\n    //   is available, otherwise it MUST be sent to any available secondary.\n    //   Is it enough to use: ReadPreference.primaryPreferred ?\n    this.command(\n      'admin.$cmd',\n      { endSessions: sessions },\n      { readPreference: ReadPreference.primaryPreferred },\n      () => {\n        // intentionally ignored, per spec\n        if (typeof callback === 'function') callback();\n      }\n    );\n  }\n};\n\nconst RETRYABLE_WIRE_VERSION = 6;\n\n/**\n * Determines whether the provided topology supports retryable writes\n *\n * @param {Mongos|Replset} topology\n */\nconst isRetryableWritesSupported = function(topology) {\n  const maxWireVersion = topology.lastIsMaster().maxWireVersion;\n  if (maxWireVersion < RETRYABLE_WIRE_VERSION) {\n    return false;\n  }\n\n  if (!topology.logicalSessionTimeoutMinutes) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Increment the transaction number on the ServerSession contained by the provided ClientSession\n *\n * @param {ClientSession} session\n */\nconst getNextTransactionNumber = function(session) {\n  session.serverSession.txnNumber++;\n  return BSON.Long.fromNumber(session.serverSession.txnNumber);\n};\n\nmodule.exports.SessionMixins = SessionMixins;\nmodule.exports.resolveClusterTime = resolveClusterTime;\nmodule.exports.inquireServerState = inquireServerState;\nmodule.exports.getTopologyType = getTopologyType;\nmodule.exports.emitServerDescriptionChanged = emitServerDescriptionChanged;\nmodule.exports.emitTopologyDescriptionChanged = emitTopologyDescriptionChanged;\nmodule.exports.cloneOptions = cloneOptions;\nmodule.exports.createClientInfo = createClientInfo;\nmodule.exports.createCompressionInfo = createCompressionInfo;\nmodule.exports.clone = clone;\nmodule.exports.diff = diff;\nmodule.exports.Interval = Interval;\nmodule.exports.Timeout = Timeout;\nmodule.exports.isRetryableWritesSupported = isRetryableWritesSupported;\nmodule.exports.getNextTransactionNumber = getNextTransactionNumber;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/topologies/shared.js\n// module id = 30\n// module chunks = 0","'use strict';\n\n/*!\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter;\nvar MongooseError = require('./error');\nvar MixedSchema = require('./schema/mixed');\nvar Schema = require('./schema');\nvar ObjectExpectedError = require('./error/objectExpected');\nvar ObjectParameterError = require('./error/objectParameter');\nvar StrictModeError = require('./error/strict');\nvar ValidatorError = require('./schematype').ValidatorError;\nvar VirtualType = require('./virtualtype');\nvar utils = require('./utils');\nvar clone = utils.clone;\nvar isDefiningProjection = require('./services/projection/isDefiningProjection');\nvar isExclusive = require('./services/projection/isExclusive');\nvar isMongooseObject = utils.isMongooseObject;\nvar inspect = require('util').inspect;\nvar internalToObjectOptions = require('./options').internalToObjectOptions;\nvar ValidationError = MongooseError.ValidationError;\nvar InternalCache = require('./internal');\nvar cleanModifiedSubpaths = require('./services/document/cleanModifiedSubpaths');\nvar compile = require('./services/document/compile').compile;\nvar deepEqual = utils.deepEqual;\nvar defineKey = require('./services/document/compile').defineKey;\nvar DocumentArray;\nvar MongooseArray;\nvar Embedded;\nvar flatten = require('./services/common').flatten;\nvar mpath = require('mpath');\nvar idGetter = require('./plugins/idGetter');\n\n/**\n * Document constructor.\n *\n * @param {Object} obj the values to set\n * @param {Object} [fields] optional object containing the fields which were selected in the query returning this document and any populated paths data\n * @param {Boolean} [skipId] bool, should we auto create an ObjectId _id\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `init`: Emitted on a document after it has was retreived from the db and fully hydrated by Mongoose.\n * @event `save`: Emitted when the document is successfully saved\n * @api private\n */\n\nfunction Document(obj, fields, skipId, options) {\n  this.$__ = new InternalCache;\n  this.$__.emitter = new EventEmitter();\n  this.isNew = true;\n  this.errors = undefined;\n  this.$__.$options = options || {};\n\n  if (obj != null && typeof obj !== 'object') {\n    throw new ObjectParameterError(obj, 'obj', 'Document');\n  }\n\n  var schema = this.schema;\n\n  if (typeof fields === 'boolean') {\n    this.$__.strictMode = fields;\n    fields = undefined;\n  } else {\n    this.$__.strictMode = schema.options && schema.options.strict;\n    this.$__.selected = fields;\n  }\n\n  var required = schema.requiredPaths(true);\n  for (var i = 0; i < required.length; ++i) {\n    this.$__.activePaths.require(required[i]);\n  }\n\n  this.$__.emitter.setMaxListeners(0);\n\n  let exclude = null;\n\n  // determine if this doc is a result of a query with\n  // excluded fields\n  if (fields && utils.getFunctionName(fields.constructor) === 'Object') {\n    exclude = isExclusive(fields);\n  }\n\n  let hasIncludedChildren = exclude === false && fields ?\n    $__hasIncludedChildren(fields) :\n    {};\n\n  this.$__buildDoc(obj, fields, skipId, exclude, hasIncludedChildren);\n\n  // By default, defaults get applied **before** setting initial values\n  // Re: gh-6155\n  $__applyDefaults(this, fields, skipId, exclude, hasIncludedChildren, true);\n\n  if (obj) {\n    if (obj instanceof Document) {\n      this.isNew = obj.isNew;\n    }\n    // Skip set hooks\n    if (this.$__original_set) {\n      this.$__original_set(obj, undefined, true);\n    } else {\n      this.$set(obj, undefined, true);\n    }\n  }\n\n  // Function defaults get applied **after** setting initial values so they\n  // see the full doc rather than an empty one, unless they opt out.\n  // Re: gh-3781, gh-6155\n  $__applyDefaults(this, fields, skipId, exclude, hasIncludedChildren, false);\n\n  this.$__._id = this._id;\n\n  if (!schema.options.strict && obj) {\n    var _this = this,\n        keys = Object.keys(this._doc);\n\n    keys.forEach(function(key) {\n      if (!(key in schema.tree)) {\n        defineKey(key, null, _this);\n      }\n    });\n  }\n\n  applyQueue(this);\n}\n\n/*!\n * Document exposes the NodeJS event emitter API, so you can use\n * `on`, `once`, etc.\n */\nutils.each(\n  ['on', 'once', 'emit', 'listeners', 'removeListener', 'setMaxListeners',\n    'removeAllListeners', 'addListener'],\n  function(emitterFn) {\n    Document.prototype[emitterFn] = function() {\n      return this.$__.emitter[emitterFn].apply(this.$__.emitter, arguments);\n    };\n  });\n\nDocument.prototype.constructor = Document;\n\n/**\n * The documents schema.\n *\n * @api public\n * @property schema\n * @memberOf Document\n */\n\nDocument.prototype.schema;\n\n/**\n * Boolean flag specifying if the document is new.\n *\n * @api public\n * @property isNew\n * @memberOf Document\n */\n\nDocument.prototype.isNew;\n\n/**\n * The string version of this documents _id.\n *\n * ####Note:\n *\n * This getter exists on all documents by default. The getter can be disabled by setting the `id` [option](/docs/guide.html#id) of its `Schema` to false at construction time.\n *\n *     new Schema({ name: String }, { id: false });\n *\n * @api public\n * @see Schema options /docs/guide.html#options\n * @property id\n * @memberOf Document\n */\n\nDocument.prototype.id;\n\n/**\n * Hash containing current validation errors.\n *\n * @api public\n * @property errors\n * @memberOf Document\n */\n\nDocument.prototype.errors;\n\n/*!\n * ignore\n */\n\nfunction $__hasIncludedChildren(fields) {\n  let hasIncludedChildren = {};\n  let keys = Object.keys(fields);\n  for (var j = 0; j < keys.length; ++j) {\n    let parts = keys[j].split('.');\n    let c = [];\n    for (var k = 0; k < parts.length; ++k) {\n      c.push(parts[k]);\n      hasIncludedChildren[c.join('.')] = 1;\n    }\n  }\n\n  return hasIncludedChildren;\n}\n\n/*!\n * ignore\n */\n\nfunction $__applyDefaults(doc, fields, skipId, exclude, hasIncludedChildren, isBeforeSetters) {\n  const paths = Object.keys(doc.schema.paths);\n  const plen = paths.length;\n\n  for (let i = 0; i < plen; ++i) {\n    let def;\n    let curPath = '';\n    let p = paths[i];\n\n    if (p === '_id' && skipId) {\n      continue;\n    }\n\n    let type = doc.schema.paths[p];\n    let path = p.split('.');\n    let len = path.length;\n    let included = false;\n    let doc_ = doc._doc;\n\n    for (let j = 0; j < len; ++j) {\n      if (doc_ == null) {\n        break;\n      }\n\n      let piece = path[j];\n      curPath += (!curPath.length ? '' : '.') + piece;\n\n      if (exclude === true) {\n        if (curPath in fields) {\n          break;\n        }\n      } else if (exclude === false && fields && !included) {\n        if (curPath in fields) {\n          included = true;\n        } else if (!hasIncludedChildren[curPath]) {\n          break;\n        }\n      }\n\n      if (j === len - 1) {\n        if (doc_[piece] !== void 0) {\n          break;\n        }\n\n        if (typeof type.defaultValue === 'function') {\n          if (!type.defaultValue.$runBeforeSetters && isBeforeSetters) {\n            break;\n          }\n          if (type.defaultValue.$runBeforeSetters && !isBeforeSetters) {\n            break;\n          }\n        } else if (!isBeforeSetters) {\n          // Non-function defaults should always run **before** setters\n          continue;\n        }\n\n        if (fields && exclude !== null) {\n          if (exclude === true) {\n            // apply defaults to all non-excluded fields\n            if (p in fields) {\n              continue;\n            }\n\n            def = type.getDefault(doc, false);\n            if (typeof def !== 'undefined') {\n              doc_[piece] = def;\n              doc.$__.activePaths.default(p);\n            }\n          } else if (included) {\n            // selected field\n            def = type.getDefault(doc, false);\n            if (typeof def !== 'undefined') {\n              doc_[piece] = def;\n              doc.$__.activePaths.default(p);\n            }\n          }\n        } else {\n          def = type.getDefault(doc, false);\n          if (typeof def !== 'undefined') {\n            doc_[piece] = def;\n            doc.$__.activePaths.default(p);\n          }\n        }\n      } else {\n        doc_ = doc_[piece];\n      }\n    }\n  }\n}\n\n/**\n * Builds the default doc structure\n *\n * @param {Object} obj\n * @param {Object} [fields]\n * @param {Boolean} [skipId]\n * @api private\n * @method $__buildDoc\n * @memberOf Document\n */\n\nDocument.prototype.$__buildDoc = function(obj, fields, skipId, exclude, hasIncludedChildren) {\n  const doc = {};\n\n  const paths = Object.keys(this.schema.paths);\n  const plen = paths.length;\n  let ii = 0;\n\n  for (; ii < plen; ++ii) {\n    var p = paths[ii];\n\n    if (p === '_id') {\n      if (skipId) {\n        continue;\n      }\n      if (obj && '_id' in obj) {\n        continue;\n      }\n    }\n\n    const path = p.split('.');\n    const len = path.length;\n    const last = len - 1;\n    let curPath = '';\n    let doc_ = doc;\n    let included = false;\n\n    for (let i = 0; i < len; ++i) {\n      const piece = path[i];\n\n      curPath += (!curPath.length ? '' : '.') + piece;\n\n      // support excluding intermediary levels\n      if (exclude === true) {\n        if (curPath in fields) {\n          break;\n        }\n      } else if (exclude === false && fields && !included) {\n        if (curPath in fields) {\n          included = true;\n        } else if (!hasIncludedChildren[curPath]) {\n          break;\n        }\n      }\n\n      if (i < last) {\n        doc_ = doc_[piece] || (doc_[piece] = {});\n      }\n    }\n  }\n\n  this._doc = doc;\n};\n\n/*!\n * Converts to POJO when you use the document for querying\n */\n\nDocument.prototype.toBSON = function() {\n  return this.toObject(internalToObjectOptions);\n};\n\n/**\n * Initializes the document without setters or marking anything modified.\n *\n * Called internally after a document is returned from mongodb.\n *\n * @param {Object} doc document returned by mongo\n * @api public\n * @memberOf Document\n */\n\nDocument.prototype.init = function(doc, opts, fn) {\n  if (typeof opts === 'function') {\n    fn = opts;\n    opts = null;\n  }\n\n  this.$__init(doc, opts);\n\n  if (fn) {\n    fn(null, this);\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__init = function(doc, opts) {\n  this.isNew = false;\n  this.$init = true;\n\n  // handle docs with populated paths\n  // If doc._id is not null or undefined\n  if (doc._id !== null && doc._id !== undefined &&\n    opts && opts.populated && opts.populated.length) {\n    var id = String(doc._id);\n    for (var i = 0; i < opts.populated.length; ++i) {\n      var item = opts.populated[i];\n      if (item.isVirtual) {\n        this.populated(item.path, utils.getValue(item.path, doc), item);\n      } else {\n        this.populated(item.path, item._docs[id], item);\n      }\n    }\n  }\n\n  init(this, doc, this._doc);\n\n  this.emit('init', this);\n  this.constructor.emit('init', this);\n\n  this.$__._id = this._id;\n\n  return this;\n};\n\n/*!\n * Init helper.\n *\n * @param {Object} self document instance\n * @param {Object} obj raw mongodb doc\n * @param {Object} doc object we are initializing\n * @api private\n */\n\nfunction init(self, obj, doc, prefix) {\n  prefix = prefix || '';\n\n  var keys = Object.keys(obj);\n  var len = keys.length;\n  var schema;\n  var path;\n  var i;\n  var index = 0;\n\n  while (index < len) {\n    _init(index++);\n  }\n\n  function _init(index) {\n    i = keys[index];\n    path = prefix + i;\n    schema = self.schema.path(path);\n\n    // Should still work if not a model-level discriminator, but should not be\n    // necessary. This is *only* to catch the case where we queried using the\n    // base model and the discriminated model has a projection\n    if (self.schema.$isRootDiscriminator && !self.isSelected(path)) {\n      return;\n    }\n\n    if (!schema && utils.isObject(obj[i]) &&\n        (!obj[i].constructor || utils.getFunctionName(obj[i].constructor) === 'Object')) {\n      // assume nested object\n      if (!doc[i]) {\n        doc[i] = {};\n      }\n      init(self, obj[i], doc[i], path + '.');\n    } else if (!schema) {\n      doc[i] = obj[i];\n    } else {\n      if (obj[i] === null) {\n        doc[i] = null;\n      } else if (obj[i] !== undefined) {\n        if (schema) {\n          try {\n            doc[i] = schema.cast(obj[i], self, true);\n          } catch (e) {\n            self.invalidate(e.path, new ValidatorError({\n              path: e.path,\n              message: e.message,\n              type: 'cast',\n              value: e.value\n            }));\n          }\n        } else {\n          doc[i] = obj[i];\n        }\n      }\n      // mark as hydrated\n      if (!self.isModified(path)) {\n        self.$__.activePaths.init(path);\n      }\n    }\n  }\n}\n\n/**\n * Sends an update command with this document `_id` as the query selector.\n *\n * ####Example:\n *\n *     weirdCar.update({$inc: {wheels:1}}, { w: 1 }, callback);\n *\n * ####Valid options:\n *\n *  - same as in [Model.update](#model_Model.update)\n *\n * @see Model.update #model_Model.update\n * @param {Object} doc\n * @param {Object} options\n * @param {Function} callback\n * @return {Query}\n * @api public\n * @memberOf Document\n */\n\nDocument.prototype.update = function update() {\n  var args = utils.args(arguments);\n  args.unshift({_id: this._id});\n  return this.constructor.update.apply(this.constructor, args);\n};\n\n/**\n * Alias for `set()`, used internally to avoid conflicts\n *\n * @param {String|Object} path path or object of key/vals to set\n * @param {Any} val the value to set\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for \"on-the-fly\" attributes\n * @param {Object} [options] optionally specify options that modify the behavior of the set\n * @method $set\n * @name $set\n * @memberOf Document\n * @api public\n */\n\nDocument.prototype.$set = function $set(path, val, type, options) {\n  if (type && utils.getFunctionName(type.constructor) === 'Object') {\n    options = type;\n    type = undefined;\n  }\n\n  options = options || {};\n  var merge = options.merge;\n  var adhoc = type && type !== true;\n  var constructing = type === true;\n  var adhocs;\n\n  var strict = 'strict' in options\n    ? options.strict\n    : this.$__.strictMode;\n\n  if (adhoc) {\n    adhocs = this.$__.adhocPaths || (this.$__.adhocPaths = {});\n    adhocs[path] = Schema.interpretAsType(path, type, this.schema.options);\n  }\n\n  if (typeof path !== 'string') {\n    // new Document({ key: val })\n\n    if (path === null || path === void 0) {\n      var _ = path;\n      path = val;\n      val = _;\n    } else {\n      var prefix = val\n        ? val + '.'\n        : '';\n\n      if (path instanceof Document) {\n        if (path.$__isNested) {\n          path = path.toObject();\n        } else {\n          path = path._doc;\n        }\n      }\n\n      var keys = Object.keys(path);\n      var len = keys.length;\n      var i = 0;\n      var pathtype;\n      var key;\n\n      if (len === 0 && !this.schema.options.minimize) {\n        if (val) {\n          this.$set(val, {});\n        }\n        return this;\n      }\n\n      while (i < len) {\n        _handleIndex.call(this, i++);\n      }\n\n      return this;\n    }\n  }\n\n  function _handleIndex(i) {\n    key = keys[i];\n    var pathName = prefix + key;\n    pathtype = this.schema.pathType(pathName);\n\n    if (path[key] !== null\n        && path[key] !== void 0\n    // need to know if plain object - no Buffer, ObjectId, ref, etc\n        && utils.isObject(path[key])\n        && (!path[key].constructor || utils.getFunctionName(path[key].constructor) === 'Object')\n        && pathtype !== 'virtual'\n        && pathtype !== 'real'\n        && !(this.$__path(pathName) instanceof MixedSchema)\n        && !(this.schema.paths[pathName] &&\n        this.schema.paths[pathName].options &&\n        this.schema.paths[pathName].options.ref)) {\n      this.$set(path[key], prefix + key, constructing);\n    } else if (strict) {\n      // Don't overwrite defaults with undefined keys (gh-3981)\n      if (constructing && path[key] === void 0 &&\n          this.get(key) !== void 0) {\n        return;\n      }\n\n      if (pathtype === 'real' || pathtype === 'virtual') {\n        // Check for setting single embedded schema to document (gh-3535)\n        var p = path[key];\n        if (this.schema.paths[pathName] &&\n            this.schema.paths[pathName].$isSingleNested &&\n            path[key] instanceof Document) {\n          p = p.toObject({ virtuals: false, transform: false });\n        }\n        this.$set(prefix + key, p, constructing);\n      } else if (pathtype === 'nested' && path[key] instanceof Document) {\n        this.$set(prefix + key,\n          path[key].toObject({transform: false}), constructing);\n      } else if (strict === 'throw') {\n        if (pathtype === 'nested') {\n          throw new ObjectExpectedError(key, path[key]);\n        } else {\n          throw new StrictModeError(key);\n        }\n      }\n    } else if (path[key] !== void 0) {\n      this.$set(prefix + key, path[key], constructing);\n    }\n  }\n\n  var pathType = this.schema.pathType(path);\n  if (pathType === 'nested' && val) {\n    if (utils.isObject(val) &&\n        (!val.constructor || utils.getFunctionName(val.constructor) === 'Object')) {\n      if (!merge) {\n        this.setValue(path, null);\n        cleanModifiedSubpaths(this, path);\n      }\n\n      if (Object.keys(val).length === 0) {\n        this.setValue(path, {});\n        this.markModified(path);\n        cleanModifiedSubpaths(this, path);\n      } else {\n        this.$set(val, path, constructing);\n      }\n      return this;\n    }\n    this.invalidate(path, new MongooseError.CastError('Object', val, path));\n    return this;\n  }\n\n  var schema;\n  var parts = path.split('.');\n\n  if (pathType === 'adhocOrUndefined' && strict) {\n    // check for roots that are Mixed types\n    var mixed;\n\n    for (i = 0; i < parts.length; ++i) {\n      var subpath = parts.slice(0, i + 1).join('.');\n      schema = this.schema.path(subpath);\n      if (schema instanceof MixedSchema) {\n        // allow changes to sub paths of mixed types\n        mixed = true;\n        break;\n      }\n\n      // If path is underneath a virtual, bypass everything and just set it.\n      if (i + 1 < parts.length && this.schema.pathType(subpath) === 'virtual') {\n        mpath.set(path, val, this);\n        return this;\n      }\n    }\n\n    if (!mixed) {\n      if (strict === 'throw') {\n        throw new StrictModeError(path);\n      }\n      return this;\n    }\n  } else if (pathType === 'virtual') {\n    schema = this.schema.virtualpath(path);\n    schema.applySetters(val, this);\n    return this;\n  } else {\n    schema = this.$__path(path);\n  }\n\n  // gh-4578, if setting a deeply nested path that doesn't exist yet, create it\n  var cur = this._doc;\n  var curPath = '';\n  for (i = 0; i < parts.length - 1; ++i) {\n    cur = cur[parts[i]];\n    curPath += (curPath.length > 0 ? '.' : '') + parts[i];\n    if (!cur) {\n      this.$set(curPath, {});\n      // Hack re: gh-5800. If nested field is not selected, it probably exists\n      // so `MongoError: cannot use the part (nested of nested.num) to\n      // traverse the element ({nested: null})` is not likely. If user gets\n      // that error, its their fault for now. We should reconsider disallowing\n      // modifying not selected paths for v5.\n      if (!this.isSelected(curPath)) {\n        this.unmarkModified(curPath);\n      }\n      cur = this.getValue(curPath);\n    }\n  }\n\n  var pathToMark;\n\n  // When using the $set operator the path to the field must already exist.\n  // Else mongodb throws: \"LEFT_SUBFIELD only supports Object\"\n\n  if (parts.length <= 1) {\n    pathToMark = path;\n  } else {\n    for (i = 0; i < parts.length; ++i) {\n      subpath = parts.slice(0, i + 1).join('.');\n      if (this.isDirectModified(subpath) // earlier prefixes that are already\n      // marked as dirty have precedence\n          || this.get(subpath) === null) {\n        pathToMark = subpath;\n        break;\n      }\n    }\n\n    if (!pathToMark) {\n      pathToMark = path;\n    }\n  }\n\n  // if this doc is being constructed we should not trigger getters\n  var priorVal = constructing ?\n    undefined :\n    this.getValue(path);\n\n  if (!schema) {\n    this.$__set(pathToMark, path, constructing, parts, schema, val, priorVal);\n    return this;\n  }\n\n  var shouldSet = true;\n  try {\n    // If the user is trying to set a ref path to a document with\n    // the correct model name, treat it as populated\n    var didPopulate = false;\n    if (schema.options &&\n        schema.options.ref &&\n        val instanceof Document &&\n        (schema.options.ref === val.constructor.modelName || schema.options.ref === val.constructor.baseModelName)) {\n      if (this.ownerDocument) {\n        this.ownerDocument().populated(this.$__fullPath(path),\n          val._id, {model: val.constructor});\n      } else {\n        this.populated(path, val._id, {model: val.constructor});\n      }\n      didPopulate = true;\n    }\n\n    var popOpts;\n    if (schema.options &&\n        Array.isArray(schema.options[this.schema.options.typeKey]) &&\n        schema.options[this.schema.options.typeKey].length &&\n        schema.options[this.schema.options.typeKey][0].ref &&\n        Array.isArray(val) &&\n        val.length > 0 &&\n        val[0] instanceof Document &&\n        val[0].constructor.modelName &&\n        (schema.options[this.schema.options.typeKey][0].ref === val[0].constructor.baseModelName || schema.options[this.schema.options.typeKey][0].ref === val[0].constructor.modelName)) {\n      if (this.ownerDocument) {\n        popOpts = { model: val[0].constructor };\n        this.ownerDocument().populated(this.$__fullPath(path),\n          val.map(function(v) { return v._id; }), popOpts);\n      } else {\n        popOpts = { model: val[0].constructor };\n        this.populated(path, val.map(function(v) { return v._id; }), popOpts);\n      }\n      didPopulate = true;\n    }\n\n    var setterContext = constructing && this.$__.$options.priorDoc ?\n      this.$__.$options.priorDoc :\n      this;\n    val = schema.applySetters(val, setterContext, false, priorVal);\n\n    if (!didPopulate && this.$__.populated) {\n      delete this.$__.populated[path];\n    }\n\n    this.$markValid(path);\n  } catch (e) {\n    this.invalidate(path,\n      new MongooseError.CastError(schema.instance, val, path, e));\n    shouldSet = false;\n  }\n\n  if (shouldSet) {\n    this.$__set(pathToMark, path, constructing, parts, schema, val, priorVal);\n  }\n\n  if (schema.$isSingleNested && (this.isDirectModified(path) || val == null)) {\n    cleanModifiedSubpaths(this, path);\n  }\n\n  return this;\n};\n\n/**\n * Sets the value of a path, or many paths.\n *\n * ####Example:\n *\n *     // path, value\n *     doc.set(path, value)\n *\n *     // object\n *     doc.set({\n *         path  : value\n *       , path2 : {\n *            path  : value\n *         }\n *     })\n *\n *     // on-the-fly cast to number\n *     doc.set(path, value, Number)\n *\n *     // on-the-fly cast to string\n *     doc.set(path, value, String)\n *\n *     // changing strict mode behavior\n *     doc.set(path, value, { strict: false });\n *\n * @param {String|Object} path path or object of key/vals to set\n * @param {Any} val the value to set\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for \"on-the-fly\" attributes\n * @param {Object} [options] optionally specify options that modify the behavior of the set\n * @api public\n * @method set\n * @memberOf Document\n */\n\nDocument.prototype.set = Document.prototype.$set;\n\n/**\n * Determine if we should mark this change as modified.\n *\n * @return {Boolean}\n * @api private\n * @method $__shouldModify\n * @memberOf Document\n */\n\nDocument.prototype.$__shouldModify = function(pathToMark, path, constructing, parts, schema, val, priorVal) {\n  if (this.isNew) {\n    return true;\n  }\n\n  if (undefined === val && !this.isSelected(path)) {\n    // when a path is not selected in a query, its initial\n    // value will be undefined.\n    return true;\n  }\n\n  if (undefined === val && path in this.$__.activePaths.states.default) {\n    // we're just unsetting the default value which was never saved\n    return false;\n  }\n\n  // gh-3992: if setting a populated field to a doc, don't mark modified\n  // if they have the same _id\n  if (this.populated(path) &&\n      val instanceof Document &&\n      deepEqual(val._id, priorVal)) {\n    return false;\n  }\n\n  if (!deepEqual(val, priorVal || this.get(path))) {\n    return true;\n  }\n\n  if (!constructing &&\n      val !== null &&\n      val !== undefined &&\n      path in this.$__.activePaths.states.default &&\n      deepEqual(val, schema.getDefault(this, constructing))) {\n    // a path with a default was $unset on the server\n    // and the user is setting it to the same value again\n    return true;\n  }\n  return false;\n};\n\n/**\n * Handles the actual setting of the value and marking the path modified if appropriate.\n *\n * @api private\n * @method $__set\n * @memberOf Document\n */\n\nDocument.prototype.$__set = function(pathToMark, path, constructing, parts, schema, val, priorVal) {\n  Embedded = Embedded || require('./types/embedded');\n\n  var shouldModify = this.$__shouldModify(pathToMark, path, constructing, parts,\n    schema, val, priorVal);\n  var _this = this;\n\n  if (shouldModify) {\n    this.markModified(pathToMark);\n\n    // handle directly setting arrays (gh-1126)\n    MongooseArray || (MongooseArray = require('./types/array'));\n    if (val && val.isMongooseArray) {\n      val._registerAtomic('$set', val);\n\n      // Update embedded document parent references (gh-5189)\n      if (val.isMongooseDocumentArray) {\n        val.forEach(function(item) {\n          item && item.__parentArray && (item.__parentArray = val);\n        });\n      }\n\n      // Small hack for gh-1638: if we're overwriting the entire array, ignore\n      // paths that were modified before the array overwrite\n      this.$__.activePaths.forEach(function(modifiedPath) {\n        if (modifiedPath.indexOf(path + '.') === 0) {\n          _this.$__.activePaths.ignore(modifiedPath);\n        }\n      });\n    }\n  }\n\n  var obj = this._doc;\n  var i = 0;\n  var l = parts.length;\n  var cur = '';\n\n  for (; i < l; i++) {\n    var next = i + 1;\n    var last = next === l;\n    cur += (cur ? '.' + parts[i] : parts[i]);\n\n    if (last) {\n      obj[parts[i]] = val;\n    } else {\n      if (obj[parts[i]] && utils.getFunctionName(obj[parts[i]].constructor) === 'Object') {\n        obj = obj[parts[i]];\n      } else if (obj[parts[i]] && obj[parts[i]] instanceof Embedded) {\n        obj = obj[parts[i]];\n      } else if (obj[parts[i]] && obj[parts[i]].$isSingleNested) {\n        obj = obj[parts[i]];\n      } else if (obj[parts[i]] && Array.isArray(obj[parts[i]])) {\n        obj = obj[parts[i]];\n      } else {\n        obj[parts[i]] = obj[parts[i]] || {};\n        obj = obj[parts[i]];\n      }\n    }\n  }\n};\n\n/**\n * Gets a raw value from a path (no getters)\n *\n * @param {String} path\n * @api private\n */\n\nDocument.prototype.getValue = function(path) {\n  return utils.getValue(path, this._doc);\n};\n\n/**\n * Sets a raw value for a path (no casting, setters, transformations)\n *\n * @param {String} path\n * @param {Object} value\n * @api private\n */\n\nDocument.prototype.setValue = function(path, val) {\n  utils.setValue(path, val, this._doc);\n  return this;\n};\n\n/**\n * Returns the value of a path.\n *\n * ####Example\n *\n *     // path\n *     doc.get('age') // 47\n *\n *     // dynamic casting to a string\n *     doc.get('age', String) // \"47\"\n *\n * @param {String} path\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for on-the-fly attributes\n * @api public\n */\n\nDocument.prototype.get = function(path, type) {\n  var adhoc;\n  if (type) {\n    adhoc = Schema.interpretAsType(path, type, this.schema.options);\n  }\n\n  var schema = this.$__path(path) || this.schema.virtualpath(path);\n  var pieces = path.split('.');\n  var obj = this._doc;\n\n  if (schema instanceof VirtualType) {\n    if (schema.getters.length === 0) {\n      return void 0;\n    }\n    return schema.applyGetters(null, this);\n  }\n\n  for (var i = 0, l = pieces.length; i < l; i++) {\n    obj = obj === null || obj === void 0\n      ? undefined\n      : obj[pieces[i]];\n  }\n\n  if (adhoc) {\n    obj = adhoc.cast(obj);\n  }\n\n  if (schema) {\n    obj = schema.applyGetters(obj, this);\n  }\n\n  return obj;\n};\n\n/**\n * Returns the schematype for the given `path`.\n *\n * @param {String} path\n * @api private\n * @method $__path\n * @memberOf Document\n */\n\nDocument.prototype.$__path = function(path) {\n  var adhocs = this.$__.adhocPaths,\n      adhocType = adhocs && adhocs[path];\n\n  if (adhocType) {\n    return adhocType;\n  }\n  return this.schema.path(path);\n};\n\n/**\n * Marks the path as having pending changes to write to the db.\n *\n * _Very helpful when using [Mixed](./schematypes.html#mixed) types._\n *\n * ####Example:\n *\n *     doc.mixed.type = 'changed';\n *     doc.markModified('mixed.type');\n *     doc.save() // changes to mixed.type are now persisted\n *\n * @param {String} path the path to mark modified\n * @param {Document} [scope] the scope to run validators with\n * @api public\n */\n\nDocument.prototype.markModified = function(path, scope) {\n  this.$__.activePaths.modify(path);\n  if (scope != null && !this.ownerDocument) {\n    this.$__.pathsToScopes[path] = scope;\n  }\n};\n\n/**\n * Clears the modified state on the specified path.\n *\n * ####Example:\n *\n *     doc.foo = 'bar';\n *     doc.unmarkModified('foo');\n *     doc.save() // changes to foo will not be persisted\n *\n * @param {String} path the path to unmark modified\n * @api public\n */\n\nDocument.prototype.unmarkModified = function(path) {\n  this.$__.activePaths.init(path);\n  delete this.$__.pathsToScopes[path];\n};\n\n/**\n * Don't run validation on this path or persist changes to this path.\n *\n * ####Example:\n *\n *     doc.foo = null;\n *     doc.$ignore('foo');\n *     doc.save() // changes to foo will not be persisted and validators won't be run\n *\n * @memberOf Document\n * @method $ignore\n * @param {String} path the path to ignore\n * @api public\n */\n\nDocument.prototype.$ignore = function(path) {\n  this.$__.activePaths.ignore(path);\n};\n\n/**\n * Returns the list of paths that have been modified.\n *\n * @param {Object} [options]\n * @param {Boolean} [options.includeChildren=false] if true, returns children of modified paths as well. For example, if false, the list of modified paths for `doc.colors = { primary: 'blue' };` will **not** contain `colors.primary`\n * @return {Array}\n * @api public\n */\n\nDocument.prototype.modifiedPaths = function(options) {\n  options = options || {};\n  var directModifiedPaths = Object.keys(this.$__.activePaths.states.modify);\n  var _this = this;\n  return directModifiedPaths.reduce(function(list, path) {\n    var parts = path.split('.');\n    list = list.concat(parts.reduce(function(chains, part, i) {\n      return chains.concat(parts.slice(0, i).concat(part).join('.'));\n    }, []).filter(function(chain) {\n      return (list.indexOf(chain) === -1);\n    }));\n\n    if (!options.includeChildren) {\n      return list;\n    }\n\n    var cur = _this.get(path);\n    if (cur != null && typeof cur === 'object') {\n      if (cur._doc) {\n        cur = cur._doc;\n      }\n      Object.keys(cur).\n        filter(function(key) {\n          return list.indexOf(path + '.' + key) === -1;\n        }).\n        forEach(function(key) {\n          list.push(path + '.' + key);\n        });\n    }\n\n    return list;\n  }, []);\n};\n\n/**\n * Returns true if this document was modified, else false.\n *\n * If `path` is given, checks if a path or any full path containing `path` as part of its path chain has been modified.\n *\n * ####Example\n *\n *     doc.set('documents.0.title', 'changed');\n *     doc.isModified()                      // true\n *     doc.isModified('documents')           // true\n *     doc.isModified('documents.0.title')   // true\n *     doc.isModified('documents otherProp') // true\n *     doc.isDirectModified('documents')     // false\n *\n * @param {String} [path] optional\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isModified = function(paths, modifiedPaths) {\n  if (paths) {\n    if (!Array.isArray(paths)) {\n      paths = paths.split(' ');\n    }\n    var modified = modifiedPaths || this.modifiedPaths();\n    var directModifiedPaths = Object.keys(this.$__.activePaths.states.modify);\n    var isModifiedChild = paths.some(function(path) {\n      return !!~modified.indexOf(path);\n    });\n    return isModifiedChild || paths.some(function(path) {\n      return directModifiedPaths.some(function(mod) {\n        return mod === path || path.indexOf(mod + '.') === 0;\n      });\n    });\n  }\n  return this.$__.activePaths.some('modify');\n};\n\n/**\n * Checks if a path is set to its default.\n *\n * ####Example\n *\n *     MyModel = mongoose.model('test', { name: { type: String, default: 'Val '} });\n *     var m = new MyModel();\n *     m.$isDefault('name'); // true\n *\n * @memberOf Document\n * @method $isDefault\n * @param {String} [path]\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.$isDefault = function(path) {\n  return (path in this.$__.activePaths.states.default);\n};\n\n/**\n * Getter/setter, determines whether the document was removed or not.\n *\n * ####Example:\n *     product.remove(function (err, product) {\n *       product.isDeleted(); // true\n *       product.remove(); // no-op, doesn't send anything to the db\n *\n *       product.isDeleted(false);\n *       product.isDeleted(); // false\n *       product.remove(); // will execute a remove against the db\n *     })\n *\n * @param {Boolean} [val] optional, overrides whether mongoose thinks the doc is deleted\n * @return {Boolean} whether mongoose thinks this doc is deleted.\n * @method $isDeleted\n * @memberOf Document\n * @api public\n */\n\nDocument.prototype.$isDeleted = function(val) {\n  if (arguments.length === 0) {\n    return !!this.$__.isDeleted;\n  }\n\n  this.$__.isDeleted = !!val;\n  return this;\n};\n\n/**\n * Returns true if `path` was directly set and modified, else false.\n *\n * ####Example\n *\n *     doc.set('documents.0.title', 'changed');\n *     doc.isDirectModified('documents.0.title') // true\n *     doc.isDirectModified('documents') // false\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isDirectModified = function(path) {\n  return (path in this.$__.activePaths.states.modify);\n};\n\n/**\n * Checks if `path` was initialized.\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isInit = function(path) {\n  return (path in this.$__.activePaths.states.init);\n};\n\n/**\n * Checks if `path` was selected in the source query which initialized this document.\n *\n * ####Example\n *\n *     Thing.findOne().select('name').exec(function (err, doc) {\n *        doc.isSelected('name') // true\n *        doc.isSelected('age')  // false\n *     })\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isSelected = function isSelected(path) {\n  if (this.$__.selected) {\n    if (path === '_id') {\n      return this.$__.selected._id !== 0;\n    }\n\n    var paths = Object.keys(this.$__.selected);\n    var i = paths.length;\n    var inclusive = null;\n    var cur;\n\n    if (i === 1 && paths[0] === '_id') {\n      // only _id was selected.\n      return this.$__.selected._id === 0;\n    }\n\n    while (i--) {\n      cur = paths[i];\n      if (cur === '_id') {\n        continue;\n      }\n      if (!isDefiningProjection(this.$__.selected[cur])) {\n        continue;\n      }\n      inclusive = !!this.$__.selected[cur];\n      break;\n    }\n\n    if (inclusive === null) {\n      return true;\n    }\n\n    if (path in this.$__.selected) {\n      return inclusive;\n    }\n\n    i = paths.length;\n    var pathDot = path + '.';\n\n    while (i--) {\n      cur = paths[i];\n      if (cur === '_id') {\n        continue;\n      }\n\n      if (cur.indexOf(pathDot) === 0) {\n        return inclusive || cur !== pathDot;\n      }\n\n      if (pathDot.indexOf(cur + '.') === 0) {\n        return inclusive;\n      }\n    }\n\n    return !inclusive;\n  }\n\n  return true;\n};\n\n/**\n * Checks if `path` was explicitly selected. If no projection, always returns\n * true.\n *\n * ####Example\n *\n *     Thing.findOne().select('nested.name').exec(function (err, doc) {\n *        doc.isDirectSelected('nested.name') // true\n *        doc.isDirectSelected('nested.otherName') // false\n *        doc.isDirectSelected('nested')  // false\n *     })\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isDirectSelected = function isDirectSelected(path) {\n  if (this.$__.selected) {\n    if (path === '_id') {\n      return this.$__.selected._id !== 0;\n    }\n\n    var paths = Object.keys(this.$__.selected);\n    var i = paths.length;\n    var inclusive = null;\n    var cur;\n\n    if (i === 1 && paths[0] === '_id') {\n      // only _id was selected.\n      return this.$__.selected._id === 0;\n    }\n\n    while (i--) {\n      cur = paths[i];\n      if (cur === '_id') {\n        continue;\n      }\n      if (!isDefiningProjection(this.$__.selected[cur])) {\n        continue;\n      }\n      inclusive = !!this.$__.selected[cur];\n      break;\n    }\n\n    if (inclusive === null) {\n      return true;\n    }\n\n    if (path in this.$__.selected) {\n      return inclusive;\n    }\n\n    return !inclusive;\n  }\n\n  return true;\n};\n\n/**\n * Executes registered validation rules for this document.\n *\n * ####Note:\n *\n * This method is called `pre` save and if a validation rule is violated, [save](#model_Model-save) is aborted and the error is returned to your `callback`.\n *\n * ####Example:\n *\n *     doc.validate(function (err) {\n *       if (err) handleError(err);\n *       else // validation passed\n *     });\n *\n * @param {Object} optional options internal options\n * @param {Function} callback optional callback called after validation completes, passing an error if one occurred\n * @return {Promise} Promise\n * @api public\n */\n\nDocument.prototype.validate = function(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  return utils.promiseOrCallback(callback, cb => this.$__validate(function(error) {\n    cb(error);\n  }));\n};\n\n/*!\n * ignore\n */\n\nfunction _getPathsToValidate(doc) {\n  var i;\n  var len;\n\n  // only validate required fields when necessary\n  var paths = Object.keys(doc.$__.activePaths.states.require).filter(function(path) {\n    if (!doc.isSelected(path) && !doc.isModified(path)) {\n      return false;\n    }\n    var p = doc.schema.path(path);\n    if (typeof p.originalRequiredValue === 'function') {\n      return p.originalRequiredValue.call(doc);\n    }\n    return true;\n  });\n\n  paths = paths.concat(Object.keys(doc.$__.activePaths.states.init));\n  paths = paths.concat(Object.keys(doc.$__.activePaths.states.modify));\n  paths = paths.concat(Object.keys(doc.$__.activePaths.states.default));\n\n  if (!doc.ownerDocument) {\n    var subdocs = doc.$__getAllSubdocs();\n    var subdoc;\n    len = subdocs.length;\n    var modifiedPaths = doc.modifiedPaths();\n    for (i = 0; i < len; ++i) {\n      subdoc = subdocs[i];\n      if (doc.isModified(subdoc.$basePath, modifiedPaths) &&\n          !doc.isDirectModified(subdoc.$basePath)) {\n        // Remove child paths for now, because we'll be validating the whole\n        // subdoc\n        paths = paths.filter(function(p) {\n          return p != null && p.indexOf(subdoc.$basePath + '.') !== 0;\n        });\n        paths.push(subdoc.$basePath);\n      }\n    }\n  }\n\n  // gh-661: if a whole array is modified, make sure to run validation on all\n  // the children as well\n  len = paths.length;\n  for (i = 0; i < len; ++i) {\n    var path = paths[i];\n\n    var _pathType = doc.schema.path(path);\n    if (!_pathType || !_pathType.$isMongooseArray || _pathType.$isMongooseDocumentArray) {\n      continue;\n    }\n\n    var val = doc.getValue(path);\n    if (val) {\n      var numElements = val.length;\n      for (var j = 0; j < numElements; ++j) {\n        paths.push(path + '.' + j);\n      }\n    }\n  }\n\n  var flattenOptions = { skipArrays: true };\n  len = paths.length;\n  for (i = 0; i < len; ++i) {\n    var pathToCheck = paths[i];\n    if (doc.schema.nested[pathToCheck]) {\n      var _v = doc.getValue(pathToCheck);\n      if (isMongooseObject(_v)) {\n        _v = _v.toObject({ transform: false });\n      }\n      var flat = flatten(_v, '', flattenOptions);\n      var _subpaths = Object.keys(flat).map(function(p) {\n        return pathToCheck + '.' + p;\n      });\n      paths = paths.concat(_subpaths);\n    }\n  }\n\n  return paths;\n}\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__validate = function(callback) {\n  const _this = this;\n  const _complete = function() {\n    var err = _this.$__.validationError;\n    _this.$__.validationError = undefined;\n    _this.emit('validate', _this);\n    _this.constructor.emit('validate', _this);\n    if (err) {\n      for (var key in err.errors) {\n        // Make sure cast errors persist\n        if (!_this.__parent && err.errors[key] instanceof MongooseError.CastError) {\n          _this.invalidate(key, err.errors[key]);\n        }\n      }\n\n      return err;\n    }\n  };\n\n  // only validate required fields when necessary\n  const paths = _getPathsToValidate(this);\n\n  if (paths.length === 0) {\n    return process.nextTick(function() {\n      const error = _complete();\n      if (error) {\n        return _this.schema.s.hooks.execPost('validate:error', _this, [ _this], { error: error }, function(error) {\n          callback(error);\n        });\n      }\n      callback(null, _this);\n    });\n  }\n\n  const validated = {};\n  let total = 0;\n\n  var complete = function() {\n    const error = _complete();\n    if (error) {\n      return _this.schema.s.hooks.execPost('validate:error', _this, [ _this], { error: error }, function(error) {\n        callback(error);\n      });\n    }\n    callback(null, _this);\n  };\n\n  var validatePath = function(path) {\n    if (path == null || validated[path]) {\n      return;\n    }\n\n    validated[path] = true;\n    total++;\n\n    process.nextTick(function() {\n      const p = _this.schema.path(path);\n      if (!p) {\n        return --total || complete();\n      }\n\n      // If user marked as invalid or there was a cast error, don't validate\n      if (!_this.$isValid(path)) {\n        --total || complete();\n        return;\n      }\n\n      const val = _this.getValue(path);\n      const scope = path in _this.$__.pathsToScopes ?\n        _this.$__.pathsToScopes[path] :\n        _this;\n\n      p.doValidate(val, function(err) {\n        if (err) {\n          _this.invalidate(path, err, undefined, true);\n        }\n        --total || complete();\n      }, scope);\n    });\n  };\n\n  const numPaths = paths.length;\n  for (let i = 0; i < numPaths; ++i) {\n    validatePath(paths[i]);\n  }\n};\n\n/**\n * Executes registered validation rules (skipping asynchronous validators) for this document.\n *\n * ####Note:\n *\n * This method is useful if you need synchronous validation.\n *\n * ####Example:\n *\n *     var err = doc.validateSync();\n *     if ( err ){\n *       handleError( err );\n *     } else {\n *       // validation passed\n *     }\n *\n * @param {Array|string} pathsToValidate only validate the given paths\n * @return {MongooseError|undefined} MongooseError if there are errors during validation, or undefined if there is no error.\n * @api public\n */\n\nDocument.prototype.validateSync = function(pathsToValidate) {\n  var _this = this;\n\n  if (typeof pathsToValidate === 'string') {\n    pathsToValidate = pathsToValidate.split(' ');\n  }\n\n  // only validate required fields when necessary\n  var paths = _getPathsToValidate(this);\n\n  if (pathsToValidate && pathsToValidate.length) {\n    var tmp = [];\n    for (var i = 0; i < paths.length; ++i) {\n      if (pathsToValidate.indexOf(paths[i]) !== -1) {\n        tmp.push(paths[i]);\n      }\n    }\n    paths = tmp;\n  }\n\n  var validating = {};\n\n  paths.forEach(function(path) {\n    if (validating[path]) {\n      return;\n    }\n\n    validating[path] = true;\n\n    var p = _this.schema.path(path);\n    if (!p) {\n      return;\n    }\n    if (!_this.$isValid(path)) {\n      return;\n    }\n\n    var val = _this.getValue(path);\n    var err = p.doValidateSync(val, _this);\n    if (err) {\n      _this.invalidate(path, err, undefined, true);\n    }\n  });\n\n  var err = _this.$__.validationError;\n  _this.$__.validationError = undefined;\n  _this.emit('validate', _this);\n  _this.constructor.emit('validate', _this);\n\n  if (err) {\n    for (var key in err.errors) {\n      // Make sure cast errors persist\n      if (err.errors[key] instanceof MongooseError.CastError) {\n        _this.invalidate(key, err.errors[key]);\n      }\n    }\n  }\n\n  return err;\n};\n\n/**\n * Marks a path as invalid, causing validation to fail.\n *\n * The `errorMsg` argument will become the message of the `ValidationError`.\n *\n * The `value` argument (if passed) will be available through the `ValidationError.value` property.\n *\n *     doc.invalidate('size', 'must be less than 20', 14);\n\n *     doc.validate(function (err) {\n *       console.log(err)\n *       // prints\n *       { message: 'Validation failed',\n *         name: 'ValidationError',\n *         errors:\n *          { size:\n *             { message: 'must be less than 20',\n *               name: 'ValidatorError',\n *               path: 'size',\n *               type: 'user defined',\n *               value: 14 } } }\n *     })\n *\n * @param {String} path the field to invalidate\n * @param {String|Error} errorMsg the error which states the reason `path` was invalid\n * @param {Object|String|Number|any} value optional invalid value\n * @param {String} [kind] optional `kind` property for the error\n * @return {ValidationError} the current ValidationError, with all currently invalidated paths\n * @api public\n */\n\nDocument.prototype.invalidate = function(path, err, val, kind) {\n  if (!this.$__.validationError) {\n    this.$__.validationError = new ValidationError(this);\n  }\n\n  if (this.$__.validationError.errors[path]) {\n    return;\n  }\n\n  if (!err || typeof err === 'string') {\n    err = new ValidatorError({\n      path: path,\n      message: err,\n      type: kind || 'user defined',\n      value: val\n    });\n  }\n\n  if (this.$__.validationError === err) {\n    return this.$__.validationError;\n  }\n\n  this.$__.validationError.addError(path, err);\n  return this.$__.validationError;\n};\n\n/**\n * Marks a path as valid, removing existing validation errors.\n *\n * @param {String} path the field to mark as valid\n * @api public\n * @memberOf Document\n * @method $markValid\n */\n\nDocument.prototype.$markValid = function(path) {\n  if (!this.$__.validationError || !this.$__.validationError.errors[path]) {\n    return;\n  }\n\n  delete this.$__.validationError.errors[path];\n  if (Object.keys(this.$__.validationError.errors).length === 0) {\n    this.$__.validationError = null;\n  }\n};\n\n/**\n * Saves this document.\n *\n * ####Example:\n *\n *     product.sold = Date.now();\n *     product.save(function (err, product, numAffected) {\n *       if (err) ..\n *     })\n *\n * The callback will receive three parameters\n *\n * 1. `err` if an error occurred\n * 2. `product` which is the saved `product`\n * 3. `numAffected` will be 1 when the document was successfully persisted to MongoDB, otherwise 0. Unless you tweak mongoose's internals, you don't need to worry about checking this parameter for errors - checking `err` is sufficient to make sure your document was properly saved.\n *\n * As an extra measure of flow control, save will return a Promise.\n * ####Example:\n *     product.save().then(function(product) {\n *        ...\n *     });\n *\n * @param {Object} [options] options optional options\n * @param {Object} [options.safe] overrides [schema's safe option](http://mongoosejs.com//docs/guide.html#safe)\n * @param {Boolean} [options.validateBeforeSave] set to false to save without validating.\n * @param {Function} [fn] optional callback\n * @method save\n * @memberOf Document\n * @return {Promise} Promise\n * @api public\n * @see middleware http://mongoosejs.com/docs/middleware.html\n */\n\n/**\n * Checks if a path is invalid\n *\n * @param {String} path the field to check\n * @method $isValid\n * @memberOf Document\n * @api private\n */\n\nDocument.prototype.$isValid = function(path) {\n  return !this.$__.validationError || !this.$__.validationError.errors[path];\n};\n\n/**\n * Resets the internal modified state of this document.\n *\n * @api private\n * @return {Document}\n * @method $__reset\n * @memberOf Document\n */\n\nDocument.prototype.$__reset = function reset() {\n  var _this = this;\n  DocumentArray || (DocumentArray = require('./types/documentarray'));\n\n  this.$__.activePaths\n    .map('init', 'modify', function(i) {\n      return _this.getValue(i);\n    })\n    .filter(function(val) {\n      return val && val instanceof Array && val.isMongooseDocumentArray && val.length;\n    })\n    .forEach(function(array) {\n      var i = array.length;\n      while (i--) {\n        var doc = array[i];\n        if (!doc) {\n          continue;\n        }\n        doc.$__reset();\n      }\n    });\n\n  this.$__.activePaths.\n    map('init', 'modify', function(i) {\n      return _this.getValue(i);\n    }).\n    filter(function(val) {\n      return val && val.$isSingleNested;\n    }).\n    forEach(function(doc) {\n      doc.$__reset();\n    });\n\n  // clear atomics\n  this.$__dirty().forEach(function(dirt) {\n    var type = dirt.value;\n    if (type && type._atomics) {\n      type._atomics = {};\n    }\n  });\n\n  // Clear 'dirty' cache\n  this.$__.activePaths.clear('modify');\n  this.$__.activePaths.clear('default');\n  this.$__.validationError = undefined;\n  this.errors = undefined;\n  _this = this;\n  this.schema.requiredPaths().forEach(function(path) {\n    _this.$__.activePaths.require(path);\n  });\n\n  return this;\n};\n\n/**\n * Returns this documents dirty paths / vals.\n *\n * @api private\n * @method $__dirty\n * @memberOf Document\n */\n\nDocument.prototype.$__dirty = function() {\n  var _this = this;\n\n  var all = this.$__.activePaths.map('modify', function(path) {\n    return {\n      path: path,\n      value: _this.getValue(path),\n      schema: _this.$__path(path)\n    };\n  });\n\n  // gh-2558: if we had to set a default and the value is not undefined,\n  // we have to save as well\n  all = all.concat(this.$__.activePaths.map('default', function(path) {\n    if (path === '_id' || !_this.getValue(path)) {\n      return;\n    }\n    return {\n      path: path,\n      value: _this.getValue(path),\n      schema: _this.$__path(path)\n    };\n  }));\n\n  // Sort dirty paths in a flat hierarchy.\n  all.sort(function(a, b) {\n    return (a.path < b.path ? -1 : (a.path > b.path ? 1 : 0));\n  });\n\n  // Ignore \"foo.a\" if \"foo\" is dirty already.\n  var minimal = [],\n      lastPath,\n      top;\n\n  all.forEach(function(item) {\n    if (!item) {\n      return;\n    }\n    if (item.path.indexOf(lastPath) !== 0) {\n      lastPath = item.path + '.';\n      minimal.push(item);\n      top = item;\n    } else {\n      // special case for top level MongooseArrays\n      if (top.value && top.value._atomics && top.value.hasAtomics()) {\n        // the `top` array itself and a sub path of `top` are being modified.\n        // the only way to honor all of both modifications is through a $set\n        // of entire array.\n        top.value._atomics = {};\n        top.value._atomics.$set = top.value;\n      }\n    }\n  });\n\n  top = lastPath = null;\n  return minimal;\n};\n\n/**\n * Assigns/compiles `schema` into this documents prototype.\n *\n * @param {Schema} schema\n * @api private\n * @method $__setSchema\n * @memberOf Document\n */\n\nDocument.prototype.$__setSchema = function(schema) {\n  schema.plugin(idGetter, { deduplicate: true });\n  compile(schema.tree, this, undefined, schema.options);\n  this.schema = schema;\n};\n\n\n/**\n * Get active path that were changed and are arrays\n *\n * @api private\n * @method $__getArrayPathsToValidate\n * @memberOf Document\n */\n\nDocument.prototype.$__getArrayPathsToValidate = function() {\n  DocumentArray || (DocumentArray = require('./types/documentarray'));\n\n  // validate all document arrays.\n  return this.$__.activePaths\n    .map('init', 'modify', function(i) {\n      return this.getValue(i);\n    }.bind(this))\n    .filter(function(val) {\n      return val && val instanceof Array && val.isMongooseDocumentArray && val.length;\n    }).reduce(function(seed, array) {\n      return seed.concat(array);\n    }, [])\n    .filter(function(doc) {\n      return doc;\n    });\n};\n\n\n/**\n * Get all subdocs (by bfs)\n *\n * @api private\n * @method $__getAllSubdocs\n * @memberOf Document\n */\n\nDocument.prototype.$__getAllSubdocs = function() {\n  DocumentArray || (DocumentArray = require('./types/documentarray'));\n  Embedded = Embedded || require('./types/embedded');\n\n  function docReducer(doc, seed, path) {\n    var val = doc[path];\n\n    if (val instanceof Embedded) {\n      seed.push(val);\n    }\n    if (val && val.$isSingleNested) {\n      seed = Object.keys(val._doc).reduce(function(seed, path) {\n        return docReducer(val._doc, seed, path);\n      }, seed);\n      seed.push(val);\n    }\n    if (val && val.isMongooseDocumentArray) {\n      val.forEach(function _docReduce(doc) {\n        if (!doc || !doc._doc) {\n          return;\n        }\n        if (doc instanceof Embedded) {\n          seed.push(doc);\n        }\n        seed = Object.keys(doc._doc).reduce(function(seed, path) {\n          return docReducer(doc._doc, seed, path);\n        }, seed);\n      });\n    } else if (val instanceof Document && val.$__isNested) {\n      if (val) {\n        seed = Object.keys(val).reduce(function(seed, path) {\n          return docReducer(val, seed, path);\n        }, seed);\n      }\n    }\n    return seed;\n  }\n\n  var _this = this;\n  var subDocs = Object.keys(this._doc).reduce(function(seed, path) {\n    return docReducer(_this, seed, path);\n  }, []);\n\n  return subDocs;\n};\n\n/*!\n * Runs queued functions\n */\n\nfunction applyQueue(doc) {\n  var q = doc.schema && doc.schema.callQueue;\n  if (!q.length) {\n    return;\n  }\n  var pair;\n\n  for (var i = 0; i < q.length; ++i) {\n    pair = q[i];\n    if (pair[0] !== 'pre' && pair[0] !== 'post' && pair[0] !== 'on') {\n      doc[pair[0]].apply(doc, pair[1]);\n    }\n  }\n}\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__handleReject = function handleReject(err) {\n  // emit on the Model if listening\n  if (this.listeners('error').length) {\n    this.emit('error', err);\n  } else if (this.constructor.listeners && this.constructor.listeners('error').length) {\n    this.constructor.emit('error', err);\n  } else if (this.listeners && this.listeners('error').length) {\n    this.emit('error', err);\n  }\n};\n\n/**\n * Internal helper for toObject() and toJSON() that doesn't manipulate options\n *\n * @api private\n * @method $toObject\n * @memberOf Document\n */\n\nDocument.prototype.$toObject = function(options, json) {\n  let defaultOptions = {\n    transform: true,\n    flattenDecimals: true\n  };\n\n  // merge base default options with Schema's set default options if available.\n  // `clone` is necessary here because `utils.options` directly modifies the second input.\n  if (json && this.schema.options.toJSON) {\n    defaultOptions = utils.options(defaultOptions, clone(this.schema.options.toJSON));\n  } else if (this.schema.options.toObject) {\n    defaultOptions = utils.options(defaultOptions, clone(this.schema.options.toObject));\n  }\n\n  // If options do not exist or is not an object, set it to empty object\n  options = options && utils.getFunctionName(options.constructor) === 'Object' ?\n    clone(options) :\n    {};\n\n  let _minimize;\n  if (options.minimize != null) {\n    _minimize = options.minimize;\n  } else if (defaultOptions.minimize != null) {\n    _minimize = defaultOptions.minimize;\n  } else {\n    _minimize = this.schema.options.minimize;\n  }\n\n  const cloneOptions = Object.assign(utils.clone(options), {\n    _isNested: true,\n    json: json,\n    minimize: _minimize\n  });\n\n  // _isNested will only be true if this is not the top level document, we\n  // should never depopulate\n  if (options.depopulate && options._isNested && this.$__.wasPopulated) {\n    // populated paths that we set to a document\n    return clone(this._id, cloneOptions);\n  }\n\n  // merge default options with input options.\n  options = utils.options(defaultOptions, options);\n  options._isNested = true;\n  options.json = json;\n  options.minimize = _minimize;\n\n  // remember the root transform function\n  // to save it from being overwritten by sub-transform functions\n  var originalTransform = options.transform;\n\n  var ret = clone(this._doc, cloneOptions) || {};\n\n  if (options.getters) {\n    applyGetters(this, ret, 'paths', cloneOptions);\n    // applyGetters for paths will add nested empty objects;\n    // if minimize is set, we need to remove them.\n    if (options.minimize) {\n      ret = minimize(ret) || {};\n    }\n  }\n\n  if (options.virtuals || options.getters && options.virtuals !== false) {\n    applyGetters(this, ret, 'virtuals', cloneOptions);\n  }\n\n  if (options.versionKey === false && this.schema.options.versionKey) {\n    delete ret[this.schema.options.versionKey];\n  }\n\n  var transform = options.transform;\n\n  // In the case where a subdocument has its own transform function, we need to\n  // check and see if the parent has a transform (options.transform) and if the\n  // child schema has a transform (this.schema.options.toObject) In this case,\n  // we need to adjust options.transform to be the child schema's transform and\n  // not the parent schema's\n  if (transform === true ||\n      (this.schema.options.toObject && transform)) {\n    var opts = options.json ? this.schema.options.toJSON : this.schema.options.toObject;\n\n    if (opts) {\n      transform = (typeof options.transform === 'function' ? options.transform : opts.transform);\n    }\n  } else {\n    options.transform = originalTransform;\n  }\n\n  if (typeof transform === 'function') {\n    var xformed = transform(this, ret, options);\n    if (typeof xformed !== 'undefined') {\n      ret = xformed;\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Converts this document into a plain javascript object, ready for storage in MongoDB.\n *\n * Buffers are converted to instances of [mongodb.Binary](http://mongodb.github.com/node-mongodb-native/api-bson-generated/binary.html) for proper storage.\n *\n * ####Options:\n *\n * - `getters` apply all getters (path and virtual getters)\n * - `virtuals` apply virtual getters (can override `getters` option)\n * - `minimize` remove empty objects (defaults to true)\n * - `transform` a transform function to apply to the resulting document before returning\n * - `depopulate` depopulate any populated paths, replacing them with their original refs (defaults to false)\n * - `versionKey` whether to include the version key (defaults to true)\n *\n * ####Getters/Virtuals\n *\n * Example of only applying path getters\n *\n *     doc.toObject({ getters: true, virtuals: false })\n *\n * Example of only applying virtual getters\n *\n *     doc.toObject({ virtuals: true })\n *\n * Example of applying both path and virtual getters\n *\n *     doc.toObject({ getters: true })\n *\n * To apply these options to every document of your schema by default, set your [schemas](#schema_Schema) `toObject` option to the same argument.\n *\n *     schema.set('toObject', { virtuals: true })\n *\n * ####Transform\n *\n * We may need to perform a transformation of the resulting object based on some criteria, say to remove some sensitive information or return a custom object. In this case we set the optional `transform` function.\n *\n * Transform functions receive three arguments\n *\n *     function (doc, ret, options) {}\n *\n * - `doc` The mongoose document which is being converted\n * - `ret` The plain object representation which has been converted\n * - `options` The options in use (either schema options or the options passed inline)\n *\n * ####Example\n *\n *     // specify the transform schema option\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       // remove the _id of every document before returning the result\n *       delete ret._id;\n *       return ret;\n *     }\n *\n *     // without the transformation in the schema\n *     doc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\n *\n *     // with the transformation\n *     doc.toObject(); // { name: 'Wreck-it Ralph' }\n *\n * With transformations we can do a lot more than remove properties. We can even return completely new customized objects:\n *\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       return { movie: ret.name }\n *     }\n *\n *     // without the transformation in the schema\n *     doc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\n *\n *     // with the transformation\n *     doc.toObject(); // { movie: 'Wreck-it Ralph' }\n *\n * _Note: if a transform function returns `undefined`, the return value will be ignored._\n *\n * Transformations may also be applied inline, overridding any transform set in the options:\n *\n *     function xform (doc, ret, options) {\n *       return { inline: ret.name, custom: true }\n *     }\n *\n *     // pass the transform as an inline option\n *     doc.toObject({ transform: xform }); // { inline: 'Wreck-it Ralph', custom: true }\n *\n * If you want to skip transformations, use `transform: false`:\n *\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.hide = '_id';\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       if (options.hide) {\n *         options.hide.split(' ').forEach(function (prop) {\n *           delete ret[prop];\n *         });\n *       }\n *       return ret;\n *     }\n *\n *     var doc = new Doc({ _id: 'anId', secret: 47, name: 'Wreck-it Ralph' });\n *     doc.toObject();                                        // { secret: 47, name: 'Wreck-it Ralph' }\n *     doc.toObject({ hide: 'secret _id', transform: false });// { _id: 'anId', secret: 47, name: 'Wreck-it Ralph' }\n *     doc.toObject({ hide: 'secret _id', transform: true }); // { name: 'Wreck-it Ralph' }\n *\n * Transforms are applied _only to the document and are not applied to sub-documents_.\n *\n * Transforms, like all of these options, are also available for `toJSON`.\n *\n * See [schema options](/docs/guide.html#toObject) for some more details.\n *\n * _During save, no custom options are applied to the document before being sent to the database._\n *\n * @param {Object} [options]\n * @return {Object} js object\n * @see mongodb.Binary http://mongodb.github.com/node-mongodb-native/api-bson-generated/binary.html\n * @api public\n * @memberOf Document\n */\n\nDocument.prototype.toObject = function(options) {\n  return this.$toObject(options);\n};\n\n/*!\n * Minimizes an object, removing undefined values and empty objects\n *\n * @param {Object} object to minimize\n * @return {Object}\n */\n\nfunction minimize(obj) {\n  var keys = Object.keys(obj),\n      i = keys.length,\n      hasKeys,\n      key,\n      val;\n\n  while (i--) {\n    key = keys[i];\n    val = obj[key];\n\n    if (utils.isObject(val) && !Buffer.isBuffer(val)) {\n      obj[key] = minimize(val);\n    }\n\n    if (undefined === obj[key]) {\n      delete obj[key];\n      continue;\n    }\n\n    hasKeys = true;\n  }\n\n  return hasKeys\n    ? obj\n    : undefined;\n}\n\n/*!\n * Applies virtuals properties to `json`.\n *\n * @param {Document} self\n * @param {Object} json\n * @param {String} type either `virtuals` or `paths`\n * @return {Object} `json`\n */\n\nfunction applyGetters(self, json, type, options) {\n  var schema = self.schema;\n  var paths = Object.keys(schema[type]);\n  var i = paths.length;\n  var numPaths = i;\n  var path;\n  var cur = self._doc;\n  var v;\n\n  if (!cur) {\n    return json;\n  }\n\n  if (type === 'virtuals') {\n    for (i = 0; i < numPaths; ++i) {\n      path = paths[i];\n      parts = path.split('.');\n      v = clone(self.get(path), options);\n      if (v === void 0) {\n        continue;\n      }\n      plen = parts.length;\n      cur = json;\n      for (var j = 0; j < plen - 1; ++j) {\n        cur[parts[j]] = cur[parts[j]] || {};\n        cur = cur[parts[j]];\n      }\n      cur[parts[plen - 1]] = v;\n    }\n\n    return json;\n  }\n\n  while (i--) {\n    path = paths[i];\n\n    var parts = path.split('.');\n    var plen = parts.length;\n    var last = plen - 1;\n    var branch = json;\n    var part;\n    cur = self._doc;\n\n    for (var ii = 0; ii < plen; ++ii) {\n      part = parts[ii];\n      v = cur[part];\n      if (ii === last) {\n        branch[part] = clone(self.get(path), options);\n      } else if (v == null) {\n        if (part in cur) {\n          branch[part] = v;\n        }\n        break;\n      } else {\n        branch = branch[part] || (branch[part] = {});\n      }\n      cur = v;\n    }\n  }\n\n  return json;\n}\n\n/**\n * The return value of this method is used in calls to JSON.stringify(doc).\n *\n * This method accepts the same options as [Document#toObject](#document_Document-toObject). To apply the options to every document of your schema by default, set your [schemas](#schema_Schema) `toJSON` option to the same argument.\n *\n *     schema.set('toJSON', { virtuals: true })\n *\n * See [schema options](/docs/guide.html#toJSON) for details.\n *\n * @param {Object} options\n * @return {Object}\n * @see Document#toObject #document_Document-toObject\n * @api public\n * @memberOf Document\n */\n\nDocument.prototype.toJSON = function(options) {\n  return this.$toObject(options, true);\n};\n\n/**\n * Helper for console.log\n *\n * @api public\n * @method inspect\n * @memberOf Document\n */\n\nDocument.prototype.inspect = function(options) {\n  var isPOJO = options &&\n    utils.getFunctionName(options.constructor) === 'Object';\n  var opts;\n  if (isPOJO) {\n    opts = options;\n    opts.minimize = false;\n  }\n  return this.toObject(opts);\n};\n\n/**\n * Helper for console.log\n *\n * @api public\n * @method toString\n * @memberOf Document\n */\n\nDocument.prototype.toString = function() {\n  return inspect(this.inspect());\n};\n\n/**\n * Returns true if the Document stores the same data as doc.\n *\n * Documents are considered equal when they have matching `_id`s, unless neither\n * document has an `_id`, in which case this function falls back to using\n * `deepEqual()`.\n *\n * @param {Document} doc a document to compare\n * @return {Boolean}\n * @api public\n * @memberOf Document\n */\n\nDocument.prototype.equals = function(doc) {\n  if (!doc) {\n    return false;\n  }\n\n  var tid = this.get('_id');\n  var docid = doc.get ? doc.get('_id') : doc;\n  if (!tid && !docid) {\n    return deepEqual(this, doc);\n  }\n  return tid && tid.equals\n    ? tid.equals(docid)\n    : tid === docid;\n};\n\n/**\n * Populates document references, executing the `callback` when complete.\n * If you want to use promises instead, use this function with\n * [`execPopulate()`](#document_Document-execPopulate)\n *\n * ####Example:\n *\n *     doc\n *     .populate('company')\n *     .populate({\n *       path: 'notes',\n *       match: /airline/,\n *       select: 'text',\n *       model: 'modelName'\n *       options: opts\n *     }, function (err, user) {\n *       assert(doc._id === user._id) // the document itself is passed\n *     })\n *\n *     // summary\n *     doc.populate(path)                   // not executed\n *     doc.populate(options);               // not executed\n *     doc.populate(path, callback)         // executed\n *     doc.populate(options, callback);     // executed\n *     doc.populate(callback);              // executed\n *     doc.populate(options).execPopulate() // executed, returns promise\n *\n *\n * ####NOTE:\n *\n * Population does not occur unless a `callback` is passed *or* you explicitly\n * call `execPopulate()`.\n * Passing the same path a second time will overwrite the previous path options.\n * See [Model.populate()](#model_Model.populate) for explaination of options.\n *\n * @see Model.populate #model_Model.populate\n * @see Document.execPopulate #document_Document-execPopulate\n * @param {String|Object} [path] The path to populate or an options object\n * @param {Function} [callback] When passed, population is invoked\n * @api public\n * @return {Document} this\n * @memberOf Document\n */\n\nDocument.prototype.populate = function populate() {\n  if (arguments.length === 0) {\n    return this;\n  }\n\n  var pop = this.$__.populate || (this.$__.populate = {});\n  var args = utils.args(arguments);\n  var fn;\n\n  if (typeof args[args.length - 1] === 'function') {\n    fn = args.pop();\n  }\n\n  // allow `doc.populate(callback)`\n  if (args.length) {\n    // use hash to remove duplicate paths\n    var res = utils.populate.apply(null, args);\n    for (var i = 0; i < res.length; ++i) {\n      pop[res[i].path] = res[i];\n    }\n  }\n\n  if (fn) {\n    var paths = utils.object.vals(pop);\n    this.$__.populate = undefined;\n    paths.__noPromise = true;\n    var topLevelModel = this.constructor;\n    if (this.$__isNested) {\n      topLevelModel = this.$__.scope.constructor;\n      var nestedPath = this.$__.nestedPath;\n      paths.forEach(function(populateOptions) {\n        populateOptions.path = nestedPath + '.' + populateOptions.path;\n      });\n    }\n    topLevelModel.populate(this, paths, fn);\n  }\n\n  return this;\n};\n\n/**\n * Explicitly executes population and returns a promise. Useful for ES2015\n * integration.\n *\n * ####Example:\n *\n *     var promise = doc.\n *       populate('company').\n *       populate({\n *         path: 'notes',\n *         match: /airline/,\n *         select: 'text',\n *         model: 'modelName'\n *         options: opts\n *       }).\n *       execPopulate();\n *\n *     // summary\n *     doc.execPopulate().then(resolve, reject);\n *\n *\n * @see Document.populate #document_Document-populate\n * @api public\n * @return {Promise} promise that resolves to the document when population is done\n * @memberOf Document\n */\n\nDocument.prototype.execPopulate = function() {\n  return utils.promiseOrCallback(null, cb => {\n    this.populate(cb);\n  });\n};\n\n/**\n * Gets _id(s) used during population of the given `path`.\n *\n * ####Example:\n *\n *     Model.findOne().populate('author').exec(function (err, doc) {\n *       console.log(doc.author.name)         // Dr.Seuss\n *       console.log(doc.populated('author')) // '5144cf8050f071d979c118a7'\n *     })\n *\n * If the path was not populated, undefined is returned.\n *\n * @param {String} path\n * @return {Array|ObjectId|Number|Buffer|String|undefined}\n * @memberOf Document\n * @api public\n */\n\nDocument.prototype.populated = function(path, val, options) {\n  // val and options are internal\n\n  if (val === null || val === void 0) {\n    if (!this.$__.populated) {\n      return undefined;\n    }\n    var v = this.$__.populated[path];\n    if (v) {\n      return v.value;\n    }\n    return undefined;\n  }\n\n  // internal\n\n  if (val === true) {\n    if (!this.$__.populated) {\n      return undefined;\n    }\n    return this.$__.populated[path];\n  }\n\n  this.$__.populated || (this.$__.populated = {});\n  this.$__.populated[path] = {value: val, options: options};\n  return val;\n};\n\n/**\n * Takes a populated field and returns it to its unpopulated state.\n *\n * ####Example:\n *\n *     Model.findOne().populate('author').exec(function (err, doc) {\n *       console.log(doc.author.name); // Dr.Seuss\n *       console.log(doc.depopulate('author'));\n *       console.log(doc.author); // '5144cf8050f071d979c118a7'\n *     })\n *\n * If the path was not populated, this is a no-op.\n *\n * @param {String} path\n * @return {Document} this\n * @see Document.populate #document_Document-populate\n * @api public\n * @memberOf Document\n */\n\nDocument.prototype.depopulate = function(path) {\n  if (typeof path === 'string') {\n    path = path.split(' ');\n  }\n  var i;\n  var populatedIds;\n\n  if (arguments.length === 0) {\n    // Depopulate all\n    var keys = Object.keys(this.$__.populated);\n\n    for (i = 0; i < keys.length; i++) {\n      populatedIds = this.populated(keys[i]);\n      if (!populatedIds) {\n        continue;\n      }\n      delete this.$__.populated[keys[i]];\n      this.$set(keys[i], populatedIds);\n    }\n    return this;\n  }\n\n  for (i = 0; i < path.length; i++) {\n    populatedIds = this.populated(path[i]);\n    if (!populatedIds) {\n      continue;\n    }\n    delete this.$__.populated[path[i]];\n    this.$set(path[i], populatedIds);\n  }\n  return this;\n};\n\n\n/**\n * Returns the full path to this document.\n *\n * @param {String} [path]\n * @return {String}\n * @api private\n * @method $__fullPath\n * @memberOf Document\n */\n\nDocument.prototype.$__fullPath = function(path) {\n  // overridden in SubDocuments\n  return path || '';\n};\n\n/*!\n * Module exports.\n */\n\nDocument.ValidationError = ValidationError;\nmodule.exports = exports = Document;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/document.js\n// module id = 31\n// module chunks = 0","'use strict';\n\nvar f = require('util').format,\n  require_optional = require('require_optional');\n\n// Set property function\nvar setProperty = function(obj, prop, flag, values) {\n  Object.defineProperty(obj, prop.name, {\n    enumerable: true,\n    set: function(value) {\n      if (typeof value !== 'boolean') throw new Error(f('%s required a boolean', prop.name));\n      // Flip the bit to 1\n      if (value === true) values.flags |= flag;\n      // Flip the bit to 0 if it's set, otherwise ignore\n      if (value === false && (values.flags & flag) === flag) values.flags ^= flag;\n      prop.value = value;\n    },\n    get: function() {\n      return prop.value;\n    }\n  });\n};\n\n// Set property function\nvar getProperty = function(obj, propName, fieldName, values, func) {\n  Object.defineProperty(obj, propName, {\n    enumerable: true,\n    get: function() {\n      // Not parsed yet, parse it\n      if (values[fieldName] == null && obj.isParsed && !obj.isParsed()) {\n        obj.parse();\n      }\n\n      // Do we have a post processing function\n      if (typeof func === 'function') return func(values[fieldName]);\n      // Return raw value\n      return values[fieldName];\n    }\n  });\n};\n\n// Set simple property\nvar getSingleProperty = function(obj, name, value) {\n  Object.defineProperty(obj, name, {\n    enumerable: true,\n    get: function() {\n      return value;\n    }\n  });\n};\n\n// Shallow copy\nvar copy = function(fObj, tObj) {\n  tObj = tObj || {};\n  for (var name in fObj) tObj[name] = fObj[name];\n  return tObj;\n};\n\nvar debugOptions = function(debugFields, options) {\n  var finaloptions = {};\n  debugFields.forEach(function(n) {\n    finaloptions[n] = options[n];\n  });\n\n  return finaloptions;\n};\n\nvar retrieveBSON = function() {\n  var BSON = require('bson');\n  BSON.native = false;\n\n  try {\n    var optionalBSON = require_optional('bson-ext');\n    if (optionalBSON) {\n      optionalBSON.native = true;\n      return optionalBSON;\n    }\n  } catch (err) {} // eslint-disable-line\n\n  return BSON;\n};\n\n// Throw an error if an attempt to use Snappy is made when Snappy is not installed\nvar noSnappyWarning = function() {\n  throw new Error(\n    'Attempted to use Snappy compression, but Snappy is not installed. Install or disable Snappy compression and try again.'\n  );\n};\n\n// Facilitate loading Snappy optionally\nvar retrieveSnappy = function() {\n  var snappy = null;\n  try {\n    snappy = require_optional('snappy');\n  } catch (error) {} // eslint-disable-line\n  if (!snappy) {\n    snappy = {\n      compress: noSnappyWarning,\n      uncompress: noSnappyWarning,\n      compressSync: noSnappyWarning,\n      uncompressSync: noSnappyWarning\n    };\n  }\n  return snappy;\n};\n\nexports.setProperty = setProperty;\nexports.getProperty = getProperty;\nexports.getSingleProperty = getSingleProperty;\nexports.copy = copy;\nexports.debugOptions = debugOptions;\nexports.retrieveBSON = retrieveBSON;\nexports.retrieveSnappy = retrieveSnappy;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/connection/utils.js\n// module id = 32\n// module chunks = 0","'use strict';\n\nvar retrieveBSON = require('./utils').retrieveBSON;\nvar BSON = retrieveBSON();\nvar Long = BSON.Long;\n\n// Incrementing request id\nvar _requestId = 0;\n\n// Wire command operation ids\nvar opcodes = require('../wireprotocol/shared').opcodes;\n\n// Query flags\nvar OPTS_TAILABLE_CURSOR = 2;\nvar OPTS_SLAVE = 4;\nvar OPTS_OPLOG_REPLAY = 8;\nvar OPTS_NO_CURSOR_TIMEOUT = 16;\nvar OPTS_AWAIT_DATA = 32;\nvar OPTS_EXHAUST = 64;\nvar OPTS_PARTIAL = 128;\n\n// Response flags\nvar CURSOR_NOT_FOUND = 0;\nvar QUERY_FAILURE = 2;\nvar SHARD_CONFIG_STALE = 4;\nvar AWAIT_CAPABLE = 8;\n\n/**************************************************************\n * QUERY\n **************************************************************/\nvar Query = function(bson, ns, query, options) {\n  var self = this;\n  // Basic options needed to be passed in\n  if (ns == null) throw new Error('ns must be specified for query');\n  if (query == null) throw new Error('query must be specified for query');\n\n  // Validate that we are not passing 0x00 in the collection name\n  if (ns.indexOf('\\x00') !== -1) {\n    throw new Error('namespace cannot contain a null character');\n  }\n\n  // Basic options\n  this.bson = bson;\n  this.ns = ns;\n  this.query = query;\n\n  // Ensure empty options\n  this.options = options || {};\n\n  // Additional options\n  this.numberToSkip = options.numberToSkip || 0;\n  this.numberToReturn = options.numberToReturn || 0;\n  this.returnFieldSelector = options.returnFieldSelector || null;\n  this.requestId = Query.getRequestId();\n\n  // Serialization option\n  this.serializeFunctions =\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  this.ignoreUndefined =\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n  this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n  this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n  this.batchSize = self.numberToReturn;\n\n  // Flags\n  this.tailable = false;\n  this.slaveOk = typeof options.slaveOk === 'boolean' ? options.slaveOk : false;\n  this.oplogReplay = false;\n  this.noCursorTimeout = false;\n  this.awaitData = false;\n  this.exhaust = false;\n  this.partial = false;\n};\n\n//\n// Assign a new request Id\nQuery.prototype.incRequestId = function() {\n  this.requestId = _requestId++;\n};\n\n//\n// Assign a new request Id\nQuery.nextRequestId = function() {\n  return _requestId + 1;\n};\n\n//\n// Uses a single allocated buffer for the process, avoiding multiple memory allocations\nQuery.prototype.toBin = function() {\n  var self = this;\n  var buffers = [];\n  var projection = null;\n\n  // Set up the flags\n  var flags = 0;\n  if (this.tailable) {\n    flags |= OPTS_TAILABLE_CURSOR;\n  }\n\n  if (this.slaveOk) {\n    flags |= OPTS_SLAVE;\n  }\n\n  if (this.oplogReplay) {\n    flags |= OPTS_OPLOG_REPLAY;\n  }\n\n  if (this.noCursorTimeout) {\n    flags |= OPTS_NO_CURSOR_TIMEOUT;\n  }\n\n  if (this.awaitData) {\n    flags |= OPTS_AWAIT_DATA;\n  }\n\n  if (this.exhaust) {\n    flags |= OPTS_EXHAUST;\n  }\n\n  if (this.partial) {\n    flags |= OPTS_PARTIAL;\n  }\n\n  // If batchSize is different to self.numberToReturn\n  if (self.batchSize !== self.numberToReturn) self.numberToReturn = self.batchSize;\n\n  // Allocate write protocol header buffer\n  var header = new Buffer(\n    4 * 4 + // Header\n    4 + // Flags\n    Buffer.byteLength(self.ns) +\n    1 + // namespace\n    4 + // numberToSkip\n      4 // numberToReturn\n  );\n\n  // Add header to buffers\n  buffers.push(header);\n\n  // Serialize the query\n  var query = self.bson.serialize(this.query, {\n    checkKeys: this.checkKeys,\n    serializeFunctions: this.serializeFunctions,\n    ignoreUndefined: this.ignoreUndefined\n  });\n\n  // Add query document\n  buffers.push(query);\n\n  if (self.returnFieldSelector && Object.keys(self.returnFieldSelector).length > 0) {\n    // Serialize the projection document\n    projection = self.bson.serialize(this.returnFieldSelector, {\n      checkKeys: this.checkKeys,\n      serializeFunctions: this.serializeFunctions,\n      ignoreUndefined: this.ignoreUndefined\n    });\n    // Add projection document\n    buffers.push(projection);\n  }\n\n  // Total message size\n  var totalLength = header.length + query.length + (projection ? projection.length : 0);\n\n  // Set up the index\n  var index = 4;\n\n  // Write total document length\n  header[3] = (totalLength >> 24) & 0xff;\n  header[2] = (totalLength >> 16) & 0xff;\n  header[1] = (totalLength >> 8) & 0xff;\n  header[0] = totalLength & 0xff;\n\n  // Write header information requestId\n  header[index + 3] = (this.requestId >> 24) & 0xff;\n  header[index + 2] = (this.requestId >> 16) & 0xff;\n  header[index + 1] = (this.requestId >> 8) & 0xff;\n  header[index] = this.requestId & 0xff;\n  index = index + 4;\n\n  // Write header information responseTo\n  header[index + 3] = (0 >> 24) & 0xff;\n  header[index + 2] = (0 >> 16) & 0xff;\n  header[index + 1] = (0 >> 8) & 0xff;\n  header[index] = 0 & 0xff;\n  index = index + 4;\n\n  // Write header information OP_QUERY\n  header[index + 3] = (opcodes.OP_QUERY >> 24) & 0xff;\n  header[index + 2] = (opcodes.OP_QUERY >> 16) & 0xff;\n  header[index + 1] = (opcodes.OP_QUERY >> 8) & 0xff;\n  header[index] = opcodes.OP_QUERY & 0xff;\n  index = index + 4;\n\n  // Write header information flags\n  header[index + 3] = (flags >> 24) & 0xff;\n  header[index + 2] = (flags >> 16) & 0xff;\n  header[index + 1] = (flags >> 8) & 0xff;\n  header[index] = flags & 0xff;\n  index = index + 4;\n\n  // Write collection name\n  index = index + header.write(this.ns, index, 'utf8') + 1;\n  header[index - 1] = 0;\n\n  // Write header information flags numberToSkip\n  header[index + 3] = (this.numberToSkip >> 24) & 0xff;\n  header[index + 2] = (this.numberToSkip >> 16) & 0xff;\n  header[index + 1] = (this.numberToSkip >> 8) & 0xff;\n  header[index] = this.numberToSkip & 0xff;\n  index = index + 4;\n\n  // Write header information flags numberToReturn\n  header[index + 3] = (this.numberToReturn >> 24) & 0xff;\n  header[index + 2] = (this.numberToReturn >> 16) & 0xff;\n  header[index + 1] = (this.numberToReturn >> 8) & 0xff;\n  header[index] = this.numberToReturn & 0xff;\n  index = index + 4;\n\n  // Return the buffers\n  return buffers;\n};\n\nQuery.getRequestId = function() {\n  return ++_requestId;\n};\n\n/**************************************************************\n * GETMORE\n **************************************************************/\nvar GetMore = function(bson, ns, cursorId, opts) {\n  opts = opts || {};\n  this.numberToReturn = opts.numberToReturn || 0;\n  this.requestId = _requestId++;\n  this.bson = bson;\n  this.ns = ns;\n  this.cursorId = cursorId;\n};\n\n//\n// Uses a single allocated buffer for the process, avoiding multiple memory allocations\nGetMore.prototype.toBin = function() {\n  var length = 4 + Buffer.byteLength(this.ns) + 1 + 4 + 8 + 4 * 4;\n  // Create command buffer\n  var index = 0;\n  // Allocate buffer\n  var _buffer = new Buffer(length);\n\n  // Write header information\n  // index = write32bit(index, _buffer, length);\n  _buffer[index + 3] = (length >> 24) & 0xff;\n  _buffer[index + 2] = (length >> 16) & 0xff;\n  _buffer[index + 1] = (length >> 8) & 0xff;\n  _buffer[index] = length & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, requestId);\n  _buffer[index + 3] = (this.requestId >> 24) & 0xff;\n  _buffer[index + 2] = (this.requestId >> 16) & 0xff;\n  _buffer[index + 1] = (this.requestId >> 8) & 0xff;\n  _buffer[index] = this.requestId & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, 0);\n  _buffer[index + 3] = (0 >> 24) & 0xff;\n  _buffer[index + 2] = (0 >> 16) & 0xff;\n  _buffer[index + 1] = (0 >> 8) & 0xff;\n  _buffer[index] = 0 & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, OP_GETMORE);\n  _buffer[index + 3] = (opcodes.OP_GETMORE >> 24) & 0xff;\n  _buffer[index + 2] = (opcodes.OP_GETMORE >> 16) & 0xff;\n  _buffer[index + 1] = (opcodes.OP_GETMORE >> 8) & 0xff;\n  _buffer[index] = opcodes.OP_GETMORE & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, 0);\n  _buffer[index + 3] = (0 >> 24) & 0xff;\n  _buffer[index + 2] = (0 >> 16) & 0xff;\n  _buffer[index + 1] = (0 >> 8) & 0xff;\n  _buffer[index] = 0 & 0xff;\n  index = index + 4;\n\n  // Write collection name\n  index = index + _buffer.write(this.ns, index, 'utf8') + 1;\n  _buffer[index - 1] = 0;\n\n  // Write batch size\n  // index = write32bit(index, _buffer, numberToReturn);\n  _buffer[index + 3] = (this.numberToReturn >> 24) & 0xff;\n  _buffer[index + 2] = (this.numberToReturn >> 16) & 0xff;\n  _buffer[index + 1] = (this.numberToReturn >> 8) & 0xff;\n  _buffer[index] = this.numberToReturn & 0xff;\n  index = index + 4;\n\n  // Write cursor id\n  // index = write32bit(index, _buffer, cursorId.getLowBits());\n  _buffer[index + 3] = (this.cursorId.getLowBits() >> 24) & 0xff;\n  _buffer[index + 2] = (this.cursorId.getLowBits() >> 16) & 0xff;\n  _buffer[index + 1] = (this.cursorId.getLowBits() >> 8) & 0xff;\n  _buffer[index] = this.cursorId.getLowBits() & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, cursorId.getHighBits());\n  _buffer[index + 3] = (this.cursorId.getHighBits() >> 24) & 0xff;\n  _buffer[index + 2] = (this.cursorId.getHighBits() >> 16) & 0xff;\n  _buffer[index + 1] = (this.cursorId.getHighBits() >> 8) & 0xff;\n  _buffer[index] = this.cursorId.getHighBits() & 0xff;\n  index = index + 4;\n\n  // Return buffer\n  return _buffer;\n};\n\n/**************************************************************\n * KILLCURSOR\n **************************************************************/\nvar KillCursor = function(bson, cursorIds) {\n  this.requestId = _requestId++;\n  this.cursorIds = cursorIds;\n};\n\n//\n// Uses a single allocated buffer for the process, avoiding multiple memory allocations\nKillCursor.prototype.toBin = function() {\n  var length = 4 + 4 + 4 * 4 + this.cursorIds.length * 8;\n\n  // Create command buffer\n  var index = 0;\n  var _buffer = new Buffer(length);\n\n  // Write header information\n  // index = write32bit(index, _buffer, length);\n  _buffer[index + 3] = (length >> 24) & 0xff;\n  _buffer[index + 2] = (length >> 16) & 0xff;\n  _buffer[index + 1] = (length >> 8) & 0xff;\n  _buffer[index] = length & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, requestId);\n  _buffer[index + 3] = (this.requestId >> 24) & 0xff;\n  _buffer[index + 2] = (this.requestId >> 16) & 0xff;\n  _buffer[index + 1] = (this.requestId >> 8) & 0xff;\n  _buffer[index] = this.requestId & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, 0);\n  _buffer[index + 3] = (0 >> 24) & 0xff;\n  _buffer[index + 2] = (0 >> 16) & 0xff;\n  _buffer[index + 1] = (0 >> 8) & 0xff;\n  _buffer[index] = 0 & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, OP_KILL_CURSORS);\n  _buffer[index + 3] = (opcodes.OP_KILL_CURSORS >> 24) & 0xff;\n  _buffer[index + 2] = (opcodes.OP_KILL_CURSORS >> 16) & 0xff;\n  _buffer[index + 1] = (opcodes.OP_KILL_CURSORS >> 8) & 0xff;\n  _buffer[index] = opcodes.OP_KILL_CURSORS & 0xff;\n  index = index + 4;\n\n  // index = write32bit(index, _buffer, 0);\n  _buffer[index + 3] = (0 >> 24) & 0xff;\n  _buffer[index + 2] = (0 >> 16) & 0xff;\n  _buffer[index + 1] = (0 >> 8) & 0xff;\n  _buffer[index] = 0 & 0xff;\n  index = index + 4;\n\n  // Write batch size\n  // index = write32bit(index, _buffer, this.cursorIds.length);\n  _buffer[index + 3] = (this.cursorIds.length >> 24) & 0xff;\n  _buffer[index + 2] = (this.cursorIds.length >> 16) & 0xff;\n  _buffer[index + 1] = (this.cursorIds.length >> 8) & 0xff;\n  _buffer[index] = this.cursorIds.length & 0xff;\n  index = index + 4;\n\n  // Write all the cursor ids into the array\n  for (var i = 0; i < this.cursorIds.length; i++) {\n    // Write cursor id\n    // index = write32bit(index, _buffer, cursorIds[i].getLowBits());\n    _buffer[index + 3] = (this.cursorIds[i].getLowBits() >> 24) & 0xff;\n    _buffer[index + 2] = (this.cursorIds[i].getLowBits() >> 16) & 0xff;\n    _buffer[index + 1] = (this.cursorIds[i].getLowBits() >> 8) & 0xff;\n    _buffer[index] = this.cursorIds[i].getLowBits() & 0xff;\n    index = index + 4;\n\n    // index = write32bit(index, _buffer, cursorIds[i].getHighBits());\n    _buffer[index + 3] = (this.cursorIds[i].getHighBits() >> 24) & 0xff;\n    _buffer[index + 2] = (this.cursorIds[i].getHighBits() >> 16) & 0xff;\n    _buffer[index + 1] = (this.cursorIds[i].getHighBits() >> 8) & 0xff;\n    _buffer[index] = this.cursorIds[i].getHighBits() & 0xff;\n    index = index + 4;\n  }\n\n  // Return buffer\n  return _buffer;\n};\n\nvar Response = function(bson, message, msgHeader, msgBody, opts) {\n  opts = opts || { promoteLongs: true, promoteValues: true, promoteBuffers: false };\n  this.parsed = false;\n  this.raw = message;\n  this.data = msgBody;\n  this.bson = bson;\n  this.opts = opts;\n\n  // Read the message header\n  this.length = msgHeader.length;\n  this.requestId = msgHeader.requestId;\n  this.responseTo = msgHeader.responseTo;\n  this.opCode = msgHeader.opCode;\n  this.fromCompressed = msgHeader.fromCompressed;\n\n  // Read the message body\n  this.responseFlags = msgBody.readInt32LE(0);\n  this.cursorId = new Long(msgBody.readInt32LE(4), msgBody.readInt32LE(8));\n  this.startingFrom = msgBody.readInt32LE(12);\n  this.numberReturned = msgBody.readInt32LE(16);\n\n  // Preallocate document array\n  this.documents = new Array(this.numberReturned);\n\n  // Flag values\n  this.cursorNotFound = (this.responseFlags & CURSOR_NOT_FOUND) !== 0;\n  this.queryFailure = (this.responseFlags & QUERY_FAILURE) !== 0;\n  this.shardConfigStale = (this.responseFlags & SHARD_CONFIG_STALE) !== 0;\n  this.awaitCapable = (this.responseFlags & AWAIT_CAPABLE) !== 0;\n  this.promoteLongs = typeof opts.promoteLongs === 'boolean' ? opts.promoteLongs : true;\n  this.promoteValues = typeof opts.promoteValues === 'boolean' ? opts.promoteValues : true;\n  this.promoteBuffers = typeof opts.promoteBuffers === 'boolean' ? opts.promoteBuffers : false;\n};\n\nResponse.prototype.isParsed = function() {\n  return this.parsed;\n};\n\nResponse.prototype.parse = function(options) {\n  // Don't parse again if not needed\n  if (this.parsed) return;\n  options = options || {};\n\n  // Allow the return of raw documents instead of parsing\n  var raw = options.raw || false;\n  var documentsReturnedIn = options.documentsReturnedIn || null;\n  var promoteLongs =\n    typeof options.promoteLongs === 'boolean' ? options.promoteLongs : this.opts.promoteLongs;\n  var promoteValues =\n    typeof options.promoteValues === 'boolean' ? options.promoteValues : this.opts.promoteValues;\n  var promoteBuffers =\n    typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : this.opts.promoteBuffers;\n  var bsonSize, _options;\n\n  // Set up the options\n  _options = {\n    promoteLongs: promoteLongs,\n    promoteValues: promoteValues,\n    promoteBuffers: promoteBuffers\n  };\n\n  // Position within OP_REPLY at which documents start\n  // (See https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#wire-op-reply)\n  this.index = 20;\n\n  //\n  // Single document and documentsReturnedIn set\n  //\n  if (this.numberReturned === 1 && documentsReturnedIn != null && raw) {\n    // Calculate the bson size\n    bsonSize =\n      this.data[this.index] |\n      (this.data[this.index + 1] << 8) |\n      (this.data[this.index + 2] << 16) |\n      (this.data[this.index + 3] << 24);\n    // Slice out the buffer containing the command result document\n    var document = this.data.slice(this.index, this.index + bsonSize);\n    // Set up field we wish to keep as raw\n    var fieldsAsRaw = {};\n    fieldsAsRaw[documentsReturnedIn] = true;\n    _options.fieldsAsRaw = fieldsAsRaw;\n\n    // Deserialize but keep the array of documents in non-parsed form\n    var doc = this.bson.deserialize(document, _options);\n\n    // Get the documents\n    this.documents = doc.cursor[documentsReturnedIn];\n    this.numberReturned = this.documents.length;\n    // Ensure we have a Long valie cursor id\n    this.cursorId =\n      typeof doc.cursor.id === 'number' ? Long.fromNumber(doc.cursor.id) : doc.cursor.id;\n\n    // Adjust the index\n    this.index = this.index + bsonSize;\n\n    // Set as parsed\n    this.parsed = true;\n    return;\n  }\n\n  //\n  // Parse Body\n  //\n  for (var i = 0; i < this.numberReturned; i++) {\n    bsonSize =\n      this.data[this.index] |\n      (this.data[this.index + 1] << 8) |\n      (this.data[this.index + 2] << 16) |\n      (this.data[this.index + 3] << 24);\n\n    // If we have raw results specified slice the return document\n    if (raw) {\n      this.documents[i] = this.data.slice(this.index, this.index + bsonSize);\n    } else {\n      this.documents[i] = this.bson.deserialize(\n        this.data.slice(this.index, this.index + bsonSize),\n        _options\n      );\n    }\n\n    // Adjust the index\n    this.index = this.index + bsonSize;\n  }\n\n  // Set parsed\n  this.parsed = true;\n};\n\nmodule.exports = {\n  Query: Query,\n  GetMore: GetMore,\n  Response: Response,\n  KillCursor: KillCursor\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/connection/commands.js\n// module id = 33\n// module chunks = 0","'use strict';\n\n/*!\n * Module dependencies.\n */\n\nvar $exists = require('./schema/operators/exists');\nvar $type = require('./schema/operators/type');\nvar utils = require('./utils');\nvar MongooseError = require('./error');\nvar CastError = MongooseError.CastError;\nvar ValidatorError = MongooseError.ValidatorError;\n\n/**\n * SchemaType constructor. Do **not** instantiate `SchemaType` directly.\n * Mongoose converts your schema paths into SchemaTypes automatically.\n *\n * ####Example:\n *\n *     const schema = new Schema({ name: String });\n *     schema.path('name') instanceof SchemaType; // true\n *\n * @param {String} path\n * @param {Object} [options]\n * @param {String} [instance]\n * @api public\n */\n\nfunction SchemaType(path, options, instance) {\n  this.path = path;\n  this.instance = instance;\n  this.validators = [];\n  this.setters = [];\n  this.getters = [];\n  this.options = options;\n  this._index = null;\n  this.selected;\n\n  for (var prop in options) {\n    if (this[prop] && typeof this[prop] === 'function') {\n      // { unique: true, index: true }\n      if (prop === 'index' && this._index) {\n        continue;\n      }\n\n      var val = options[prop];\n      // Special case so we don't screw up array defaults, see gh-5780\n      if (prop === 'default') {\n        this.default(val);\n        continue;\n      }\n\n      var opts = Array.isArray(val) ? val : [val];\n\n      this[prop].apply(this, opts);\n    }\n  }\n\n  Object.defineProperty(this, '$$context', {\n    enumerable: false,\n    configurable: false,\n    writable: true,\n    value: null\n  });\n}\n\n/**\n * Sets a default value for this SchemaType.\n *\n * ####Example:\n *\n *     var schema = new Schema({ n: { type: Number, default: 10 })\n *     var M = db.model('M', schema)\n *     var m = new M;\n *     console.log(m.n) // 10\n *\n * Defaults can be either `functions` which return the value to use as the default or the literal value itself. Either way, the value will be cast based on its schema type before being set during document creation.\n *\n * ####Example:\n *\n *     // values are cast:\n *     var schema = new Schema({ aNumber: { type: Number, default: 4.815162342 }})\n *     var M = db.model('M', schema)\n *     var m = new M;\n *     console.log(m.aNumber) // 4.815162342\n *\n *     // default unique objects for Mixed types:\n *     var schema = new Schema({ mixed: Schema.Types.Mixed });\n *     schema.path('mixed').default(function () {\n *       return {};\n *     });\n *\n *     // if we don't use a function to return object literals for Mixed defaults,\n *     // each document will receive a reference to the same object literal creating\n *     // a \"shared\" object instance:\n *     var schema = new Schema({ mixed: Schema.Types.Mixed });\n *     schema.path('mixed').default({});\n *     var M = db.model('M', schema);\n *     var m1 = new M;\n *     m1.mixed.added = 1;\n *     console.log(m1.mixed); // { added: 1 }\n *     var m2 = new M;\n *     console.log(m2.mixed); // { added: 1 }\n *\n * @param {Function|any} val the default value\n * @return {defaultValue}\n * @api public\n */\n\nSchemaType.prototype.default = function(val) {\n  if (arguments.length === 1) {\n    if (val === void 0) {\n      this.defaultValue = void 0;\n      return void 0;\n    }\n    this.defaultValue = val;\n    return this.defaultValue;\n  } else if (arguments.length > 1) {\n    this.defaultValue = utils.args(arguments);\n  }\n  return this.defaultValue;\n};\n\n/**\n * Declares the index options for this schematype.\n *\n * ####Example:\n *\n *     var s = new Schema({ name: { type: String, index: true })\n *     var s = new Schema({ loc: { type: [Number], index: 'hashed' })\n *     var s = new Schema({ loc: { type: [Number], index: '2d', sparse: true })\n *     var s = new Schema({ loc: { type: [Number], index: { type: '2dsphere', sparse: true }})\n *     var s = new Schema({ date: { type: Date, index: { unique: true, expires: '1d' }})\n *     Schema.path('my.path').index(true);\n *     Schema.path('my.date').index({ expires: 60 });\n *     Schema.path('my.path').index({ unique: true, sparse: true });\n *\n * ####NOTE:\n *\n * _Indexes are created in the background by default. Specify `background: false` to override._\n *\n * [Direction doesn't matter for single key indexes](http://www.mongodb.org/display/DOCS/Indexes#Indexes-CompoundKeysIndexes)\n *\n * @param {Object|Boolean|String} options\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.index = function(options) {\n  this._index = options;\n  utils.expires(this._index);\n  return this;\n};\n\n/**\n * Declares an unique index.\n *\n * ####Example:\n *\n *     var s = new Schema({ name: { type: String, unique: true }});\n *     Schema.path('name').index({ unique: true });\n *\n * _NOTE: violating the constraint returns an `E11000` error from MongoDB when saving, not a Mongoose validation error._\n *\n * @param {Boolean} bool\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.unique = function(bool) {\n  if (this._index === false) {\n    if (!bool) {\n      return;\n    }\n    throw new Error('Path \"' + this.path + '\" may not have `index` set to ' +\n      'false and `unique` set to true');\n  }\n  if (this._index == null || this._index === true) {\n    this._index = {};\n  } else if (typeof this._index === 'string') {\n    this._index = {type: this._index};\n  }\n\n  this._index.unique = bool;\n  return this;\n};\n\n/**\n * Declares a full text index.\n *\n * ###Example:\n *\n *      var s = new Schema({name : {type: String, text : true })\n *      Schema.path('name').index({text : true});\n * @param {Boolean} bool\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.text = function(bool) {\n  if (this._index === null || this._index === undefined ||\n    typeof this._index === 'boolean') {\n    this._index = {};\n  } else if (typeof this._index === 'string') {\n    this._index = {type: this._index};\n  }\n\n  this._index.text = bool;\n  return this;\n};\n\n/**\n * Declares a sparse index.\n *\n * ####Example:\n *\n *     var s = new Schema({ name: { type: String, sparse: true })\n *     Schema.path('name').index({ sparse: true });\n *\n * @param {Boolean} bool\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.sparse = function(bool) {\n  if (this._index === null || this._index === undefined ||\n    typeof this._index === 'boolean') {\n    this._index = {};\n  } else if (typeof this._index === 'string') {\n    this._index = {type: this._index};\n  }\n\n  this._index.sparse = bool;\n  return this;\n};\n\n/**\n * Adds a setter to this schematype.\n *\n * ####Example:\n *\n *     function capitalize (val) {\n *       if (typeof val !== 'string') val = '';\n *       return val.charAt(0).toUpperCase() + val.substring(1);\n *     }\n *\n *     // defining within the schema\n *     var s = new Schema({ name: { type: String, set: capitalize }});\n *\n *     // or with the SchemaType\n *     var s = new Schema({ name: String })\n *     s.path('name').set(capitalize);\n *\n * Setters allow you to transform the data before it gets to the raw mongodb\n * document or query.\n *\n * Suppose you are implementing user registration for a website. Users provide\n * an email and password, which gets saved to mongodb. The email is a string\n * that you will want to normalize to lower case, in order to avoid one email\n * having more than one account -- e.g., otherwise, avenue@q.com can be registered for 2 accounts via avenue@q.com and AvEnUe@Q.CoM.\n *\n * You can set up email lower case normalization easily via a Mongoose setter.\n *\n *     function toLower(v) {\n *       return v.toLowerCase();\n *     }\n *\n *     var UserSchema = new Schema({\n *       email: { type: String, set: toLower }\n *     });\n *\n *     var User = db.model('User', UserSchema);\n *\n *     var user = new User({email: 'AVENUE@Q.COM'});\n *     console.log(user.email); // 'avenue@q.com'\n *\n *     // or\n *     var user = new User();\n *     user.email = 'Avenue@Q.com';\n *     console.log(user.email); // 'avenue@q.com'\n *     User.updateOne({ _id: _id }, { $set: { email: 'AVENUE@Q.COM' } }); // update to 'avenue@q.com'\n *\n * As you can see above, setters allow you to transform the data before it\n * stored in MongoDB, or before executing a query.\n *\n * _NOTE: we could have also just used the built-in `lowercase: true` SchemaType option instead of defining our own function._\n *\n *     new Schema({ email: { type: String, lowercase: true }})\n *\n * Setters are also passed a second argument, the schematype on which the setter was defined. This allows for tailored behavior based on options passed in the schema.\n *\n *     function inspector (val, schematype) {\n *       if (schematype.options.required) {\n *         return schematype.path + ' is required';\n *       } else {\n *         return val;\n *       }\n *     }\n *\n *     var VirusSchema = new Schema({\n *       name: { type: String, required: true, set: inspector },\n *       taxonomy: { type: String, set: inspector }\n *     })\n *\n *     var Virus = db.model('Virus', VirusSchema);\n *     var v = new Virus({ name: 'Parvoviridae', taxonomy: 'Parvovirinae' });\n *\n *     console.log(v.name);     // name is required\n *     console.log(v.taxonomy); // Parvovirinae\n *\n * You can also use setters to modify other properties on the document. If\n * you're setting a property `name` on a document, the setter will run with\n * `this` as the document. Be careful, in mongoose 5 setters will also run\n * when querying by `name` with `this` as the query.\n *\n * ```javascript\n * const nameSchema = new Schema({ name: String, keywords: [String] });\n * nameSchema.path('name').set(function(v) {\n *   // Need to check if `this` is a document, because in mongoose 5\n *   // setters will also run on queries, in which case `this` will be a\n *   // mongoose query object.\n *   if (this instanceof Document && v != null) {\n *     this.keywords = v.split(' ');\n *   }\n *   return v;\n * });\n * ```\n *\n * @param {Function} fn\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.set = function(fn) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('A setter must be a function.');\n  }\n  this.setters.push(fn);\n  return this;\n};\n\n/**\n * Adds a getter to this schematype.\n *\n * ####Example:\n *\n *     function dob (val) {\n *       if (!val) return val;\n *       return (val.getMonth() + 1) + \"/\" + val.getDate() + \"/\" + val.getFullYear();\n *     }\n *\n *     // defining within the schema\n *     var s = new Schema({ born: { type: Date, get: dob })\n *\n *     // or by retreiving its SchemaType\n *     var s = new Schema({ born: Date })\n *     s.path('born').get(dob)\n *\n * Getters allow you to transform the representation of the data as it travels from the raw mongodb document to the value that you see.\n *\n * Suppose you are storing credit card numbers and you want to hide everything except the last 4 digits to the mongoose user. You can do so by defining a getter in the following way:\n *\n *     function obfuscate (cc) {\n *       return '****-****-****-' + cc.slice(cc.length-4, cc.length);\n *     }\n *\n *     var AccountSchema = new Schema({\n *       creditCardNumber: { type: String, get: obfuscate }\n *     });\n *\n *     var Account = db.model('Account', AccountSchema);\n *\n *     Account.findById(id, function (err, found) {\n *       console.log(found.creditCardNumber); // '****-****-****-1234'\n *     });\n *\n * Getters are also passed a second argument, the schematype on which the getter was defined. This allows for tailored behavior based on options passed in the schema.\n *\n *     function inspector (val, schematype) {\n *       if (schematype.options.required) {\n *         return schematype.path + ' is required';\n *       } else {\n *         return schematype.path + ' is not';\n *       }\n *     }\n *\n *     var VirusSchema = new Schema({\n *       name: { type: String, required: true, get: inspector },\n *       taxonomy: { type: String, get: inspector }\n *     })\n *\n *     var Virus = db.model('Virus', VirusSchema);\n *\n *     Virus.findById(id, function (err, virus) {\n *       console.log(virus.name);     // name is required\n *       console.log(virus.taxonomy); // taxonomy is not\n *     })\n *\n * @param {Function} fn\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.get = function(fn) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('A getter must be a function.');\n  }\n  this.getters.push(fn);\n  return this;\n};\n\n/**\n * Adds validator(s) for this document path.\n *\n * Validators always receive the value to validate as their first argument and must return `Boolean`. Returning `false` means validation failed.\n *\n * The error message argument is optional. If not passed, the [default generic error message template](#error_messages_MongooseError-messages) will be used.\n *\n * ####Examples:\n *\n *     // make sure every value is equal to \"something\"\n *     function validator (val) {\n *       return val == 'something';\n *     }\n *     new Schema({ name: { type: String, validate: validator }});\n *\n *     // with a custom error message\n *\n *     var custom = [validator, 'Uh oh, {PATH} does not equal \"something\".']\n *     new Schema({ name: { type: String, validate: custom }});\n *\n *     // adding many validators at a time\n *\n *     var many = [\n *         { validator: validator, msg: 'uh oh' }\n *       , { validator: anotherValidator, msg: 'failed' }\n *     ]\n *     new Schema({ name: { type: String, validate: many }});\n *\n *     // or utilizing SchemaType methods directly:\n *\n *     var schema = new Schema({ name: 'string' });\n *     schema.path('name').validate(validator, 'validation of `{PATH}` failed with value `{VALUE}`');\n *\n * ####Error message templates:\n *\n * From the examples above, you may have noticed that error messages support basic templating. There are a few other template keywords besides `{PATH}` and `{VALUE}` too. To find out more, details are available [here](#error_messages_MongooseError.messages)\n *\n * ####Asynchronous validation:\n *\n * Passing a validator function that receives two arguments tells mongoose that the validator is an asynchronous validator. The first argument passed to the validator function is the value being validated. The second argument is a callback function that must called when you finish validating the value and passed either `true` or `false` to communicate either success or failure respectively.\n *\n *     schema.path('name').validate({\n *       isAsync: true,\n *       validator: function (value, respond) {\n *         doStuff(value, function () {\n *           ...\n *           respond(false); // validation failed\n *         });\n *       },\n *       message: 'Custom error message!' // Optional\n *     });\n *\n *     // Can also return a promise\n *     schema.path('name').validate({\n *       validator: function (value) {\n *         return new Promise(function (resolve, reject) {\n *           resolve(false); // validation failed\n *         });\n *       }\n *     });\n *\n * You might use asynchronous validators to retreive other documents from the database to validate against or to meet other I/O bound validation needs.\n *\n * Validation occurs `pre('save')` or whenever you manually execute [document#validate](#document_Document-validate).\n *\n * If validation fails during `pre('save')` and no callback was passed to receive the error, an `error` event will be emitted on your Models associated db [connection](#connection_Connection), passing the validation error object along.\n *\n *     var conn = mongoose.createConnection(..);\n *     conn.on('error', handleError);\n *\n *     var Product = conn.model('Product', yourSchema);\n *     var dvd = new Product(..);\n *     dvd.save(); // emits error on the `conn` above\n *\n * If you desire handling these errors at the Model level, attach an `error` listener to your Model and the event will instead be emitted there.\n *\n *     // registering an error listener on the Model lets us handle errors more locally\n *     Product.on('error', handleError);\n *\n * @param {RegExp|Function|Object} obj validator\n * @param {String} [errorMsg] optional error message\n * @param {String} [type] optional validator type\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.validate = function(obj, message, type) {\n  if (typeof obj === 'function' || obj && utils.getFunctionName(obj.constructor) === 'RegExp') {\n    var properties;\n    if (message instanceof Object && !type) {\n      properties = utils.clone(message);\n      if (!properties.message) {\n        properties.message = properties.msg;\n      }\n      properties.validator = obj;\n      properties.type = properties.type || 'user defined';\n    } else {\n      if (!message) {\n        message = MongooseError.messages.general.default;\n      }\n      if (!type) {\n        type = 'user defined';\n      }\n      properties = {message: message, type: type, validator: obj};\n    }\n    this.validators.push(properties);\n    return this;\n  }\n\n  var i,\n      length,\n      arg;\n\n  for (i = 0, length = arguments.length; i < length; i++) {\n    arg = arguments[i];\n    if (!(arg && utils.getFunctionName(arg.constructor) === 'Object')) {\n      var msg = 'Invalid validator. Received (' + typeof arg + ') '\n          + arg\n          + '. See http://mongoosejs.com/docs/api.html#schematype_SchemaType-validate';\n\n      throw new Error(msg);\n    }\n    this.validate(arg.validator, arg);\n  }\n\n  return this;\n};\n\n/**\n * Adds a required validator to this SchemaType. The validator gets added\n * to the front of this SchemaType's validators array using `unshift()`.\n *\n * ####Example:\n *\n *     var s = new Schema({ born: { type: Date, required: true })\n *\n *     // or with custom error message\n *\n *     var s = new Schema({ born: { type: Date, required: '{PATH} is required!' })\n *\n *     // or with a function\n *\n *     var s = new Schema({\n *       userId: ObjectId,\n *       username: {\n *         type: String,\n *         required: function() { return this.userId != null; }\n *       }\n *     })\n *\n *     // or with a function and a custom message\n *     var s = new Schema({\n *       userId: ObjectId,\n *       username: {\n *         type: String,\n *         required: [\n *           function() { return this.userId != null; },\n *           'username is required if id is specified'\n *         ]\n *       }\n *     })\n *\n *     // or through the path API\n *\n *     Schema.path('name').required(true);\n *\n *     // with custom error messaging\n *\n *     Schema.path('name').required(true, 'grrr :( ');\n *\n *     // or make a path conditionally required based on a function\n *     var isOver18 = function() { return this.age >= 18; };\n *     Schema.path('voterRegistrationId').required(isOver18);\n *\n * The required validator uses the SchemaType's `checkRequired` function to\n * determine whether a given value satisfies the required validator. By default,\n * a value satisfies the required validator if `val != null` (that is, if\n * the value is not null nor undefined). However, most built-in mongoose schema\n * types override the default `checkRequired` function:\n *\n * @param {Boolean|Function|Object} required enable/disable the validator, or function that returns required boolean, or options object\n * @param {Boolean|Function} [options.isRequired] enable/disable the validator, or function that returns required boolean\n * @param {Function} [options.ErrorConstructor] custom error constructor. The constructor receives 1 parameter, an object containing the validator properties.\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @see SchemaArray#checkRequired #schema_array_SchemaArray.checkRequired\n * @see SchemaBoolean#checkRequired #schema_boolean_SchemaBoolean-checkRequired\n * @see SchemaBuffer#checkRequired #schema_buffer_SchemaBuffer.schemaName\n * @see SchemaNumber#checkRequired #schema_number_SchemaNumber-min\n * @see SchemaObjectId#checkRequired #schema_objectid_ObjectId-auto\n * @see SchemaString#checkRequired #schema_string_SchemaString-checkRequired\n * @api public\n */\n\nSchemaType.prototype.required = function(required, message) {\n  var customOptions = {};\n  if (typeof required === 'object') {\n    customOptions = required;\n    message = customOptions.message || message;\n    required = required.isRequired;\n  }\n\n  if (required === false) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.requiredValidator;\n    }, this);\n\n    this.isRequired = false;\n    return this;\n  }\n\n  var _this = this;\n  this.isRequired = true;\n\n  this.requiredValidator = function(v) {\n    // no validation when this path wasn't selected in the query.\n    if (this != null && this.$__ && !this.isSelected(_this.path) && !this.isModified(_this.path)) {\n      return true;\n    }\n\n    return ((typeof required === 'function') && !required.apply(this)) ||\n        _this.checkRequired(v, this);\n  };\n  this.originalRequiredValue = required;\n\n  if (typeof required === 'string') {\n    message = required;\n    required = undefined;\n  }\n\n  var msg = message || MongooseError.messages.general.required;\n  this.validators.unshift(Object.assign({}, customOptions, {\n    validator: this.requiredValidator,\n    message: msg,\n    type: 'required'\n  }));\n\n  return this;\n};\n\n/**\n * Gets the default value\n *\n * @param {Object} scope the scope which callback are executed\n * @param {Boolean} init\n * @api private\n */\n\nSchemaType.prototype.getDefault = function(scope, init) {\n  var ret = typeof this.defaultValue === 'function'\n    ? this.defaultValue.call(scope)\n    : this.defaultValue;\n\n  if (ret !== null && ret !== undefined) {\n    if (typeof ret === 'object' && (!this.options || !this.options.shared)) {\n      ret = utils.clone(ret);\n    }\n\n    var casted = this.cast(ret, scope, init);\n    if (casted && casted.$isSingleNested) {\n      casted.$parent = scope;\n    }\n    return casted;\n  }\n  return ret;\n};\n\n/*!\n * Applies setters without casting\n *\n * @api private\n */\n\nSchemaType.prototype._applySetters = function(value, scope, init, priorVal) {\n  var v = value;\n  var setters = this.setters;\n  var len = setters.length;\n  var caster = this.caster;\n\n  while (len--) {\n    v = setters[len].call(scope, v, this);\n  }\n\n  if (Array.isArray(v) && caster && caster.setters) {\n    var newVal = [];\n    for (var i = 0; i < v.length; i++) {\n      newVal.push(caster.applySetters(v[i], scope, init, priorVal));\n    }\n    v = newVal;\n  }\n\n  return v;\n};\n\n/**\n * Applies setters\n *\n * @param {Object} value\n * @param {Object} scope\n * @param {Boolean} init\n * @api private\n */\n\nSchemaType.prototype.applySetters = function(value, scope, init, priorVal, options) {\n  var v = this._applySetters(value, scope, init, priorVal, options);\n\n  if (v == null) {\n    return v;\n  }\n\n  // do not cast until all setters are applied #665\n  v = this.cast(v, scope, init, priorVal, options);\n\n  return v;\n};\n\n/**\n * Applies getters to a value\n *\n * @param {Object} value\n * @param {Object} scope\n * @api private\n */\n\nSchemaType.prototype.applyGetters = function(value, scope) {\n  let v = value;\n  const getters = this.getters;\n  const len = getters.length;\n\n  if (len === 0) {\n    return v;\n  }\n\n  for (let i = 0; i < len; ++i) {\n    v = getters[i].call(scope, v, this);\n  }\n\n  return v;\n};\n\n/**\n * Sets default `select()` behavior for this path.\n *\n * Set to `true` if this path should always be included in the results, `false` if it should be excluded by default. This setting can be overridden at the query level.\n *\n * ####Example:\n *\n *     T = db.model('T', new Schema({ x: { type: String, select: true }}));\n *     T.find(..); // field x will always be selected ..\n *     // .. unless overridden;\n *     T.find().select('-x').exec(callback);\n *\n * @param {Boolean} val\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaType.prototype.select = function select(val) {\n  this.selected = !!val;\n  return this;\n};\n\n/**\n * Performs a validation of `value` using the validators declared for this SchemaType.\n *\n * @param {any} value\n * @param {Function} callback\n * @param {Object} scope\n * @api private\n */\n\nSchemaType.prototype.doValidate = function(value, fn, scope) {\n  var err = false;\n  var path = this.path;\n  var count = this.validators.length;\n\n  if (!count) {\n    return fn(null);\n  }\n\n  var validate = function(ok, validatorProperties) {\n    if (err) {\n      return;\n    }\n    if (ok === undefined || ok) {\n      if (--count <= 0) {\n        utils.immediate(function() {\n          fn(null);\n        });\n      }\n    } else {\n      var ErrorConstructor = validatorProperties.ErrorConstructor || ValidatorError;\n      err = new ErrorConstructor(validatorProperties);\n      err.$isValidatorError = true;\n      utils.immediate(function() {\n        fn(err);\n      });\n    }\n  };\n\n  var _this = this;\n  this.validators.forEach(function(v) {\n    if (err) {\n      return;\n    }\n\n    var validator = v.validator;\n    var ok;\n\n    var validatorProperties = utils.clone(v);\n    validatorProperties.path = path;\n    validatorProperties.value = value;\n\n    if (validator instanceof RegExp) {\n      validate(validator.test(value), validatorProperties);\n    } else if (typeof validator === 'function') {\n      if (value === undefined && validator !== _this.requiredValidator) {\n        validate(true, validatorProperties);\n        return;\n      }\n      if (validatorProperties.isAsync) {\n        asyncValidate(validator, scope, value, validatorProperties, validate);\n      } else {\n        try {\n          ok = validator.call(scope, value);\n        } catch (error) {\n          ok = false;\n          validatorProperties.reason = error;\n          if (error.message) {\n            validatorProperties.message = error.message;\n          }\n        }\n        if (ok != null && typeof ok.then === 'function') {\n          ok.then(\n            function(ok) { validate(ok, validatorProperties); },\n            function(error) {\n              validatorProperties.reason = error;\n              ok = false;\n              validate(ok, validatorProperties);\n            });\n        } else {\n          validate(ok, validatorProperties);\n        }\n      }\n    }\n  });\n};\n\n/*!\n * Handle async validators\n */\n\nfunction asyncValidate(validator, scope, value, props, cb) {\n  var called = false;\n  var returnVal = validator.call(scope, value, function(ok, customMsg) {\n    if (called) {\n      return;\n    }\n    called = true;\n    if (typeof returnVal === 'boolean') {\n      return;\n    }\n    if (customMsg) {\n      props.message = customMsg;\n    }\n    cb(ok, props);\n  });\n  if (typeof returnVal === 'boolean') {\n    called = true;\n    cb(returnVal, props);\n  } else if (returnVal && typeof returnVal.then === 'function') {\n    // Promise\n    returnVal.then(\n      function(ok) {\n        if (called) {\n          return;\n        }\n        called = true;\n        cb(ok, props);\n      },\n      function(error) {\n        if (called) {\n          return;\n        }\n        called = true;\n\n        props.reason = error;\n        cb(false, props);\n      });\n  }\n}\n\n/**\n * Performs a validation of `value` using the validators declared for this SchemaType.\n *\n * ####Note:\n *\n * This method ignores the asynchronous validators.\n *\n * @param {any} value\n * @param {Object} scope\n * @return {MongooseError|undefined}\n * @api private\n */\n\nSchemaType.prototype.doValidateSync = function(value, scope) {\n  var err = null,\n      path = this.path,\n      count = this.validators.length;\n\n  if (!count) {\n    return null;\n  }\n\n  var validate = function(ok, validatorProperties) {\n    if (err) {\n      return;\n    }\n    if (ok !== undefined && !ok) {\n      var ErrorConstructor = validatorProperties.ErrorConstructor || ValidatorError;\n      err = new ErrorConstructor(validatorProperties);\n      err.$isValidatorError = true;\n    }\n  };\n\n  var validators = this.validators;\n  if (value === void 0) {\n    if (this.validators.length > 0 && this.validators[0].type === 'required') {\n      validators = [this.validators[0]];\n    } else {\n      return null;\n    }\n  }\n\n  validators.forEach(function(v) {\n    if (err) {\n      return;\n    }\n\n    var validator = v.validator;\n    var validatorProperties = utils.clone(v);\n    validatorProperties.path = path;\n    validatorProperties.value = value;\n    var ok;\n\n    if (validator instanceof RegExp) {\n      validate(validator.test(value), validatorProperties);\n    } else if (typeof validator === 'function') {\n      // if not async validators\n      if (validator.length !== 2 && !validatorProperties.isAsync) {\n        try {\n          ok = validator.call(scope, value);\n        } catch (error) {\n          ok = false;\n          validatorProperties.reason = error;\n        }\n        validate(ok, validatorProperties);\n      }\n    }\n  });\n\n  return err;\n};\n\n/**\n * Determines if value is a valid Reference.\n *\n * @param {SchemaType} self\n * @param {Object} value\n * @param {Document} doc\n * @param {Boolean} init\n * @return {Boolean}\n * @api private\n */\n\nSchemaType._isRef = function(self, value, doc, init) {\n  // fast path\n  var ref = init && self.options && self.options.ref;\n\n  if (!ref && doc && doc.$__fullPath) {\n    // checks for\n    // - this populated with adhoc model and no ref was set in schema OR\n    // - setting / pushing values after population\n    var path = doc.$__fullPath(self.path);\n    var owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    ref = owner.populated(path);\n  }\n\n  if (ref) {\n    if (value == null) {\n      return true;\n    }\n    if (!Buffer.isBuffer(value) && // buffers are objects too\n        value._bsontype !== 'Binary' // raw binary value from the db\n        && utils.isObject(value) // might have deselected _id in population query\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.castForQuery(val);\n}\n\n/*!\n * ignore\n */\n\nfunction handleArray(val) {\n  var _this = this;\n  if (!Array.isArray(val)) {\n    return [this.castForQuery(val)];\n  }\n  return val.map(function(m) {\n    return _this.castForQuery(m);\n  });\n}\n\n/*!\n * ignore\n */\n\nSchemaType.prototype.$conditionalHandlers = {\n  $all: handleArray,\n  $eq: handleSingle,\n  $in: handleArray,\n  $ne: handleSingle,\n  $nin: handleArray,\n  $exists: $exists,\n  $type: $type\n};\n\n/*!\n * Wraps `castForQuery` to handle context\n */\n\nSchemaType.prototype.castForQueryWrapper = function(params) {\n  this.$$context = params.context;\n  if ('$conditional' in params) {\n    return this.castForQuery(params.$conditional, params.val);\n  }\n  if (params.$skipQueryCastForUpdate) {\n    return this._castForQuery(params.val);\n  }\n  return this.castForQuery(params.val);\n};\n\n/**\n * Cast the given value with the given optional query operator.\n *\n * @param {String} [$conditional] query operator, like `$eq` or `$in`\n * @param {any} val\n * @api private\n */\n\nSchemaType.prototype.castForQuery = function($conditional, val) {\n  var handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional);\n    }\n    return handler.call(this, val);\n  }\n  val = $conditional;\n  return this._castForQuery(val);\n};\n\n/*!\n * Internal switch for runSetters\n *\n * @api private\n */\n\nSchemaType.prototype._castForQuery = function(val) {\n  return this.applySetters(val, this.$$context);\n};\n\n/**\n * Default check for if this path satisfies the `required` validator.\n *\n * @param {any} val\n * @api private\n */\n\nSchemaType.prototype.checkRequired = function(val) {\n  return val != null;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = SchemaType;\n\nexports.CastError = CastError;\n\nexports.ValidatorError = ValidatorError;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/schematype.js\n// module id = 34\n// module chunks = 0","'use strict';\n\nvar f = require('util').format;\n\nvar Define = function(name, object, stream) {\n  this.name = name;\n  this.object = object;\n  this.stream = typeof stream === 'boolean' ? stream : false;\n  this.instrumentations = {};\n};\n\nDefine.prototype.classMethod = function(name, options) {\n  var keys = Object.keys(options).sort();\n  var key = generateKey(keys, options);\n\n  // Add a list of instrumentations\n  if (this.instrumentations[key] == null) {\n    this.instrumentations[key] = {\n      methods: [],\n      options: options\n    };\n  }\n\n  // Push to list of method for this instrumentation\n  this.instrumentations[key].methods.push(name);\n};\n\nvar generateKey = function(keys, options) {\n  var parts = [];\n  for (var i = 0; i < keys.length; i++) {\n    parts.push(f('%s=%s', keys[i], options[keys[i]]));\n  }\n\n  return parts.join();\n};\n\nDefine.prototype.staticMethod = function(name, options) {\n  options.static = true;\n  var keys = Object.keys(options).sort();\n  var key = generateKey(keys, options);\n\n  // Add a list of instrumentations\n  if (this.instrumentations[key] == null) {\n    this.instrumentations[key] = {\n      methods: [],\n      options: options\n    };\n  }\n\n  // Push to list of method for this instrumentation\n  this.instrumentations[key].methods.push(name);\n};\n\nDefine.prototype.generate = function() {\n  // Generate the return object\n  var object = {\n    name: this.name,\n    obj: this.object,\n    stream: this.stream,\n    instrumentations: []\n  };\n\n  for (var name in this.instrumentations) {\n    object.instrumentations.push(this.instrumentations[name]);\n  }\n\n  return object;\n};\n\nmodule.exports = Define;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/metadata.js\n// module id = 35\n// module chunks = 0","'use strict';\n\nvar inherits = require('util').inherits,\n  f = require('util').format,\n  formattedOrderClause = require('./utils').formattedOrderClause,\n  handleCallback = require('./utils').handleCallback,\n  ReadPreference = require('mongodb-core').ReadPreference,\n  MongoError = require('mongodb-core').MongoError,\n  Readable = require('stream').Readable,\n  Define = require('./metadata'),\n  CoreCursor = require('mongodb-core').Cursor,\n  Map = require('mongodb-core').BSON.Map,\n  executeOperation = require('./utils').executeOperation;\n\n/**\n * @fileOverview The **Cursor** class is an internal class that embodies a cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n *\n * **CURSORS Cannot directly be instantiated**\n * @example\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Create a collection we want to drop later\n *   const col = client.db(dbName).collection('createIndexExample1');\n *   // Insert a bunch of documents\n *   col.insert([{a:1, b:1}\n *     , {a:2, b:2}, {a:3, b:3}\n *     , {a:4, b:4}], {w:1}, function(err, result) {\n *     test.equal(null, err);\n *     // Show that duplicate records got dropped\n *     col.find({}).toArray(function(err, items) {\n *       test.equal(null, err);\n *       test.equal(4, items.length);\n *       client.close();\n *     });\n *   });\n * });\n */\n\n/**\n * Namespace provided by the mongodb-core and node.js\n * @external CoreCursor\n * @external Readable\n */\n\n// Flags allowed for cursor\nvar flags = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];\nvar fields = ['numberOfRetries', 'tailableRetryInterval'];\nvar push = Array.prototype.push;\n\n/**\n * Creates a new Cursor instance (INTERNAL TYPE, do not instantiate directly)\n * @class Cursor\n * @extends external:CoreCursor\n * @extends external:Readable\n * @property {string} sortValue Cursor query sort setting.\n * @property {boolean} timeout Is Cursor able to time out.\n * @property {ReadPreference} readPreference Get cursor ReadPreference.\n * @fires Cursor#data\n * @fires Cursor#end\n * @fires Cursor#close\n * @fires Cursor#readable\n * @return {Cursor} a Cursor instance.\n * @example\n * Cursor cursor options.\n *\n * collection.find({}).project({a:1})                             // Create a projection of field a\n * collection.find({}).skip(1).limit(10)                          // Skip 1 and limit 10\n * collection.find({}).batchSize(5)                               // Set batchSize on cursor to 5\n * collection.find({}).filter({a:1})                              // Set query on the cursor\n * collection.find({}).comment('add a comment')                   // Add a comment to the query, allowing to correlate queries\n * collection.find({}).addCursorFlag('tailable', true)            // Set cursor as tailable\n * collection.find({}).addCursorFlag('oplogReplay', true)         // Set cursor as oplogReplay\n * collection.find({}).addCursorFlag('noCursorTimeout', true)     // Set cursor as noCursorTimeout\n * collection.find({}).addCursorFlag('awaitData', true)           // Set cursor as awaitData\n * collection.find({}).addCursorFlag('partial', true)             // Set cursor as partial\n * collection.find({}).addQueryModifier('$orderby', {a:1})        // Set $orderby {a:1}\n * collection.find({}).max(10)                                    // Set the cursor maxScan\n * collection.find({}).maxScan(10)                                // Set the cursor maxScan\n * collection.find({}).maxTimeMS(1000)                            // Set the cursor maxTimeMS\n * collection.find({}).min(100)                                   // Set the cursor min\n * collection.find({}).returnKey(10)                              // Set the cursor returnKey\n * collection.find({}).setReadPreference(ReadPreference.PRIMARY)  // Set the cursor readPreference\n * collection.find({}).showRecordId(true)                         // Set the cursor showRecordId\n * collection.find({}).snapshot(true)                             // Set the cursor snapshot\n * collection.find({}).sort([['a', 1]])                           // Sets the sort order of the cursor query\n * collection.find({}).hint('a_1')                                // Set the cursor hint\n *\n * All options are chainable, so one can do the following.\n *\n * collection.find({}).maxTimeMS(1000).maxScan(100).skip(1).toArray(..)\n */\nvar Cursor = function(bson, ns, cmd, options, topology, topologyOptions) {\n  CoreCursor.apply(this, Array.prototype.slice.call(arguments, 0));\n  var state = Cursor.INIT;\n  var streamOptions = {};\n\n  // Tailable cursor options\n  var numberOfRetries = options.numberOfRetries || 5;\n  var tailableRetryInterval = options.tailableRetryInterval || 500;\n  var currentNumberOfRetries = numberOfRetries;\n\n  // Get the promiseLibrary\n  var promiseLibrary = options.promiseLibrary || Promise;\n\n  // Set up\n  Readable.call(this, { objectMode: true });\n\n  // Internal cursor state\n  this.s = {\n    // Tailable cursor options\n    numberOfRetries: numberOfRetries,\n    tailableRetryInterval: tailableRetryInterval,\n    currentNumberOfRetries: currentNumberOfRetries,\n    // State\n    state: state,\n    // Stream options\n    streamOptions: streamOptions,\n    // BSON\n    bson: bson,\n    // Namespace\n    ns: ns,\n    // Command\n    cmd: cmd,\n    // Options\n    options: options,\n    // Topology\n    topology: topology,\n    // Topology options\n    topologyOptions: topologyOptions,\n    // Promise library\n    promiseLibrary: promiseLibrary,\n    // Current doc\n    currentDoc: null,\n    // Optional ClientSession\n    session: options.session\n  };\n\n  // Translate correctly\n  if (this.s.options.noCursorTimeout === true) {\n    this.addCursorFlag('noCursorTimeout', true);\n  }\n\n  // Set the sort value\n  this.sortValue = this.s.cmd.sort;\n\n  // Get the batchSize\n  var batchSize =\n    cmd.cursor && cmd.cursor.batchSize\n      ? cmd.cursor && cmd.cursor.batchSize\n      : options.cursor && options.cursor.batchSize ? options.cursor.batchSize : 1000;\n\n  // Set the batchSize\n  this.setCursorBatchSize(batchSize);\n};\n\n/**\n * Cursor stream data event, fired for each document in the cursor.\n *\n * @event Cursor#data\n * @type {object}\n */\n\n/**\n * Cursor stream end event\n *\n * @event Cursor#end\n * @type {null}\n */\n\n/**\n * Cursor stream close event\n *\n * @event Cursor#close\n * @type {null}\n */\n\n/**\n * Cursor stream readable event\n *\n * @event Cursor#readable\n * @type {null}\n */\n\n// Inherit from Readable\ninherits(Cursor, Readable);\n\n// Map core cursor _next method so we can apply mapping\nCoreCursor.prototype._next = CoreCursor.prototype.next;\n\nfor (var name in CoreCursor.prototype) {\n  Cursor.prototype[name] = CoreCursor.prototype[name];\n}\n\nvar define = (Cursor.define = new Define('Cursor', Cursor, true));\n\n/**\n * Check if there is any document still available in the cursor\n * @method\n * @param {Cursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\nCursor.prototype.hasNext = function(callback) {\n  return executeOperation(this.s.topology, hasNext, [this, callback], {\n    skipSessions: true\n  });\n};\n\nconst hasNext = (self, callback) => {\n  if (self.s.currentDoc) {\n    return callback(null, true);\n  }\n\n  nextObject(self, function(err, doc) {\n    if (err) return callback(err, null);\n    if (self.s.state === Cursor.CLOSED || self.isDead()) return callback(null, false);\n    if (!doc) return callback(null, false);\n    self.s.currentDoc = doc;\n    callback(null, true);\n  });\n};\n\ndefine.classMethod('hasNext', { callback: true, promise: true });\n\n/**\n * Get the next available document from the cursor, returns null if no more documents are available.\n * @method\n * @param {Cursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\nCursor.prototype.next = function(callback) {\n  return executeOperation(this.s.topology, next, [this, callback], {\n    skipSessions: true\n  });\n};\n\nconst next = (self, callback) => {\n  // Return the currentDoc if someone called hasNext first\n  if (self.s.currentDoc) {\n    var doc = self.s.currentDoc;\n    self.s.currentDoc = null;\n    return callback(null, doc);\n  }\n\n  // Return the next object\n  nextObject(self, callback);\n};\n\ndefine.classMethod('next', { callback: true, promise: true });\n\n/**\n * Set the cursor query\n * @method\n * @param {object} filter The filter object used for the cursor.\n * @return {Cursor}\n */\nCursor.prototype.filter = function(filter) {\n  if (this.s.state === Cursor.CLOSED || this.s.state === Cursor.OPEN || this.isDead()) {\n    throw MongoError.create({ message: 'Cursor is closed', driver: true });\n  }\n\n  this.s.cmd.query = filter;\n  return this;\n};\n\ndefine.classMethod('filter', { callback: false, promise: false, returns: [Cursor] });\n\n/**\n * Set the cursor maxScan\n * @method\n * @param {object} maxScan Constrains the query to only scan the specified number of documents when fulfilling the query\n * @return {Cursor}\n */\nCursor.prototype.maxScan = function(maxScan) {\n  if (this.s.state === Cursor.CLOSED || this.s.state === Cursor.OPEN || this.isDead()) {\n    throw MongoError.create({ message: 'Cursor is closed', driver: true });\n  }\n\n  this.s.cmd.maxScan = maxScan;\n  return this;\n};\n\ndefine.classMethod('maxScan', { callback: false, promise: false, returns: [Cursor] });\n\n/**\n * Set the cursor hint\n * @method\n * @param {object} hint If specified, then the query system will only consider plans using the hinted index.\n * @return {Cursor}\n */\nCursor.prototype.hint = function(hint) {\n  if (this.s.state === Cursor.CLOSED || this.s.state === Cursor.OPEN || this.isDead()) {\n    throw MongoError.create({ message: 'Cursor is closed', driver: true });\n  }\n\n  this.s.cmd.hint = hint;\n  return this;\n};\n\ndefine.classMethod('hint', { callback: false, promise: false, returns: [Cursor] });\n\n/**\n * Set the cursor min\n * @method\n * @param {object} min Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n * @return {Cursor}\n */\nCursor.prototype.min = function(min) {\n  if (this.s.state === Cursor.CLOSED || this.s.state === Cursor.OPEN || this.isDead())\n    throw MongoError.create({ message: 'Cursor is closed', driver: true });\n  this.s.cmd.min = min;\n  return this;\n};\n\ndefine.classMethod('min', { callback: false, promise: false, returns: [Cursor] });\n\n/**\n * Set the cursor max\n * @method\n * @param {object} max Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n * @return {Cursor}\n */\nCursor.prototype.max = function(max) {\n  if (this.s.state === Cursor.CLOSED || this.s.state === Cursor.OPEN || this.isDead()) {\n    throw MongoError.create({ message: 'Cursor is closed', driver: true });\n  }\n\n  this.s.cmd.max = max;\n  return this;\n};\n\ndefine.classMethod('max', { callback: false, promise: false, returns: [Cursor] });\n\n/**\n * Set the cursor returnKey\n * @method\n * @param {object} returnKey Only return the index field or fields for the results of the query. If $returnKey is set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields. Use one of the following forms:\n * @return {Cursor}\n */\nCursor.prototype.returnKey = function(value) {\n  if (this.s.state === Cursor.CLOSED || this.s.state === Cursor.OPEN || this.isDead()) {\n    throw MongoError.create({ message: 'Cursor is closed', driver: true });\n  }\n\n  this.s.cmd.returnKey = value;\n  return this;\n};\n\ndefine.classMethod('returnKey', { callback: false, promise: false, returns: [Cursor] });\n\n/**\n * Set the cursor showRecordId\n * @method\n * @param {object} showRecordId The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n * @return {Cursor}\n */\nCursor.prototype.showRecordId = function(value) {\n  if (this.s.state === Cursor.CLOSED || this.s.state === Cursor.OPEN || this.isDead()) {\n    throw MongoError.create({ message: 'Cursor is closed', driver: true });\n  }\n\n  this.s.cmd.showDiskLoc = value;\n  return this;\n};\n\ndefine.classMethod('showRecordId', { callback: false, promise: false, returns: [Cursor] });\n\n/**\n * Set the cursor snapshot\n * @method\n * @param {object} snapshot The $snapshot operator prevents the cursor from returning a document more than once because an intervening write operation results in a move of the document.\n * @return {Cursor}\n */\nCursor.prototype.snapshot = function(value) {\n  if (this.s.state === Cursor.CLOSED || this.s.state === Cursor.OPEN || this.isDead()) {\n    throw MongoError.create({ message: 'Cursor is closed', driver: true });\n  }\n\n  this.s.cmd.snapshot = value;\n  return this;\n};\n\ndefine.classMethod('snapshot', { callback: false, promise: false, returns: [Cursor] });\n\n/**\n * Set a node.js specific cursor option\n * @method\n * @param {string} field The cursor option to set ['numberOfRetries', 'tailableRetryInterval'].\n * @param {object} value The field value.\n * @throws {MongoError}\n * @return {Cursor}\n */\nCursor.prototype.setCursorOption = function(field, value) {\n  if (this.s.state === Cursor.CLOSED || this.s.state === Cursor.OPEN || this.isDead()) {\n    throw MongoError.create({ message: 'Cursor is closed', driver: true });\n  }\n\n  if (fields.indexOf(field) === -1) {\n    throw MongoError.create({\n      message: f('option %s not a supported option %s', field, fields),\n      driver: true\n    });\n  }\n\n  this.s[field] = value;\n  if (field === 'numberOfRetries') this.s.currentNumberOfRetries = value;\n  return this;\n};\n\ndefine.classMethod('setCursorOption', { callback: false, promise: false, returns: [Cursor] });\n\n/**\n * Add a cursor flag to the cursor\n * @method\n * @param {string} flag The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial'].\n * @param {boolean} value The flag boolean value.\n * @throws {MongoError}\n * @return {Cursor}\n */\nCursor.prototype.addCursorFlag = function(flag, value) {\n  if (this.s.state === Cursor.CLOSED || this.s.state === Cursor.OPEN || this.isDead()) {\n    throw MongoError.create({ message: 'Cursor is closed', driver: true });\n  }\n\n  if (flags.indexOf(flag) === -1) {\n    throw MongoError.create({\n      message: f('flag %s not a supported flag %s', flag, flags),\n      driver: true\n    });\n  }\n\n  if (typeof value !== 'boolean') {\n    throw MongoError.create({ message: f('flag %s must be a boolean value', flag), driver: true });\n  }\n\n  this.s.cmd[flag] = value;\n  return this;\n};\n\ndefine.classMethod('addCursorFlag', { callback: false, promise: false, returns: [Cursor] });\n\n/**\n * Add a query modifier to the cursor query\n * @method\n * @param {string} name The query modifier (must start with $, such as $orderby etc)\n * @param {boolean} value The flag boolean value.\n * @throws {MongoError}\n * @return {Cursor}\n */\nCursor.prototype.addQueryModifier = function(name, value) {\n  if (this.s.state === Cursor.CLOSED || this.s.state === Cursor.OPEN || this.isDead()) {\n    throw MongoError.create({ message: 'Cursor is closed', driver: true });\n  }\n\n  if (name[0] !== '$') {\n    throw MongoError.create({ message: f('%s is not a valid query modifier'), driver: true });\n  }\n\n  // Strip of the $\n  var field = name.substr(1);\n  // Set on the command\n  this.s.cmd[field] = value;\n  // Deal with the special case for sort\n  if (field === 'orderby') this.s.cmd.sort = this.s.cmd[field];\n  return this;\n};\n\ndefine.classMethod('addQueryModifier', { callback: false, promise: false, returns: [Cursor] });\n\n/**\n * Add a comment to the cursor query allowing for tracking the comment in the log.\n * @method\n * @param {string} value The comment attached to this query.\n * @throws {MongoError}\n * @return {Cursor}\n */\nCursor.prototype.comment = function(value) {\n  if (this.s.state === Cursor.CLOSED || this.s.state === Cursor.OPEN || this.isDead()) {\n    throw MongoError.create({ message: 'Cursor is closed', driver: true });\n  }\n\n  this.s.cmd.comment = value;\n  return this;\n};\n\ndefine.classMethod('comment', { callback: false, promise: false, returns: [Cursor] });\n\n/**\n * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n * @method\n * @param {number} value Number of milliseconds to wait before aborting the tailed query.\n * @throws {MongoError}\n * @return {Cursor}\n */\nCursor.prototype.maxAwaitTimeMS = function(value) {\n  if (typeof value !== 'number') {\n    throw MongoError.create({ message: 'maxAwaitTimeMS must be a number', driver: true });\n  }\n\n  if (this.s.state === Cursor.CLOSED || this.s.state === Cursor.OPEN || this.isDead()) {\n    throw MongoError.create({ message: 'Cursor is closed', driver: true });\n  }\n\n  this.s.cmd.maxAwaitTimeMS = value;\n  return this;\n};\n\ndefine.classMethod('maxAwaitTimeMS', { callback: false, promise: false, returns: [Cursor] });\n\n/**\n * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n * @method\n * @param {number} value Number of milliseconds to wait before aborting the query.\n * @throws {MongoError}\n * @return {Cursor}\n */\nCursor.prototype.maxTimeMS = function(value) {\n  if (typeof value !== 'number') {\n    throw MongoError.create({ message: 'maxTimeMS must be a number', driver: true });\n  }\n\n  if (this.s.state === Cursor.CLOSED || this.s.state === Cursor.OPEN || this.isDead()) {\n    throw MongoError.create({ message: 'Cursor is closed', driver: true });\n  }\n\n  this.s.cmd.maxTimeMS = value;\n  return this;\n};\n\ndefine.classMethod('maxTimeMS', { callback: false, promise: false, returns: [Cursor] });\n\nCursor.prototype.maxTimeMs = Cursor.prototype.maxTimeMS;\n\ndefine.classMethod('maxTimeMs', { callback: false, promise: false, returns: [Cursor] });\n\n/**\n * Sets a field projection for the query.\n * @method\n * @param {object} value The field projection object.\n * @throws {MongoError}\n * @return {Cursor}\n */\nCursor.prototype.project = function(value) {\n  if (this.s.state === Cursor.CLOSED || this.s.state === Cursor.OPEN || this.isDead()) {\n    throw MongoError.create({ message: 'Cursor is closed', driver: true });\n  }\n\n  this.s.cmd.fields = value;\n  return this;\n};\n\ndefine.classMethod('project', { callback: false, promise: false, returns: [Cursor] });\n\n/**\n * Sets the sort order of the cursor query.\n * @method\n * @param {(string|array|object)} keyOrList The key or keys set for the sort.\n * @param {number} [direction] The direction of the sorting (1 or -1).\n * @throws {MongoError}\n * @return {Cursor}\n */\nCursor.prototype.sort = function(keyOrList, direction) {\n  if (this.s.options.tailable) {\n    throw MongoError.create({ message: \"Tailable cursor doesn't support sorting\", driver: true });\n  }\n\n  if (this.s.state === Cursor.CLOSED || this.s.state === Cursor.OPEN || this.isDead()) {\n    throw MongoError.create({ message: 'Cursor is closed', driver: true });\n  }\n\n  var order = keyOrList;\n\n  // We have an array of arrays, we need to preserve the order of the sort\n  // so we will us a Map\n  if (Array.isArray(order) && Array.isArray(order[0])) {\n    order = new Map(\n      order.map(function(x) {\n        var value = [x[0], null];\n        if (x[1] === 'asc') {\n          value[1] = 1;\n        } else if (x[1] === 'desc') {\n          value[1] = -1;\n        } else if (x[1] === 1 || x[1] === -1) {\n          value[1] = x[1];\n        } else {\n          throw new MongoError(\n            \"Illegal sort clause, must be of the form [['field1', '(ascending|descending)'], ['field2', '(ascending|descending)']]\"\n          );\n        }\n\n        return value;\n      })\n    );\n  }\n\n  if (direction != null) {\n    order = [[keyOrList, direction]];\n  }\n\n  this.s.cmd.sort = order;\n  this.sortValue = order;\n  return this;\n};\n\ndefine.classMethod('sort', { callback: false, promise: false, returns: [Cursor] });\n\n/**\n * Set the batch size for the cursor.\n * @method\n * @param {number} value The batchSize for the cursor.\n * @throws {MongoError}\n * @return {Cursor}\n */\nCursor.prototype.batchSize = function(value) {\n  if (this.s.options.tailable) {\n    throw MongoError.create({ message: \"Tailable cursor doesn't support batchSize\", driver: true });\n  }\n\n  if (this.s.state === Cursor.CLOSED || this.isDead()) {\n    throw MongoError.create({ message: 'Cursor is closed', driver: true });\n  }\n\n  if (typeof value !== 'number') {\n    throw MongoError.create({ message: 'batchSize requires an integer', driver: true });\n  }\n\n  this.s.cmd.batchSize = value;\n  this.setCursorBatchSize(value);\n  return this;\n};\n\ndefine.classMethod('batchSize', { callback: false, promise: false, returns: [Cursor] });\n\n/**\n * Set the collation options for the cursor.\n * @method\n * @param {object} value The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n * @throws {MongoError}\n * @return {Cursor}\n */\nCursor.prototype.collation = function(value) {\n  this.s.cmd.collation = value;\n  return this;\n};\n\ndefine.classMethod('collation', { callback: false, promise: false, returns: [Cursor] });\n\n/**\n * Set the limit for the cursor.\n * @method\n * @param {number} value The limit for the cursor query.\n * @throws {MongoError}\n * @return {Cursor}\n */\nCursor.prototype.limit = function(value) {\n  if (this.s.options.tailable) {\n    throw MongoError.create({ message: \"Tailable cursor doesn't support limit\", driver: true });\n  }\n\n  if (this.s.state === Cursor.OPEN || this.s.state === Cursor.CLOSED || this.isDead()) {\n    throw MongoError.create({ message: 'Cursor is closed', driver: true });\n  }\n\n  if (typeof value !== 'number') {\n    throw MongoError.create({ message: 'limit requires an integer', driver: true });\n  }\n\n  this.s.cmd.limit = value;\n  // this.cursorLimit = value;\n  this.setCursorLimit(value);\n  return this;\n};\n\ndefine.classMethod('limit', { callback: false, promise: false, returns: [Cursor] });\n\n/**\n * Set the skip for the cursor.\n * @method\n * @param {number} value The skip for the cursor query.\n * @throws {MongoError}\n * @return {Cursor}\n */\nCursor.prototype.skip = function(value) {\n  if (this.s.options.tailable) {\n    throw MongoError.create({ message: \"Tailable cursor doesn't support skip\", driver: true });\n  }\n\n  if (this.s.state === Cursor.OPEN || this.s.state === Cursor.CLOSED || this.isDead()) {\n    throw MongoError.create({ message: 'Cursor is closed', driver: true });\n  }\n\n  if (typeof value !== 'number') {\n    throw MongoError.create({ message: 'skip requires an integer', driver: true });\n  }\n\n  this.s.cmd.skip = value;\n  this.setCursorSkip(value);\n  return this;\n};\n\ndefine.classMethod('skip', { callback: false, promise: false, returns: [Cursor] });\n\n/**\n * The callback format for results\n * @callback Cursor~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {(object|null|boolean)} result The result object if the command was executed successfully.\n */\n\n/**\n * Clone the cursor\n * @function external:CoreCursor#clone\n * @return {Cursor}\n */\n\n/**\n * Resets the cursor\n * @function external:CoreCursor#rewind\n * @return {null}\n */\n\n// Get the next available document from the cursor, returns null if no more documents are available.\nvar nextObject = function(self, callback) {\n  if (self.s.state === Cursor.CLOSED || (self.isDead && self.isDead()))\n    return handleCallback(\n      callback,\n      MongoError.create({ message: 'Cursor is closed', driver: true })\n    );\n  if (self.s.state === Cursor.INIT && self.s.cmd.sort) {\n    try {\n      self.s.cmd.sort = formattedOrderClause(self.s.cmd.sort);\n    } catch (err) {\n      return handleCallback(callback, err);\n    }\n  }\n\n  // Get the next object\n  self._next(function(err, doc) {\n    self.s.state = Cursor.OPEN;\n    if (err) return handleCallback(callback, err);\n    handleCallback(callback, null, doc);\n  });\n};\n\n// Trampoline emptying the number of retrieved items\n// without incurring a nextTick operation\nvar loop = function(self, callback) {\n  // No more items we are done\n  if (self.bufferedCount() === 0) return;\n  // Get the next document\n  self._next(callback);\n  // Loop\n  return loop;\n};\n\n/**\n * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,\n * not all of the elements will be iterated if this cursor had been previouly accessed.\n * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike\n * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements\n * at any given time if batch size is specified. Otherwise, the caller is responsible\n * for making sure that the entire result can fit the memory.\n * @method\n * @deprecated\n * @param {Cursor~resultCallback} callback The result callback.\n * @throws {MongoError}\n * @return {null}\n */\nCursor.prototype.each = function(callback) {\n  // Rewind cursor state\n  this.rewind();\n  // Set current cursor to INIT\n  this.s.state = Cursor.INIT;\n  // Run the query\n  _each(this, callback);\n};\n\ndefine.classMethod('each', { callback: true, promise: false });\n\n// Run the each loop\nvar _each = function(self, callback) {\n  if (!callback) throw MongoError.create({ message: 'callback is mandatory', driver: true });\n  if (self.isNotified()) return;\n  if (self.s.state === Cursor.CLOSED || self.isDead()) {\n    return handleCallback(\n      callback,\n      MongoError.create({ message: 'Cursor is closed', driver: true })\n    );\n  }\n\n  if (self.s.state === Cursor.INIT) self.s.state = Cursor.OPEN;\n\n  // Define function to avoid global scope escape\n  var fn = null;\n  // Trampoline all the entries\n  if (self.bufferedCount() > 0) {\n    while ((fn = loop(self, callback))) fn(self, callback);\n    _each(self, callback);\n  } else {\n    self.next(function(err, item) {\n      if (err) return handleCallback(callback, err);\n      if (item == null) {\n        return self.close({ skipKillCursors: true }, () => handleCallback(callback, null, null));\n      }\n\n      if (handleCallback(callback, null, item) === false) return;\n      _each(self, callback);\n    });\n  }\n};\n\n/**\n * The callback format for the forEach iterator method\n * @callback Cursor~iteratorCallback\n * @param {Object} doc An emitted document for the iterator\n */\n\n/**\n * The callback error format for the forEach iterator method\n * @callback Cursor~endCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n */\n\n/**\n * Iterates over all the documents for this cursor using the iterator, callback pattern.\n * @method\n * @param {Cursor~iteratorCallback} iterator The iteration callback.\n * @param {Cursor~endCallback} callback The end callback.\n * @throws {MongoError}\n * @return {null}\n */\nCursor.prototype.forEach = function(iterator, callback) {\n  this.each(function(err, doc) {\n    if (err) {\n      callback(err);\n      return false;\n    }\n    if (doc != null) {\n      iterator(doc);\n      return true;\n    }\n    if (doc == null && callback) {\n      var internalCallback = callback;\n      callback = null;\n      internalCallback(null);\n      return false;\n    }\n  });\n};\n\ndefine.classMethod('forEach', { callback: true, promise: false });\n\n/**\n * Set the ReadPreference for the cursor.\n * @method\n * @param {(string|ReadPreference)} readPreference The new read preference for the cursor.\n * @throws {MongoError}\n * @return {Cursor}\n */\nCursor.prototype.setReadPreference = function(readPreference) {\n  if (this.s.state !== Cursor.INIT) {\n    throw MongoError.create({\n      message: 'cannot change cursor readPreference after cursor has been accessed',\n      driver: true\n    });\n  }\n\n  if (readPreference instanceof ReadPreference) {\n    this.s.options.readPreference = readPreference;\n  } else if (typeof readPreference === 'string') {\n    this.s.options.readPreference = new ReadPreference(readPreference);\n  } else {\n    throw new TypeError('Invalid read preference: ' + readPreference);\n  }\n\n  return this;\n};\n\ndefine.classMethod('setReadPreference', { callback: false, promise: false, returns: [Cursor] });\n\n/**\n * The callback format for results\n * @callback Cursor~toArrayResultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object[]} documents All the documents the satisfy the cursor.\n */\n\n/**\n * Returns an array of documents. The caller is responsible for making sure that there\n * is enough memory to store the results. Note that the array only contain partial\n * results when this cursor had been previouly accessed. In that case,\n * cursor.rewind() can be used to reset the cursor.\n * @method\n * @param {Cursor~toArrayResultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\nCursor.prototype.toArray = function(callback) {\n  var self = this;\n  if (self.s.options.tailable) {\n    throw MongoError.create({\n      message: 'Tailable cursor cannot be converted to array',\n      driver: true\n    });\n  }\n\n  return executeOperation(this.s.topology, toArray, [this, callback], {\n    skipSessions: true\n  });\n};\n\nvar toArray = function(self, callback) {\n  var items = [];\n\n  // Reset cursor\n  self.rewind();\n  self.s.state = Cursor.INIT;\n\n  // Fetch all the documents\n  var fetchDocs = function() {\n    self._next(function(err, doc) {\n      if (err) return handleCallback(callback, err);\n      if (doc == null) {\n        return self.close({ skipKillCursors: true }, () => handleCallback(callback, null, items));\n      }\n\n      // Add doc to items\n      items.push(doc);\n\n      // Get all buffered objects\n      if (self.bufferedCount() > 0) {\n        var docs = self.readBufferedDocuments(self.bufferedCount());\n\n        // Transform the doc if transform method added\n        if (self.s.transforms && typeof self.s.transforms.doc === 'function') {\n          docs = docs.map(self.s.transforms.doc);\n        }\n\n        push.apply(items, docs);\n      }\n\n      // Attempt a fetch\n      fetchDocs();\n    });\n  };\n\n  fetchDocs();\n};\n\ndefine.classMethod('toArray', { callback: true, promise: true });\n\n/**\n * The callback format for results\n * @callback Cursor~countResultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {number} count The count of documents.\n */\n\n/**\n * Get the count of documents for this cursor\n * @method\n * @param {boolean} [applySkipLimit=true] Should the count command apply limit and skip settings on the cursor or in the passed in options.\n * @param {object} [options=null] Optional settings.\n * @param {number} [options.skip=null] The number of documents to skip.\n * @param {number} [options.limit=null] The maximum amounts to count before aborting.\n * @param {number} [options.maxTimeMS=null] Number of miliseconds to wait before aborting the query.\n * @param {string} [options.hint=null] An index name hint for the query.\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {Cursor~countResultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\nCursor.prototype.count = function(applySkipLimit, opts, callback) {\n  if (this.s.cmd.query == null)\n    throw MongoError.create({ message: 'count can only be used with find command', driver: true });\n  if (typeof opts === 'function') (callback = opts), (opts = {});\n  opts = opts || {};\n\n  return executeOperation(this.s.topology, count, [this, applySkipLimit, opts, callback], {\n    skipSessions: true\n  });\n};\n\nvar count = function(self, applySkipLimit, opts, callback) {\n  if (typeof applySkipLimit === 'function') {\n    callback = applySkipLimit;\n    applySkipLimit = true;\n  }\n\n  if (applySkipLimit) {\n    if (typeof self.cursorSkip() === 'number') opts.skip = self.cursorSkip();\n    if (typeof self.cursorLimit() === 'number') opts.limit = self.cursorLimit();\n  }\n\n  // Command\n  var delimiter = self.s.ns.indexOf('.');\n\n  var command = {\n    count: self.s.ns.substr(delimiter + 1),\n    query: self.s.cmd.query\n  };\n\n  // Apply a readConcern if set\n  if (self.s.cmd.readConcern) {\n    command.readConcern = self.s.cmd.readConcern;\n  }\n\n  // Apply a hint if set\n  if (self.s.cmd.hint) {\n    command.hint = self.s.cmd.hint;\n  }\n\n  if (typeof opts.maxTimeMS === 'number') {\n    command.maxTimeMS = opts.maxTimeMS;\n  } else if (self.s.cmd && typeof self.s.cmd.maxTimeMS === 'number') {\n    command.maxTimeMS = self.s.cmd.maxTimeMS;\n  }\n\n  // Merge in any options\n  if (opts.skip) command.skip = opts.skip;\n  if (opts.limit) command.limit = opts.limit;\n  if (self.s.options.hint) command.hint = self.s.options.hint;\n\n  // Set cursor server to the same as the topology\n  self.server = self.topology.s.coreTopology;\n\n  // Execute the command\n  self.s.topology.command(\n    f('%s.$cmd', self.s.ns.substr(0, delimiter)),\n    command,\n    function(err, result) {\n      callback(err, result ? result.result.n : null);\n    },\n    self.options\n  );\n};\n\ndefine.classMethod('count', { callback: true, promise: true });\n\n/**\n * Close the cursor, sending a KillCursor command and emitting close.\n * @method\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.skipKillCursors] Bypass calling killCursors when closing the cursor.\n * @param {Cursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\nCursor.prototype.close = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = Object.assign({}, { skipKillCursors: false }, options);\n\n  this.s.state = Cursor.CLOSED;\n  if (!options.skipKillCursors) {\n    // Kill the cursor\n    this.kill();\n  }\n\n  const completeClose = () => {\n    // Emit the close event for the cursor\n    this.emit('close');\n\n    // Callback if provided\n    if (typeof callback === 'function') {\n      return handleCallback(callback, null, this);\n    }\n\n    // Return a Promise\n    return new this.s.promiseLibrary(function(resolve) {\n      resolve();\n    });\n  };\n\n  if (this.s.session) {\n    return this.s.session.endSession(() => completeClose());\n  }\n\n  return completeClose();\n};\n\ndefine.classMethod('close', { callback: true, promise: true });\n\n/**\n * Map all documents using the provided function\n * @method\n * @param {function} [transform] The mapping transformation method.\n * @return {Cursor}\n */\nCursor.prototype.map = function(transform) {\n  if (this.cursorState.transforms && this.cursorState.transforms.doc) {\n    var oldTransform = this.cursorState.transforms.doc;\n    this.cursorState.transforms.doc = function(doc) {\n      return transform(oldTransform(doc));\n    };\n  } else {\n    this.cursorState.transforms = { doc: transform };\n  }\n  return this;\n};\n\ndefine.classMethod('map', { callback: false, promise: false, returns: [Cursor] });\n\n/**\n * Is the cursor closed\n * @method\n * @return {boolean}\n */\nCursor.prototype.isClosed = function() {\n  return this.isDead();\n};\n\ndefine.classMethod('isClosed', { callback: false, promise: false, returns: [Boolean] });\n\nCursor.prototype.destroy = function(err) {\n  if (err) this.emit('error', err);\n  this.pause();\n  this.close();\n};\n\ndefine.classMethod('destroy', { callback: false, promise: false });\n\n/**\n * Return a modified Readable stream including a possible transform method.\n * @method\n * @param {object} [options=null] Optional settings.\n * @param {function} [options.transform=null] A transformation method applied to each document emitted by the stream.\n * @return {Cursor}\n */\nCursor.prototype.stream = function(options) {\n  this.s.streamOptions = options || {};\n  return this;\n};\n\ndefine.classMethod('stream', { callback: false, promise: false, returns: [Cursor] });\n\n/**\n * Execute the explain for the cursor\n * @method\n * @param {Cursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\nCursor.prototype.explain = function(callback) {\n  this.s.cmd.explain = true;\n\n  // Do we have a readConcern\n  if (this.s.cmd.readConcern) {\n    delete this.s.cmd['readConcern'];\n  }\n\n  return executeOperation(this.s.topology, this._next.bind(this), [callback], {\n    skipSessions: true\n  });\n};\n\ndefine.classMethod('explain', { callback: true, promise: true });\n\nCursor.prototype._read = function() {\n  var self = this;\n  if (self.s.state === Cursor.CLOSED || self.isDead()) {\n    return self.push(null);\n  }\n\n  // Get the next item\n  self.next(function(err, result) {\n    if (err) {\n      if (self.listeners('error') && self.listeners('error').length > 0) {\n        self.emit('error', err);\n      }\n      if (!self.isDead()) self.close();\n\n      // Emit end event\n      self.emit('end');\n      return self.emit('finish');\n    }\n\n    // If we provided a transformation method\n    if (typeof self.s.streamOptions.transform === 'function' && result != null) {\n      return self.push(self.s.streamOptions.transform(result));\n    }\n\n    // If we provided a map function\n    if (\n      self.cursorState.transforms &&\n      typeof self.cursorState.transforms.doc === 'function' &&\n      result != null\n    ) {\n      return self.push(self.cursorState.transforms.doc(result));\n    }\n\n    // Return the result\n    self.push(result);\n\n    if (result === null && self.isDead()) {\n      self.once('end', () => {\n        self.close();\n        self.emit('finish');\n      });\n    }\n  });\n};\n\nObject.defineProperty(Cursor.prototype, 'readPreference', {\n  enumerable: true,\n  get: function() {\n    if (!this || !this.s) {\n      return null;\n    }\n\n    return this.s.options.readPreference;\n  }\n});\n\nObject.defineProperty(Cursor.prototype, 'namespace', {\n  enumerable: true,\n  get: function() {\n    if (!this || !this.s) {\n      return null;\n    }\n\n    // TODO: refactor this logic into core\n    var ns = this.s.ns || '';\n    var firstDot = ns.indexOf('.');\n    if (firstDot < 0) {\n      return {\n        database: this.s.ns,\n        collection: ''\n      };\n    }\n    return {\n      database: ns.substr(0, firstDot),\n      collection: ns.substr(firstDot + 1)\n    };\n  }\n});\n\n/**\n * The read() method pulls some data out of the internal buffer and returns it. If there is no data available, then it will return null.\n * @function external:Readable#read\n * @param {number} size Optional argument to specify how much data to read.\n * @return {(String | Buffer | null)}\n */\n\n/**\n * Call this function to cause the stream to return strings of the specified encoding instead of Buffer objects.\n * @function external:Readable#setEncoding\n * @param {string} encoding The encoding to use.\n * @return {null}\n */\n\n/**\n * This method will cause the readable stream to resume emitting data events.\n * @function external:Readable#resume\n * @return {null}\n */\n\n/**\n * This method will cause a stream in flowing-mode to stop emitting data events. Any data that becomes available will remain in the internal buffer.\n * @function external:Readable#pause\n * @return {null}\n */\n\n/**\n * This method pulls all the data out of a readable stream, and writes it to the supplied destination, automatically managing the flow so that the destination is not overwhelmed by a fast readable stream.\n * @function external:Readable#pipe\n * @param {Writable} destination The destination for writing data\n * @param {object} [options] Pipe options\n * @return {null}\n */\n\n/**\n * This method will remove the hooks set up for a previous pipe() call.\n * @function external:Readable#unpipe\n * @param {Writable} [destination] The destination for writing data\n * @return {null}\n */\n\n/**\n * This is useful in certain cases where a stream is being consumed by a parser, which needs to \"un-consume\" some data that it has optimistically pulled out of the source, so that the stream can be passed on to some other party.\n * @function external:Readable#unshift\n * @param {(Buffer|string)} chunk Chunk of data to unshift onto the read queue.\n * @return {null}\n */\n\n/**\n * Versions of Node prior to v0.10 had streams that did not implement the entire Streams API as it is today. (See \"Compatibility\" below for more information.)\n * @function external:Readable#wrap\n * @param {Stream} stream An \"old style\" readable stream.\n * @return {null}\n */\n\nCursor.INIT = 0;\nCursor.OPEN = 1;\nCursor.CLOSED = 2;\nCursor.GET_MORE = 3;\n\nmodule.exports = Cursor;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/cursor.js\n// module id = 36\n// module chunks = 0","'use strict';\n\nconst EventEmitter = require('events'),\n  MongoError = require('mongodb-core').MongoError,\n  f = require('util').format,\n  os = require('os'),\n  translateReadPreference = require('../utils').translateReadPreference,\n  ClientSession = require('mongodb-core').Sessions.ClientSession;\n\n// The store of ops\nvar Store = function(topology, storeOptions) {\n  var self = this;\n  var storedOps = [];\n  storeOptions = storeOptions || { force: false, bufferMaxEntries: -1 };\n\n  // Internal state\n  this.s = {\n    storedOps: storedOps,\n    storeOptions: storeOptions,\n    topology: topology\n  };\n\n  Object.defineProperty(this, 'length', {\n    enumerable: true,\n    get: function() {\n      return self.s.storedOps.length;\n    }\n  });\n};\n\nStore.prototype.add = function(opType, ns, ops, options, callback) {\n  if (this.s.storeOptions.force) {\n    return callback(MongoError.create({ message: 'db closed by application', driver: true }));\n  }\n\n  if (this.s.storeOptions.bufferMaxEntries === 0) {\n    return callback(\n      MongoError.create({\n        message: f(\n          'no connection available for operation and number of stored operation > %s',\n          this.s.storeOptions.bufferMaxEntries\n        ),\n        driver: true\n      })\n    );\n  }\n\n  if (\n    this.s.storeOptions.bufferMaxEntries > 0 &&\n    this.s.storedOps.length > this.s.storeOptions.bufferMaxEntries\n  ) {\n    while (this.s.storedOps.length > 0) {\n      var op = this.s.storedOps.shift();\n      op.c(\n        MongoError.create({\n          message: f(\n            'no connection available for operation and number of stored operation > %s',\n            this.s.storeOptions.bufferMaxEntries\n          ),\n          driver: true\n        })\n      );\n    }\n\n    return;\n  }\n\n  this.s.storedOps.push({ t: opType, n: ns, o: ops, op: options, c: callback });\n};\n\nStore.prototype.addObjectAndMethod = function(opType, object, method, params, callback) {\n  if (this.s.storeOptions.force) {\n    return callback(MongoError.create({ message: 'db closed by application', driver: true }));\n  }\n\n  if (this.s.storeOptions.bufferMaxEntries === 0) {\n    return callback(\n      MongoError.create({\n        message: f(\n          'no connection available for operation and number of stored operation > %s',\n          this.s.storeOptions.bufferMaxEntries\n        ),\n        driver: true\n      })\n    );\n  }\n\n  if (\n    this.s.storeOptions.bufferMaxEntries > 0 &&\n    this.s.storedOps.length > this.s.storeOptions.bufferMaxEntries\n  ) {\n    while (this.s.storedOps.length > 0) {\n      var op = this.s.storedOps.shift();\n      op.c(\n        MongoError.create({\n          message: f(\n            'no connection available for operation and number of stored operation > %s',\n            this.s.storeOptions.bufferMaxEntries\n          ),\n          driver: true\n        })\n      );\n    }\n\n    return;\n  }\n\n  this.s.storedOps.push({ t: opType, m: method, o: object, p: params, c: callback });\n};\n\nStore.prototype.flush = function(err) {\n  while (this.s.storedOps.length > 0) {\n    this.s.storedOps\n      .shift()\n      .c(\n        err ||\n          MongoError.create({ message: f('no connection available for operation'), driver: true })\n      );\n  }\n};\n\nvar primaryOptions = ['primary', 'primaryPreferred', 'nearest', 'secondaryPreferred'];\nvar secondaryOptions = ['secondary', 'secondaryPreferred'];\n\nStore.prototype.execute = function(options) {\n  options = options || {};\n  // Get current ops\n  var ops = this.s.storedOps;\n  // Reset the ops\n  this.s.storedOps = [];\n\n  // Unpack options\n  var executePrimary = typeof options.executePrimary === 'boolean' ? options.executePrimary : true;\n  var executeSecondary =\n    typeof options.executeSecondary === 'boolean' ? options.executeSecondary : true;\n\n  // Execute all the stored ops\n  while (ops.length > 0) {\n    var op = ops.shift();\n\n    if (op.t === 'cursor') {\n      if (executePrimary && executeSecondary) {\n        op.o[op.m].apply(op.o, op.p);\n      } else if (\n        executePrimary &&\n        op.o.options &&\n        op.o.options.readPreference &&\n        primaryOptions.indexOf(op.o.options.readPreference.mode) !== -1\n      ) {\n        op.o[op.m].apply(op.o, op.p);\n      } else if (\n        !executePrimary &&\n        executeSecondary &&\n        op.o.options &&\n        op.o.options.readPreference &&\n        secondaryOptions.indexOf(op.o.options.readPreference.mode) !== -1\n      ) {\n        op.o[op.m].apply(op.o, op.p);\n      }\n    } else if (op.t === 'auth') {\n      this.s.topology[op.t].apply(this.s.topology, op.o);\n    } else {\n      if (executePrimary && executeSecondary) {\n        this.s.topology[op.t](op.n, op.o, op.op, op.c);\n      } else if (\n        executePrimary &&\n        op.op &&\n        op.op.readPreference &&\n        primaryOptions.indexOf(op.op.readPreference.mode) !== -1\n      ) {\n        this.s.topology[op.t](op.n, op.o, op.op, op.c);\n      } else if (\n        !executePrimary &&\n        executeSecondary &&\n        op.op &&\n        op.op.readPreference &&\n        secondaryOptions.indexOf(op.op.readPreference.mode) !== -1\n      ) {\n        this.s.topology[op.t](op.n, op.o, op.op, op.c);\n      }\n    }\n  }\n};\n\nStore.prototype.all = function() {\n  return this.s.storedOps;\n};\n\n// Server capabilities\nvar ServerCapabilities = function(ismaster) {\n  var setup_get_property = function(object, name, value) {\n    Object.defineProperty(object, name, {\n      enumerable: true,\n      get: function() {\n        return value;\n      }\n    });\n  };\n\n  // Capabilities\n  var aggregationCursor = false;\n  var writeCommands = false;\n  var textSearch = false;\n  var authCommands = false;\n  var listCollections = false;\n  var listIndexes = false;\n  var maxNumberOfDocsInBatch = ismaster.maxWriteBatchSize || 1000;\n  var commandsTakeWriteConcern = false;\n  var commandsTakeCollation = false;\n\n  if (ismaster.minWireVersion >= 0) {\n    textSearch = true;\n  }\n\n  if (ismaster.maxWireVersion >= 1) {\n    aggregationCursor = true;\n    authCommands = true;\n  }\n\n  if (ismaster.maxWireVersion >= 2) {\n    writeCommands = true;\n  }\n\n  if (ismaster.maxWireVersion >= 3) {\n    listCollections = true;\n    listIndexes = true;\n  }\n\n  if (ismaster.maxWireVersion >= 5) {\n    commandsTakeWriteConcern = true;\n    commandsTakeCollation = true;\n  }\n\n  // If no min or max wire version set to 0\n  if (ismaster.minWireVersion == null) {\n    ismaster.minWireVersion = 0;\n  }\n\n  if (ismaster.maxWireVersion == null) {\n    ismaster.maxWireVersion = 0;\n  }\n\n  // Map up read only parameters\n  setup_get_property(this, 'hasAggregationCursor', aggregationCursor);\n  setup_get_property(this, 'hasWriteCommands', writeCommands);\n  setup_get_property(this, 'hasTextSearch', textSearch);\n  setup_get_property(this, 'hasAuthCommands', authCommands);\n  setup_get_property(this, 'hasListCollectionsCommand', listCollections);\n  setup_get_property(this, 'hasListIndexesCommand', listIndexes);\n  setup_get_property(this, 'minWireVersion', ismaster.minWireVersion);\n  setup_get_property(this, 'maxWireVersion', ismaster.maxWireVersion);\n  setup_get_property(this, 'maxNumberOfDocsInBatch', maxNumberOfDocsInBatch);\n  setup_get_property(this, 'commandsTakeWriteConcern', commandsTakeWriteConcern);\n  setup_get_property(this, 'commandsTakeCollation', commandsTakeCollation);\n};\n\n// Get package.json variable\nconst driverVersion = require('../../package.json').version,\n  nodejsversion = f('Node.js %s, %s', process.version, os.endianness()),\n  type = os.type(),\n  name = process.platform,\n  architecture = process.arch,\n  release = os.release();\n\nclass TopologyBase extends EventEmitter {\n  constructor() {\n    super();\n\n    // Build default client information\n    this.clientInfo = {\n      driver: {\n        name: 'nodejs',\n        version: driverVersion\n      },\n      os: {\n        type: type,\n        name: name,\n        architecture: architecture,\n        version: release\n      },\n      platform: nodejsversion\n    };\n\n    this.setMaxListeners(Infinity);\n  }\n\n  // Sessions related methods\n  hasSessionSupport() {\n    return this.logicalSessionTimeoutMinutes != null;\n  }\n\n  startSession(options) {\n    const session = new ClientSession(this, this.s.sessionPool, options);\n    session.once('ended', () => {\n      this.s.sessions = this.s.sessions.filter(s => !s.equals(session));\n    });\n\n    this.s.sessions.push(session);\n    return session;\n  }\n\n  endSessions(sessions, callback) {\n    return this.s.coreTopology.endSessions(sessions, callback);\n  }\n\n  // Server capabilities\n  capabilities() {\n    if (this.s.sCapabilities) return this.s.sCapabilities;\n    if (this.s.coreTopology.lastIsMaster() == null) return null;\n    this.s.sCapabilities = new ServerCapabilities(this.s.coreTopology.lastIsMaster());\n    return this.s.sCapabilities;\n  }\n\n  // Command\n  command(ns, cmd, options, callback) {\n    this.s.coreTopology.command(ns, cmd, translateReadPreference(options), callback);\n  }\n\n  // Insert\n  insert(ns, ops, options, callback) {\n    this.s.coreTopology.insert(ns, ops, options, callback);\n  }\n\n  // Update\n  update(ns, ops, options, callback) {\n    this.s.coreTopology.update(ns, ops, options, callback);\n  }\n\n  // Remove\n  remove(ns, ops, options, callback) {\n    this.s.coreTopology.remove(ns, ops, options, callback);\n  }\n\n  // IsConnected\n  isConnected(options) {\n    options = options || {};\n    options = translateReadPreference(options);\n\n    return this.s.coreTopology.isConnected(options);\n  }\n\n  // IsDestroyed\n  isDestroyed() {\n    return this.s.coreTopology.isDestroyed();\n  }\n\n  // Cursor\n  cursor(ns, cmd, options) {\n    options = options || {};\n    options = translateReadPreference(options);\n    options.disconnectHandler = this.s.store;\n    options.topology = this;\n\n    return this.s.coreTopology.cursor(ns, cmd, options);\n  }\n\n  lastIsMaster() {\n    return this.s.coreTopology.lastIsMaster();\n  }\n\n  getServer(options) {\n    return this.s.coreTopology.getServer(options);\n  }\n\n  getConnection(options) {\n    return this.s.coreTopology.getConnection(options);\n  }\n\n  /**\n   * Unref all sockets\n   * @method\n   */\n  unref() {\n    return this.s.coreTopology.unref();\n  }\n\n  auth() {\n    var args = Array.prototype.slice.call(arguments, 0);\n    this.s.coreTopology.auth.apply(this.s.coreTopology, args);\n  }\n\n  logout() {\n    var args = Array.prototype.slice.call(arguments, 0);\n    this.s.coreTopology.logout.apply(this.s.coreTopology, args);\n  }\n\n  /**\n   * All raw connections\n   * @method\n   * @return {array}\n   */\n  connections() {\n    return this.s.coreTopology.connections();\n  }\n\n  close(forceClosed) {\n    // If we have sessions, we want to send a single `endSessions` command for them,\n    // and then individually clean them up.  They will be removed from the internal state\n    // when they emit their `ended` events.\n    if (this.s.sessions.length) {\n      this.endSessions(this.s.sessions.map(session => session.id));\n      this.s.sessions.forEach(session => session.endSession({ skipCommand: true }));\n    }\n\n    if (this.s.sessionPool) {\n      this.s.sessionPool.endAllPooledSessions();\n    }\n\n    this.s.coreTopology.destroy({\n      force: typeof forceClosed === 'boolean' ? forceClosed : false\n    });\n\n    // We need to wash out all stored processes\n    if (forceClosed === true) {\n      this.s.storeOptions.force = forceClosed;\n      this.s.store.flush();\n    }\n  }\n}\n\n// Properties\nObject.defineProperty(TopologyBase.prototype, 'isMasterDoc', {\n  enumerable: true,\n  get: function() {\n    return this.s.coreTopology.lastIsMaster();\n  }\n});\n\nObject.defineProperty(TopologyBase.prototype, 'bson', {\n  enumerable: true,\n  get: function() {\n    return this.s.coreTopology.s.bson;\n  }\n});\n\nObject.defineProperty(TopologyBase.prototype, 'parserType', {\n  enumerable: true,\n  get: function() {\n    return this.s.coreTopology.parserType;\n  }\n});\n\nObject.defineProperty(TopologyBase.prototype, 'logicalSessionTimeoutMinutes', {\n  enumerable: true,\n  get: function() {\n    return this.s.coreTopology.logicalSessionTimeoutMinutes;\n  }\n});\n\nObject.defineProperty(TopologyBase.prototype, 'type', {\n  enumerable: true,\n  get: function() {\n    return this.s.coreTopology.type;\n  }\n});\n\nexports.Store = Store;\nexports.ServerCapabilities = ServerCapabilities;\nexports.TopologyBase = TopologyBase;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/topologies/topology_base.js\n// module id = 37\n// module chunks = 0","'use strict';\n\nvar f = require('util').format,\n  MongoError = require('../error').MongoError;\n\n// Filters for classes\nvar classFilters = {};\nvar filteredClasses = {};\nvar level = null;\n// Save the process id\nvar pid = process.pid;\n// current logger\nvar currentLogger = null;\n\n/**\n * Creates a new Logger instance\n * @class\n * @param {string} className The Class name associated with the logging instance\n * @param {object} [options=null] Optional settings.\n * @param {Function} [options.logger=null] Custom logger function;\n * @param {string} [options.loggerLevel=error] Override default global log level.\n * @return {Logger} a Logger instance.\n */\nvar Logger = function(className, options) {\n  if (!(this instanceof Logger)) return new Logger(className, options);\n  options = options || {};\n\n  // Current reference\n  this.className = className;\n\n  // Current logger\n  if (options.logger) {\n    currentLogger = options.logger;\n  } else if (currentLogger == null) {\n    currentLogger = console.log;\n  }\n\n  // Set level of logging, default is error\n  if (options.loggerLevel) {\n    level = options.loggerLevel || 'error';\n  }\n\n  // Add all class names\n  if (filteredClasses[this.className] == null) classFilters[this.className] = true;\n};\n\n/**\n * Log a message at the debug level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\nLogger.prototype.debug = function(message, object) {\n  if (\n    this.isDebug() &&\n    ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n      (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n  ) {\n    var dateTime = new Date().getTime();\n    var msg = f('[%s-%s:%s] %s %s', 'DEBUG', this.className, pid, dateTime, message);\n    var state = {\n      type: 'debug',\n      message: message,\n      className: this.className,\n      pid: pid,\n      date: dateTime\n    };\n    if (object) state.meta = object;\n    currentLogger(msg, state);\n  }\n};\n\n/**\n * Log a message at the warn level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\n(Logger.prototype.warn = function(message, object) {\n  if (\n    this.isWarn() &&\n    ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n      (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n  ) {\n    var dateTime = new Date().getTime();\n    var msg = f('[%s-%s:%s] %s %s', 'WARN', this.className, pid, dateTime, message);\n    var state = {\n      type: 'warn',\n      message: message,\n      className: this.className,\n      pid: pid,\n      date: dateTime\n    };\n    if (object) state.meta = object;\n    currentLogger(msg, state);\n  }\n}),\n  /**\n   * Log a message at the info level\n   * @method\n   * @param {string} message The message to log\n   * @param {object} object additional meta data to log\n   * @return {null}\n   */\n  (Logger.prototype.info = function(message, object) {\n    if (\n      this.isInfo() &&\n      ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n        (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n    ) {\n      var dateTime = new Date().getTime();\n      var msg = f('[%s-%s:%s] %s %s', 'INFO', this.className, pid, dateTime, message);\n      var state = {\n        type: 'info',\n        message: message,\n        className: this.className,\n        pid: pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }),\n  /**\n   * Log a message at the error level\n   * @method\n   * @param {string} message The message to log\n   * @param {object} object additional meta data to log\n   * @return {null}\n   */\n  (Logger.prototype.error = function(message, object) {\n    if (\n      this.isError() &&\n      ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n        (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))\n    ) {\n      var dateTime = new Date().getTime();\n      var msg = f('[%s-%s:%s] %s %s', 'ERROR', this.className, pid, dateTime, message);\n      var state = {\n        type: 'error',\n        message: message,\n        className: this.className,\n        pid: pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }),\n  /**\n   * Is the logger set at info level\n   * @method\n   * @return {boolean}\n   */\n  (Logger.prototype.isInfo = function() {\n    return level === 'info' || level === 'debug';\n  }),\n  /**\n   * Is the logger set at error level\n   * @method\n   * @return {boolean}\n   */\n  (Logger.prototype.isError = function() {\n    return level === 'error' || level === 'info' || level === 'debug';\n  }),\n  /**\n   * Is the logger set at error level\n   * @method\n   * @return {boolean}\n   */\n  (Logger.prototype.isWarn = function() {\n    return level === 'error' || level === 'warn' || level === 'info' || level === 'debug';\n  }),\n  /**\n   * Is the logger set at debug level\n   * @method\n   * @return {boolean}\n   */\n  (Logger.prototype.isDebug = function() {\n    return level === 'debug';\n  });\n\n/**\n * Resets the logger to default settings, error and no filtered classes\n * @method\n * @return {null}\n */\nLogger.reset = function() {\n  level = 'error';\n  filteredClasses = {};\n};\n\n/**\n * Get the current logger function\n * @method\n * @return {function}\n */\nLogger.currentLogger = function() {\n  return currentLogger;\n};\n\n/**\n * Set the current logger function\n * @method\n * @param {function} logger Logger function.\n * @return {null}\n */\nLogger.setCurrentLogger = function(logger) {\n  if (typeof logger !== 'function') throw new MongoError('current logger must be a function');\n  currentLogger = logger;\n};\n\n/**\n * Set what classes to log.\n * @method\n * @param {string} type The type of filter (currently only class)\n * @param {string[]} values The filters to apply\n * @return {null}\n */\nLogger.filter = function(type, values) {\n  if (type === 'class' && Array.isArray(values)) {\n    filteredClasses = {};\n\n    values.forEach(function(x) {\n      filteredClasses[x] = true;\n    });\n  }\n};\n\n/**\n * Set the current log level\n * @method\n * @param {string} level Set current log level (debug, info, error)\n * @return {null}\n */\nLogger.setLevel = function(_level) {\n  if (_level !== 'info' && _level !== 'error' && _level !== 'debug' && _level !== 'warn') {\n    throw new Error(f('%s is an illegal logging level', _level));\n  }\n\n  level = _level;\n};\n\nmodule.exports = Logger;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/connection/logger.js\n// module id = 38\n// module chunks = 0","'use strict';\n\nvar ReadPreference = require('../topologies/read_preference'),\n  MongoError = require('../error').MongoError;\n\nvar MESSAGE_HEADER_SIZE = 16;\n\n// OPCODE Numbers\n// Defined at https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#request-opcodes\nvar opcodes = {\n  OP_REPLY: 1,\n  OP_UPDATE: 2001,\n  OP_INSERT: 2002,\n  OP_QUERY: 2004,\n  OP_GETMORE: 2005,\n  OP_DELETE: 2006,\n  OP_KILL_CURSORS: 2007,\n  OP_COMPRESSED: 2012\n};\n\nvar getReadPreference = function(cmd, options) {\n  // Default to command version of the readPreference\n  var readPreference = cmd.readPreference || new ReadPreference('primary');\n  // If we have an option readPreference override the command one\n  if (options.readPreference) {\n    readPreference = options.readPreference;\n  }\n\n  if (typeof readPreference === 'string') {\n    readPreference = new ReadPreference(readPreference);\n  }\n\n  if (!(readPreference instanceof ReadPreference)) {\n    throw new MongoError('readPreference must be a ReadPreference instance');\n  }\n\n  return readPreference;\n};\n\n// Parses the header of a wire protocol message\nvar parseHeader = function(message) {\n  return {\n    length: message.readInt32LE(0),\n    requestId: message.readInt32LE(4),\n    responseTo: message.readInt32LE(8),\n    opCode: message.readInt32LE(12)\n  };\n};\n\nmodule.exports = {\n  getReadPreference: getReadPreference,\n  MESSAGE_HEADER_SIZE: MESSAGE_HEADER_SIZE,\n  opcodes: opcodes,\n  parseHeader: parseHeader\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/wireprotocol/shared.js\n// module id = 39\n// module chunks = 0","\n/*!\n * Module dependencies\n */\n\nvar get = require('lodash.get');\nvar isDefiningProjection = require('./services/projection/isDefiningProjection');\nvar utils = require('./utils');\n\n/*!\n * Prepare a set of path options for query population.\n *\n * @param {Query} query\n * @param {Object} options\n * @return {Array}\n */\n\nexports.preparePopulationOptions = function preparePopulationOptions(query, options) {\n  var pop = utils.object.vals(query.options.populate);\n\n  // lean options should trickle through all queries\n  if (options.lean) {\n    pop.forEach(makeLean(options.lean));\n  }\n\n  return pop;\n};\n\n/*!\n * Prepare a set of path options for query population. This is the MongooseQuery\n * version\n *\n * @param {Query} query\n * @param {Object} options\n * @return {Array}\n */\n\nexports.preparePopulationOptionsMQ = function preparePopulationOptionsMQ(query, options) {\n  var pop = utils.object.vals(query._mongooseOptions.populate);\n\n  // lean options should trickle through all queries\n  if (options.lean) {\n    pop.forEach(makeLean(options.lean));\n  }\n\n  return pop;\n};\n\n\n/*!\n * returns discriminator by discriminatorMapping.value\n *\n * @param {Model} model\n * @param {string} value\n */\nfunction getDiscriminatorByValue(model, value) {\n  var discriminator = null;\n  if (!model.discriminators) {\n    return discriminator;\n  }\n  for (var name in model.discriminators) {\n    var it = model.discriminators[name];\n    if (\n      it.schema &&\n      it.schema.discriminatorMapping &&\n      it.schema.discriminatorMapping.value == value\n    ) {\n      discriminator = it;\n      break;\n    }\n  }\n  return discriminator;\n}\n\nexports.getDiscriminatorByValue = getDiscriminatorByValue;\n\n/*!\n * If the document is a mapped discriminator type, it returns a model instance for that type, otherwise,\n * it returns an instance of the given model.\n *\n * @param {Model}  model\n * @param {Object} doc\n * @param {Object} fields\n *\n * @return {Model}\n */\nexports.createModel = function createModel(model, doc, fields, userProvidedFields) {\n  var discriminatorMapping = model.schema\n    ? model.schema.discriminatorMapping\n    : null;\n\n  var key = discriminatorMapping && discriminatorMapping.isRoot\n    ? discriminatorMapping.key\n    : null;\n\n  var value = doc[key];\n  if (key && value && model.discriminators) {\n    var discriminator = model.discriminators[value] || getDiscriminatorByValue(model, value);\n    if (discriminator) {\n      var _fields = utils.clone(userProvidedFields);\n      exports.applyPaths(_fields, discriminator.schema);\n      return new discriminator(undefined, _fields, true);\n    }\n  }\n\n  return new model(undefined, fields, true);\n};\n\n/*!\n * ignore\n */\n\nexports.applyPaths = function applyPaths(fields, schema) {\n  // determine if query is selecting or excluding fields\n  var exclude;\n  var keys;\n  var ki;\n  var field;\n\n  if (fields) {\n    keys = Object.keys(fields);\n    ki = keys.length;\n\n    while (ki--) {\n      if (keys[ki][0] === '+') {\n        continue;\n      }\n      field = fields[keys[ki]];\n      // Skip `$meta` and `$slice`\n      if (!isDefiningProjection(field)) {\n        continue;\n      }\n      exclude = field === 0;\n      break;\n    }\n  }\n\n  // if selecting, apply default schematype select:true fields\n  // if excluding, apply schematype select:false fields\n\n  var selected = [];\n  var excluded = [];\n  var stack = [];\n\n  var analyzePath = function(path, type) {\n    if (typeof type.selected !== 'boolean') return;\n\n    var plusPath = '+' + path;\n    if (fields && plusPath in fields) {\n      // forced inclusion\n      delete fields[plusPath];\n\n      // if there are other fields being included, add this one\n      // if no other included fields, leave this out (implied inclusion)\n      if (exclude === false && keys.length > 1 && !~keys.indexOf(path)) {\n        fields[path] = 1;\n      }\n\n      return;\n    }\n\n    // check for parent exclusions\n    var pieces = path.split('.');\n    var root = pieces[0];\n    if (~excluded.indexOf(root)) {\n      return;\n    }\n\n    // Special case: if user has included a parent path of a discriminator key,\n    // don't explicitly project in the discriminator key because that will\n    // project out everything else under the parent path\n    if (!exclude && get(type, 'options.$skipDiscriminatorCheck', false)) {\n      var cur = '';\n      for (var i = 0; i < pieces.length; ++i) {\n        cur += (cur.length === 0 ? '' : '.') + pieces[i];\n        var projection = get(fields, cur, false);\n        if (projection && typeof projection !== 'object') {\n          return;\n        }\n      }\n    }\n\n    (type.selected ? selected : excluded).push(path);\n  };\n\n  var analyzeSchema = function(schema, prefix) {\n    prefix || (prefix = '');\n\n    // avoid recursion\n    if (stack.indexOf(schema) !== -1) {\n      return;\n    }\n    stack.push(schema);\n\n    schema.eachPath(function(path, type) {\n      if (prefix) path = prefix + '.' + path;\n\n      analyzePath(path, type);\n\n      // array of subdocs?\n      if (type.schema) {\n        analyzeSchema(type.schema, path);\n      }\n    });\n\n    stack.pop();\n  };\n\n  analyzeSchema(schema);\n\n  var i;\n  switch (exclude) {\n    case true:\n      for (i = 0; i < excluded.length; ++i) {\n        fields[excluded[i]] = 0;\n      }\n      break;\n    case false:\n      if (schema &&\n          schema.paths['_id'] &&\n          schema.paths['_id'].options &&\n          schema.paths['_id'].options.select === false) {\n        fields._id = 0;\n      }\n      for (i = 0; i < selected.length; ++i) {\n        fields[selected[i]] = 1;\n      }\n      break;\n    case undefined:\n      // user didn't specify fields, implies returning all fields.\n      // only need to apply excluded fields\n      for (i = 0; i < excluded.length; ++i) {\n        fields[excluded[i]] = 0;\n      }\n      break;\n  }\n};\n\n/*!\n * Set each path query option to lean\n *\n * @param {Object} option\n */\n\nfunction makeLean(val) {\n  return function(option) {\n    option.options || (option.options = {});\n    option.options.lean = val;\n  };\n}\n\n/*!\n * Handle the `WriteOpResult` from the server\n */\n\nexports.handleWriteOpResult = function handleWriteOpResult(callback) {\n  return function _handleWriteOpResult(error, res) {\n    if (error) {\n      return callback(error);\n    }\n    return callback(null, res.result);\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/queryhelpers.js\n// module id = 40\n// module chunks = 0","module.exports = require(\"stream\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"stream\"\n// module id = 41\n// module chunks = 0","'use strict';\n\n// Core module\nvar core = require('mongodb-core'),\n  Instrumentation = require('./lib/apm');\n\n// Set up the connect function\nvar connect = require('./lib/mongo_client').connect;\n\n// Expose error class\nconnect.MongoError = core.MongoError;\n\n// Actual driver classes exported\nconnect.Admin = require('./lib/admin');\nconnect.MongoClient = require('./lib/mongo_client');\nconnect.Db = require('./lib/db');\nconnect.Collection = require('./lib/collection');\nconnect.Server = require('./lib/topologies/server');\nconnect.ReplSet = require('./lib/topologies/replset');\nconnect.Mongos = require('./lib/topologies/mongos');\nconnect.ReadPreference = require('mongodb-core').ReadPreference;\nconnect.GridStore = require('./lib/gridfs/grid_store');\nconnect.Chunk = require('./lib/gridfs/chunk');\nconnect.Logger = core.Logger;\nconnect.Cursor = require('./lib/cursor');\nconnect.GridFSBucket = require('./lib/gridfs-stream');\n// Exported to be used in tests not to be used anywhere else\nconnect.CoreServer = require('mongodb-core').Server;\nconnect.CoreConnection = require('mongodb-core').Connection;\n\n// BSON types exported\nconnect.Binary = core.BSON.Binary;\nconnect.Code = core.BSON.Code;\nconnect.Map = core.BSON.Map;\nconnect.DBRef = core.BSON.DBRef;\nconnect.Double = core.BSON.Double;\nconnect.Int32 = core.BSON.Int32;\nconnect.Long = core.BSON.Long;\nconnect.MinKey = core.BSON.MinKey;\nconnect.MaxKey = core.BSON.MaxKey;\nconnect.ObjectID = core.BSON.ObjectID;\nconnect.ObjectId = core.BSON.ObjectID;\nconnect.Symbol = core.BSON.Symbol;\nconnect.Timestamp = core.BSON.Timestamp;\nconnect.BSONRegExp = core.BSON.BSONRegExp;\nconnect.Decimal128 = core.BSON.Decimal128;\n\n// Add connect method\nconnect.connect = connect;\n\n// Set up the instrumentation method\nconnect.instrument = function(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  return new Instrumentation(core, options, callback);\n};\n\n// Set our exports to be the connect function\nmodule.exports = connect;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/index.js\n// module id = 42\n// module chunks = 0","'use strict';\n\nvar inherits = require('util').inherits,\n  ReadPreference = require('mongodb-core').ReadPreference,\n  MongoError = require('mongodb-core').MongoError,\n  Readable = require('stream').Readable,\n  Define = require('./metadata'),\n  CoreCursor = require('./cursor');\n\n/**\n * @fileOverview The **CommandCursor** class is an internal class that embodies a\n * generalized cursor based on a MongoDB command allowing for iteration over the\n * results returned. It supports one by one document iteration, conversion to an\n * array or can be iterated as a Node 0.10.X or higher stream\n *\n * **CommandCursor Cannot directly be instantiated**\n * @example\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Create a collection we want to drop later\n *   const col = client.db(dbName).collection('listCollectionsExample1');\n *   // Insert a bunch of documents\n *   col.insert([{a:1, b:1}\n *     , {a:2, b:2}, {a:3, b:3}\n *     , {a:4, b:4}], {w:1}, function(err, result) {\n *     test.equal(null, err);\n *     // List the database collections available\n *     db.listCollections().toArray(function(err, items) {\n *       test.equal(null, err);\n *       client.close();\n *     });\n *   });\n * });\n */\n\n/**\n * Namespace provided by the browser.\n * @external Readable\n */\n\n/**\n * Creates a new Command Cursor instance (INTERNAL TYPE, do not instantiate directly)\n * @class CommandCursor\n * @extends external:Readable\n * @fires CommandCursor#data\n * @fires CommandCursor#end\n * @fires CommandCursor#close\n * @fires CommandCursor#readable\n * @return {CommandCursor} an CommandCursor instance.\n */\nvar CommandCursor = function(bson, ns, cmd, options, topology, topologyOptions) {\n  CoreCursor.apply(this, Array.prototype.slice.call(arguments, 0));\n  var state = CommandCursor.INIT;\n  var streamOptions = {};\n\n  // MaxTimeMS\n  var maxTimeMS = null;\n\n  // Get the promiseLibrary\n  var promiseLibrary = options.promiseLibrary || Promise;\n\n  // Set up\n  Readable.call(this, { objectMode: true });\n\n  // Internal state\n  this.s = {\n    // MaxTimeMS\n    maxTimeMS: maxTimeMS,\n    // State\n    state: state,\n    // Stream options\n    streamOptions: streamOptions,\n    // BSON\n    bson: bson,\n    // Namespace\n    ns: ns,\n    // Command\n    cmd: cmd,\n    // Options\n    options: options,\n    // Topology\n    topology: topology,\n    // Topology Options\n    topologyOptions: topologyOptions,\n    // Promise library\n    promiseLibrary: promiseLibrary\n  };\n};\n\n/**\n * CommandCursor stream data event, fired for each document in the cursor.\n *\n * @event CommandCursor#data\n * @type {object}\n */\n\n/**\n * CommandCursor stream end event\n *\n * @event CommandCursor#end\n * @type {null}\n */\n\n/**\n * CommandCursor stream close event\n *\n * @event CommandCursor#close\n * @type {null}\n */\n\n/**\n * CommandCursor stream readable event\n *\n * @event CommandCursor#readable\n * @type {null}\n */\n\n// Inherit from Readable\ninherits(CommandCursor, Readable);\n\n// Set the methods to inherit from prototype\nvar methodsToInherit = [\n  '_next',\n  'next',\n  'hasNext',\n  'each',\n  'forEach',\n  'toArray',\n  'rewind',\n  'bufferedCount',\n  'readBufferedDocuments',\n  'close',\n  'isClosed',\n  'kill',\n  'setCursorBatchSize',\n  '_find',\n  '_getmore',\n  '_killcursor',\n  'isDead',\n  'explain',\n  'isNotified',\n  'isKilled'\n];\n\n// Only inherit the types we need\nfor (var i = 0; i < methodsToInherit.length; i++) {\n  CommandCursor.prototype[methodsToInherit[i]] = CoreCursor.prototype[methodsToInherit[i]];\n}\n\nvar define = (CommandCursor.define = new Define('CommandCursor', CommandCursor, true));\n\n/**\n * Set the ReadPreference for the cursor.\n * @method\n * @param {(string|ReadPreference)} readPreference The new read preference for the cursor.\n * @throws {MongoError}\n * @return {Cursor}\n */\nCommandCursor.prototype.setReadPreference = function(readPreference) {\n  if (this.s.state === CommandCursor.CLOSED || this.isDead()) {\n    throw MongoError.create({ message: 'Cursor is closed', driver: true });\n  }\n\n  if (this.s.state !== CommandCursor.INIT) {\n    throw MongoError.create({\n      message: 'cannot change cursor readPreference after cursor has been accessed',\n      driver: true\n    });\n  }\n\n  if (readPreference instanceof ReadPreference) {\n    this.s.options.readPreference = readPreference;\n  } else if (typeof readPreference === 'string') {\n    this.s.options.readPreference = new ReadPreference(readPreference);\n  } else {\n    throw new TypeError('Invalid read preference: ' + readPreference);\n  }\n\n  return this;\n};\n\ndefine.classMethod('setReadPreference', {\n  callback: false,\n  promise: false,\n  returns: [CommandCursor]\n});\n\n/**\n * Set the batch size for the cursor.\n * @method\n * @param {number} value The batchSize for the cursor.\n * @throws {MongoError}\n * @return {CommandCursor}\n */\nCommandCursor.prototype.batchSize = function(value) {\n  if (this.s.state === CommandCursor.CLOSED || this.isDead())\n    throw MongoError.create({ message: 'Cursor is closed', driver: true });\n  if (typeof value !== 'number')\n    throw MongoError.create({ message: 'batchSize requires an integer', driver: true });\n  if (this.s.cmd.cursor) this.s.cmd.cursor.batchSize = value;\n  this.setCursorBatchSize(value);\n  return this;\n};\n\ndefine.classMethod('batchSize', { callback: false, promise: false, returns: [CommandCursor] });\n\n/**\n * Add a maxTimeMS stage to the aggregation pipeline\n * @method\n * @param {number} value The state maxTimeMS value.\n * @return {CommandCursor}\n */\nCommandCursor.prototype.maxTimeMS = function(value) {\n  if (this.s.topology.lastIsMaster().minWireVersion > 2) {\n    this.s.cmd.maxTimeMS = value;\n  }\n  return this;\n};\n\ndefine.classMethod('maxTimeMS', { callback: false, promise: false, returns: [CommandCursor] });\n\nCommandCursor.prototype.get = CommandCursor.prototype.toArray;\n\ndefine.classMethod('get', { callback: true, promise: false });\n\n// Inherited methods\ndefine.classMethod('toArray', { callback: true, promise: true });\ndefine.classMethod('each', { callback: true, promise: false });\ndefine.classMethod('forEach', { callback: true, promise: false });\ndefine.classMethod('next', { callback: true, promise: true });\ndefine.classMethod('hasNext', { callback: true, promise: true });\ndefine.classMethod('close', { callback: true, promise: true });\ndefine.classMethod('isClosed', { callback: false, promise: false, returns: [Boolean] });\ndefine.classMethod('rewind', { callback: false, promise: false });\ndefine.classMethod('bufferedCount', { callback: false, promise: false, returns: [Number] });\ndefine.classMethod('readBufferedDocuments', { callback: false, promise: false, returns: [Array] });\n\n/**\n * Get the next available document from the cursor, returns null if no more documents are available.\n * @function CommandCursor.prototype.next\n * @param {CommandCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Check if there is any document still available in the cursor\n * @function CommandCursor.prototype.hasNext\n * @param {CommandCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback CommandCursor~toArrayResultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object[]} documents All the documents the satisfy the cursor.\n */\n\n/**\n * Returns an array of documents. The caller is responsible for making sure that there\n * is enough memory to store the results. Note that the array only contain partial\n * results when this cursor had been previouly accessed.\n * @method CommandCursor.prototype.toArray\n * @param {CommandCursor~toArrayResultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback CommandCursor~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {(object|null)} result The result object if the command was executed successfully.\n */\n\n/**\n * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,\n * not all of the elements will be iterated if this cursor had been previouly accessed.\n * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike\n * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements\n * at any given time if batch size is specified. Otherwise, the caller is responsible\n * for making sure that the entire result can fit the memory.\n * @method CommandCursor.prototype.each\n * @param {CommandCursor~resultCallback} callback The result callback.\n * @throws {MongoError}\n * @return {null}\n */\n\n/**\n * Close the cursor, sending a KillCursor command and emitting close.\n * @method CommandCursor.prototype.close\n * @param {CommandCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Is the cursor closed\n * @method CommandCursor.prototype.isClosed\n * @return {boolean}\n */\n\n/**\n * Clone the cursor\n * @function CommandCursor.prototype.clone\n * @return {CommandCursor}\n */\n\n/**\n * Resets the cursor\n * @function CommandCursor.prototype.rewind\n * @return {CommandCursor}\n */\n\n/**\n * The callback format for the forEach iterator method\n * @callback CommandCursor~iteratorCallback\n * @param {Object} doc An emitted document for the iterator\n */\n\n/**\n * The callback error format for the forEach iterator method\n * @callback CommandCursor~endCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n */\n\n/*\n * Iterates over all the documents for this cursor using the iterator, callback pattern.\n * @method CommandCursor.prototype.forEach\n * @param {CommandCursor~iteratorCallback} iterator The iteration callback.\n * @param {CommandCursor~endCallback} callback The end callback.\n * @throws {MongoError}\n * @return {null}\n */\n\nCommandCursor.INIT = 0;\nCommandCursor.OPEN = 1;\nCommandCursor.CLOSED = 2;\n\nmodule.exports = CommandCursor;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/command_cursor.js\n// module id = 43\n// module chunks = 0","'use strict';\n\n/*!\n * ignore\n */\n\nexports.internalToObjectOptions = {\n  transform: false,\n  virtuals: false,\n  getters: false,\n  _skipDepopulateTopLevel: true,\n  depopulate: true,\n  flattenDecimals: false\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/options.js\n// module id = 44\n// module chunks = 0","/**\n * ObjectId type constructor\n *\n * ####Example\n *\n *     var id = new mongoose.Types.ObjectId;\n *\n * @constructor ObjectId\n */\n\nvar ObjectId = require('../drivers').ObjectId;\n\nmodule.exports = ObjectId;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/types/objectid.js\n// module id = 45\n// module chunks = 0","// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// Copyright 2009 Google Inc. All Rights Reserved\n\n/**\n * Defines a Long class for representing a 64-bit two's-complement\n * integer value, which faithfully simulates the behavior of a Java \"Long\". This\n * implementation is derived from LongLib in GWT.\n *\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Longs.\n *\n * The internal representation of a Long is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @class\n * @param {number} low  the low (signed) 32 bits of the Long.\n * @param {number} high the high (signed) 32 bits of the Long.\n * @return {Long}\n */\nfunction Long(low, high) {\n  if (!(this instanceof Long)) return new Long(low, high);\n\n  this._bsontype = 'Long';\n  /**\n   * @type {number}\n   * @ignore\n   */\n  this.low_ = low | 0; // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @ignore\n   */\n  this.high_ = high | 0; // force into 32 signed bits.\n}\n\n/**\n * Return the int value.\n *\n * @method\n * @return {number} the value, assuming it is a 32-bit integer.\n */\nLong.prototype.toInt = function() {\n  return this.low_;\n};\n\n/**\n * Return the Number value.\n *\n * @method\n * @return {number} the closest floating-point representation to this value.\n */\nLong.prototype.toNumber = function() {\n  return this.high_ * Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();\n};\n\n/**\n * Return the JSON value.\n *\n * @method\n * @return {string} the JSON representation.\n */\nLong.prototype.toJSON = function() {\n  return this.toString();\n};\n\n/**\n * Return the String value.\n *\n * @method\n * @param {number} [opt_radix] the radix in which the text should be written.\n * @return {string} the textual representation of this value.\n */\nLong.prototype.toString = function(opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (this.isZero()) {\n    return '0';\n  }\n\n  if (this.isNegative()) {\n    if (this.equals(Long.MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = Long.fromNumber(radix);\n      var div = this.div(radixLong);\n      var rem = div.multiply(radixLong).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Long.fromNumber(Math.pow(radix, 6));\n\n  rem = this;\n  var result = '';\n\n  while (!rem.isZero()) {\n    var remDiv = rem.div(radixToPower);\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n    var digits = intval.toString(radix);\n\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n      result = '' + digits + result;\n    }\n  }\n};\n\n/**\n * Return the high 32-bits value.\n *\n * @method\n * @return {number} the high 32-bits as a signed value.\n */\nLong.prototype.getHighBits = function() {\n  return this.high_;\n};\n\n/**\n * Return the low 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as a signed value.\n */\nLong.prototype.getLowBits = function() {\n  return this.low_;\n};\n\n/**\n * Return the low unsigned 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as an unsigned value.\n */\nLong.prototype.getLowBitsUnsigned = function() {\n  return this.low_ >= 0 ? this.low_ : Long.TWO_PWR_32_DBL_ + this.low_;\n};\n\n/**\n * Returns the number of bits needed to represent the absolute value of this Long.\n *\n * @method\n * @return {number} Returns the number of bits needed to represent the absolute value of this Long.\n */\nLong.prototype.getNumBitsAbs = function() {\n  if (this.isNegative()) {\n    if (this.equals(Long.MIN_VALUE)) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ !== 0 ? this.high_ : this.low_;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & (1 << bit)) !== 0) {\n        break;\n      }\n    }\n    return this.high_ !== 0 ? bit + 33 : bit + 1;\n  }\n};\n\n/**\n * Return whether this value is zero.\n *\n * @method\n * @return {boolean} whether this value is zero.\n */\nLong.prototype.isZero = function() {\n  return this.high_ === 0 && this.low_ === 0;\n};\n\n/**\n * Return whether this value is negative.\n *\n * @method\n * @return {boolean} whether this value is negative.\n */\nLong.prototype.isNegative = function() {\n  return this.high_ < 0;\n};\n\n/**\n * Return whether this value is odd.\n *\n * @method\n * @return {boolean} whether this value is odd.\n */\nLong.prototype.isOdd = function() {\n  return (this.low_ & 1) === 1;\n};\n\n/**\n * Return whether this Long equals the other\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long equals the other\n */\nLong.prototype.equals = function(other) {\n  return this.high_ === other.high_ && this.low_ === other.low_;\n};\n\n/**\n * Return whether this Long does not equal the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long does not equal the other.\n */\nLong.prototype.notEquals = function(other) {\n  return this.high_ !== other.high_ || this.low_ !== other.low_;\n};\n\n/**\n * Return whether this Long is less than the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is less than the other.\n */\nLong.prototype.lessThan = function(other) {\n  return this.compare(other) < 0;\n};\n\n/**\n * Return whether this Long is less than or equal to the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is less than or equal to the other.\n */\nLong.prototype.lessThanOrEqual = function(other) {\n  return this.compare(other) <= 0;\n};\n\n/**\n * Return whether this Long is greater than the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is greater than the other.\n */\nLong.prototype.greaterThan = function(other) {\n  return this.compare(other) > 0;\n};\n\n/**\n * Return whether this Long is greater than or equal to the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is greater than or equal to the other.\n */\nLong.prototype.greaterThanOrEqual = function(other) {\n  return this.compare(other) >= 0;\n};\n\n/**\n * Compares this Long with the given one.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} 0 if they are the same, 1 if the this is greater, and -1 if the given one is greater.\n */\nLong.prototype.compare = function(other) {\n  if (this.equals(other)) {\n    return 0;\n  }\n\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n  if (!thisNeg && otherNeg) {\n    return 1;\n  }\n\n  // at this point, the signs are the same, so subtraction will not overflow\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * The negation of this value.\n *\n * @method\n * @return {Long} the negation of this value.\n */\nLong.prototype.negate = function() {\n  if (this.equals(Long.MIN_VALUE)) {\n    return Long.MIN_VALUE;\n  } else {\n    return this.not().add(Long.ONE);\n  }\n};\n\n/**\n * Returns the sum of this and the given Long.\n *\n * @method\n * @param {Long} other Long to add to this one.\n * @return {Long} the sum of this and the given Long.\n */\nLong.prototype.add = function(other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xffff;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xffff;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xffff;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xffff;\n\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 + b48;\n  c48 &= 0xffff;\n  return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n/**\n * Returns the difference of this and the given Long.\n *\n * @method\n * @param {Long} other Long to subtract from this.\n * @return {Long} the difference of this and the given Long.\n */\nLong.prototype.subtract = function(other) {\n  return this.add(other.negate());\n};\n\n/**\n * Returns the product of this and the given Long.\n *\n * @method\n * @param {Long} other Long to multiply with this.\n * @return {Long} the product of this and the other.\n */\nLong.prototype.multiply = function(other) {\n  if (this.isZero()) {\n    return Long.ZERO;\n  } else if (other.isZero()) {\n    return Long.ZERO;\n  }\n\n  if (this.equals(Long.MIN_VALUE)) {\n    return other.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n  } else if (other.equals(Long.MIN_VALUE)) {\n    return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate()\n        .multiply(other)\n        .negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both Longs are small, use float multiplication\n  if (this.lessThan(Long.TWO_PWR_24_) && other.lessThan(Long.TWO_PWR_24_)) {\n    return Long.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Divide each Long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xffff;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xffff;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xffff;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xffff;\n\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xffff;\n  return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n/**\n * Returns this Long divided by the given one.\n *\n * @method\n * @param {Long} other Long by which to divide.\n * @return {Long} this Long divided by the given one.\n */\nLong.prototype.div = function(other) {\n  if (other.isZero()) {\n    throw Error('division by zero');\n  } else if (this.isZero()) {\n    return Long.ZERO;\n  }\n\n  if (this.equals(Long.MIN_VALUE)) {\n    if (other.equals(Long.ONE) || other.equals(Long.NEG_ONE)) {\n      return Long.MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n    } else if (other.equals(Long.MIN_VALUE)) {\n      return Long.ONE;\n    } else {\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n      if (approx.equals(Long.ZERO)) {\n        return other.isNegative() ? Long.ONE : Long.NEG_ONE;\n      } else {\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equals(Long.MIN_VALUE)) {\n    return Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate()\n        .div(other)\n        .negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = Long.ZERO;\n  rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = Long.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = Long.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = Long.ONE;\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n\n/**\n * Returns this Long modulo the given one.\n *\n * @method\n * @param {Long} other Long by which to mod.\n * @return {Long} this Long modulo the given one.\n */\nLong.prototype.modulo = function(other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n\n/**\n * The bitwise-NOT of this value.\n *\n * @method\n * @return {Long} the bitwise-NOT of this value.\n */\nLong.prototype.not = function() {\n  return Long.fromBits(~this.low_, ~this.high_);\n};\n\n/**\n * Returns the bitwise-AND of this Long and the given one.\n *\n * @method\n * @param {Long} other the Long with which to AND.\n * @return {Long} the bitwise-AND of this and the other.\n */\nLong.prototype.and = function(other) {\n  return Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);\n};\n\n/**\n * Returns the bitwise-OR of this Long and the given one.\n *\n * @method\n * @param {Long} other the Long with which to OR.\n * @return {Long} the bitwise-OR of this and the other.\n */\nLong.prototype.or = function(other) {\n  return Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);\n};\n\n/**\n * Returns the bitwise-XOR of this Long and the given one.\n *\n * @method\n * @param {Long} other the Long with which to XOR.\n * @return {Long} the bitwise-XOR of this and the other.\n */\nLong.prototype.xor = function(other) {\n  return Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Long} this shifted to the left by the given amount.\n */\nLong.prototype.shiftLeft = function(numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var low = this.low_;\n    if (numBits < 32) {\n      var high = this.high_;\n      return Long.fromBits(low << numBits, (high << numBits) | (low >>> (32 - numBits)));\n    } else {\n      return Long.fromBits(0, low << (numBits - 32));\n    }\n  }\n};\n\n/**\n * Returns this Long with bits shifted to the right by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Long} this shifted to the right by the given amount.\n */\nLong.prototype.shiftRight = function(numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Long.fromBits((low >>> numBits) | (high << (32 - numBits)), high >> numBits);\n    } else {\n      return Long.fromBits(high >> (numBits - 32), high >= 0 ? 0 : -1);\n    }\n  }\n};\n\n/**\n * Returns this Long with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Long} this shifted to the right by the given amount, with zeros placed into the new leading bits.\n */\nLong.prototype.shiftRightUnsigned = function(numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Long.fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits);\n    } else if (numBits === 32) {\n      return Long.fromBits(high, 0);\n    } else {\n      return Long.fromBits(high >>> (numBits - 32), 0);\n    }\n  }\n};\n\n/**\n * Returns a Long representing the given (32-bit) integer value.\n *\n * @method\n * @param {number} value the 32-bit integer in question.\n * @return {Long} the corresponding Long value.\n */\nLong.fromInt = function(value) {\n  if (-128 <= value && value < 128) {\n    var cachedObj = Long.INT_CACHE_[value];\n    if (cachedObj) {\n      return cachedObj;\n    }\n  }\n\n  var obj = new Long(value | 0, value < 0 ? -1 : 0);\n  if (-128 <= value && value < 128) {\n    Long.INT_CACHE_[value] = obj;\n  }\n  return obj;\n};\n\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n *\n * @method\n * @param {number} value the number in question.\n * @return {Long} the corresponding Long value.\n */\nLong.fromNumber = function(value) {\n  if (isNaN(value) || !isFinite(value)) {\n    return Long.ZERO;\n  } else if (value <= -Long.TWO_PWR_63_DBL_) {\n    return Long.MIN_VALUE;\n  } else if (value + 1 >= Long.TWO_PWR_63_DBL_) {\n    return Long.MAX_VALUE;\n  } else if (value < 0) {\n    return Long.fromNumber(-value).negate();\n  } else {\n    return new Long((value % Long.TWO_PWR_32_DBL_) | 0, (value / Long.TWO_PWR_32_DBL_) | 0);\n  }\n};\n\n/**\n * Returns a Long representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.\n *\n * @method\n * @param {number} lowBits the low 32-bits.\n * @param {number} highBits the high 32-bits.\n * @return {Long} the corresponding Long value.\n */\nLong.fromBits = function(lowBits, highBits) {\n  return new Long(lowBits, highBits);\n};\n\n/**\n * Returns a Long representation of the given string, written using the given radix.\n *\n * @method\n * @param {string} str the textual representation of the Long.\n * @param {number} opt_radix the radix in which the text is written.\n * @return {Long} the corresponding Long value.\n */\nLong.fromString = function(str, opt_radix) {\n  if (str.length === 0) {\n    throw Error('number format error: empty string');\n  }\n\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (str.charAt(0) === '-') {\n    return Long.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw Error('number format error: interior \"-\" character: ' + str);\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Long.fromNumber(Math.pow(radix, 8));\n\n  var result = Long.ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = Long.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(Long.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(Long.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {Object}\n * @ignore\n */\nLong.INT_CACHE_ = {};\n\n// NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_16_DBL_ = 1 << 16;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_24_DBL_ = 1 << 24;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_32_DBL_ = Long.TWO_PWR_16_DBL_ * Long.TWO_PWR_16_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_31_DBL_ = Long.TWO_PWR_32_DBL_ / 2;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_48_DBL_ = Long.TWO_PWR_32_DBL_ * Long.TWO_PWR_16_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_64_DBL_ = Long.TWO_PWR_32_DBL_ * Long.TWO_PWR_32_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_63_DBL_ = Long.TWO_PWR_64_DBL_ / 2;\n\n/** @type {Long} */\nLong.ZERO = Long.fromInt(0);\n\n/** @type {Long} */\nLong.ONE = Long.fromInt(1);\n\n/** @type {Long} */\nLong.NEG_ONE = Long.fromInt(-1);\n\n/** @type {Long} */\nLong.MAX_VALUE = Long.fromBits(0xffffffff | 0, 0x7fffffff | 0);\n\n/** @type {Long} */\nLong.MIN_VALUE = Long.fromBits(0, 0x80000000 | 0);\n\n/**\n * @type {Long}\n * @ignore\n */\nLong.TWO_PWR_24_ = Long.fromInt(1 << 24);\n\n/**\n * Expose.\n */\nmodule.exports = Long;\nmodule.exports.Long = Long;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_bson@1.0.6@bson/lib/bson/long.js\n// module id = 46\n// module chunks = 0","'use strict';\n\n/**\n * @fileOverview The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n *\n * @example\n * const ReplSet = require('mongodb-core').ReplSet,\n *   ReadPreference = require('mongodb-core').ReadPreference,\n *   assert = require('assert');\n *\n * const server = new ReplSet([{host: 'localhost', port: 30000}], {setName: 'rs'});\n * // Wait for the connection event\n * server.on('connect', function(server) {\n *   const cursor = server.cursor(\n *     'db.test',\n *     { find: 'db.test', query: {} },\n *     { readPreference: new ReadPreference('secondary') }\n *   );\n *\n *   cursor.next(function(err, doc) {\n *     server.destroy();\n *   });\n * });\n *\n * // Start connecting\n * server.connect();\n */\n\n/**\n * Creates a new Pool instance\n * @class\n * @param {string} mode A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n * @param {array} tags The tags object\n * @param {object} [options] Additional read preference options\n * @param {number} [options.maxStalenessSeconds] Max secondary read staleness in seconds, Minimum value is 90 seconds.\n * @property {string} mode The read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n * @property {array} tags The tags object\n * @property {object} options Additional read preference options\n * @property {number} maxStalenessSeconds MaxStalenessSeconds value for the read preference\n * @return {ReadPreference}\n */\nconst ReadPreference = function(mode, tags, options) {\n  this.mode = mode;\n  this.tags = tags;\n  this.options = options;\n\n  // Add the maxStalenessSeconds value to the read Preference\n  if (this.options && this.options.maxStalenessSeconds != null) {\n    this.options = options;\n    this.maxStalenessSeconds =\n      this.options.maxStalenessSeconds >= 0 ? this.options.maxStalenessSeconds : null;\n  } else if (tags && typeof tags === 'object') {\n    (this.options = tags), (tags = null);\n  }\n};\n\n// Support the deprecated `preference` property introduced in the porcelain layer\nObject.defineProperty(ReadPreference.prototype, 'preference', {\n  enumerable: true,\n  get: function() {\n    return this.mode;\n  }\n});\n\n/**\n * Read preference mode constants\n */\nReadPreference.PRIMARY = 'primary';\nReadPreference.PRIMARY_PREFERRED = 'primaryPreferred';\nReadPreference.SECONDARY = 'secondary';\nReadPreference.SECONDARY_PREFERRED = 'secondaryPreferred';\nReadPreference.NEAREST = 'nearest';\n\nconst VALID_MODES = [\n  ReadPreference.PRIMARY,\n  ReadPreference.PRIMARY_PREFERRED,\n  ReadPreference.SECONDARY,\n  ReadPreference.SECONDARY_PREFERRED,\n  ReadPreference.NEAREST,\n  true,\n  false,\n  null\n];\n\n/**\n * Validate if a mode is legal\n *\n * @method\n * @param {string} mode The string representing the read preference mode.\n * @return {boolean}\n */\nReadPreference.isValid = function(mode) {\n  return VALID_MODES.indexOf(mode) !== -1;\n};\n\n/**\n * Validate if a mode is legal\n *\n * @method\n * @param {string} mode The string representing the read preference mode.\n * @return {boolean}\n */\nReadPreference.prototype.isValid = function(mode) {\n  return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n};\n\nconst needSlaveOk = ['primaryPreferred', 'secondary', 'secondaryPreferred', 'nearest'];\n\n/**\n * This needs slaveOk bit set\n * @method\n * @return {boolean}\n */\nReadPreference.prototype.slaveOk = function() {\n  return needSlaveOk.indexOf(this.mode) !== -1;\n};\n\n/**\n * Are the two read preference equal\n * @method\n * @return {boolean}\n */\nReadPreference.prototype.equals = function(readPreference) {\n  return readPreference.mode === this.mode;\n};\n\n/**\n * Return JSON representation\n * @method\n * @return {Object}\n */\nReadPreference.prototype.toJSON = function() {\n  const readPreference = { mode: this.mode };\n  if (Array.isArray(this.tags)) readPreference.tags = this.tags;\n  if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n  return readPreference;\n};\n\n/**\n * Primary read preference\n * @method\n * @return {ReadPreference}\n */\nReadPreference.primary = new ReadPreference('primary');\n/**\n * Primary Preferred read preference\n * @method\n * @return {ReadPreference}\n */\nReadPreference.primaryPreferred = new ReadPreference('primaryPreferred');\n/**\n * Secondary read preference\n * @method\n * @return {ReadPreference}\n */\nReadPreference.secondary = new ReadPreference('secondary');\n/**\n * Secondary Preferred read preference\n * @method\n * @return {ReadPreference}\n */\nReadPreference.secondaryPreferred = new ReadPreference('secondaryPreferred');\n/**\n * Nearest read preference\n * @method\n * @return {ReadPreference}\n */\nReadPreference.nearest = new ReadPreference('nearest');\n\nmodule.exports = ReadPreference;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/topologies/read_preference.js\n// module id = 47\n// module chunks = 0","'use strict';\n\nvar inherits = require('util').inherits,\n  MongoError = require('mongodb-core').MongoError,\n  Readable = require('stream').Readable,\n  Define = require('./metadata'),\n  CoreCursor = require('./cursor');\n\n/**\n * @fileOverview The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n *\n * **AGGREGATIONCURSOR Cannot directly be instantiated**\n * @example\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Create a collection we want to drop later\n *   const col = client.db(dbName).collection('createIndexExample1');\n *   // Insert a bunch of documents\n *   col.insert([{a:1, b:1}\n *     , {a:2, b:2}, {a:3, b:3}\n *     , {a:4, b:4}], {w:1}, function(err, result) {\n *     test.equal(null, err);\n *     // Show that duplicate records got dropped\n *     col.aggregation({}, {cursor: {}}).toArray(function(err, items) {\n *       test.equal(null, err);\n *       test.equal(4, items.length);\n *       client.close();\n *     });\n *   });\n * });\n */\n\n/**\n * Namespace provided by the browser.\n * @external Readable\n */\n\n/**\n * Creates a new Aggregation Cursor instance (INTERNAL TYPE, do not instantiate directly)\n * @class AggregationCursor\n * @extends external:Readable\n * @fires AggregationCursor#data\n * @fires AggregationCursor#end\n * @fires AggregationCursor#close\n * @fires AggregationCursor#readable\n * @return {AggregationCursor} an AggregationCursor instance.\n */\nvar AggregationCursor = function(bson, ns, cmd, options, topology, topologyOptions) {\n  CoreCursor.apply(this, Array.prototype.slice.call(arguments, 0));\n  var state = AggregationCursor.INIT;\n  var streamOptions = {};\n\n  // MaxTimeMS\n  var maxTimeMS = null;\n\n  // Get the promiseLibrary\n  var promiseLibrary = options.promiseLibrary || Promise;\n\n  // Set up\n  Readable.call(this, { objectMode: true });\n\n  // Internal state\n  this.s = {\n    // MaxTimeMS\n    maxTimeMS: maxTimeMS,\n    // State\n    state: state,\n    // Stream options\n    streamOptions: streamOptions,\n    // BSON\n    bson: bson,\n    // Namespace\n    ns: ns,\n    // Command\n    cmd: cmd,\n    // Options\n    options: options,\n    // Topology\n    topology: topology,\n    // Topology Options\n    topologyOptions: topologyOptions,\n    // Promise library\n    promiseLibrary: promiseLibrary\n  };\n};\n\n/**\n * AggregationCursor stream data event, fired for each document in the cursor.\n *\n * @event AggregationCursor#data\n * @type {object}\n */\n\n/**\n * AggregationCursor stream end event\n *\n * @event AggregationCursor#end\n * @type {null}\n */\n\n/**\n * AggregationCursor stream close event\n *\n * @event AggregationCursor#close\n * @type {null}\n */\n\n/**\n * AggregationCursor stream readable event\n *\n * @event AggregationCursor#readable\n * @type {null}\n */\n\n// Inherit from Readable\ninherits(AggregationCursor, Readable);\n\n// Extend the Cursor\nfor (var name in CoreCursor.prototype) {\n  AggregationCursor.prototype[name] = CoreCursor.prototype[name];\n}\n\nvar define = (AggregationCursor.define = new Define('AggregationCursor', AggregationCursor, true));\n\n/**\n * Set the batch size for the cursor.\n * @method\n * @param {number} value The batchSize for the cursor.\n * @throws {MongoError}\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.batchSize = function(value) {\n  if (this.s.state === AggregationCursor.CLOSED || this.isDead())\n    throw MongoError.create({ message: 'Cursor is closed', driver: true });\n  if (typeof value !== 'number')\n    throw MongoError.create({ message: 'batchSize requires an integer', drvier: true });\n  if (this.s.cmd.cursor) this.s.cmd.cursor.batchSize = value;\n  this.setCursorBatchSize(value);\n  return this;\n};\n\ndefine.classMethod('batchSize', { callback: false, promise: false, returns: [AggregationCursor] });\n\n/**\n * Add a geoNear stage to the aggregation pipeline\n * @method\n * @param {object} document The geoNear stage document.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.geoNear = function(document) {\n  this.s.cmd.pipeline.push({ $geoNear: document });\n  return this;\n};\n\ndefine.classMethod('geoNear', { callback: false, promise: false, returns: [AggregationCursor] });\n\n/**\n * Add a group stage to the aggregation pipeline\n * @method\n * @param {object} document The group stage document.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.group = function(document) {\n  this.s.cmd.pipeline.push({ $group: document });\n  return this;\n};\n\ndefine.classMethod('group', { callback: false, promise: false, returns: [AggregationCursor] });\n\n/**\n * Add a limit stage to the aggregation pipeline\n * @method\n * @param {number} value The state limit value.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.limit = function(value) {\n  this.s.cmd.pipeline.push({ $limit: value });\n  return this;\n};\n\ndefine.classMethod('limit', { callback: false, promise: false, returns: [AggregationCursor] });\n\n/**\n * Add a match stage to the aggregation pipeline\n * @method\n * @param {object} document The match stage document.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.match = function(document) {\n  this.s.cmd.pipeline.push({ $match: document });\n  return this;\n};\n\ndefine.classMethod('match', { callback: false, promise: false, returns: [AggregationCursor] });\n\n/**\n * Add a maxTimeMS stage to the aggregation pipeline\n * @method\n * @param {number} value The state maxTimeMS value.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.maxTimeMS = function(value) {\n  if (this.s.topology.lastIsMaster().minWireVersion > 2) {\n    this.s.cmd.maxTimeMS = value;\n  }\n  return this;\n};\n\ndefine.classMethod('maxTimeMS', { callback: false, promise: false, returns: [AggregationCursor] });\n\n/**\n * Add a out stage to the aggregation pipeline\n * @method\n * @param {number} destination The destination name.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.out = function(destination) {\n  this.s.cmd.pipeline.push({ $out: destination });\n  return this;\n};\n\ndefine.classMethod('out', { callback: false, promise: false, returns: [AggregationCursor] });\n\n/**\n * Add a project stage to the aggregation pipeline\n * @method\n * @param {object} document The project stage document.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.project = function(document) {\n  this.s.cmd.pipeline.push({ $project: document });\n  return this;\n};\n\ndefine.classMethod('project', { callback: false, promise: false, returns: [AggregationCursor] });\n\n/**\n * Add a lookup stage to the aggregation pipeline\n * @method\n * @param {object} document The lookup stage document.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.lookup = function(document) {\n  this.s.cmd.pipeline.push({ $lookup: document });\n  return this;\n};\n\ndefine.classMethod('lookup', { callback: false, promise: false, returns: [AggregationCursor] });\n\n/**\n * Add a redact stage to the aggregation pipeline\n * @method\n * @param {object} document The redact stage document.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.redact = function(document) {\n  this.s.cmd.pipeline.push({ $redact: document });\n  return this;\n};\n\ndefine.classMethod('redact', { callback: false, promise: false, returns: [AggregationCursor] });\n\n/**\n * Add a skip stage to the aggregation pipeline\n * @method\n * @param {number} value The state skip value.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.skip = function(value) {\n  this.s.cmd.pipeline.push({ $skip: value });\n  return this;\n};\n\ndefine.classMethod('skip', { callback: false, promise: false, returns: [AggregationCursor] });\n\n/**\n * Add a sort stage to the aggregation pipeline\n * @method\n * @param {object} document The sort stage document.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.sort = function(document) {\n  this.s.cmd.pipeline.push({ $sort: document });\n  return this;\n};\n\ndefine.classMethod('sort', { callback: false, promise: false, returns: [AggregationCursor] });\n\n/**\n * Add a unwind stage to the aggregation pipeline\n * @method\n * @param {number} field The unwind field name.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.unwind = function(field) {\n  this.s.cmd.pipeline.push({ $unwind: field });\n  return this;\n};\n\ndefine.classMethod('unwind', { callback: false, promise: false, returns: [AggregationCursor] });\n\nAggregationCursor.prototype.get = AggregationCursor.prototype.toArray;\n\n// Inherited methods\ndefine.classMethod('toArray', { callback: true, promise: true });\ndefine.classMethod('each', { callback: true, promise: false });\ndefine.classMethod('forEach', { callback: true, promise: false });\ndefine.classMethod('hasNext', { callback: true, promise: true });\ndefine.classMethod('next', { callback: true, promise: true });\ndefine.classMethod('close', { callback: true, promise: true });\ndefine.classMethod('isClosed', { callback: false, promise: false, returns: [Boolean] });\ndefine.classMethod('rewind', { callback: false, promise: false });\ndefine.classMethod('bufferedCount', { callback: false, promise: false, returns: [Number] });\ndefine.classMethod('readBufferedDocuments', { callback: false, promise: false, returns: [Array] });\n\n/**\n * Get the next available document from the cursor, returns null if no more documents are available.\n * @function AggregationCursor.prototype.next\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Check if there is any document still available in the cursor\n * @function AggregationCursor.prototype.hasNext\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback AggregationCursor~toArrayResultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object[]} documents All the documents the satisfy the cursor.\n */\n\n/**\n * Returns an array of documents. The caller is responsible for making sure that there\n * is enough memory to store the results. Note that the array only contain partial\n * results when this cursor had been previouly accessed. In that case,\n * cursor.rewind() can be used to reset the cursor.\n * @method AggregationCursor.prototype.toArray\n * @param {AggregationCursor~toArrayResultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback AggregationCursor~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {(object|null)} result The result object if the command was executed successfully.\n */\n\n/**\n * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,\n * not all of the elements will be iterated if this cursor had been previouly accessed.\n * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike\n * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements\n * at any given time if batch size is specified. Otherwise, the caller is responsible\n * for making sure that the entire result can fit the memory.\n * @method AggregationCursor.prototype.each\n * @param {AggregationCursor~resultCallback} callback The result callback.\n * @throws {MongoError}\n * @return {null}\n */\n\n/**\n * Close the cursor, sending a AggregationCursor command and emitting close.\n * @method AggregationCursor.prototype.close\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Is the cursor closed\n * @method AggregationCursor.prototype.isClosed\n * @return {boolean}\n */\n\n/**\n * Execute the explain for the cursor\n * @method AggregationCursor.prototype.explain\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Clone the cursor\n * @function AggregationCursor.prototype.clone\n * @return {AggregationCursor}\n */\n\n/**\n * Resets the cursor\n * @function AggregationCursor.prototype.rewind\n * @return {AggregationCursor}\n */\n\n/**\n * The callback format for the forEach iterator method\n * @callback AggregationCursor~iteratorCallback\n * @param {Object} doc An emitted document for the iterator\n */\n\n/**\n * The callback error format for the forEach iterator method\n * @callback AggregationCursor~endCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n */\n\n/*\n * Iterates over all the documents for this cursor using the iterator, callback pattern.\n * @method AggregationCursor.prototype.forEach\n * @param {AggregationCursor~iteratorCallback} iterator The iteration callback.\n * @param {AggregationCursor~endCallback} callback The end callback.\n * @throws {MongoError}\n * @return {null}\n */\n\nAggregationCursor.INIT = 0;\nAggregationCursor.OPEN = 1;\nAggregationCursor.CLOSED = 2;\n\nmodule.exports = AggregationCursor;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/aggregation_cursor.js\n// module id = 48\n// module chunks = 0","'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst MongooseArray = require('./array');\nconst ObjectId = require('./objectid');\nconst ObjectIdSchema = require('../schema/objectid');\nconst internalToObjectOptions = require('../options').internalToObjectOptions;\nconst utils = require('../utils');\nconst Document = require('../document');\nconst getDiscriminatorByValue = require('../queryhelpers').getDiscriminatorByValue;\n\n/**\n * DocumentArray constructor\n *\n * @param {Array} values\n * @param {String} path the path to this array\n * @param {Document} doc parent document\n * @api private\n * @return {MongooseDocumentArray}\n * @inherits MongooseArray\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseDocumentArray(values, path, doc) {\n  var arr = [].concat(values);\n  arr._path = path;\n\n  var props = {\n    isMongooseArray: true,\n    isMongooseDocumentArray: true,\n    validators: [],\n    _atomics: {},\n    _schema: void 0,\n    _handlers: void 0\n  };\n\n  // Values always have to be passed to the constructor to initialize, since\n  // otherwise MongooseArray#push will mark the array as modified to the parent.\n  var keysMA = Object.keys(MongooseArray.mixin);\n  var numKeys = keysMA.length;\n  for (var j = 0; j < numKeys; ++j) {\n    arr[keysMA[j]] = MongooseArray.mixin[keysMA[j]];\n  }\n\n  var keysMDA = Object.keys(MongooseDocumentArray.mixin);\n  numKeys = keysMDA.length;\n  for (var i = 0; i < numKeys; ++i) {\n    arr[keysMDA[i]] = MongooseDocumentArray.mixin[keysMDA[i]];\n  }\n\n  var keysP = Object.keys(props);\n  numKeys = keysP.length;\n  for (var k = 0; k < numKeys; ++k) {\n    arr[keysP[k]] = props[keysP[k]];\n  }\n\n  // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020 && #3034)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n  if (doc && doc instanceof Document) {\n    arr._parent = doc;\n    arr._schema = doc.schema.path(path);\n    arr._handlers = {\n      isNew: arr.notify('isNew'),\n      save: arr.notify('save')\n    };\n\n    doc.on('save', arr._handlers.save);\n    doc.on('isNew', arr._handlers.isNew);\n  }\n\n  return arr;\n}\n\n/*!\n * Inherits from MongooseArray\n */\n// MongooseDocumentArray.mixin = Object.create( MongooseArray.mixin );\nMongooseDocumentArray.mixin = {\n  /*!\n   * ignore\n   */\n  toBSON: function() {\n    return this.toObject(internalToObjectOptions);\n  },\n\n  /**\n   * Overrides MongooseArray#cast\n   *\n   * @method _cast\n   * @api private\n   * @receiver MongooseDocumentArray\n   */\n\n  _cast: function(value, index) {\n    var Constructor = this._schema.casterConstructor;\n    if (value instanceof Constructor ||\n        // Hack re: #5001, see #5005\n        (value && value.constructor && value.constructor.baseCasterConstructor === Constructor)) {\n      if (!(value.__parent && value.__parentArray)) {\n        // value may have been created using array.create()\n        value.__parent = this._parent;\n        value.__parentArray = this;\n      }\n      value.__index = index;\n      return value;\n    }\n\n    if (value === undefined || value === null) {\n      return null;\n    }\n\n    // handle cast('string') or cast(ObjectId) etc.\n    // only objects are permitted so we can safely assume that\n    // non-objects are to be interpreted as _id\n    if (Buffer.isBuffer(value) ||\n        value instanceof ObjectId || !utils.isObject(value)) {\n      value = {_id: value};\n    }\n\n    if (value &&\n        Constructor.discriminators &&\n        Constructor.schema &&\n        Constructor.schema.options &&\n        Constructor.schema.options.discriminatorKey) {\n      if (typeof value[Constructor.schema.options.discriminatorKey] === 'string' &&\n          Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]];\n      } else {\n        var constructorByValue = getDiscriminatorByValue(Constructor, value[Constructor.schema.options.discriminatorKey]);\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n\n    return new Constructor(value, this, undefined, undefined, index);\n  },\n\n  /**\n   * Searches array items for the first document with a matching _id.\n   *\n   * ####Example:\n   *\n   *     var embeddedDoc = m.array.id(some_id);\n   *\n   * @return {EmbeddedDocument|null} the subdocument or null if not found.\n   * @param {ObjectId|String|Number|Buffer} id\n   * @TODO cast to the _id based on schema for proper comparison\n   * @method id\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  id: function(id) {\n    var casted,\n        sid,\n        _id;\n\n    try {\n      var casted_ = ObjectIdSchema.prototype.cast.call({}, id);\n      if (casted_) {\n        casted = String(casted_);\n      }\n    } catch (e) {\n      casted = null;\n    }\n\n    for (var i = 0, l = this.length; i < l; i++) {\n      if (!this[i]) {\n        continue;\n      }\n      _id = this[i].get('_id');\n\n      if (_id === null || typeof _id === 'undefined') {\n        continue;\n      } else if (_id instanceof Document) {\n        sid || (sid = String(id));\n        if (sid == _id._id) {\n          return this[i];\n        }\n      } else if (!(id instanceof ObjectId) && !(_id instanceof ObjectId)) {\n        if (utils.deepEqual(id, _id)) {\n          return this[i];\n        }\n      } else if (casted == _id) {\n        return this[i];\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns a native js Array of plain js objects\n   *\n   * ####NOTE:\n   *\n   * _Each sub-document is converted to a plain object by calling its `#toObject` method._\n   *\n   * @param {Object} [options] optional options to pass to each documents `toObject` method call during conversion\n   * @return {Array}\n   * @method toObject\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  toObject: function(options) {\n    return this.map(function(doc) {\n      return doc && doc.toObject(options) || null;\n    });\n  },\n\n  /**\n   * Helper for console.log\n   *\n   * @method inspect\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  inspect: function() {\n    return Array.prototype.slice.call(this);\n  },\n\n  /**\n   * Creates a subdocument casted to this schema.\n   *\n   * This is the same subdocument constructor used for casting.\n   *\n   * @param {Object} obj the value to cast to this arrays SubDocument schema\n   * @method create\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  create: function(obj) {\n    var Constructor = this._schema.casterConstructor;\n    if (obj &&\n        Constructor.discriminators &&\n        Constructor.schema &&\n        Constructor.schema.options &&\n        Constructor.schema.options.discriminatorKey) {\n      if (typeof obj[Constructor.schema.options.discriminatorKey] === 'string' &&\n          Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]];\n      } else {\n        var constructorByValue = getDiscriminatorByValue(Constructor, obj[Constructor.schema.options.discriminatorKey]);\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n\n    return new Constructor(obj);\n  },\n\n  /**\n   * Creates a fn that notifies all child docs of `event`.\n   *\n   * @param {String} event\n   * @return {Function}\n   * @method notify\n   * @api private\n   * @receiver MongooseDocumentArray\n   */\n\n  notify: function notify(event) {\n    var _this = this;\n    return function notify(val) {\n      var i = _this.length;\n      while (i--) {\n        if (!_this[i]) {\n          continue;\n        }\n        switch (event) {\n          // only swap for save event for now, we may change this to all event types later\n          case 'save':\n            val = _this[i];\n            break;\n          default:\n            // NO-OP\n            break;\n        }\n        _this[i].emit(event, val);\n      }\n    };\n  }\n\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = MongooseDocumentArray;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/types/documentarray.js\n// module id = 49\n// module chunks = 0","module.exports = require(\"crypto\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"crypto\"\n// module id = 50\n// module chunks = 0","var BSON = require('./lib/bson/bson'),\n  Binary = require('./lib/bson/binary'),\n  Code = require('./lib/bson/code'),\n  DBRef = require('./lib/bson/db_ref'),\n  Decimal128 = require('./lib/bson/decimal128'),\n  Double = require('./lib/bson/double'),\n  Int32 = require('./lib/bson/int_32'),\n  Long = require('./lib/bson/long'),\n  Map = require('./lib/bson/map'),\n  MaxKey = require('./lib/bson/max_key'),\n  MinKey = require('./lib/bson/min_key'),\n  ObjectId = require('./lib/bson/objectid'),\n  BSONRegExp = require('./lib/bson/regexp'),\n  Symbol = require('./lib/bson/symbol'),\n  Timestamp = require('./lib/bson/timestamp');\n\n// BSON MAX VALUES\nBSON.BSON_INT32_MAX = 0x7fffffff;\nBSON.BSON_INT32_MIN = -0x80000000;\n\nBSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;\nBSON.BSON_INT64_MIN = -Math.pow(2, 63);\n\n// JS MAX PRECISE VALUES\nBSON.JS_INT_MAX = 0x20000000000000; // Any integer up to 2^53 can be precisely represented by a double.\nBSON.JS_INT_MIN = -0x20000000000000; // Any integer down to -2^53 can be precisely represented by a double.\n\n// Add BSON types to function creation\nBSON.Binary = Binary;\nBSON.Code = Code;\nBSON.DBRef = DBRef;\nBSON.Decimal128 = Decimal128;\nBSON.Double = Double;\nBSON.Int32 = Int32;\nBSON.Long = Long;\nBSON.Map = Map;\nBSON.MaxKey = MaxKey;\nBSON.MinKey = MinKey;\nBSON.ObjectId = ObjectId;\nBSON.ObjectID = ObjectId;\nBSON.BSONRegExp = BSONRegExp;\nBSON.Symbol = Symbol;\nBSON.Timestamp = Timestamp;\n\n// Return the BSON\nmodule.exports = BSON;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_bson@1.0.6@bson/index.js\n// module id = 51\n// module chunks = 0","/**\n * Module dependencies.\n * @ignore\n */\n\n// Test if we're in Node via presence of \"global\" not absence of \"window\"\n// to support hybrid environments like Electron\nif (typeof global !== 'undefined') {\n  var Buffer = require('buffer').Buffer; // TODO just use global Buffer\n}\n\n/**\n * A class representation of the BSON Binary type.\n *\n * Sub types\n *  - **BSON.BSON_BINARY_SUBTYPE_DEFAULT**, default BSON type.\n *  - **BSON.BSON_BINARY_SUBTYPE_FUNCTION**, BSON function type.\n *  - **BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY**, BSON byte array type.\n *  - **BSON.BSON_BINARY_SUBTYPE_UUID**, BSON uuid type.\n *  - **BSON.BSON_BINARY_SUBTYPE_MD5**, BSON md5 type.\n *  - **BSON.BSON_BINARY_SUBTYPE_USER_DEFINED**, BSON user defined type.\n *\n * @class\n * @param {Buffer} buffer a buffer object containing the binary data.\n * @param {Number} [subType] the option binary type.\n * @return {Binary}\n */\nfunction Binary(buffer, subType) {\n  if (!(this instanceof Binary)) return new Binary(buffer, subType);\n\n  this._bsontype = 'Binary';\n\n  if (buffer instanceof Number) {\n    this.sub_type = buffer;\n    this.position = 0;\n  } else {\n    this.sub_type = subType == null ? BSON_BINARY_SUBTYPE_DEFAULT : subType;\n    this.position = 0;\n  }\n\n  if (buffer != null && !(buffer instanceof Number)) {\n    // Only accept Buffer, Uint8Array or Arrays\n    if (typeof buffer === 'string') {\n      // Different ways of writing the length of the string for the different types\n      if (typeof Buffer !== 'undefined') {\n        this.buffer = new Buffer(buffer);\n      } else if (\n        typeof Uint8Array !== 'undefined' ||\n        Object.prototype.toString.call(buffer) === '[object Array]'\n      ) {\n        this.buffer = writeStringToArray(buffer);\n      } else {\n        throw new Error('only String, Buffer, Uint8Array or Array accepted');\n      }\n    } else {\n      this.buffer = buffer;\n    }\n    this.position = buffer.length;\n  } else {\n    if (typeof Buffer !== 'undefined') {\n      this.buffer = new Buffer(Binary.BUFFER_SIZE);\n    } else if (typeof Uint8Array !== 'undefined') {\n      this.buffer = new Uint8Array(new ArrayBuffer(Binary.BUFFER_SIZE));\n    } else {\n      this.buffer = new Array(Binary.BUFFER_SIZE);\n    }\n    // Set position to start of buffer\n    this.position = 0;\n  }\n}\n\n/**\n * Updates this binary with byte_value.\n *\n * @method\n * @param {string} byte_value a single byte we wish to write.\n */\nBinary.prototype.put = function put(byte_value) {\n  // If it's a string and a has more than one character throw an error\n  if (byte_value['length'] != null && typeof byte_value !== 'number' && byte_value.length !== 1)\n    throw new Error('only accepts single character String, Uint8Array or Array');\n  if ((typeof byte_value !== 'number' && byte_value < 0) || byte_value > 255)\n    throw new Error('only accepts number in a valid unsigned byte range 0-255');\n\n  // Decode the byte value once\n  var decoded_byte = null;\n  if (typeof byte_value === 'string') {\n    decoded_byte = byte_value.charCodeAt(0);\n  } else if (byte_value['length'] != null) {\n    decoded_byte = byte_value[0];\n  } else {\n    decoded_byte = byte_value;\n  }\n\n  if (this.buffer.length > this.position) {\n    this.buffer[this.position++] = decoded_byte;\n  } else {\n    if (typeof Buffer !== 'undefined' && Buffer.isBuffer(this.buffer)) {\n      // Create additional overflow buffer\n      var buffer = new Buffer(Binary.BUFFER_SIZE + this.buffer.length);\n      // Combine the two buffers together\n      this.buffer.copy(buffer, 0, 0, this.buffer.length);\n      this.buffer = buffer;\n      this.buffer[this.position++] = decoded_byte;\n    } else {\n      buffer = null;\n      // Create a new buffer (typed or normal array)\n      if (Object.prototype.toString.call(this.buffer) === '[object Uint8Array]') {\n        buffer = new Uint8Array(new ArrayBuffer(Binary.BUFFER_SIZE + this.buffer.length));\n      } else {\n        buffer = new Array(Binary.BUFFER_SIZE + this.buffer.length);\n      }\n\n      // We need to copy all the content to the new array\n      for (var i = 0; i < this.buffer.length; i++) {\n        buffer[i] = this.buffer[i];\n      }\n\n      // Reassign the buffer\n      this.buffer = buffer;\n      // Write the byte\n      this.buffer[this.position++] = decoded_byte;\n    }\n  }\n};\n\n/**\n * Writes a buffer or string to the binary.\n *\n * @method\n * @param {(Buffer|string)} string a string or buffer to be written to the Binary BSON object.\n * @param {number} offset specify the binary of where to write the content.\n * @return {null}\n */\nBinary.prototype.write = function write(string, offset) {\n  offset = typeof offset === 'number' ? offset : this.position;\n\n  // If the buffer is to small let's extend the buffer\n  if (this.buffer.length < offset + string.length) {\n    var buffer = null;\n    // If we are in node.js\n    if (typeof Buffer !== 'undefined' && Buffer.isBuffer(this.buffer)) {\n      buffer = new Buffer(this.buffer.length + string.length);\n      this.buffer.copy(buffer, 0, 0, this.buffer.length);\n    } else if (Object.prototype.toString.call(this.buffer) === '[object Uint8Array]') {\n      // Create a new buffer\n      buffer = new Uint8Array(new ArrayBuffer(this.buffer.length + string.length));\n      // Copy the content\n      for (var i = 0; i < this.position; i++) {\n        buffer[i] = this.buffer[i];\n      }\n    }\n\n    // Assign the new buffer\n    this.buffer = buffer;\n  }\n\n  if (typeof Buffer !== 'undefined' && Buffer.isBuffer(string) && Buffer.isBuffer(this.buffer)) {\n    string.copy(this.buffer, offset, 0, string.length);\n    this.position = offset + string.length > this.position ? offset + string.length : this.position;\n    // offset = string.length\n  } else if (\n    typeof Buffer !== 'undefined' &&\n    typeof string === 'string' &&\n    Buffer.isBuffer(this.buffer)\n  ) {\n    this.buffer.write(string, offset, 'binary');\n    this.position = offset + string.length > this.position ? offset + string.length : this.position;\n    // offset = string.length;\n  } else if (\n    Object.prototype.toString.call(string) === '[object Uint8Array]' ||\n    (Object.prototype.toString.call(string) === '[object Array]' && typeof string !== 'string')\n  ) {\n    for (i = 0; i < string.length; i++) {\n      this.buffer[offset++] = string[i];\n    }\n\n    this.position = offset > this.position ? offset : this.position;\n  } else if (typeof string === 'string') {\n    for (i = 0; i < string.length; i++) {\n      this.buffer[offset++] = string.charCodeAt(i);\n    }\n\n    this.position = offset > this.position ? offset : this.position;\n  }\n};\n\n/**\n * Reads **length** bytes starting at **position**.\n *\n * @method\n * @param {number} position read from the given position in the Binary.\n * @param {number} length the number of bytes to read.\n * @return {Buffer}\n */\nBinary.prototype.read = function read(position, length) {\n  length = length && length > 0 ? length : this.position;\n\n  // Let's return the data based on the type we have\n  if (this.buffer['slice']) {\n    return this.buffer.slice(position, position + length);\n  } else {\n    // Create a buffer to keep the result\n    var buffer =\n      typeof Uint8Array !== 'undefined'\n        ? new Uint8Array(new ArrayBuffer(length))\n        : new Array(length);\n    for (var i = 0; i < length; i++) {\n      buffer[i] = this.buffer[position++];\n    }\n  }\n  // Return the buffer\n  return buffer;\n};\n\n/**\n * Returns the value of this binary as a string.\n *\n * @method\n * @return {string}\n */\nBinary.prototype.value = function value(asRaw) {\n  asRaw = asRaw == null ? false : asRaw;\n\n  // Optimize to serialize for the situation where the data == size of buffer\n  if (\n    asRaw &&\n    typeof Buffer !== 'undefined' &&\n    Buffer.isBuffer(this.buffer) &&\n    this.buffer.length === this.position\n  )\n    return this.buffer;\n\n  // If it's a node.js buffer object\n  if (typeof Buffer !== 'undefined' && Buffer.isBuffer(this.buffer)) {\n    return asRaw\n      ? this.buffer.slice(0, this.position)\n      : this.buffer.toString('binary', 0, this.position);\n  } else {\n    if (asRaw) {\n      // we support the slice command use it\n      if (this.buffer['slice'] != null) {\n        return this.buffer.slice(0, this.position);\n      } else {\n        // Create a new buffer to copy content to\n        var newBuffer =\n          Object.prototype.toString.call(this.buffer) === '[object Uint8Array]'\n            ? new Uint8Array(new ArrayBuffer(this.position))\n            : new Array(this.position);\n        // Copy content\n        for (var i = 0; i < this.position; i++) {\n          newBuffer[i] = this.buffer[i];\n        }\n        // Return the buffer\n        return newBuffer;\n      }\n    } else {\n      return convertArraytoUtf8BinaryString(this.buffer, 0, this.position);\n    }\n  }\n};\n\n/**\n * Length.\n *\n * @method\n * @return {number} the length of the binary.\n */\nBinary.prototype.length = function length() {\n  return this.position;\n};\n\n/**\n * @ignore\n */\nBinary.prototype.toJSON = function() {\n  return this.buffer != null ? this.buffer.toString('base64') : '';\n};\n\n/**\n * @ignore\n */\nBinary.prototype.toString = function(format) {\n  return this.buffer != null ? this.buffer.slice(0, this.position).toString(format) : '';\n};\n\n/**\n * Binary default subtype\n * @ignore\n */\nvar BSON_BINARY_SUBTYPE_DEFAULT = 0;\n\n/**\n * @ignore\n */\nvar writeStringToArray = function(data) {\n  // Create a buffer\n  var buffer =\n    typeof Uint8Array !== 'undefined'\n      ? new Uint8Array(new ArrayBuffer(data.length))\n      : new Array(data.length);\n  // Write the content to the buffer\n  for (var i = 0; i < data.length; i++) {\n    buffer[i] = data.charCodeAt(i);\n  }\n  // Write the string to the buffer\n  return buffer;\n};\n\n/**\n * Convert Array ot Uint8Array to Binary String\n *\n * @ignore\n */\nvar convertArraytoUtf8BinaryString = function(byteArray, startIndex, endIndex) {\n  var result = '';\n  for (var i = startIndex; i < endIndex; i++) {\n    result = result + String.fromCharCode(byteArray[i]);\n  }\n  return result;\n};\n\nBinary.BUFFER_SIZE = 256;\n\n/**\n * Default BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_DEFAULT = 0;\n/**\n * Function BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_FUNCTION = 1;\n/**\n * Byte Array BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_BYTE_ARRAY = 2;\n/**\n * OLD UUID BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_UUID_OLD = 3;\n/**\n * UUID BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_UUID = 4;\n/**\n * MD5 BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_MD5 = 5;\n/**\n * User BSON type\n *\n * @classconstant SUBTYPE_DEFAULT\n **/\nBinary.SUBTYPE_USER_DEFINED = 128;\n\n/**\n * Expose.\n */\nmodule.exports = Binary;\nmodule.exports.Binary = Binary;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_bson@1.0.6@bson/lib/bson/binary.js\n// module id = 52\n// module chunks = 0","/**\n * A class representation of the BSON MinKey type.\n *\n * @class\n * @return {MinKey} A MinKey instance\n */\nfunction MinKey() {\n  if (!(this instanceof MinKey)) return new MinKey();\n\n  this._bsontype = 'MinKey';\n}\n\nmodule.exports = MinKey;\nmodule.exports.MinKey = MinKey;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_bson@1.0.6@bson/lib/bson/min_key.js\n// module id = 53\n// module chunks = 0","'use strict';\n\nvar checkCollectionName = require('./utils').checkCollectionName,\n  ObjectID = require('mongodb-core').BSON.ObjectID,\n  Long = require('mongodb-core').BSON.Long,\n  Code = require('mongodb-core').BSON.Code,\n  f = require('util').format,\n  AggregationCursor = require('./aggregation_cursor'),\n  MongoError = require('mongodb-core').MongoError,\n  shallowClone = require('./utils').shallowClone,\n  isObject = require('./utils').isObject,\n  toError = require('./utils').toError,\n  normalizeHintField = require('./utils').normalizeHintField,\n  handleCallback = require('./utils').handleCallback,\n  decorateCommand = require('./utils').decorateCommand,\n  formattedOrderClause = require('./utils').formattedOrderClause,\n  ReadPreference = require('mongodb-core').ReadPreference,\n  CommandCursor = require('./command_cursor'),\n  Define = require('./metadata'),\n  Cursor = require('./cursor'),\n  unordered = require('./bulk/unordered'),\n  ordered = require('./bulk/ordered'),\n  ChangeStream = require('./change_stream'),\n  executeOperation = require('./utils').executeOperation;\n\n/**\n * @fileOverview The **Collection** class is an internal class that embodies a MongoDB collection\n * allowing for insert/update/remove/find and other command operation on that MongoDB collection.\n *\n * **COLLECTION Cannot directly be instantiated**\n * @example\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Create a collection we want to drop later\n *   const col = client.db(dbName).collection('createIndexExample1');\n *   // Show that duplicate records got dropped\n *   col.find({}).toArray(function(err, items) {\n *     test.equal(null, err);\n *     test.equal(4, items.length);\n *     client.close();\n *   });\n * });\n */\n\nvar mergeKeys = ['readPreference', 'ignoreUndefined'];\n\n/**\n * Create a new Collection instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @property {string} collectionName Get the collection name.\n * @property {string} namespace Get the full collection namespace.\n * @property {object} writeConcern The current write concern values.\n * @property {object} readConcern The current read concern values.\n * @property {object} hint Get current index hint for collection.\n * @return {Collection} a Collection instance.\n */\nvar Collection = function(db, topology, dbName, name, pkFactory, options) {\n  checkCollectionName(name);\n\n  // Unpack variables\n  var internalHint = null;\n  var slaveOk = options == null || options.slaveOk == null ? db.slaveOk : options.slaveOk;\n  var serializeFunctions =\n    options == null || options.serializeFunctions == null\n      ? db.s.options.serializeFunctions\n      : options.serializeFunctions;\n  var raw = options == null || options.raw == null ? db.s.options.raw : options.raw;\n  var promoteLongs =\n    options == null || options.promoteLongs == null\n      ? db.s.options.promoteLongs\n      : options.promoteLongs;\n  var promoteValues =\n    options == null || options.promoteValues == null\n      ? db.s.options.promoteValues\n      : options.promoteValues;\n  var promoteBuffers =\n    options == null || options.promoteBuffers == null\n      ? db.s.options.promoteBuffers\n      : options.promoteBuffers;\n  var readPreference = null;\n  var collectionHint = null;\n  var namespace = f('%s.%s', dbName, name);\n\n  // Get the promiseLibrary\n  var promiseLibrary = options.promiseLibrary || Promise;\n\n  // Assign the right collection level readPreference\n  if (options && options.readPreference) {\n    readPreference = options.readPreference;\n  } else if (db.options.readPreference) {\n    readPreference = db.options.readPreference;\n  }\n\n  // Set custom primary key factory if provided\n  pkFactory = pkFactory == null ? ObjectID : pkFactory;\n\n  // Internal state\n  this.s = {\n    // Set custom primary key factory if provided\n    pkFactory: pkFactory,\n    // Db\n    db: db,\n    // Topology\n    topology: topology,\n    // dbName\n    dbName: dbName,\n    // Options\n    options: options,\n    // Namespace\n    namespace: namespace,\n    // Read preference\n    readPreference: readPreference,\n    // SlaveOK\n    slaveOk: slaveOk,\n    // Serialize functions\n    serializeFunctions: serializeFunctions,\n    // Raw\n    raw: raw,\n    // promoteLongs\n    promoteLongs: promoteLongs,\n    // promoteValues\n    promoteValues: promoteValues,\n    // promoteBuffers\n    promoteBuffers: promoteBuffers,\n    // internalHint\n    internalHint: internalHint,\n    // collectionHint\n    collectionHint: collectionHint,\n    // Name\n    name: name,\n    // Promise library\n    promiseLibrary: promiseLibrary,\n    // Read Concern\n    readConcern: options.readConcern\n  };\n};\n\nvar define = (Collection.define = new Define('Collection', Collection, false));\n\nObject.defineProperty(Collection.prototype, 'dbName', {\n  enumerable: true,\n  get: function() {\n    return this.s.dbName;\n  }\n});\n\nObject.defineProperty(Collection.prototype, 'collectionName', {\n  enumerable: true,\n  get: function() {\n    return this.s.name;\n  }\n});\n\nObject.defineProperty(Collection.prototype, 'namespace', {\n  enumerable: true,\n  get: function() {\n    return this.s.namespace;\n  }\n});\n\nObject.defineProperty(Collection.prototype, 'readConcern', {\n  enumerable: true,\n  get: function() {\n    return this.s.readConcern || { level: 'local' };\n  }\n});\n\nObject.defineProperty(Collection.prototype, 'writeConcern', {\n  enumerable: true,\n  get: function() {\n    var ops = {};\n    if (this.s.options.w != null) ops.w = this.s.options.w;\n    if (this.s.options.j != null) ops.j = this.s.options.j;\n    if (this.s.options.fsync != null) ops.fsync = this.s.options.fsync;\n    if (this.s.options.wtimeout != null) ops.wtimeout = this.s.options.wtimeout;\n    return ops;\n  }\n});\n\n/**\n * @ignore\n */\nObject.defineProperty(Collection.prototype, 'hint', {\n  enumerable: true,\n  get: function() {\n    return this.s.collectionHint;\n  },\n  set: function(v) {\n    this.s.collectionHint = normalizeHintField(v);\n  }\n});\n\n/**\n * Creates a cursor for a query that can be used to iterate over results from MongoDB\n * @method\n * @param {object} [query={}] The cursor query object.\n * @param {object} [options=null] Optional settings.\n * @param {number} [options.limit=0] Sets the limit of documents returned in the query.\n * @param {(array|object)} [options.sort=null] Set to sort the documents coming back from the query. Array of indexes, [['a', 1]] etc.\n * @param {object} [options.projection=null] The fields to return in the query. Object of fields to include or exclude (not both), {'a':1}\n * @param {object} [options.fields=null] **Deprecated** Use `options.projection` instead\n * @param {number} [options.skip=0] Set to skip N documents ahead in your query (useful for pagination).\n * @param {Object} [options.hint=null] Tell the query to use specific indexes in the query. Object of indexes to use, {'_id':1}\n * @param {boolean} [options.explain=false] Explain the query instead of returning the data.\n * @param {boolean} [options.snapshot=false] Snapshot query.\n * @param {boolean} [options.timeout=false] Specify if the cursor can timeout.\n * @param {boolean} [options.tailable=false] Specify if the cursor is tailable.\n * @param {number} [options.batchSize=0] Set the batchSize for the getMoreCommand when iterating over the query results.\n * @param {boolean} [options.returnKey=false] Only return the index key.\n * @param {number} [options.maxScan=null] Limit the number of items to scan.\n * @param {number} [options.min=null] Set index bounds.\n * @param {number} [options.max=null] Set index bounds.\n * @param {boolean} [options.showDiskLoc=false] Show disk location of results.\n * @param {string} [options.comment=null] You can put a $comment field on a query to make looking in the profiler logs simpler.\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\n * @param {boolean} [options.promoteLongs=true] Promotes Long values to number if they fit inside the 53 bits resolution.\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {boolean} [options.partial=false] Specify if the cursor should return partial results when querying against a sharded system\n * @param {number} [options.maxTimeMS=null] Number of miliseconds to wait before aborting the query.\n * @param {object} [options.collation=null] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @throws {MongoError}\n * @return {Cursor}\n */\nCollection.prototype.find = function(query, options, callback) {\n  let selector = query;\n  // figuring out arguments\n  if (typeof callback !== 'function') {\n    if (typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    } else if (options == null) {\n      callback = typeof selector === 'function' ? selector : undefined;\n      selector = typeof selector === 'object' ? selector : undefined;\n    }\n  }\n\n  // Ensure selector is not null\n  selector = selector == null ? {} : selector;\n  // Validate correctness off the selector\n  var object = selector;\n  if (Buffer.isBuffer(object)) {\n    var object_size = object[0] | (object[1] << 8) | (object[2] << 16) | (object[3] << 24);\n    if (object_size !== object.length) {\n      var error = new Error(\n        'query selector raw message size does not match message header size [' +\n          object.length +\n          '] != [' +\n          object_size +\n          ']'\n      );\n      error.name = 'MongoError';\n      throw error;\n    }\n  }\n\n  // Check special case where we are using an objectId\n  if (selector != null && selector._bsontype === 'ObjectID') {\n    selector = { _id: selector };\n  }\n\n  if (!options) options = {};\n\n  let projection = options.projection || options.fields;\n\n  if (projection && !Buffer.isBuffer(projection) && Array.isArray(projection)) {\n    projection = projection.length\n      ? projection.reduce((result, field) => {\n          result[field] = 1;\n          return result;\n        }, {})\n      : { _id: 1 };\n  }\n\n  var newOptions = {};\n\n  // Make a shallow copy of the collection options\n  for (var key in this.s.options) {\n    if (mergeKeys.indexOf(key) !== -1) {\n      newOptions[key] = this.s.options[key];\n    }\n  }\n\n  // Make a shallow copy of options\n  for (var optKey in options) {\n    newOptions[optKey] = options[optKey];\n  }\n\n  // Unpack options\n  newOptions.skip = options.skip ? options.skip : 0;\n  newOptions.limit = options.limit ? options.limit : 0;\n  newOptions.raw = typeof options.raw === 'boolean' ? options.raw : this.s.raw;\n  newOptions.hint = options.hint != null ? normalizeHintField(options.hint) : this.s.collectionHint;\n  newOptions.timeout = typeof options.timeout === 'undefined' ? undefined : options.timeout;\n  // // If we have overridden slaveOk otherwise use the default db setting\n  newOptions.slaveOk = options.slaveOk != null ? options.slaveOk : this.s.db.slaveOk;\n\n  // Add read preference if needed\n  newOptions = getReadPreference(this, newOptions, this.s.db);\n\n  // Set slave ok to true if read preference different from primary\n  if (\n    newOptions.readPreference != null &&\n    (newOptions.readPreference !== 'primary' || newOptions.readPreference.mode !== 'primary')\n  ) {\n    newOptions.slaveOk = true;\n  }\n\n  // Ensure the query is an object\n  if (selector != null && typeof selector !== 'object') {\n    throw MongoError.create({ message: 'query selector must be an object', driver: true });\n  }\n\n  // Build the find command\n  var findCommand = {\n    find: this.s.namespace,\n    limit: newOptions.limit,\n    skip: newOptions.skip,\n    query: selector\n  };\n\n  // Ensure we use the right await data option\n  if (typeof newOptions.awaitdata === 'boolean') {\n    newOptions.awaitData = newOptions.awaitdata;\n  }\n\n  // Translate to new command option noCursorTimeout\n  if (typeof newOptions.timeout === 'boolean') newOptions.noCursorTimeout = newOptions.timeout;\n\n  // Merge in options to command\n  for (var name in newOptions) {\n    if (newOptions[name] != null && name !== 'session') {\n      findCommand[name] = newOptions[name];\n    }\n  }\n\n  if (projection) findCommand.fields = projection;\n\n  // Add db object to the new options\n  newOptions.db = this.s.db;\n\n  // Add the promise library\n  newOptions.promiseLibrary = this.s.promiseLibrary;\n\n  // Set raw if available at collection level\n  if (newOptions.raw == null && typeof this.s.raw === 'boolean') newOptions.raw = this.s.raw;\n  // Set promoteLongs if available at collection level\n  if (newOptions.promoteLongs == null && typeof this.s.promoteLongs === 'boolean')\n    newOptions.promoteLongs = this.s.promoteLongs;\n  if (newOptions.promoteValues == null && typeof this.s.promoteValues === 'boolean')\n    newOptions.promoteValues = this.s.promoteValues;\n  if (newOptions.promoteBuffers == null && typeof this.s.promoteBuffers === 'boolean')\n    newOptions.promoteBuffers = this.s.promoteBuffers;\n\n  // Sort options\n  if (findCommand.sort) {\n    findCommand.sort = formattedOrderClause(findCommand.sort);\n  }\n\n  // Set the readConcern\n  decorateWithReadConcern(findCommand, this, options);\n\n  // Decorate find command with collation options\n  decorateWithCollation(findCommand, this, options);\n\n  // Create the cursor\n  if (typeof callback === 'function')\n    return handleCallback(\n      callback,\n      null,\n      this.s.topology.cursor(this.s.namespace, findCommand, newOptions)\n    );\n  return this.s.topology.cursor(this.s.namespace, findCommand, newOptions);\n};\n\ndefine.classMethod('find', { callback: false, promise: false, returns: [Cursor] });\n\n/**\n * Inserts a single document into MongoDB. If documents passed in do not contain the **_id** field,\n * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n * can be overridden by setting the **forceServerObjectId** flag.\n *\n * @method\n * @param {object} doc Document to insert.\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.\n * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~insertOneWriteOpCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.insertOne = function(doc, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // Add ignoreUndfined\n  if (this.s.options.ignoreUndefined) {\n    options = shallowClone(options);\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\n  }\n\n  return executeOperation(this.s.topology, insertOne, [this, doc, options, callback]);\n};\n\nvar insertOne = function(self, doc, options, callback) {\n  if (Array.isArray(doc)) {\n    return callback(\n      MongoError.create({ message: 'doc parameter must be an object', driver: true })\n    );\n  }\n\n  insertDocuments(self, [doc], options, function(err, r) {\n    if (callback == null) return;\n    if (err && callback) return callback(err);\n    // Workaround for pre 2.6 servers\n    if (r == null) return callback(null, { result: { ok: 1 } });\n    // Add values to top level to ensure crud spec compatibility\n    r.insertedCount = r.result.n;\n    r.insertedId = doc._id;\n    if (callback) callback(null, r);\n  });\n};\n\nvar mapInserManyResults = function(docs, r) {\n  var finalResult = {\n    result: { ok: 1, n: r.insertedCount },\n    ops: docs,\n    insertedCount: r.insertedCount,\n    insertedIds: r.insertedIds\n  };\n\n  if (r.getLastOp()) {\n    finalResult.result.opTime = r.getLastOp();\n  }\n\n  return finalResult;\n};\n\ndefine.classMethod('insertOne', { callback: true, promise: true });\n\n/**\n * Inserts an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n * can be overridden by setting the **forceServerObjectId** flag.\n *\n * @method\n * @param {object[]} docs Documents to insert.\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.\n * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n * @param {boolean} [options.ordered=true] If true, when an insert fails, don't execute the remaining writes. If false, continue with remaining inserts when one fails.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~insertWriteOpCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.insertMany = function(docs, options, callback) {\n  var self = this;\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options ? shallowClone(options) : { ordered: true };\n  if (!Array.isArray(docs) && typeof callback === 'function') {\n    return callback(\n      MongoError.create({ message: 'docs parameter must be an array of documents', driver: true })\n    );\n  } else if (!Array.isArray(docs)) {\n    return new this.s.promiseLibrary(function(resolve, reject) {\n      reject(\n        MongoError.create({ message: 'docs parameter must be an array of documents', driver: true })\n      );\n    });\n  }\n\n  // If keep going set unordered\n  options['serializeFunctions'] = options['serializeFunctions'] || self.s.serializeFunctions;\n\n  // Set up the force server object id\n  var forceServerObjectId =\n    typeof options.forceServerObjectId === 'boolean'\n      ? options.forceServerObjectId\n      : self.s.db.options.forceServerObjectId;\n\n  // Do we want to force the server to assign the _id key\n  if (forceServerObjectId !== true) {\n    // Add _id if not specified\n    for (var i = 0; i < docs.length; i++) {\n      if (docs[i]._id == null) docs[i]._id = self.s.pkFactory.createPk();\n    }\n  }\n\n  // Generate the bulk write operations\n  var operations = [\n    {\n      insertMany: docs\n    }\n  ];\n\n  return executeOperation(this.s.topology, bulkWrite, [this, operations, options, callback], {\n    resultMutator: result => mapInserManyResults(docs, result)\n  });\n};\n\ndefine.classMethod('insertMany', { callback: true, promise: true });\n\n/**\n * @typedef {Object} Collection~BulkWriteOpResult\n * @property {number} insertedCount Number of documents inserted.\n * @property {number} matchedCount Number of documents matched for update.\n * @property {number} modifiedCount Number of documents modified.\n * @property {number} deletedCount Number of documents deleted.\n * @property {number} upsertedCount Number of documents upserted.\n * @property {object} insertedIds Inserted document generated Id's, hash key is the index of the originating operation\n * @property {object} upsertedIds Upserted document generated Id's, hash key is the index of the originating operation\n * @property {object} result The command result object.\n */\n\n/**\n * The callback format for inserts\n * @callback Collection~bulkWriteOpCallback\n * @param {BulkWriteError} error An error instance representing the error during the execution.\n * @param {Collection~BulkWriteOpResult} result The result object if the command was executed successfully.\n */\n\n/**\n * Perform a bulkWrite operation without a fluent API\n *\n * Legal operation types are\n *\n *  { insertOne: { document: { a: 1 } } }\n *\n *  { updateOne: { filter: {a:2}, update: {$set: {a:2}}, upsert:true } }\n *\n *  { updateMany: { filter: {a:2}, update: {$set: {a:2}}, upsert:true } }\n *\n *  { deleteOne: { filter: {c:1} } }\n *\n *  { deleteMany: { filter: {c:1} } }\n *\n *  { replaceOne: { filter: {c:3}, replacement: {c:4}, upsert:true}}\n *\n * If documents passed in do not contain the **_id** field,\n * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n * can be overridden by setting the **forceServerObjectId** flag.\n *\n * @method\n * @param {object[]} operations Bulk operations to perform.\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n * @param {boolean} [options.ordered=true] Execute write operation in ordered or unordered fashion.\n * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~bulkWriteOpCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.bulkWrite = function(operations, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || { ordered: true };\n\n  if (!Array.isArray(operations)) {\n    throw MongoError.create({ message: 'operations must be an array of documents', driver: true });\n  }\n\n  return executeOperation(this.s.topology, bulkWrite, [this, operations, options, callback]);\n};\n\nvar bulkWrite = function(self, operations, options, callback) {\n  // Add ignoreUndfined\n  if (self.s.options.ignoreUndefined) {\n    options = shallowClone(options);\n    options.ignoreUndefined = self.s.options.ignoreUndefined;\n  }\n\n  // Create the bulk operation\n  var bulk =\n    options.ordered === true || options.ordered == null\n      ? self.initializeOrderedBulkOp(options)\n      : self.initializeUnorderedBulkOp(options);\n\n  // Do we have a collation\n  var collation = false;\n\n  // for each op go through and add to the bulk\n  try {\n    for (var i = 0; i < operations.length; i++) {\n      // Get the operation type\n      var key = Object.keys(operations[i])[0];\n      // Check if we have a collation\n      if (operations[i][key].collation) {\n        collation = true;\n      }\n\n      // Pass to the raw bulk\n      bulk.raw(operations[i]);\n    }\n  } catch (err) {\n    return callback(err, null);\n  }\n\n  // Final options for write concern\n  var finalOptions = writeConcern(shallowClone(options), self.s.db, self, options);\n  var writeCon = finalOptions.writeConcern ? finalOptions.writeConcern : {};\n  var capabilities = self.s.topology.capabilities();\n\n  // Did the user pass in a collation, check if our write server supports it\n  if (collation && capabilities && !capabilities.commandsTakeCollation) {\n    return callback(new MongoError(f('server/primary/mongos does not support collation')));\n  }\n\n  // Execute the bulk\n  bulk.execute(writeCon, finalOptions, function(err, r) {\n    // We have connection level error\n    if (!r && err) {\n      return callback(err, null);\n    }\n\n    r.insertedCount = r.nInserted;\n    r.matchedCount = r.nMatched;\n    r.modifiedCount = r.nModified || 0;\n    r.deletedCount = r.nRemoved;\n    r.upsertedCount = r.getUpsertedIds().length;\n    r.upsertedIds = {};\n    r.insertedIds = {};\n\n    // Update the n\n    r.n = r.insertedCount;\n\n    // Inserted documents\n    var inserted = r.getInsertedIds();\n    // Map inserted ids\n    for (var i = 0; i < inserted.length; i++) {\n      r.insertedIds[inserted[i].index] = inserted[i]._id;\n    }\n\n    // Upserted documents\n    var upserted = r.getUpsertedIds();\n    // Map upserted ids\n    for (i = 0; i < upserted.length; i++) {\n      r.upsertedIds[upserted[i].index] = upserted[i]._id;\n    }\n\n    // Return the results\n    callback(null, r);\n  });\n};\n\nvar insertDocuments = function(self, docs, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n  // Ensure we are operating on an array op docs\n  docs = Array.isArray(docs) ? docs : [docs];\n\n  // Get the write concern options\n  var finalOptions = writeConcern(shallowClone(options), self.s.db, self, options);\n\n  // If keep going set unordered\n  if (finalOptions.keepGoing === true) finalOptions.ordered = false;\n  finalOptions['serializeFunctions'] = options['serializeFunctions'] || self.s.serializeFunctions;\n\n  // Set up the force server object id\n  var forceServerObjectId =\n    typeof options.forceServerObjectId === 'boolean'\n      ? options.forceServerObjectId\n      : self.s.db.options.forceServerObjectId;\n\n  // Add _id if not specified\n  if (forceServerObjectId !== true) {\n    for (var i = 0; i < docs.length; i++) {\n      if (docs[i]._id === void 0) docs[i]._id = self.s.pkFactory.createPk();\n    }\n  }\n\n  // File inserts\n  self.s.topology.insert(self.s.namespace, docs, finalOptions, function(err, result) {\n    if (callback == null) return;\n    if (err) return handleCallback(callback, err);\n    if (result == null) return handleCallback(callback, null, null);\n    if (result.result.code) return handleCallback(callback, toError(result.result));\n    if (result.result.writeErrors)\n      return handleCallback(callback, toError(result.result.writeErrors[0]));\n    // Add docs to the list\n    result.ops = docs;\n    // Return the results\n    handleCallback(callback, null, result);\n  });\n};\n\ndefine.classMethod('bulkWrite', { callback: true, promise: true });\n\n/**\n * @typedef {Object} Collection~WriteOpResult\n * @property {object[]} ops All the documents inserted using insertOne/insertMany/replaceOne. Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany\n * @property {object} connection The connection object used for the operation.\n * @property {object} result The command result object.\n */\n\n/**\n * The callback format for inserts\n * @callback Collection~writeOpCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Collection~WriteOpResult} result The result object if the command was executed successfully.\n */\n\n/**\n * @typedef {Object} Collection~insertWriteOpResult\n * @property {Number} insertedCount The total amount of documents inserted.\n * @property {object[]} ops All the documents inserted using insertOne/insertMany/replaceOne. Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany\n * @property {Object.<Number, ObjectId>} insertedIds Map of the index of the inserted document to the id of the inserted document.\n * @property {object} connection The connection object used for the operation.\n * @property {object} result The raw command result object returned from MongoDB (content might vary by server version).\n * @property {Number} result.ok Is 1 if the command executed correctly.\n * @property {Number} result.n The total count of documents inserted.\n */\n\n/**\n * @typedef {Object} Collection~insertOneWriteOpResult\n * @property {Number} insertedCount The total amount of documents inserted.\n * @property {object[]} ops All the documents inserted using insertOne/insertMany/replaceOne. Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany\n * @property {ObjectId} insertedId The driver generated ObjectId for the insert operation.\n * @property {object} connection The connection object used for the operation.\n * @property {object} result The raw command result object returned from MongoDB (content might vary by server version).\n * @property {Number} result.ok Is 1 if the command executed correctly.\n * @property {Number} result.n The total count of documents inserted.\n */\n\n/**\n * The callback format for inserts\n * @callback Collection~insertWriteOpCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Collection~insertWriteOpResult} result The result object if the command was executed successfully.\n */\n\n/**\n * The callback format for inserts\n * @callback Collection~insertOneWriteOpCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Collection~insertOneWriteOpResult} result The result object if the command was executed successfully.\n */\n\n/**\n * Inserts a single document or a an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n * can be overridden by setting the **forceServerObjectId** flag.\n *\n * @method\n * @param {(object|object[])} docs Documents to insert.\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.\n * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~insertWriteOpCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use insertOne, insertMany or bulkWrite\n */\nCollection.prototype.insert = function(docs, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || { ordered: false };\n  docs = !Array.isArray(docs) ? [docs] : docs;\n\n  if (options.keepGoing === true) {\n    options.ordered = false;\n  }\n\n  return this.insertMany(docs, options, callback);\n};\n\ndefine.classMethod('insert', { callback: true, promise: true });\n\n/**\n * @typedef {Object} Collection~updateWriteOpResult\n * @property {Object} result The raw result returned from MongoDB, field will vary depending on server version.\n * @property {Number} result.ok Is 1 if the command executed correctly.\n * @property {Number} result.n The total count of documents scanned.\n * @property {Number} result.nModified The total count of documents modified.\n * @property {Object} connection The connection object used for the operation.\n * @property {Number} matchedCount The number of documents that matched the filter.\n * @property {Number} modifiedCount The number of documents that were modified.\n * @property {Number} upsertedCount The number of documents upserted.\n * @property {Object} upsertedId The upserted id.\n * @property {ObjectId} upsertedId._id The upserted _id returned from the server.\n */\n\n/**\n * The callback format for inserts\n * @callback Collection~updateWriteOpCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Collection~updateWriteOpResult} result The result object if the command was executed successfully.\n */\n\n/**\n * Update a single document on MongoDB\n * @method\n * @param {object} filter The Filter used to select the document to update\n * @param {object} update The update operations to be applied to the document\n * @param {object} [options=null] Optional settings.\n * @param {boolean} [options.upsert=false] Update operation is an upsert.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n * @param {Array} [options.arrayFilters=null] optional list of array filters referenced in filtered positional operators\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~updateWriteOpCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.updateOne = function(filter, update, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  var err = checkForAtomicOperators(update);\n  if (err) {\n    if (typeof callback === 'function') return callback(err);\n    return this.s.promiseLibrary.reject(err);\n  }\n\n  options = shallowClone(options);\n\n  // Add ignoreUndfined\n  if (this.s.options.ignoreUndefined) {\n    options = shallowClone(options);\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\n  }\n\n  return executeOperation(this.s.topology, updateOne, [this, filter, update, options, callback]);\n};\n\nvar checkForAtomicOperators = function(update) {\n  var keys = Object.keys(update);\n\n  // same errors as the server would give for update doc lacking atomic operators\n  if (keys.length === 0) {\n    return toError('The update operation document must contain at least one atomic operator.');\n  }\n\n  if (keys[0][0] !== '$') {\n    return toError('the update operation document must contain atomic operators.');\n  }\n};\n\nvar updateOne = function(self, filter, update, options, callback) {\n  // Set single document update\n  options.multi = false;\n  // Execute update\n  updateDocuments(self, filter, update, options, function(err, r) {\n    if (callback == null) return;\n    if (err && callback) return callback(err);\n    if (r == null) return callback(null, { result: { ok: 1 } });\n    r.modifiedCount = r.result.nModified != null ? r.result.nModified : r.result.n;\n    r.upsertedId =\n      Array.isArray(r.result.upserted) && r.result.upserted.length > 0\n        ? r.result.upserted[0]\n        : null;\n    r.upsertedCount =\n      Array.isArray(r.result.upserted) && r.result.upserted.length ? r.result.upserted.length : 0;\n    r.matchedCount =\n      Array.isArray(r.result.upserted) && r.result.upserted.length > 0 ? 0 : r.result.n;\n    if (callback) callback(null, r);\n  });\n};\n\ndefine.classMethod('updateOne', { callback: true, promise: true });\n\n/**\n * Replace a document on MongoDB\n * @method\n * @param {object} filter The Filter used to select the document to update\n * @param {object} doc The Document that replaces the matching document\n * @param {object} [options=null] Optional settings.\n * @param {boolean} [options.upsert=false] Update operation is an upsert.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~updateWriteOpCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.replaceOne = function(filter, doc, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = shallowClone(options);\n\n  // Add ignoreUndfined\n  if (this.s.options.ignoreUndefined) {\n    options = shallowClone(options);\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\n  }\n\n  return executeOperation(this.s.topology, replaceOne, [this, filter, doc, options, callback]);\n};\n\nvar replaceOne = function(self, filter, doc, options, callback) {\n  // Set single document update\n  options.multi = false;\n\n  // Execute update\n  updateDocuments(self, filter, doc, options, function(err, r) {\n    if (callback == null) return;\n    if (err && callback) return callback(err);\n    if (r == null) return callback(null, { result: { ok: 1 } });\n\n    r.modifiedCount = r.result.nModified != null ? r.result.nModified : r.result.n;\n    r.upsertedId =\n      Array.isArray(r.result.upserted) && r.result.upserted.length > 0\n        ? r.result.upserted[0]\n        : null;\n    r.upsertedCount =\n      Array.isArray(r.result.upserted) && r.result.upserted.length ? r.result.upserted.length : 0;\n    r.matchedCount =\n      Array.isArray(r.result.upserted) && r.result.upserted.length > 0 ? 0 : r.result.n;\n    r.ops = [doc];\n    if (callback) callback(null, r);\n  });\n};\n\ndefine.classMethod('replaceOne', { callback: true, promise: true });\n\n/**\n * Update multiple documents on MongoDB\n * @method\n * @param {object} filter The Filter used to select the documents to update\n * @param {object} update The update operations to be applied to the document\n * @param {object} [options=null] Optional settings.\n * @param {boolean} [options.upsert=false] Update operation is an upsert.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {Array} [options.arrayFilters=null] optional list of array filters referenced in filtered positional operators\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~updateWriteOpCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.updateMany = function(filter, update, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  var err = checkForAtomicOperators(update);\n  if (err) {\n    if (typeof callback === 'function') return callback(err);\n    return this.s.promiseLibrary.reject(err);\n  }\n\n  options = shallowClone(options);\n\n  // Add ignoreUndfined\n  if (this.s.options.ignoreUndefined) {\n    options = shallowClone(options);\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\n  }\n\n  return executeOperation(this.s.topology, updateMany, [this, filter, update, options, callback]);\n};\n\nvar updateMany = function(self, filter, update, options, callback) {\n  // Set single document update\n  options.multi = true;\n  // Execute update\n  updateDocuments(self, filter, update, options, function(err, r) {\n    if (callback == null) return;\n    if (err && callback) return callback(err);\n    if (r == null) return callback(null, { result: { ok: 1 } });\n    r.modifiedCount = r.result.nModified != null ? r.result.nModified : r.result.n;\n    r.upsertedId =\n      Array.isArray(r.result.upserted) && r.result.upserted.length > 0\n        ? r.result.upserted[0]\n        : null;\n    r.upsertedCount =\n      Array.isArray(r.result.upserted) && r.result.upserted.length ? r.result.upserted.length : 0;\n    r.matchedCount =\n      Array.isArray(r.result.upserted) && r.result.upserted.length > 0 ? 0 : r.result.n;\n    if (callback) callback(null, r);\n  });\n};\n\ndefine.classMethod('updateMany', { callback: true, promise: true });\n\nvar updateDocuments = function(self, selector, document, options, callback) {\n  if ('function' === typeof options) (callback = options), (options = null);\n  if (options == null) options = {};\n  if (!('function' === typeof callback)) callback = null;\n\n  // If we are not providing a selector or document throw\n  if (selector == null || typeof selector !== 'object')\n    return callback(toError('selector must be a valid JavaScript object'));\n  if (document == null || typeof document !== 'object')\n    return callback(toError('document must be a valid JavaScript object'));\n\n  // Get the write concern options\n  var finalOptions = writeConcern(shallowClone(options), self.s.db, self, options);\n\n  // Do we return the actual result document\n  // Either use override on the function, or go back to default on either the collection\n  // level or db\n  finalOptions['serializeFunctions'] = options['serializeFunctions'] || self.s.serializeFunctions;\n\n  // Execute the operation\n  var op = { q: selector, u: document };\n  op.upsert = options.upsert !== void 0 ? !!options.upsert : false;\n  op.multi = options.multi !== void 0 ? !!options.multi : false;\n\n  if (finalOptions.arrayFilters) {\n    op.arrayFilters = finalOptions.arrayFilters;\n    delete finalOptions.arrayFilters;\n  }\n\n  // Have we specified collation\n  decorateWithCollation(finalOptions, self, options);\n\n  // Update options\n  self.s.topology.update(self.s.namespace, [op], finalOptions, function(err, result) {\n    if (callback == null) return;\n    if (err) return handleCallback(callback, err, null);\n    if (result == null) return handleCallback(callback, null, null);\n    if (result.result.code) return handleCallback(callback, toError(result.result));\n    if (result.result.writeErrors)\n      return handleCallback(callback, toError(result.result.writeErrors[0]));\n    // Return the results\n    handleCallback(callback, null, result);\n  });\n};\n\n/**\n * Updates documents.\n * @method\n * @param {object} selector The selector for the update operation.\n * @param {object} document The update document.\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.upsert=false] Update operation is an upsert.\n * @param {boolean} [options.multi=false] Update one/all documents with operation.\n * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n * @param {object} [options.collation=null] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n * @param {Array} [options.arrayFilters=null] optional list of array filters referenced in filtered positional operators\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~writeOpCallback} [callback] The command result callback\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n * @deprecated use updateOne, updateMany or bulkWrite\n */\nCollection.prototype.update = function(selector, document, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // Add ignoreUndfined\n  if (this.s.options.ignoreUndefined) {\n    options = shallowClone(options);\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\n  }\n\n  return executeOperation(this.s.topology, updateDocuments, [\n    this,\n    selector,\n    document,\n    options,\n    callback\n  ]);\n};\n\ndefine.classMethod('update', { callback: true, promise: true });\n\n/**\n * @typedef {Object} Collection~deleteWriteOpResult\n * @property {Object} result The raw result returned from MongoDB, field will vary depending on server version.\n * @property {Number} result.ok Is 1 if the command executed correctly.\n * @property {Number} result.n The total count of documents deleted.\n * @property {Object} connection The connection object used for the operation.\n * @property {Number} deletedCount The number of documents deleted.\n */\n\n/**\n * The callback format for inserts\n * @callback Collection~deleteWriteOpCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Collection~deleteWriteOpResult} result The result object if the command was executed successfully.\n */\n\n/**\n * Delete a document on MongoDB\n * @method\n * @param {object} filter The Filter used to select the document to remove\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~deleteWriteOpCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.deleteOne = function(filter, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = shallowClone(options);\n\n  // Add ignoreUndfined\n  if (this.s.options.ignoreUndefined) {\n    options = shallowClone(options);\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\n  }\n\n  return executeOperation(this.s.topology, deleteOne, [this, filter, options, callback]);\n};\n\nvar deleteOne = function(self, filter, options, callback) {\n  options.single = true;\n  removeDocuments(self, filter, options, function(err, r) {\n    if (callback == null) return;\n    if (err && callback) return callback(err);\n    if (r == null) return callback(null, { result: { ok: 1 } });\n    r.deletedCount = r.result.n;\n    if (callback) callback(null, r);\n  });\n};\n\ndefine.classMethod('deleteOne', { callback: true, promise: true });\n\nCollection.prototype.removeOne = Collection.prototype.deleteOne;\n\ndefine.classMethod('removeOne', { callback: true, promise: true });\n\n/**\n * Delete multiple documents on MongoDB\n * @method\n * @param {object} filter The Filter used to select the documents to remove\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~deleteWriteOpCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.deleteMany = function(filter, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = shallowClone(options);\n\n  // Add ignoreUndfined\n  if (this.s.options.ignoreUndefined) {\n    options = shallowClone(options);\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\n  }\n\n  return executeOperation(this.s.topology, deleteMany, [this, filter, options, callback]);\n};\n\nvar deleteMany = function(self, filter, options, callback) {\n  options.single = false;\n\n  removeDocuments(self, filter, options, function(err, r) {\n    if (callback == null) return;\n    if (err && callback) return callback(err);\n    if (r == null) return callback(null, { result: { ok: 1 } });\n    r.deletedCount = r.result.n;\n    if (callback) callback(null, r);\n  });\n};\n\nvar removeDocuments = function(self, selector, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {});\n  } else if (typeof selector === 'function') {\n    callback = selector;\n    options = {};\n    selector = {};\n  }\n\n  // Create an empty options object if the provided one is null\n  options = options || {};\n\n  // Get the write concern options\n  var finalOptions = writeConcern(shallowClone(options), self.s.db, self, options);\n\n  // If selector is null set empty\n  if (selector == null) selector = {};\n\n  // Build the op\n  var op = { q: selector, limit: 0 };\n  if (options.single) op.limit = 1;\n\n  // Have we specified collation\n  decorateWithCollation(finalOptions, self, options);\n\n  // Execute the remove\n  self.s.topology.remove(self.s.namespace, [op], finalOptions, function(err, result) {\n    if (callback == null) return;\n    if (err) return handleCallback(callback, err, null);\n    if (result == null) return handleCallback(callback, null, null);\n    if (result.result.code) return handleCallback(callback, toError(result.result));\n    if (result.result.writeErrors)\n      return handleCallback(callback, toError(result.result.writeErrors[0]));\n    // Return the results\n    handleCallback(callback, null, result);\n  });\n};\n\ndefine.classMethod('deleteMany', { callback: true, promise: true });\n\nCollection.prototype.removeMany = Collection.prototype.deleteMany;\n\ndefine.classMethod('removeMany', { callback: true, promise: true });\n\n/**\n * Remove documents.\n * @method\n * @param {object} selector The selector for the update operation.\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.single=false] Removes the first document found.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~writeOpCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n * @deprecated use deleteOne, deleteMany or bulkWrite\n */\nCollection.prototype.remove = function(selector, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // Add ignoreUndfined\n  if (this.s.options.ignoreUndefined) {\n    options = shallowClone(options);\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\n  }\n\n  return executeOperation(this.s.topology, removeDocuments, [this, selector, options, callback]);\n};\n\ndefine.classMethod('remove', { callback: true, promise: true });\n\n/**\n * Save a document. Simple full document replacement function. Not recommended for efficiency, use atomic\n * operators and update instead for more efficient operations.\n * @method\n * @param {object} doc Document to save\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~writeOpCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n * @deprecated use insertOne, insertMany, updateOne or updateMany\n */\nCollection.prototype.save = function(doc, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // Add ignoreUndfined\n  if (this.s.options.ignoreUndefined) {\n    options = shallowClone(options);\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\n  }\n\n  return executeOperation(this.s.topology, save, [this, doc, options, callback]);\n};\n\nvar save = function(self, doc, options, callback) {\n  // Get the write concern options\n  var finalOptions = writeConcern(shallowClone(options), self.s.db, self, options);\n  // Establish if we need to perform an insert or update\n  if (doc._id != null) {\n    finalOptions.upsert = true;\n    return updateDocuments(self, { _id: doc._id }, doc, finalOptions, callback);\n  }\n\n  // Insert the document\n  insertDocuments(self, [doc], finalOptions, function(err, r) {\n    if (callback == null) return;\n    if (doc == null) return handleCallback(callback, null, null);\n    if (err) return handleCallback(callback, err, null);\n    handleCallback(callback, null, r);\n  });\n};\n\ndefine.classMethod('save', { callback: true, promise: true });\n\n/**\n * The callback format for results\n * @callback Collection~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object} result The result object if the command was executed successfully.\n */\n\n/**\n * The callback format for an aggregation call\n * @callback Collection~aggregationCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {AggregationCursor} cursor The cursor if the aggregation command was executed successfully.\n */\n\n/**\n * Fetches the first document that matches the query\n * @method\n * @param {object} query Query for find Operation\n * @param {object} [options=null] Optional settings.\n * @param {number} [options.limit=0] Sets the limit of documents returned in the query.\n * @param {(array|object)} [options.sort=null] Set to sort the documents coming back from the query. Array of indexes, [['a', 1]] etc.\n * @param {object} [options.projection=null] The fields to return in the query. Object of fields to include or exclude (not both), {'a':1}\n * @param {object} [options.fields=null] **Deprecated** Use `options.projection` instead\n * @param {number} [options.skip=0] Set to skip N documents ahead in your query (useful for pagination).\n * @param {Object} [options.hint=null] Tell the query to use specific indexes in the query. Object of indexes to use, {'_id':1}\n * @param {boolean} [options.explain=false] Explain the query instead of returning the data.\n * @param {boolean} [options.snapshot=false] Snapshot query.\n * @param {boolean} [options.timeout=false] Specify if the cursor can timeout.\n * @param {boolean} [options.tailable=false] Specify if the cursor is tailable.\n * @param {number} [options.batchSize=0] Set the batchSize for the getMoreCommand when iterating over the query results.\n * @param {boolean} [options.returnKey=false] Only return the index key.\n * @param {number} [options.maxScan=null] Limit the number of items to scan.\n * @param {number} [options.min=null] Set index bounds.\n * @param {number} [options.max=null] Set index bounds.\n * @param {boolean} [options.showDiskLoc=false] Show disk location of results.\n * @param {string} [options.comment=null] You can put a $comment field on a query to make looking in the profiler logs simpler.\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\n * @param {boolean} [options.promoteLongs=true] Promotes Long values to number if they fit inside the 53 bits resolution.\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {boolean} [options.partial=false] Specify if the cursor should return partial results when querying against a sharded system\n * @param {number} [options.maxTimeMS=null] Number of miliseconds to wait before aborting the query.\n * @param {object} [options.collation=null] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.findOne = function(query, options, callback) {\n  if (typeof query === 'function') (callback = query), (query = {}), (options = {});\n  if (typeof options === 'function') (callback = options), (options = {});\n  query = query || {};\n  options = options || {};\n\n  return executeOperation(this.s.topology, findOne, [this, query, options, callback]);\n};\n\nvar findOne = function(self, query, options, callback) {\n  const cursor = self\n    .find(query, options)\n    .limit(-1)\n    .batchSize(1);\n\n  // Return the item\n  cursor.next(function(err, item) {\n    if (err != null) return handleCallback(callback, toError(err), null);\n    handleCallback(callback, null, item);\n  });\n};\n\ndefine.classMethod('findOne', { callback: true, promise: true });\n\n/**\n * The callback format for the collection method, must be used if strict is specified\n * @callback Collection~collectionResultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Collection} collection The collection instance.\n */\n\n/**\n * Rename the collection.\n *\n * @method\n * @param {string} newName New name of of the collection.\n * @param {object} [options=null] Optional settings.\n * @param {boolean} [options.dropTarget=false] Drop the target name collection if it previously exists.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~collectionResultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.rename = function(newName, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = Object.assign({}, options, { readPreference: ReadPreference.PRIMARY });\n\n  return executeOperation(this.s.topology, rename, [this, newName, options, callback]);\n};\n\nvar rename = function(self, newName, options, callback) {\n  // Check the collection name\n  checkCollectionName(newName);\n  // Build the command\n  var renameCollection = f('%s.%s', self.s.dbName, self.s.name);\n  var toCollection = f('%s.%s', self.s.dbName, newName);\n  var dropTarget = typeof options.dropTarget === 'boolean' ? options.dropTarget : false;\n  var cmd = { renameCollection: renameCollection, to: toCollection, dropTarget: dropTarget };\n\n  // Decorate command with writeConcern if supported\n  decorateWithWriteConcern(cmd, self, options);\n\n  // Execute against admin\n  self.s.db.admin().command(cmd, options, function(err, doc) {\n    if (err) return handleCallback(callback, err, null);\n    // We have an error\n    if (doc.errmsg) return handleCallback(callback, toError(doc), null);\n    try {\n      return handleCallback(\n        callback,\n        null,\n        new Collection(\n          self.s.db,\n          self.s.topology,\n          self.s.dbName,\n          newName,\n          self.s.pkFactory,\n          self.s.options\n        )\n      );\n    } catch (err) {\n      return handleCallback(callback, toError(err), null);\n    }\n  });\n};\n\ndefine.classMethod('rename', { callback: true, promise: true });\n\n/**\n * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n *\n * @method\n * @param {object} [options=null] Optional settings.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.drop = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeOperation(this.s.topology, this.s.db.dropCollection.bind(this.s.db), [\n    this.s.name,\n    options,\n    callback\n  ]);\n};\n\ndefine.classMethod('drop', { callback: true, promise: true });\n\n/**\n * Returns the options of the collection.\n *\n * @method\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.options = function(opts, callback) {\n  if (typeof opts === 'function') (callback = opts), (opts = {});\n  opts = opts || {};\n\n  return executeOperation(this.s.topology, options, [this, opts, callback]);\n};\n\nvar options = function(self, opts, callback) {\n  self.s.db.listCollections({ name: self.s.name }, opts).toArray(function(err, collections) {\n    if (err) return handleCallback(callback, err);\n    if (collections.length === 0) {\n      return handleCallback(\n        callback,\n        MongoError.create({ message: f('collection %s not found', self.s.namespace), driver: true })\n      );\n    }\n\n    handleCallback(callback, err, collections[0].options || null);\n  });\n};\n\ndefine.classMethod('options', { callback: true, promise: true });\n\n/**\n * Returns if the collection is a capped collection\n *\n * @method\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.isCapped = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeOperation(this.s.topology, isCapped, [this, options, callback]);\n};\n\nvar isCapped = function(self, options, callback) {\n  self.options(options, function(err, document) {\n    if (err) return handleCallback(callback, err);\n    handleCallback(callback, null, document && document.capped);\n  });\n};\n\ndefine.classMethod('isCapped', { callback: true, promise: true });\n\n/**\n * Creates an index on the db and collection collection.\n * @method\n * @param {(string|object)} fieldOrSpec Defines the index.\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.unique=false] Creates an unique index.\n * @param {boolean} [options.sparse=false] Creates a sparse index.\n * @param {boolean} [options.background=false] Creates the index in the background, yielding whenever possible.\n * @param {boolean} [options.dropDups=false] A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value\n * @param {number} [options.min=null] For geospatial indexes set the lower bound for the co-ordinates.\n * @param {number} [options.max=null] For geospatial indexes set the high bound for the co-ordinates.\n * @param {number} [options.v=null] Specify the format version of the indexes.\n * @param {number} [options.expireAfterSeconds=null] Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)\n * @param {string} [options.name=null] Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)\n * @param {object} [options.partialFilterExpression=null] Creates a partial index based on the given filter object (MongoDB 3.2 or higher)\n * @param {object} [options.collation=null] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.createIndex = function(fieldOrSpec, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeOperation(this.s.topology, createIndex, [this, fieldOrSpec, options, callback]);\n};\n\nvar createIndex = function(self, fieldOrSpec, options, callback) {\n  self.s.db.createIndex(self.s.name, fieldOrSpec, options, callback);\n};\n\ndefine.classMethod('createIndex', { callback: true, promise: true });\n\n/**\n * Creates multiple indexes in the collection, this method is only supported for\n * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported\n * error. Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\n * @method\n * @param {array} indexSpecs An array of index specifications to be created\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.createIndexes = function(indexSpecs, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n\n  options = options ? shallowClone(options) : {};\n  if (typeof options.maxTimeMS !== 'number') delete options.maxTimeMS;\n\n  return executeOperation(this.s.topology, createIndexes, [this, indexSpecs, options, callback]);\n};\n\nvar createIndexes = function(self, indexSpecs, options, callback) {\n  var capabilities = self.s.topology.capabilities();\n\n  // Ensure we generate the correct name if the parameter is not set\n  for (var i = 0; i < indexSpecs.length; i++) {\n    if (indexSpecs[i].name == null) {\n      var keys = [];\n\n      // Did the user pass in a collation, check if our write server supports it\n      if (indexSpecs[i].collation && capabilities && !capabilities.commandsTakeCollation) {\n        return callback(new MongoError(f('server/primary/mongos does not support collation')));\n      }\n\n      for (var name in indexSpecs[i].key) {\n        keys.push(f('%s_%s', name, indexSpecs[i].key[name]));\n      }\n\n      // Set the name\n      indexSpecs[i].name = keys.join('_');\n    }\n  }\n\n  options = Object.assign({}, options, { readPreference: ReadPreference.PRIMARY });\n\n  // Execute the index\n  self.s.db.command(\n    {\n      createIndexes: self.s.name,\n      indexes: indexSpecs\n    },\n    options,\n    callback\n  );\n};\n\ndefine.classMethod('createIndexes', { callback: true, promise: true });\n\n/**\n * Drops an index from this collection.\n * @method\n * @param {string} indexName Name of the index to drop.\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {number} [options.maxTimeMS] Number of miliseconds to wait before aborting the query.\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.dropIndex = function(indexName, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n\n  options = args.length ? args.shift() || {} : {};\n  // Run only against primary\n  options.readPreference = ReadPreference.PRIMARY;\n\n  return executeOperation(this.s.topology, dropIndex, [this, indexName, options, callback]);\n};\n\nvar dropIndex = function(self, indexName, options, callback) {\n  // Delete index command\n  var cmd = { dropIndexes: self.s.name, index: indexName };\n\n  // Decorate command with writeConcern if supported\n  decorateWithWriteConcern(cmd, self, options);\n\n  // Execute command\n  self.s.db.command(cmd, options, function(err, result) {\n    if (typeof callback !== 'function') return;\n    if (err) return handleCallback(callback, err, null);\n    handleCallback(callback, null, result);\n  });\n};\n\ndefine.classMethod('dropIndex', { callback: true, promise: true });\n\n/**\n * Drops all indexes from this collection.\n * @method\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {number} [options.maxTimeMS] Number of miliseconds to wait before aborting the query.\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.dropIndexes = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options ? shallowClone(options) : {};\n\n  if (typeof options.maxTimeMS !== 'number') delete options.maxTimeMS;\n\n  return executeOperation(this.s.topology, dropIndexes, [this, options, callback]);\n};\n\nvar dropIndexes = function(self, options, callback) {\n  self.dropIndex('*', options, function(err) {\n    if (err) return handleCallback(callback, err, false);\n    handleCallback(callback, null, true);\n  });\n};\n\ndefine.classMethod('dropIndexes', { callback: true, promise: true });\n\n/**\n * Drops all indexes from this collection.\n * @method\n * @deprecated use dropIndexes\n * @param {Collection~resultCallback} callback The command result callback\n * @return {Promise} returns Promise if no [callback] passed\n */\nCollection.prototype.dropAllIndexes = Collection.prototype.dropIndexes;\n\ndefine.classMethod('dropAllIndexes', { callback: true, promise: true });\n\n/**\n * Reindex all indexes on the collection\n * Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n * @method\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.reIndex = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeOperation(this.s.topology, reIndex, [this, options, callback]);\n};\n\nvar reIndex = function(self, options, callback) {\n  // Reindex\n  var cmd = { reIndex: self.s.name };\n\n  // Execute the command\n  self.s.db.command(cmd, options, function(err, result) {\n    if (callback == null) return;\n    if (err) return handleCallback(callback, err, null);\n    handleCallback(callback, null, result.ok ? true : false);\n  });\n};\n\ndefine.classMethod('reIndex', { callback: true, promise: true });\n\n/**\n * Get the list of all indexes information for the collection.\n *\n * @method\n * @param {object} [options=null] Optional settings.\n * @param {number} [options.batchSize=null] The batchSize for the returned command cursor or if pre 2.8 the systems batch collection\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @return {CommandCursor}\n */\nCollection.prototype.listIndexes = function(options) {\n  options = options || {};\n  // Clone the options\n  options = shallowClone(options);\n  // Determine the read preference in the options.\n  options = getReadPreference(this, options, this.s.db, this);\n  // Set the CommandCursor constructor\n  options.cursorFactory = CommandCursor;\n  // Set the promiseLibrary\n  options.promiseLibrary = this.s.promiseLibrary;\n\n  if (!this.s.topology.capabilities()) {\n    throw new MongoError('cannot connect to server');\n  }\n\n  // We have a list collections command\n  if (this.s.topology.capabilities().hasListIndexesCommand) {\n    // Cursor options\n    var cursor = options.batchSize ? { batchSize: options.batchSize } : {};\n    // Build the command\n    var command = { listIndexes: this.s.name, cursor: cursor };\n    // Execute the cursor\n    cursor = this.s.topology.cursor(f('%s.$cmd', this.s.dbName), command, options);\n    // Do we have a readPreference, apply it\n    if (options.readPreference) cursor.setReadPreference(options.readPreference);\n    // Return the cursor\n    return cursor;\n  }\n\n  // Get the namespace\n  var ns = f('%s.system.indexes', this.s.dbName);\n  // Get the query\n  cursor = this.s.topology.cursor(ns, { find: ns, query: { ns: this.s.namespace } }, options);\n  // Do we have a readPreference, apply it\n  if (options.readPreference) cursor.setReadPreference(options.readPreference);\n  // Set the passed in batch size if one was provided\n  if (options.batchSize) cursor = cursor.batchSize(options.batchSize);\n  // Return the cursor\n  return cursor;\n};\n\ndefine.classMethod('listIndexes', { callback: false, promise: false, returns: [CommandCursor] });\n\n/**\n * Ensures that an index exists, if it does not it creates it\n * @method\n * @deprecated use createIndexes instead\n * @param {(string|object)} fieldOrSpec Defines the index.\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.unique=false] Creates an unique index.\n * @param {boolean} [options.sparse=false] Creates a sparse index.\n * @param {boolean} [options.background=false] Creates the index in the background, yielding whenever possible.\n * @param {boolean} [options.dropDups=false] A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value\n * @param {number} [options.min=null] For geospatial indexes set the lower bound for the co-ordinates.\n * @param {number} [options.max=null] For geospatial indexes set the high bound for the co-ordinates.\n * @param {number} [options.v=null] Specify the format version of the indexes.\n * @param {number} [options.expireAfterSeconds=null] Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)\n * @param {number} [options.name=null] Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)\n * @param {object} [options.collation=null] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.ensureIndex = function(fieldOrSpec, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeOperation(this.s.topology, ensureIndex, [this, fieldOrSpec, options, callback]);\n};\n\nvar ensureIndex = function(self, fieldOrSpec, options, callback) {\n  self.s.db.ensureIndex(self.s.name, fieldOrSpec, options, callback);\n};\n\ndefine.classMethod('ensureIndex', { callback: true, promise: true });\n\n/**\n * Checks if one or more indexes exist on the collection, fails on first non-existing index\n * @method\n * @param {(string|array)} indexes One or more index names to check.\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.indexExists = function(indexes, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeOperation(this.s.topology, indexExists, [this, indexes, options, callback]);\n};\n\nvar indexExists = function(self, indexes, options, callback) {\n  self.indexInformation(options, function(err, indexInformation) {\n    // If we have an error return\n    if (err != null) return handleCallback(callback, err, null);\n    // Let's check for the index names\n    if (!Array.isArray(indexes))\n      return handleCallback(callback, null, indexInformation[indexes] != null);\n    // Check in list of indexes\n    for (var i = 0; i < indexes.length; i++) {\n      if (indexInformation[indexes[i]] == null) {\n        return handleCallback(callback, null, false);\n      }\n    }\n\n    // All keys found return true\n    return handleCallback(callback, null, true);\n  });\n};\n\ndefine.classMethod('indexExists', { callback: true, promise: true });\n\n/**\n * Retrieves this collections index info.\n * @method\n * @param {object} [options=null] Optional settings.\n * @param {boolean} [options.full=false] Returns the full raw index information.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.indexInformation = function(options, callback) {\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  options = args.length ? args.shift() || {} : {};\n\n  return executeOperation(this.s.topology, indexInformation, [this, options, callback]);\n};\n\nvar indexInformation = function(self, options, callback) {\n  self.s.db.indexInformation(self.s.name, options, callback);\n};\n\ndefine.classMethod('indexInformation', { callback: true, promise: true });\n\n/**\n * The callback format for results\n * @callback Collection~countCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {number} result The count of documents that matched the query.\n */\n\n/**\n * Count number of matching documents in the db to a query.\n * @method\n * @param {object} query The query for the count.\n * @param {object} [options=null] Optional settings.\n * @param {boolean} [options.limit=null] The limit of documents to count.\n * @param {boolean} [options.skip=null] The number of documents to skip for the count.\n * @param {string} [options.hint=null] An index name hint for the query.\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {number} [options.maxTimeMS=null] Number of miliseconds to wait before aborting the query.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~countCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.count = function(query, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  query = args.length ? args.shift() || {} : {};\n  options = args.length ? args.shift() || {} : {};\n\n  return executeOperation(this.s.topology, count, [this, query, options, callback]);\n};\n\nvar count = function(self, query, options, callback) {\n  var skip = options.skip;\n  var limit = options.limit;\n  var hint = options.hint;\n  var maxTimeMS = options.maxTimeMS;\n\n  // Final query\n  var cmd = {\n    count: self.s.name,\n    query: query\n  };\n\n  // Add limit, skip and maxTimeMS if defined\n  if (typeof skip === 'number') cmd.skip = skip;\n  if (typeof limit === 'number') cmd.limit = limit;\n  if (typeof maxTimeMS === 'number') cmd.maxTimeMS = maxTimeMS;\n  if (hint) cmd.hint = hint;\n\n  options = shallowClone(options);\n\n  // Ensure we have the right read preference inheritance\n  options = getReadPreference(self, options, self.s.db);\n\n  // Do we have a readConcern specified\n  decorateWithReadConcern(cmd, self, options);\n\n  // Have we specified collation\n  decorateWithCollation(cmd, self, options);\n\n  // Execute command\n  self.s.db.command(cmd, options, function(err, result) {\n    if (err) return handleCallback(callback, err);\n    handleCallback(callback, null, result.n);\n  });\n};\n\ndefine.classMethod('count', { callback: true, promise: true });\n\n/**\n * The distinct command returns returns a list of distinct values for the given key across a collection.\n * @method\n * @param {string} key Field of the document to find distinct values for.\n * @param {object} query The query for filtering the set of documents to which we apply the distinct filter.\n * @param {object} [options=null] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {number} [options.maxTimeMS=null] Number of miliseconds to wait before aborting the query.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.distinct = function(key, query, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  var queryOption = args.length ? args.shift() || {} : {};\n  var optionsOption = args.length ? args.shift() || {} : {};\n\n  return executeOperation(this.s.topology, distinct, [\n    this,\n    key,\n    queryOption,\n    optionsOption,\n    callback\n  ]);\n};\n\nvar distinct = function(self, key, query, options, callback) {\n  // maxTimeMS option\n  var maxTimeMS = options.maxTimeMS;\n\n  // Distinct command\n  var cmd = {\n    distinct: self.s.name,\n    key: key,\n    query: query\n  };\n\n  options = shallowClone(options);\n  // Ensure we have the right read preference inheritance\n  options = getReadPreference(self, options, self.s.db, self);\n\n  // Add maxTimeMS if defined\n  if (typeof maxTimeMS === 'number') cmd.maxTimeMS = maxTimeMS;\n\n  // Do we have a readConcern specified\n  decorateWithReadConcern(cmd, self, options);\n\n  // Have we specified collation\n  decorateWithCollation(cmd, self, options);\n\n  // Execute the command\n  self.s.db.command(cmd, options, function(err, result) {\n    if (err) return handleCallback(callback, err);\n    handleCallback(callback, null, result.values);\n  });\n};\n\ndefine.classMethod('distinct', { callback: true, promise: true });\n\n/**\n * Retrieve all the indexes on the collection.\n * @method\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.indexes = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeOperation(this.s.topology, indexes, [this, options, callback]);\n};\n\nvar indexes = function(self, options, callback) {\n  options = Object.assign({}, { full: true }, options);\n  self.s.db.indexInformation(self.s.name, options, callback);\n};\n\ndefine.classMethod('indexes', { callback: true, promise: true });\n\n/**\n * Get all the collection statistics.\n *\n * @method\n * @param {object} [options=null] Optional settings.\n * @param {number} [options.scale=null] Divide the returned sizes by scale value.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The collection result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.stats = function(options, callback) {\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  options = args.length ? args.shift() || {} : {};\n\n  return executeOperation(this.s.topology, stats, [this, options, callback]);\n};\n\nvar stats = function(self, options, callback) {\n  // Build command object\n  var commandObject = {\n    collStats: self.s.name\n  };\n\n  // Check if we have the scale value\n  if (options['scale'] != null) commandObject['scale'] = options['scale'];\n\n  options = shallowClone(options);\n  // Ensure we have the right read preference inheritance\n  options = getReadPreference(self, options, self.s.db, self);\n\n  // Execute the command\n  self.s.db.command(commandObject, options, callback);\n};\n\ndefine.classMethod('stats', { callback: true, promise: true });\n\n/**\n * @typedef {Object} Collection~findAndModifyWriteOpResult\n * @property {object} value Document returned from findAndModify command.\n * @property {object} lastErrorObject The raw lastErrorObject returned from the command.\n * @property {Number} ok Is 1 if the command executed correctly.\n */\n\n/**\n * The callback format for inserts\n * @callback Collection~findAndModifyCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Collection~findAndModifyWriteOpResult} result The result object if the command was executed successfully.\n */\n\n/**\n * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n *\n * @method\n * @param {object} filter Document selection filter.\n * @param {object} [options=null] Optional settings.\n * @param {object} [options.projection=null] Limits the fields to return for all matching documents.\n * @param {object} [options.sort=null] Determines which document the operation modifies if the query selects multiple documents.\n * @param {number} [options.maxTimeMS=null] The maximum amount of time to allow the query to run.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~findAndModifyCallback} [callback] The collection result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.findOneAndDelete = function(filter, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // Basic validation\n  if (filter == null || typeof filter !== 'object')\n    throw toError('filter parameter must be an object');\n\n  return executeOperation(this.s.topology, findOneAndDelete, [this, filter, options, callback]);\n};\n\nvar findOneAndDelete = function(self, filter, options, callback) {\n  // Final options\n  var finalOptions = shallowClone(options);\n  finalOptions['fields'] = options.projection;\n  finalOptions['remove'] = true;\n  // Execute find and Modify\n  self.findAndModify(filter, options.sort, null, finalOptions, callback);\n};\n\ndefine.classMethod('findOneAndDelete', { callback: true, promise: true });\n\n/**\n * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n *\n * @method\n * @param {object} filter Document selection filter.\n * @param {object} replacement Document replacing the matching document.\n * @param {object} [options=null] Optional settings.\n * @param {object} [options.projection=null] Limits the fields to return for all matching documents.\n * @param {object} [options.sort=null] Determines which document the operation modifies if the query selects multiple documents.\n * @param {number} [options.maxTimeMS=null] The maximum amount of time to allow the query to run.\n * @param {boolean} [options.upsert=false] Upsert the document if it does not exist.\n * @param {boolean} [options.returnOriginal=true] When false, returns the updated document rather than the original. The default is true.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~findAndModifyCallback} [callback] The collection result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.findOneAndReplace = function(filter, replacement, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // Basic validation\n  if (filter == null || typeof filter !== 'object')\n    throw toError('filter parameter must be an object');\n  if (replacement == null || typeof replacement !== 'object')\n    throw toError('replacement parameter must be an object');\n\n  return executeOperation(this.s.topology, findOneAndReplace, [\n    this,\n    filter,\n    replacement,\n    options,\n    callback\n  ]);\n};\n\nvar findOneAndReplace = function(self, filter, replacement, options, callback) {\n  // Final options\n  var finalOptions = shallowClone(options);\n  finalOptions['fields'] = options.projection;\n  finalOptions['update'] = true;\n  finalOptions['new'] = options.returnOriginal !== void 0 ? !options.returnOriginal : false;\n  finalOptions['upsert'] = options.upsert !== void 0 ? !!options.upsert : false;\n\n  // Execute findAndModify\n  self.findAndModify(filter, options.sort, replacement, finalOptions, callback);\n};\n\ndefine.classMethod('findOneAndReplace', { callback: true, promise: true });\n\n/**\n * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n *\n * @method\n * @param {object} filter Document selection filter.\n * @param {object} update Update operations to be performed on the document\n * @param {object} [options=null] Optional settings.\n * @param {object} [options.projection=null] Limits the fields to return for all matching documents.\n * @param {object} [options.sort=null] Determines which document the operation modifies if the query selects multiple documents.\n * @param {number} [options.maxTimeMS=null] The maximum amount of time to allow the query to run.\n * @param {boolean} [options.upsert=false] Upsert the document if it does not exist.\n * @param {boolean} [options.returnOriginal=true] When false, returns the updated document rather than the original. The default is true.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~findAndModifyCallback} [callback] The collection result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.findOneAndUpdate = function(filter, update, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // Basic validation\n  if (filter == null || typeof filter !== 'object')\n    throw toError('filter parameter must be an object');\n  if (update == null || typeof update !== 'object')\n    throw toError('update parameter must be an object');\n\n  return executeOperation(this.s.topology, findOneAndUpdate, [\n    this,\n    filter,\n    update,\n    options,\n    callback\n  ]);\n};\n\nvar findOneAndUpdate = function(self, filter, update, options, callback) {\n  // Final options\n  var finalOptions = shallowClone(options);\n  finalOptions['fields'] = options.projection;\n  finalOptions['update'] = true;\n  finalOptions['new'] =\n    typeof options.returnOriginal === 'boolean' ? !options.returnOriginal : false;\n  finalOptions['upsert'] = typeof options.upsert === 'boolean' ? options.upsert : false;\n\n  // Execute findAndModify\n  self.findAndModify(filter, options.sort, update, finalOptions, callback);\n};\n\ndefine.classMethod('findOneAndUpdate', { callback: true, promise: true });\n\n/**\n * Find and update a document.\n * @method\n * @param {object} query Query object to locate the object to modify.\n * @param {array} sort If multiple docs match, choose the first one in the specified sort order as the object to manipulate.\n * @param {object} doc The fields/vals to be updated.\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.remove=false] Set to true to remove the object before returning.\n * @param {boolean} [options.upsert=false] Perform an upsert operation.\n * @param {boolean} [options.new=false] Set to true if you want to return the modified object rather than the original. Ignored for remove.\n * @param {object} [options.projection=null] Object containing the field projection for the result returned from the operation.\n * @param {object} [options.fields=null] **Deprecated** Use `options.projection` instead\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~findAndModifyCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n * @deprecated use findOneAndUpdate, findOneAndReplace or findOneAndDelete instead\n */\nCollection.prototype.findAndModify = function(query, sort, doc, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  sort = args.length ? args.shift() || [] : [];\n  doc = args.length ? args.shift() : null;\n  options = args.length ? args.shift() || {} : {};\n\n  // Clone options\n  options = shallowClone(options);\n  // Force read preference primary\n  options.readPreference = ReadPreference.PRIMARY;\n\n  return executeOperation(this.s.topology, findAndModify, [\n    this,\n    query,\n    sort,\n    doc,\n    options,\n    callback\n  ]);\n};\n\nvar findAndModify = function(self, query, sort, doc, options, callback) {\n  // Create findAndModify command object\n  var queryObject = {\n    findandmodify: self.s.name,\n    query: query\n  };\n\n  sort = formattedOrderClause(sort);\n  if (sort) {\n    queryObject.sort = sort;\n  }\n\n  queryObject.new = options.new ? true : false;\n  queryObject.remove = options.remove ? true : false;\n  queryObject.upsert = options.upsert ? true : false;\n\n  const projection = options.projection || options.fields;\n\n  if (projection) {\n    queryObject.fields = projection;\n  }\n\n  if (options.arrayFilters) {\n    queryObject.arrayFilters = options.arrayFilters;\n    delete options.arrayFilters;\n  }\n\n  if (doc && !options.remove) {\n    queryObject.update = doc;\n  }\n\n  if (options.maxTimeMS) queryObject.maxTimeMS = options.maxTimeMS;\n\n  // Either use override on the function, or go back to default on either the collection\n  // level or db\n  if (options['serializeFunctions'] != null) {\n    options['serializeFunctions'] = options['serializeFunctions'];\n  } else {\n    options['serializeFunctions'] = self.s.serializeFunctions;\n  }\n\n  // No check on the documents\n  options.checkKeys = false;\n\n  // Get the write concern settings\n  var finalOptions = writeConcern(options, self.s.db, self, options);\n\n  // Decorate the findAndModify command with the write Concern\n  if (finalOptions.writeConcern) {\n    queryObject.writeConcern = finalOptions.writeConcern;\n  }\n\n  // Have we specified bypassDocumentValidation\n  if (typeof finalOptions.bypassDocumentValidation === 'boolean') {\n    queryObject.bypassDocumentValidation = finalOptions.bypassDocumentValidation;\n  }\n\n  // Have we specified collation\n  decorateWithCollation(queryObject, self, finalOptions);\n\n  // Execute the command\n  self.s.db.command(queryObject, finalOptions, function(err, result) {\n    if (err) return handleCallback(callback, err, null);\n    return handleCallback(callback, null, result);\n  });\n};\n\ndefine.classMethod('findAndModify', { callback: true, promise: true });\n\n/**\n * Find and remove a document.\n * @method\n * @param {object} query Query object to locate the object to modify.\n * @param {array} sort If multiple docs match, choose the first one in the specified sort order as the object to manipulate.\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n * @deprecated use findOneAndDelete instead\n */\nCollection.prototype.findAndRemove = function(query, sort, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  sort = args.length ? args.shift() || [] : [];\n  options = args.length ? args.shift() || {} : {};\n\n  return executeOperation(this.s.topology, findAndRemove, [this, query, sort, options, callback]);\n};\n\nvar findAndRemove = function(self, query, sort, options, callback) {\n  // Add the remove option\n  options['remove'] = true;\n  // Execute the callback\n  self.findAndModify(query, sort, null, options, callback);\n};\n\ndefine.classMethod('findAndRemove', { callback: true, promise: true });\n\nfunction decorateWithWriteConcern(command, self, options) {\n  // Do we support collation 3.4 and higher\n  var capabilities = self.s.topology.capabilities();\n  // Do we support write concerns 3.4 and higher\n  if (capabilities && capabilities.commandsTakeWriteConcern) {\n    // Get the write concern settings\n    var finalOptions = writeConcern(shallowClone(options), self.s.db, self, options);\n    // Add the write concern to the command\n    if (finalOptions.writeConcern) {\n      command.writeConcern = finalOptions.writeConcern;\n    }\n  }\n}\n\nfunction decorateWithCollation(command, self, options) {\n  // Do we support collation 3.4 and higher\n  var capabilities = self.s.topology.capabilities();\n  // Do we support write concerns 3.4 and higher\n  if (capabilities && capabilities.commandsTakeCollation) {\n    if (options.collation && typeof options.collation === 'object') {\n      command.collation = options.collation;\n    }\n  }\n}\n\nfunction decorateWithReadConcern(command, self, options) {\n  let readConcern = Object.assign({}, command.readConcern || {});\n  if (self.s.readConcern) {\n    Object.assign(readConcern, self.s.readConcern);\n  }\n\n  if (\n    options.session &&\n    options.session.supports.causalConsistency &&\n    options.session.operationTime\n  ) {\n    Object.assign(readConcern, { afterClusterTime: options.session.operationTime });\n  }\n\n  if (Object.keys(readConcern).length > 0) {\n    Object.assign(command, { readConcern: readConcern });\n  }\n}\n\n/**\n * Execute an aggregation framework pipeline against the collection, needs MongoDB >= 2.2\n * @method\n * @param {object} pipeline Array containing all the aggregation framework commands for the execution.\n * @param {object} [options=null] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {object} [options.cursor=null] Return the query as cursor, on 2.6 > it returns as a real cursor on pre 2.6 it returns as an emulated cursor.\n * @param {number} [options.cursor.batchSize=null] The batchSize for the cursor\n * @param {boolean} [options.explain=false] Explain returns the aggregation execution plan (requires mongodb 2.6 >).\n * @param {boolean} [options.allowDiskUse=false] allowDiskUse lets the server know if it can use disk to store temporary results for the aggregation (requires mongodb 2.6 >).\n * @param {number} [options.maxTimeMS=null] maxTimeMS specifies a cumulative time limit in milliseconds for processing operations on the cursor. MongoDB interrupts the operation at the earliest following interrupt point.\n * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\n * @param {boolean} [options.promoteLongs=true] Promotes Long values to number if they fit inside the 53 bits resolution.\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {object} [options.collation=null] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n * @param {string} [options.comment] Add a comment to an aggregation command\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~aggregationCallback} callback The command result callback\n * @return {(null|AggregationCursor)}\n */\nCollection.prototype.aggregate = function(pipeline, options, callback) {\n  var self = this;\n\n  if (Array.isArray(pipeline)) {\n    // Set up callback if one is provided\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    // If we have no options or callback we are doing\n    // a cursor based aggregation\n    if (options == null && callback == null) {\n      options = {};\n    }\n  } else {\n    // Aggregation pipeline passed as arguments on the method\n    var args = Array.prototype.slice.call(arguments, 0);\n    // Get the callback\n    callback = args.pop();\n    // Get the possible options object\n    var opts = args[args.length - 1];\n    // If it contains any of the admissible options pop it of the args\n    options =\n      opts &&\n      (opts.readPreference ||\n        opts.explain ||\n        opts.cursor ||\n        opts.out ||\n        opts.maxTimeMS ||\n        opts.hint ||\n        opts.allowDiskUse)\n        ? args.pop()\n        : {};\n    // Left over arguments is the pipeline\n    pipeline = args;\n  }\n\n  // Ignore readConcern option\n  var ignoreReadConcern = false;\n\n  // Build the command\n  var command = { aggregate: this.s.name, pipeline: pipeline };\n\n  // If out was specified\n  if (typeof options.out === 'string') {\n    pipeline.push({ $out: options.out });\n    // Ignore read concern\n    ignoreReadConcern = true;\n  } else if (pipeline.length > 0 && pipeline[pipeline.length - 1]['$out']) {\n    ignoreReadConcern = true;\n  }\n\n  // Decorate command with writeConcern if out has been specified\n  if (pipeline.length > 0 && pipeline[pipeline.length - 1]['$out']) {\n    decorateWithWriteConcern(command, self, options);\n  }\n\n  // Have we specified collation\n  decorateWithCollation(command, self, options);\n\n  // If we have bypassDocumentValidation set\n  if (typeof options.bypassDocumentValidation === 'boolean') {\n    command.bypassDocumentValidation = options.bypassDocumentValidation;\n  }\n\n  // Do we have a readConcern specified\n  if (!ignoreReadConcern) {\n    decorateWithReadConcern(command, self, options);\n  }\n\n  // If we have allowDiskUse defined\n  if (options.allowDiskUse) command.allowDiskUse = options.allowDiskUse;\n  if (typeof options.maxTimeMS === 'number') command.maxTimeMS = options.maxTimeMS;\n\n  // If we are giving a hint\n  if (options.hint) command.hint = options.hint;\n\n  options = shallowClone(options);\n  // Ensure we have the right read preference inheritance\n  options = getReadPreference(this, options, this.s.db, this);\n\n  // If explain has been specified add it\n  if (options.explain) {\n    if (command.readConcern || command.writeConcern) {\n      throw toError('\"explain\" cannot be used on an aggregate call with readConcern/writeConcern');\n    }\n    command.explain = options.explain;\n  }\n\n  if (typeof options.comment === 'string') command.comment = options.comment;\n\n  // Validate that cursor options is valid\n  if (options.cursor != null && typeof options.cursor !== 'object') {\n    throw toError('cursor options must be an object');\n  }\n\n  options.cursor = options.cursor || { batchSize: 1000 };\n  command.cursor = options.cursor;\n\n  // promiseLibrary\n  options.promiseLibrary = this.s.promiseLibrary;\n\n  // Set the AggregationCursor constructor\n  options.cursorFactory = AggregationCursor;\n  if (typeof callback !== 'function') {\n    if (!this.s.topology.capabilities()) {\n      throw new MongoError('cannot connect to server');\n    }\n\n    // Allow disk usage command\n    if (typeof options.allowDiskUse === 'boolean') command.allowDiskUse = options.allowDiskUse;\n    if (typeof options.maxTimeMS === 'number') command.maxTimeMS = options.maxTimeMS;\n\n    // Execute the cursor\n    return this.s.topology.cursor(this.s.namespace, command, options);\n  }\n\n  return handleCallback(callback, null, this.s.topology.cursor(this.s.namespace, command, options));\n};\n\ndefine.classMethod('aggregate', { callback: true, promise: false });\n\n/**\n * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\n * @method\n * @since 3.0.0\n * @param {Array} [pipeline=null] An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n * @param {object} [options=null] Optional settings\n * @param {string} [options.fullDocument='default'] Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred.\n * @param {object} [options.resumeAfter=null] Specifies the logical starting point for the new change stream. This should be the _id field from a previously returned change stream document.\n * @param {number} [options.maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a change stream query\n * @param {number} [options.batchSize=null] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @param {object} [options.collation=null] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @param {ReadPreference} [options.readPreference=null] The read preference. Defaults to the read preference of the database or collection. See {@link https://docs.mongodb.com/manual/reference/read-preference|read preference documentation}.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @return {ChangeStream} a ChangeStream instance.\n */\nCollection.prototype.watch = function(pipeline, options) {\n  pipeline = pipeline || [];\n  options = options || {};\n\n  // Allow optionally not specifying a pipeline\n  if (!Array.isArray(pipeline)) {\n    options = pipeline;\n    pipeline = [];\n  }\n\n  return new ChangeStream(this, pipeline, options);\n};\n\ndefine.classMethod('watch', { callback: false, promise: false });\n\n/**\n * The callback format for results\n * @callback Collection~parallelCollectionScanCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Cursor[]} cursors A list of cursors returned allowing for parallel reading of collection.\n */\n\n/**\n * Return N number of parallel cursors for a collection allowing parallel reading of entire collection. There are\n * no ordering guarantees for returned results.\n * @method\n * @param {object} [options=null] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {number} [options.batchSize=null] Set the batchSize for the getMoreCommand when iterating over the query results.\n * @param {number} [options.numCursors=1] The maximum number of parallel command cursors to return (the number of returned cursors will be in the range 1:numCursors)\n * @param {boolean} [options.raw=false] Return all BSON documents as Raw Buffer documents.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~parallelCollectionScanCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.parallelCollectionScan = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = { numCursors: 1 });\n  // Set number of cursors to 1\n  options.numCursors = options.numCursors || 1;\n  options.batchSize = options.batchSize || 1000;\n\n  options = shallowClone(options);\n  // Ensure we have the right read preference inheritance\n  options = getReadPreference(this, options, this.s.db, this);\n\n  // Add a promiseLibrary\n  options.promiseLibrary = this.s.promiseLibrary;\n\n  return executeOperation(this.s.topology, parallelCollectionScan, [this, options, callback], {\n    returnsCursor: true\n  });\n};\n\nvar parallelCollectionScan = function(self, options, callback) {\n  // Create command object\n  var commandObject = {\n    parallelCollectionScan: self.s.name,\n    numCursors: options.numCursors\n  };\n\n  // Do we have a readConcern specified\n  decorateWithReadConcern(commandObject, self, options);\n\n  // Store the raw value\n  var raw = options.raw;\n  delete options['raw'];\n\n  // Execute the command\n  self.s.db.command(commandObject, options, function(err, result) {\n    if (err) return handleCallback(callback, err, null);\n    if (result == null)\n      return handleCallback(\n        callback,\n        new Error('no result returned for parallelCollectionScan'),\n        null\n      );\n\n    var cursors = [];\n    // Add the raw back to the option\n    if (raw) options.raw = raw;\n    // Create command cursors for each item\n    for (var i = 0; i < result.cursors.length; i++) {\n      var rawId = result.cursors[i].cursor.id;\n      // Convert cursorId to Long if needed\n      var cursorId = typeof rawId === 'number' ? Long.fromNumber(rawId) : rawId;\n      // Add a command cursor\n      cursors.push(self.s.topology.cursor(self.s.namespace, cursorId, options));\n    }\n\n    handleCallback(callback, null, cursors);\n  });\n};\n\ndefine.classMethod('parallelCollectionScan', { callback: true, promise: true });\n\n/**\n * Execute a geo search using a geo haystack index on a collection.\n *\n * @method\n * @param {number} x Point to search on the x axis, ensure the indexes are ordered in the same order.\n * @param {number} y Point to search on the y axis, ensure the indexes are ordered in the same order.\n * @param {object} [options=null] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {number} [options.maxDistance=null] Include results up to maxDistance from the point.\n * @param {object} [options.search=null] Filter the results by a query.\n * @param {number} [options.limit=false] Max number of results to return.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.geoHaystackSearch = function(x, y, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  options = args.length ? args.shift() || {} : {};\n\n  return executeOperation(this.s.topology, geoHaystackSearch, [this, x, y, options, callback]);\n};\n\nvar geoHaystackSearch = function(self, x, y, options, callback) {\n  // Build command object\n  var commandObject = {\n    geoSearch: self.s.name,\n    near: [x, y]\n  };\n\n  // Remove read preference from hash if it exists\n  commandObject = decorateCommand(commandObject, options, { readPreference: true, session: true });\n\n  options = shallowClone(options);\n  // Ensure we have the right read preference inheritance\n  options = getReadPreference(self, options, self.s.db, self);\n\n  // Do we have a readConcern specified\n  decorateWithReadConcern(commandObject, self, options);\n\n  // Execute the command\n  self.s.db.command(commandObject, options, function(err, res) {\n    if (err) return handleCallback(callback, err);\n    if (res.err || res.errmsg) handleCallback(callback, toError(res));\n    // should we only be returning res.results here? Not sure if the user\n    // should see the other return information\n    handleCallback(callback, null, res);\n  });\n};\n\ndefine.classMethod('geoHaystackSearch', { callback: true, promise: true });\n\n/**\n * Group function helper\n * @ignore\n */\n// var groupFunction = function () {\n//   var c = db[ns].find(condition);\n//   var map = new Map();\n//   var reduce_function = reduce;\n//\n//   while (c.hasNext()) {\n//     var obj = c.next();\n//     var key = {};\n//\n//     for (var i = 0, len = keys.length; i < len; ++i) {\n//       var k = keys[i];\n//       key[k] = obj[k];\n//     }\n//\n//     var aggObj = map.get(key);\n//\n//     if (aggObj == null) {\n//       var newObj = Object.extend({}, key);\n//       aggObj = Object.extend(newObj, initial);\n//       map.put(key, aggObj);\n//     }\n//\n//     reduce_function(obj, aggObj);\n//   }\n//\n//   return { \"result\": map.values() };\n// }.toString();\nvar groupFunction =\n  'function () {\\nvar c = db[ns].find(condition);\\nvar map = new Map();\\nvar reduce_function = reduce;\\n\\nwhile (c.hasNext()) {\\nvar obj = c.next();\\nvar key = {};\\n\\nfor (var i = 0, len = keys.length; i < len; ++i) {\\nvar k = keys[i];\\nkey[k] = obj[k];\\n}\\n\\nvar aggObj = map.get(key);\\n\\nif (aggObj == null) {\\nvar newObj = Object.extend({}, key);\\naggObj = Object.extend(newObj, initial);\\nmap.put(key, aggObj);\\n}\\n\\nreduce_function(obj, aggObj);\\n}\\n\\nreturn { \"result\": map.values() };\\n}';\n\n/**\n * Run a group command across a collection\n *\n * @method\n * @param {(object|array|function|code)} keys An object, array or function expressing the keys to group by.\n * @param {object} condition An optional condition that must be true for a row to be considered.\n * @param {object} initial Initial value of the aggregation counter object.\n * @param {(function|Code)} reduce The reduce function aggregates (reduces) the objects iterated\n * @param {(function|Code)} finalize An optional function to be run on each item in the result set just before the item is returned.\n * @param {boolean} command Specify if you wish to run using the internal group command or using eval, default is true.\n * @param {object} [options=null] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n * @deprecated MongoDB 3.6 or higher will no longer support the group command. We recommend rewriting using the aggregation framework.\n */\nCollection.prototype.group = function(\n  keys,\n  condition,\n  initial,\n  reduce,\n  finalize,\n  command,\n  options,\n  callback\n) {\n  var args = Array.prototype.slice.call(arguments, 3);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  reduce = args.length ? args.shift() : null;\n  finalize = args.length ? args.shift() : null;\n  command = args.length ? args.shift() : null;\n  options = args.length ? args.shift() || {} : {};\n\n  // Make sure we are backward compatible\n  if (!(typeof finalize === 'function')) {\n    command = finalize;\n    finalize = null;\n  }\n\n  if (\n    !Array.isArray(keys) &&\n    keys instanceof Object &&\n    typeof keys !== 'function' &&\n    !(keys._bsontype === 'Code')\n  ) {\n    keys = Object.keys(keys);\n  }\n\n  if (typeof reduce === 'function') {\n    reduce = reduce.toString();\n  }\n\n  if (typeof finalize === 'function') {\n    finalize = finalize.toString();\n  }\n\n  // Set up the command as default\n  command = command == null ? true : command;\n\n  return executeOperation(this.s.topology, group, [\n    this,\n    keys,\n    condition,\n    initial,\n    reduce,\n    finalize,\n    command,\n    options,\n    callback\n  ]);\n};\n\nvar group = function(self, keys, condition, initial, reduce, finalize, command, options, callback) {\n  // Execute using the command\n  if (command) {\n    var reduceFunction = reduce && reduce._bsontype === 'Code' ? reduce : new Code(reduce);\n\n    var selector = {\n      group: {\n        ns: self.s.name,\n        $reduce: reduceFunction,\n        cond: condition,\n        initial: initial,\n        out: 'inline'\n      }\n    };\n\n    // if finalize is defined\n    if (finalize != null) selector.group['finalize'] = finalize;\n    // Set up group selector\n    if ('function' === typeof keys || (keys && keys._bsontype === 'Code')) {\n      selector.group.$keyf = keys && keys._bsontype === 'Code' ? keys : new Code(keys);\n    } else {\n      var hash = {};\n      keys.forEach(function(key) {\n        hash[key] = 1;\n      });\n      selector.group.key = hash;\n    }\n\n    options = shallowClone(options);\n    // Ensure we have the right read preference inheritance\n    options = getReadPreference(self, options, self.s.db, self);\n\n    // Do we have a readConcern specified\n    decorateWithReadConcern(selector, self, options);\n\n    // Have we specified collation\n    decorateWithCollation(selector, self, options);\n\n    // Execute command\n    self.s.db.command(selector, options, function(err, result) {\n      if (err) return handleCallback(callback, err, null);\n      handleCallback(callback, null, result.retval);\n    });\n  } else {\n    // Create execution scope\n    var scope = reduce != null && reduce._bsontype === 'Code' ? reduce.scope : {};\n\n    scope.ns = self.s.name;\n    scope.keys = keys;\n    scope.condition = condition;\n    scope.initial = initial;\n\n    // Pass in the function text to execute within mongodb.\n    var groupfn = groupFunction.replace(/ reduce;/, reduce.toString() + ';');\n\n    self.s.db.eval(new Code(groupfn, scope), null, options, function(err, results) {\n      if (err) return handleCallback(callback, err, null);\n      handleCallback(callback, null, results.result || results);\n    });\n  }\n};\n\ndefine.classMethod('group', { callback: true, promise: true });\n\n/**\n * Functions that are passed as scope args must\n * be converted to Code instances.\n * @ignore\n */\nfunction processScope(scope) {\n  if (!isObject(scope) || scope._bsontype === 'ObjectID') {\n    return scope;\n  }\n\n  var keys = Object.keys(scope);\n  var i = keys.length;\n  var key;\n  var new_scope = {};\n\n  while (i--) {\n    key = keys[i];\n    if ('function' === typeof scope[key]) {\n      new_scope[key] = new Code(String(scope[key]));\n    } else {\n      new_scope[key] = processScope(scope[key]);\n    }\n  }\n\n  return new_scope;\n}\n\n/**\n * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n *\n * @method\n * @param {(function|string)} map The mapping function.\n * @param {(function|string)} reduce The reduce function.\n * @param {object} [options=null] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {object} [options.out=null] Sets the output target for the map reduce job. *{inline:1} | {replace:'collectionName'} | {merge:'collectionName'} | {reduce:'collectionName'}*\n * @param {object} [options.query=null] Query filter object.\n * @param {object} [options.sort=null] Sorts the input objects using this key. Useful for optimization, like sorting by the emit key for fewer reduces.\n * @param {number} [options.limit=null] Number of objects to return from collection.\n * @param {boolean} [options.keeptemp=false] Keep temporary data.\n * @param {(function|string)} [options.finalize=null] Finalize function.\n * @param {object} [options.scope=null] Can pass in variables that can be access from map/reduce/finalize.\n * @param {boolean} [options.jsMode=false] It is possible to make the execution stay in JS. Provided in MongoDB > 2.0.X.\n * @param {boolean} [options.verbose=false] Provide statistics on job execution time.\n * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Collection~resultCallback} [callback] The command result callback\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\nCollection.prototype.mapReduce = function(map, reduce, options, callback) {\n  if ('function' === typeof options) (callback = options), (options = {});\n  // Out must allways be defined (make sure we don't break weirdly on pre 1.8+ servers)\n  if (null == options.out) {\n    throw new Error(\n      'the out option parameter must be defined, see mongodb docs for possible values'\n    );\n  }\n\n  if ('function' === typeof map) {\n    map = map.toString();\n  }\n\n  if ('function' === typeof reduce) {\n    reduce = reduce.toString();\n  }\n\n  if ('function' === typeof options.finalize) {\n    options.finalize = options.finalize.toString();\n  }\n\n  return executeOperation(this.s.topology, mapReduce, [this, map, reduce, options, callback]);\n};\n\nvar mapReduce = function(self, map, reduce, options, callback) {\n  var mapCommandHash = {\n    mapreduce: self.s.name,\n    map: map,\n    reduce: reduce\n  };\n\n  // Exclusion list\n  var exclusionList = ['readPreference', 'session'];\n\n  // Add any other options passed in\n  for (var n in options) {\n    if ('scope' === n) {\n      mapCommandHash[n] = processScope(options[n]);\n    } else {\n      // Only include if not in exclusion list\n      if (exclusionList.indexOf(n) === -1) {\n        mapCommandHash[n] = options[n];\n      }\n    }\n  }\n\n  options = shallowClone(options);\n\n  // Ensure we have the right read preference inheritance\n  options = getReadPreference(self, options, self.s.db, self);\n\n  // If we have a read preference and inline is not set as output fail hard\n  if (\n    options.readPreference !== false &&\n    options.readPreference !== 'primary' &&\n    options['out'] &&\n    (options['out'].inline !== 1 && options['out'] !== 'inline')\n  ) {\n    // Force readPreference to primary\n    options.readPreference = 'primary';\n    // Decorate command with writeConcern if supported\n    decorateWithWriteConcern(mapCommandHash, self, options);\n  } else {\n    decorateWithReadConcern(mapCommandHash, self, options);\n  }\n\n  // Is bypassDocumentValidation specified\n  if (typeof options.bypassDocumentValidation === 'boolean') {\n    mapCommandHash.bypassDocumentValidation = options.bypassDocumentValidation;\n  }\n\n  // Have we specified collation\n  decorateWithCollation(mapCommandHash, self, options);\n\n  // Execute command\n  self.s.db.command(mapCommandHash, options, function(err, result) {\n    if (err) return handleCallback(callback, err);\n    // Check if we have an error\n    if (1 !== result.ok || result.err || result.errmsg) {\n      return handleCallback(callback, toError(result));\n    }\n\n    // Create statistics value\n    var stats = {};\n    if (result.timeMillis) stats['processtime'] = result.timeMillis;\n    if (result.counts) stats['counts'] = result.counts;\n    if (result.timing) stats['timing'] = result.timing;\n\n    // invoked with inline?\n    if (result.results) {\n      // If we wish for no verbosity\n      if (options['verbose'] == null || !options['verbose']) {\n        return handleCallback(callback, null, result.results);\n      }\n\n      return handleCallback(callback, null, { results: result.results, stats: stats });\n    }\n\n    // The returned collection\n    var collection = null;\n\n    // If we have an object it's a different db\n    if (result.result != null && typeof result.result === 'object') {\n      var doc = result.result;\n      // Return a collection from another db\n      var Db = require('./db');\n      collection = new Db(doc.db, self.s.db.s.topology, self.s.db.s.options).collection(\n        doc.collection\n      );\n    } else {\n      // Create a collection object that wraps the result collection\n      collection = self.s.db.collection(result.result);\n    }\n\n    // If we wish for no verbosity\n    if (options['verbose'] == null || !options['verbose']) {\n      return handleCallback(callback, err, collection);\n    }\n\n    // Return stats as third set of values\n    handleCallback(callback, err, { collection: collection, stats: stats });\n  });\n};\n\ndefine.classMethod('mapReduce', { callback: true, promise: true });\n\n/**\n * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n *\n * @method\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @return {UnorderedBulkOperation}\n */\nCollection.prototype.initializeUnorderedBulkOp = function(options) {\n  options = options || {};\n  options.promiseLibrary = this.s.promiseLibrary;\n  return unordered(this.s.topology, this, options);\n};\n\ndefine.classMethod('initializeUnorderedBulkOp', {\n  callback: false,\n  promise: false,\n  returns: [ordered.UnorderedBulkOperation]\n});\n\n/**\n * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n *\n * @method\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {OrderedBulkOperation} callback The command result callback\n * @return {null}\n */\nCollection.prototype.initializeOrderedBulkOp = function(options) {\n  options = options || {};\n  options.promiseLibrary = this.s.promiseLibrary;\n  return ordered(this.s.topology, this, options);\n};\n\ndefine.classMethod('initializeOrderedBulkOp', {\n  callback: false,\n  promise: false,\n  returns: [ordered.OrderedBulkOperation]\n});\n\n// Get write concern\nvar writeConcern = function(target, db, col, options) {\n  if (options.w != null || options.j != null || options.fsync != null) {\n    var opts = {};\n    if (options.w != null) opts.w = options.w;\n    if (options.wtimeout != null) opts.wtimeout = options.wtimeout;\n    if (options.j != null) opts.j = options.j;\n    if (options.fsync != null) opts.fsync = options.fsync;\n    target.writeConcern = opts;\n  } else if (\n    col.writeConcern.w != null ||\n    col.writeConcern.j != null ||\n    col.writeConcern.fsync != null\n  ) {\n    target.writeConcern = col.writeConcern;\n  } else if (\n    db.writeConcern.w != null ||\n    db.writeConcern.j != null ||\n    db.writeConcern.fsync != null\n  ) {\n    target.writeConcern = db.writeConcern;\n  }\n\n  // NOTE: there is probably a much better place for this\n  if (db.s.options.retryWrites) target.retryWrites = true;\n\n  return target;\n};\n\n// Figure out the read preference\nvar getReadPreference = function(self, options, db) {\n  let r = null;\n  if (options.readPreference) {\n    r = options.readPreference;\n  } else if (self.s.readPreference) {\n    r = self.s.readPreference;\n  } else if (db.s.readPreference) {\n    r = db.s.readPreference;\n  } else {\n    return options;\n  }\n\n  if (typeof r === 'string') {\n    options.readPreference = new ReadPreference(r);\n  } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n    const mode = r.mode || r.preference;\n    if (mode && typeof mode === 'string') {\n      options.readPreference = new ReadPreference(mode, r.tags, {\n        maxStalenessSeconds: r.maxStalenessSeconds\n      });\n    }\n  } else if (!(r instanceof ReadPreference)) {\n    throw new TypeError('Invalid read preference: ' + r);\n  }\n\n  return options;\n};\n\nmodule.exports = Collection;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/collection.js\n// module id = 54\n// module chunks = 0","/*!\n * ignore\n */\n\nvar driver;\n\nif (typeof window === 'undefined') {\n  driver = require('./node-mongodb-native');\n  if (global.MONGOOSE_DRIVER_PATH) {\n    driver = require(global.MONGOOSE_DRIVER_PATH);\n  }\n} else {\n  driver = require('./browser');\n}\n\n/*!\n * ignore\n */\n\nmodule.exports = driver;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/drivers/index.js\n// module id = 55\n// module chunks = 0","/*!\n * Module dependencies.\n */\n\nvar MongooseError = require('./');\nvar util = require('util');\n\n/**\n * Casting Error constructor.\n *\n * @param {String} type\n * @param {String} value\n * @inherits MongooseError\n * @api private\n */\n\nfunction CastError(type, value, path, reason) {\n  var stringValue = util.inspect(value);\n  stringValue = stringValue.replace(/^'/, '\"').replace(/'$/, '\"');\n  if (stringValue.charAt(0) !== '\"') {\n    stringValue = '\"' + stringValue + '\"';\n  }\n  MongooseError.call(this, 'Cast to ' + type + ' failed for value ' +\n    stringValue + ' at path \"' + path + '\"');\n  this.name = 'CastError';\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this);\n  } else {\n    this.stack = new Error().stack;\n  }\n  this.stringValue = stringValue;\n  this.kind = type;\n  this.value = value;\n  this.path = path;\n  this.reason = reason;\n}\n\n/*!\n * Inherits from MongooseError.\n */\n\nCastError.prototype = Object.create(MongooseError.prototype);\nCastError.prototype.constructor = MongooseError;\n\n/*!\n * ignore\n */\n\nCastError.prototype.setModel = function(model) {\n  this.model = model;\n  this.message = 'Cast to ' + this.kind + ' failed for value ' +\n    this.stringValue + ' at path \"' + this.path + '\"' + ' for model \"' +\n    model.modelName + '\"';\n};\n\n/*!\n * exports\n */\n\nmodule.exports = CastError;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/error/cast.js\n// module id = 56\n// module chunks = 0","/*!\n * Module dependencies.\n */\n\nvar readPref = require('./drivers').ReadPreference;\nvar EventEmitter = require('events').EventEmitter;\nvar VirtualType = require('./virtualtype');\nvar utils = require('./utils');\nvar MongooseTypes;\nvar Kareem = require('kareem');\nvar SchemaType = require('./schematype');\nvar mpath = require('mpath');\n\n/**\n * Schema constructor.\n *\n * ####Example:\n *\n *     var child = new Schema({ name: String });\n *     var schema = new Schema({ name: String, age: Number, children: [child] });\n *     var Tree = mongoose.model('Tree', schema);\n *\n *     // setting schema options\n *     new Schema({ name: String }, { _id: false, autoIndex: false })\n *\n * ####Options:\n *\n * - [autoIndex](/docs/guide.html#autoIndex): bool - defaults to null (which means use the connection's autoIndex option)\n * - [bufferCommands](/docs/guide.html#bufferCommands): bool - defaults to true\n * - [capped](/docs/guide.html#capped): bool - defaults to false\n * - [collection](/docs/guide.html#collection): string - no default\n * - [id](/docs/guide.html#id): bool - defaults to true\n * - [_id](/docs/guide.html#_id): bool - defaults to true\n * - `minimize`: bool - controls [document#toObject](#document_Document-toObject) behavior when called manually - defaults to true\n * - [read](/docs/guide.html#read): string\n * - [safe](/docs/guide.html#safe): bool - defaults to true.\n * - [shardKey](/docs/guide.html#shardKey): bool - defaults to `null`\n * - [strict](/docs/guide.html#strict): bool - defaults to true\n * - [toJSON](/docs/guide.html#toJSON) - object - no default\n * - [toObject](/docs/guide.html#toObject) - object - no default\n * - [typeKey](/docs/guide.html#typeKey) - string - defaults to 'type'\n * - [useNestedStrict](/docs/guide.html#useNestedStrict) - boolean - defaults to false\n * - [validateBeforeSave](/docs/guide.html#validateBeforeSave) - bool - defaults to `true`\n * - [versionKey](/docs/guide.html#versionKey): string - defaults to \"__v\"\n * - [collation](/docs/guide.html#collation): object - defaults to null (which means use no collation)\n *\n * ####Note:\n *\n * _When nesting schemas, (`children` in the example above), always declare the child schema first before passing it into its parent._\n *\n * @param {Object} definition\n * @param {Object} [options]\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `init`: Emitted after the schema is compiled into a `Model`.\n * @api public\n */\n\nfunction Schema(obj, options) {\n  if (!(this instanceof Schema)) {\n    return new Schema(obj, options);\n  }\n\n  this.obj = obj;\n  this.paths = {};\n  this.aliases = {};\n  this.subpaths = {};\n  this.virtuals = {};\n  this.singleNestedPaths = {};\n  this.nested = {};\n  this.inherits = {};\n  this.callQueue = [];\n  this._indexes = [];\n  this.methods = {};\n  this.statics = {};\n  this.tree = {};\n  this.query = {};\n  this.childSchemas = [];\n  this.plugins = [];\n\n  this.s = {\n    hooks: new Kareem()\n  };\n\n  this.options = this.defaultOptions(options);\n\n  // build paths\n  if (obj) {\n    this.add(obj);\n  }\n\n  // check if _id's value is a subdocument (gh-2276)\n  var _idSubDoc = obj && obj._id && utils.isObject(obj._id);\n\n  // ensure the documents get an auto _id unless disabled\n  var auto_id = !this.paths['_id'] &&\n      (!this.options.noId && this.options._id) && !_idSubDoc;\n\n  if (auto_id) {\n    var _obj = {_id: {auto: true}};\n    _obj._id[this.options.typeKey] = Schema.ObjectId;\n    this.add(_obj);\n  }\n\n  if (this.options.timestamps) {\n    this.setupTimestamp(this.options.timestamps);\n  }\n\n  // Assign virtual properties based on alias option\n  aliasFields(this);\n}\n\n/*!\n * Create virtual properties with alias field\n */\nfunction aliasFields(schema) {\n  for (var path in schema.paths) {\n    if (!schema.paths[path].options) continue;\n\n    var prop = schema.paths[path].path;\n    var alias = schema.paths[path].options.alias;\n\n    if (alias) {\n      if ('string' === typeof alias && alias.length > 0) {\n        if (schema.aliases[alias]) {\n          throw new Error('Duplicate alias, alias ' + alias + ' is used more than once');\n        } else {\n          schema.aliases[alias] = prop;\n        }\n\n        schema\n          .virtual(alias)\n          .get((function(p) {\n            return function() {\n              if (typeof this.get === 'function') {\n                return this.get(p);\n              }\n              return this[p];\n            };\n          })(prop))\n          .set((function(p) {\n            return function(v) {\n              return this.set(p, v);\n            };\n          })(prop));\n      } else {\n        throw new Error('Invalid value for alias option on ' + prop + ', got ' + alias);\n      }\n    }\n  }\n}\n\n/*!\n * Inherit from EventEmitter.\n */\nSchema.prototype = Object.create(EventEmitter.prototype);\nSchema.prototype.constructor = Schema;\nSchema.prototype.instanceOfSchema = true;\n\n/**\n * Array of child schemas (from document arrays and single nested subdocs)\n * and their corresponding compiled models. Each element of the array is\n * an object with 2 properties: `schema` and `model`.\n *\n * This property is typically only useful for plugin authors and advanced users.\n * You do not need to interact with this property at all to use mongoose.\n *\n * @api public\n * @property childSchemas\n * @memberOf Schema\n */\n\nObject.defineProperty(Schema.prototype, 'childSchemas', {\n  configurable: false,\n  enumerable: true,\n  writable: true\n});\n\n/**\n * The original object passed to the schema constructor\n *\n * ####Example:\n *\n *     var schema = new Schema({ a: String }).add({ b: String });\n *     schema.obj; // { a: String }\n *\n * @api public\n * @property obj\n * @memberOf Schema\n */\n\nSchema.prototype.obj;\n\n/**\n * Schema as flat paths\n *\n * ####Example:\n *     {\n *         '_id'        : SchemaType,\n *       , 'nested.key' : SchemaType,\n *     }\n *\n * @api private\n * @property paths\n * @memberOf Schema\n */\n\nSchema.prototype.paths;\n\n/**\n * Schema as a tree\n *\n * ####Example:\n *     {\n *         '_id'     : ObjectId\n *       , 'nested'  : {\n *             'key' : String\n *         }\n *     }\n *\n * @api private\n * @property tree\n * @memberOf Schema\n */\n\nSchema.prototype.tree;\n\n/**\n * Returns a deep copy of the schema\n *\n * @return {Schema} the cloned schema\n * @api public\n * @memberOf Schema\n */\n\nSchema.prototype.clone = function() {\n  var s = new Schema(this.paths, this.options);\n  var cloneOpts = {};\n  s.callQueue = this.callQueue.map(function(f) { return f; });\n  s.methods = utils.clone(this.methods, cloneOpts);\n  s.statics = utils.clone(this.statics, cloneOpts);\n  s.query = utils.clone(this.query, cloneOpts);\n  s.plugins = Array.prototype.slice.call(this.plugins);\n  s._indexes = utils.clone(this._indexes, cloneOpts);\n  s.s.hooks = this.s.hooks.clone();\n  s.virtuals = utils.clone(this.virtuals, cloneOpts);\n  return s;\n};\n\n/**\n * Returns default options for this schema, merged with `options`.\n *\n * @param {Object} options\n * @return {Object}\n * @api private\n */\n\nSchema.prototype.defaultOptions = function(options) {\n  if (options && options.safe === false) {\n    options.safe = {w: 0};\n  }\n\n  if (options && options.safe && options.safe.w === 0) {\n    // if you turn off safe writes, then versioning goes off as well\n    options.versionKey = false;\n  }\n\n  this._userProvidedOptions = utils.clone(options);\n\n  options = utils.options({\n    strict: true,\n    bufferCommands: true,\n    capped: false, // { size, max, autoIndexId }\n    versionKey: '__v',\n    discriminatorKey: '__t',\n    minimize: true,\n    autoIndex: null,\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    // the following are only applied at construction time\n    noId: false, // deprecated, use { _id: false }\n    _id: true,\n    noVirtualId: false, // deprecated, use { id: false }\n    id: true,\n    typeKey: 'type'\n  }, options);\n\n  if (options.read) {\n    options.read = readPref(options.read);\n  }\n\n  return options;\n};\n\n/**\n * Adds key path / schema type pairs to this schema.\n *\n * ####Example:\n *\n *     var ToySchema = new Schema;\n *     ToySchema.add({ name: 'string', color: 'string', price: 'number' });\n *\n * @param {Object} obj\n * @param {String} prefix\n * @api public\n */\n\nSchema.prototype.add = function add(obj, prefix) {\n  prefix = prefix || '';\n  var keys = Object.keys(obj);\n\n  for (var i = 0; i < keys.length; ++i) {\n    var key = keys[i];\n\n    if (obj[key] == null) {\n      throw new TypeError('Invalid value for schema path `' + prefix + key + '`');\n    }\n\n    if (Array.isArray(obj[key]) && obj[key].length === 1 && obj[key][0] == null) {\n      throw new TypeError('Invalid value for schema Array path `' + prefix + key + '`');\n    }\n\n    if (utils.isObject(obj[key]) &&\n        (!obj[key].constructor || utils.getFunctionName(obj[key].constructor) === 'Object') &&\n        (!obj[key][this.options.typeKey] || (this.options.typeKey === 'type' && obj[key].type.type))) {\n      if (Object.keys(obj[key]).length) {\n        // nested object { last: { name: String }}\n        this.nested[prefix + key] = true;\n        this.add(obj[key], prefix + key + '.');\n      } else {\n        if (prefix) {\n          this.nested[prefix.substr(0, prefix.length - 1)] = true;\n        }\n        this.path(prefix + key, obj[key]); // mixed type\n      }\n    } else {\n      if (prefix) {\n        this.nested[prefix.substr(0, prefix.length - 1)] = true;\n      }\n      this.path(prefix + key, obj[key]);\n    }\n  }\n};\n\n/**\n * Reserved document keys.\n *\n * Keys in this object are names that are rejected in schema declarations b/c they conflict with mongoose functionality. Using these key name will throw an error.\n *\n *      on, emit, _events, db, get, set, init, isNew, errors, schema, options, modelName, collection, _pres, _posts, toObject\n *\n * _NOTE:_ Use of these terms as method names is permitted, but play at your own risk, as they may be existing mongoose document methods you are stomping on.\n *\n *      var schema = new Schema(..);\n *      schema.methods.init = function () {} // potentially breaking\n */\n\nSchema.reserved = Object.create(null);\nvar reserved = Schema.reserved;\n// Core object\nreserved['prototype'] =\n// EventEmitter\nreserved.emit =\nreserved.on =\nreserved.once =\nreserved.listeners =\nreserved.removeListener =\n// document properties and functions\nreserved.collection =\nreserved.db =\nreserved.errors =\nreserved.init =\nreserved.isModified =\nreserved.isNew =\nreserved.get =\nreserved.modelName =\nreserved.save =\nreserved.schema =\nreserved.toObject =\nreserved.validate =\nreserved.remove =\n// hooks.js\nreserved._pres = reserved._posts = 1;\n\n/*!\n * Document keys to print warnings for\n */\n\nvar warnings = {};\nwarnings.increment = '`increment` should not be used as a schema path name ' +\n    'unless you have disabled versioning.';\n\n/**\n * Gets/sets schema paths.\n *\n * Sets a path (if arity 2)\n * Gets a path (if arity 1)\n *\n * ####Example\n *\n *     schema.path('name') // returns a SchemaType\n *     schema.path('name', Number) // changes the schemaType of `name` to Number\n *\n * @param {String} path\n * @param {Object} constructor\n * @api public\n */\n\nSchema.prototype.path = function(path, obj) {\n  if (obj === undefined) {\n    if (this.paths[path]) {\n      return this.paths[path];\n    }\n    if (this.subpaths[path]) {\n      return this.subpaths[path];\n    }\n    if (this.singleNestedPaths[path]) {\n      return this.singleNestedPaths[path];\n    }\n\n    // subpaths?\n    return /\\.\\d+\\.?.*$/.test(path)\n      ? getPositionalPath(this, path)\n      : undefined;\n  }\n\n  // some path names conflict with document methods\n  if (reserved[path]) {\n    throw new Error('`' + path + '` may not be used as a schema pathname');\n  }\n\n  if (warnings[path]) {\n    console.log('WARN: ' + warnings[path]);\n  }\n\n  // update the tree\n  var subpaths = path.split(/\\./),\n      last = subpaths.pop(),\n      branch = this.tree;\n\n  subpaths.forEach(function(sub, i) {\n    if (!branch[sub]) {\n      branch[sub] = {};\n    }\n    if (typeof branch[sub] !== 'object') {\n      var msg = 'Cannot set nested path `' + path + '`. '\n          + 'Parent path `'\n          + subpaths.slice(0, i).concat([sub]).join('.')\n          + '` already set to type ' + branch[sub].name\n          + '.';\n      throw new Error(msg);\n    }\n    branch = branch[sub];\n  });\n\n\n  branch[last] = utils.clone(obj);\n\n  this.paths[path] = Schema.interpretAsType(path, obj, this.options);\n\n  if (this.paths[path].$isSingleNested) {\n    for (var key in this.paths[path].schema.paths) {\n      this.singleNestedPaths[path + '.' + key] =\n          this.paths[path].schema.paths[key];\n    }\n    for (key in this.paths[path].schema.singleNestedPaths) {\n      this.singleNestedPaths[path + '.' + key] =\n          this.paths[path].schema.singleNestedPaths[key];\n    }\n\n    this.childSchemas.push({\n      schema: this.paths[path].schema,\n      model: this.paths[path].caster\n    });\n  } else if (this.paths[path].$isMongooseDocumentArray) {\n    this.childSchemas.push({\n      schema: this.paths[path].schema,\n      model: this.paths[path].casterConstructor\n    });\n  } else if (this.paths[path].path === '_id' && this.paths[path].options && this.paths[path].options.unique) {\n    throw new Error('Cannot put unique index on _id');\n  }\n\n  return this;\n};\n\n/**\n * Converts type arguments into Mongoose Types.\n *\n * @param {String} path\n * @param {Object} obj constructor\n * @api private\n */\n\nSchema.interpretAsType = function(path, obj, options) {\n  if (obj instanceof SchemaType) {\n    return obj;\n  }\n\n  if (obj.constructor) {\n    var constructorName = utils.getFunctionName(obj.constructor);\n    if (constructorName !== 'Object') {\n      var oldObj = obj;\n      obj = {};\n      obj[options.typeKey] = oldObj;\n    }\n  }\n\n  // Get the type making sure to allow keys named \"type\"\n  // and default to mixed if not specified.\n  // { type: { type: String, default: 'freshcut' } }\n  var type = obj[options.typeKey] && (options.typeKey !== 'type' || !obj.type.type)\n    ? obj[options.typeKey]\n    : {};\n\n  if (utils.getFunctionName(type.constructor) === 'Object' || type === 'mixed') {\n    return new MongooseTypes.Mixed(path, obj);\n  }\n\n  if (Array.isArray(type) || Array === type || type === 'array') {\n    // if it was specified through { type } look for `cast`\n    var cast = (Array === type || type === 'array')\n      ? obj.cast\n      : type[0];\n\n    if (cast && cast.instanceOfSchema) {\n      return new MongooseTypes.DocumentArray(path, cast, obj);\n    }\n    if (cast &&\n        cast[options.typeKey] &&\n        cast[options.typeKey].instanceOfSchema) {\n      return new MongooseTypes.DocumentArray(path, cast[options.typeKey], cast);\n    }\n\n    if (Array.isArray(cast)) {\n      return new MongooseTypes.Array(path, Schema.interpretAsType(path, cast, options), obj);\n    }\n\n    if (typeof cast === 'string') {\n      cast = MongooseTypes[cast.charAt(0).toUpperCase() + cast.substring(1)];\n    } else if (cast && (!cast[options.typeKey] || (options.typeKey === 'type' && cast.type.type))\n        && utils.getFunctionName(cast.constructor) === 'Object') {\n      if (Object.keys(cast).length) {\n        // The `minimize` and `typeKey` options propagate to child schemas\n        // declared inline, like `{ arr: [{ val: { $type: String } }] }`.\n        // See gh-3560\n        var childSchemaOptions = {minimize: options.minimize};\n        if (options.typeKey) {\n          childSchemaOptions.typeKey = options.typeKey;\n        }\n        //propagate 'strict' option to child schema\n        if (options.hasOwnProperty('strict')) {\n          childSchemaOptions.strict = options.strict;\n        }\n        var childSchema = new Schema(cast, childSchemaOptions);\n        childSchema.$implicitlyCreated = true;\n        return new MongooseTypes.DocumentArray(path, childSchema, obj);\n      } else {\n        // Special case: empty object becomes mixed\n        return new MongooseTypes.Array(path, MongooseTypes.Mixed, obj);\n      }\n    }\n\n    if (cast) {\n      type = cast[options.typeKey] && (options.typeKey !== 'type' || !cast.type.type)\n        ? cast[options.typeKey]\n        : cast;\n\n      name = typeof type === 'string'\n        ? type\n        : type.schemaName || utils.getFunctionName(type);\n\n      if (!(name in MongooseTypes)) {\n        throw new TypeError('Undefined type `' + name + '` at array `' + path +\n          '`');\n      }\n    }\n\n    return new MongooseTypes.Array(path, cast || MongooseTypes.Mixed, obj, options);\n  }\n\n  if (type && type.instanceOfSchema) {\n    return new MongooseTypes.Embedded(type, path, obj);\n  }\n\n  var name;\n  if (Buffer.isBuffer(type)) {\n    name = 'Buffer';\n  } else {\n    name = typeof type === 'string'\n      ? type\n      // If not string, `type` is a function. Outside of IE, function.name\n      // gives you the function name. In IE, you need to compute it\n      : type.schemaName || utils.getFunctionName(type);\n  }\n\n  if (name) {\n    name = name.charAt(0).toUpperCase() + name.substring(1);\n  }\n\n  if (undefined == MongooseTypes[name]) {\n    throw new TypeError('Undefined type `' + name + '` at `' + path +\n        '`\\n  Did you try nesting Schemas? ' +\n        'You can only nest using refs or arrays.');\n  }\n\n  return new MongooseTypes[name](path, obj);\n};\n\n/**\n * Iterates the schemas paths similar to Array#forEach.\n *\n * The callback is passed the pathname and schemaType as arguments on each iteration.\n *\n * @param {Function} fn callback function\n * @return {Schema} this\n * @api public\n */\n\nSchema.prototype.eachPath = function(fn) {\n  var keys = Object.keys(this.paths),\n      len = keys.length;\n\n  for (var i = 0; i < len; ++i) {\n    fn(keys[i], this.paths[keys[i]]);\n  }\n\n  return this;\n};\n\n/**\n * Returns an Array of path strings that are required by this schema.\n *\n * @api public\n * @param {Boolean} invalidate refresh the cache\n * @return {Array}\n */\n\nSchema.prototype.requiredPaths = function requiredPaths(invalidate) {\n  if (this._requiredpaths && !invalidate) {\n    return this._requiredpaths;\n  }\n\n  var paths = Object.keys(this.paths),\n      i = paths.length,\n      ret = [];\n\n  while (i--) {\n    var path = paths[i];\n    if (this.paths[path].isRequired) {\n      ret.push(path);\n    }\n  }\n  this._requiredpaths = ret;\n  return this._requiredpaths;\n};\n\n/**\n * Returns indexes from fields and schema-level indexes (cached).\n *\n * @api private\n * @return {Array}\n */\n\nSchema.prototype.indexedPaths = function indexedPaths() {\n  if (this._indexedpaths) {\n    return this._indexedpaths;\n  }\n  this._indexedpaths = this.indexes();\n  return this._indexedpaths;\n};\n\n/**\n * Returns the pathType of `path` for this schema.\n *\n * Given a path, returns whether it is a real, virtual, nested, or ad-hoc/undefined path.\n *\n * @param {String} path\n * @return {String}\n * @api public\n */\n\nSchema.prototype.pathType = function(path) {\n  if (path in this.paths) {\n    return 'real';\n  }\n  if (path in this.virtuals) {\n    return 'virtual';\n  }\n  if (path in this.nested) {\n    return 'nested';\n  }\n  if (path in this.subpaths) {\n    return 'real';\n  }\n  if (path in this.singleNestedPaths) {\n    return 'real';\n  }\n\n  if (/\\.\\d+\\.|\\.\\d+$/.test(path)) {\n    return getPositionalPathType(this, path);\n  }\n  return 'adhocOrUndefined';\n};\n\n/**\n * Returns true iff this path is a child of a mixed schema.\n *\n * @param {String} path\n * @return {Boolean}\n * @api private\n */\n\nSchema.prototype.hasMixedParent = function(path) {\n  var subpaths = path.split(/\\./g);\n  path = '';\n  for (var i = 0; i < subpaths.length; ++i) {\n    path = i > 0 ? path + '.' + subpaths[i] : subpaths[i];\n    if (path in this.paths &&\n        this.paths[path] instanceof MongooseTypes.Mixed) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * Setup updatedAt and createdAt timestamps to documents if enabled\n *\n * @param {Boolean|Object} timestamps timestamps options\n * @api private\n */\nSchema.prototype.setupTimestamp = function(timestamps) {\n  if (timestamps) {\n    var createdAt = handleTimestampOption(timestamps, 'createdAt');\n    var updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n    var schemaAdditions = {};\n\n    if (updatedAt && !this.paths[updatedAt]) {\n      schemaAdditions[updatedAt] = Date;\n    }\n\n    if (createdAt && !this.paths[createdAt]) {\n      schemaAdditions[createdAt] = Date;\n    }\n\n    this.add(schemaAdditions);\n\n    this.pre('save', function(next) {\n      var defaultTimestamp = new Date();\n      var auto_id = this._id && this._id.auto;\n\n      if (createdAt != null && !this.get(createdAt) && this.isSelected(createdAt)) {\n        this.set(createdAt, auto_id ? this._id.getTimestamp() : defaultTimestamp);\n      }\n\n      if (updatedAt != null && (this.isNew || this.isModified())) {\n        var ts = defaultTimestamp;\n        if (this.isNew) {\n          if (createdAt != null) {\n            ts = this.get(createdAt);\n          } else if (auto_id) {\n            ts = this._id.getTimestamp();\n          }\n        }\n        this.set(updatedAt, ts);\n      }\n\n      next();\n    });\n\n    var genUpdates = function(currentUpdate, overwrite) {\n      var now = new Date();\n      var updates = {};\n      var _updates = updates;\n      if (overwrite) {\n        if (currentUpdate && currentUpdate.$set) {\n          currentUpdate = currentUpdate.$set;\n          updates.$set = {};\n          _updates = updates.$set;\n        }\n        if (updatedAt != null && !currentUpdate[updatedAt]) {\n          _updates[updatedAt] = now;\n        }\n        if (createdAt != null && !currentUpdate[createdAt]) {\n          _updates[createdAt] = now;\n        }\n        return updates;\n      }\n      updates = { $set: {} };\n      currentUpdate = currentUpdate || {};\n\n      if (updatedAt != null &&\n          (!currentUpdate.$currentDate || !currentUpdate.$currentDate[updatedAt])) {\n        updates.$set[updatedAt] = now;\n      }\n\n      if (createdAt != null) {\n        if (currentUpdate[createdAt]) {\n          delete currentUpdate[createdAt];\n        }\n        if (currentUpdate.$set && currentUpdate.$set[createdAt]) {\n          delete currentUpdate.$set[createdAt];\n        }\n\n        updates.$setOnInsert = {};\n        updates.$setOnInsert[createdAt] = now;\n      }\n\n      return updates;\n    };\n\n    this.methods.initializeTimestamps = function() {\n      if (!this.get(createdAt)) {\n        this.set(createdAt, new Date());\n      }\n      if (!this.get(updatedAt)) {\n        this.set(updatedAt, new Date());\n      }\n      return this;\n    };\n\n    this.pre('findOneAndUpdate', function(next) {\n      var overwrite = this.options.overwrite;\n      this.findOneAndUpdate({}, genUpdates(this.getUpdate(), overwrite), {\n        overwrite: overwrite\n      });\n      applyTimestampsToChildren(this);\n      next();\n    });\n\n    this.pre('update', function(next) {\n      var overwrite = this.options.overwrite;\n      this.update({}, genUpdates(this.getUpdate(), overwrite), {\n        overwrite: overwrite\n      });\n      applyTimestampsToChildren(this);\n      next();\n    });\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleTimestampOption(arg, prop) {\n  if (typeof arg === 'boolean') {\n    return prop;\n  }\n  if (typeof arg[prop] === 'boolean') {\n    return arg[prop] ? prop : null;\n  }\n  if (!(prop in arg)) {\n    return prop;\n  }\n  return arg[prop];\n}\n\n/*!\n * ignore\n */\n\nfunction applyTimestampsToChildren(query) {\n  var now = new Date();\n  var update = query.getUpdate();\n  var keys = Object.keys(update);\n  var key;\n  var schema = query.model.schema;\n  var len;\n  var createdAt;\n  var updatedAt;\n  var timestamps;\n  var path;\n\n  var hasDollarKey = keys.length && keys[0].charAt(0) === '$';\n\n  if (hasDollarKey) {\n    if (update.$push) {\n      for (key in update.$push) {\n        var $path = schema.path(key);\n        if (update.$push[key] &&\n            $path &&\n            $path.$isMongooseDocumentArray &&\n            $path.schema.options.timestamps) {\n          timestamps = $path.schema.options.timestamps;\n          createdAt = handleTimestampOption(timestamps, 'createdAt');\n          updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n          if (update.$push[key].$each) {\n            update.$push[key].$each.forEach(function(subdoc) {\n              if (updatedAt != null) {\n                subdoc[updatedAt] = now;\n              }\n              if (createdAt != null) {\n                subdoc[createdAt] = now;\n              }\n            });\n          } else {\n            if (updatedAt != null) {\n              update.$push[key][updatedAt] = now;\n            }\n            if (createdAt != null) {\n              update.$push[key][createdAt] = now;\n            }\n          }\n        }\n      }\n    }\n    if (update.$set) {\n      for (key in update.$set) {\n        path = schema.path(key);\n        if (!path) {\n          continue;\n        }\n        if (Array.isArray(update.$set[key]) && path.$isMongooseDocumentArray) {\n          len = update.$set[key].length;\n          timestamps = schema.path(key).schema.options.timestamps;\n          if (timestamps) {\n            createdAt = handleTimestampOption(timestamps, 'createdAt');\n            updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n            for (var i = 0; i < len; ++i) {\n              if (updatedAt != null) {\n                update.$set[key][i][updatedAt] = now;\n              }\n              if (createdAt != null) {\n                update.$set[key][i][createdAt] = now;\n              }\n            }\n          }\n        } else if (update.$set[key] && path.$isSingleNested) {\n          timestamps = schema.path(key).schema.options.timestamps;\n          if (timestamps) {\n            createdAt = handleTimestampOption(timestamps, 'createdAt');\n            updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n            if (updatedAt != null) {\n              update.$set[key][updatedAt] = now;\n            }\n            if (createdAt != null) {\n              update.$set[key][createdAt] = now;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction getPositionalPathType(self, path) {\n  var subpaths = path.split(/\\.(\\d+)\\.|\\.(\\d+)$/).filter(Boolean);\n  if (subpaths.length < 2) {\n    return self.paths[subpaths[0]];\n  }\n\n  var val = self.path(subpaths[0]);\n  var isNested = false;\n  if (!val) {\n    return val;\n  }\n\n  var last = subpaths.length - 1,\n      subpath,\n      i = 1;\n\n  for (; i < subpaths.length; ++i) {\n    isNested = false;\n    subpath = subpaths[i];\n\n    if (i === last && val && !/\\D/.test(subpath)) {\n      if (val.$isMongooseDocumentArray) {\n        var oldVal = val;\n        val = new SchemaType(subpath);\n        val.cast = function(value, doc, init) {\n          return oldVal.cast(value, doc, init)[0];\n        };\n        val.caster = oldVal.caster;\n        val.schema = oldVal.schema;\n      } else if (val instanceof MongooseTypes.Array) {\n        // StringSchema, NumberSchema, etc\n        val = val.caster;\n      } else {\n        val = undefined;\n      }\n      break;\n    }\n\n    // ignore if its just a position segment: path.0.subpath\n    if (!/\\D/.test(subpath)) {\n      continue;\n    }\n\n    if (!(val && val.schema)) {\n      val = undefined;\n      break;\n    }\n\n    var type = val.schema.pathType(subpath);\n    isNested = (type === 'nested');\n    val = val.schema.path(subpath);\n  }\n\n  self.subpaths[path] = val;\n  if (val) {\n    return 'real';\n  }\n  if (isNested) {\n    return 'nested';\n  }\n  return 'adhocOrUndefined';\n}\n\n\n/*!\n * ignore\n */\n\nfunction getPositionalPath(self, path) {\n  getPositionalPathType(self, path);\n  return self.subpaths[path];\n}\n\n/**\n * Adds a method call to the queue.\n *\n * @param {String} name name of the document method to call later\n * @param {Array} args arguments to pass to the method\n * @api public\n */\n\nSchema.prototype.queue = function(name, args) {\n  this.callQueue.push([name, args]);\n  return this;\n};\n\n/**\n * Defines a pre hook for the document.\n *\n * ####Example\n *\n *     var toySchema = new Schema(..);\n *\n *     toySchema.pre('save', function (next) {\n *       if (!this.created) this.created = new Date;\n *       next();\n *     })\n *\n *     toySchema.pre('validate', function (next) {\n *       if (this.name !== 'Woody') this.name = 'Woody';\n *       next();\n *     })\n *\n * @param {String} method\n * @param {Function} callback\n * @see hooks.js https://github.com/bnoguchi/hooks-js/tree/31ec571cef0332e21121ee7157e0cf9728572cc3\n * @api public\n */\n\nSchema.prototype.pre = function() {\n  this.s.hooks.pre.apply(this.s.hooks, arguments);\n  return this;\n};\n\n/**\n * Defines a post hook for the document\n *\n *     var schema = new Schema(..);\n *     schema.post('save', function (doc) {\n *       console.log('this fired after a document was saved');\n *     });\n *\n *     schema.post('find', function(docs) {\n *       console.log('this fired after you run a find query');\n *     });\n *\n *     var Model = mongoose.model('Model', schema);\n *\n *     var m = new Model(..);\n *     m.save(function(err) {\n *       console.log('this fires after the `post` hook');\n *     });\n *\n *     m.find(function(err, docs) {\n *       console.log('this fires after the post find hook');\n *     });\n *\n * @param {String} method name of the method to hook\n * @param {Function} fn callback\n * @see middleware http://mongoosejs.com/docs/middleware.html\n * @see kareem http://npmjs.org/package/kareem\n * @api public\n */\n\nSchema.prototype.post = function() {\n  this.s.hooks.post.apply(this.s.hooks, arguments);\n  return this;\n};\n\n/**\n * Registers a plugin for this schema.\n *\n * @param {Function} plugin callback\n * @param {Object} [opts]\n * @see plugins\n * @api public\n */\n\nSchema.prototype.plugin = function(fn, opts) {\n  if (typeof fn !== 'function') {\n    throw new Error('First param to `schema.plugin()` must be a function, ' +\n      'got \"' + (typeof fn) + '\"');\n  }\n\n  if (opts &&\n      opts.deduplicate) {\n    for (var i = 0; i < this.plugins.length; ++i) {\n      if (this.plugins[i].fn === fn) {\n        return this;\n      }\n    }\n  }\n  this.plugins.push({ fn: fn, opts: opts });\n\n  fn(this, opts);\n  return this;\n};\n\n/**\n * Adds an instance method to documents constructed from Models compiled from this schema.\n *\n * ####Example\n *\n *     var schema = kittySchema = new Schema(..);\n *\n *     schema.method('meow', function () {\n *       console.log('meeeeeoooooooooooow');\n *     })\n *\n *     var Kitty = mongoose.model('Kitty', schema);\n *\n *     var fizz = new Kitty;\n *     fizz.meow(); // meeeeeooooooooooooow\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.\n *\n *     schema.method({\n *         purr: function () {}\n *       , scratch: function () {}\n *     });\n *\n *     // later\n *     fizz.purr();\n *     fizz.scratch();\n *\n * @param {String|Object} method name\n * @param {Function} [fn]\n * @api public\n */\n\nSchema.prototype.method = function(name, fn) {\n  if (typeof name !== 'string') {\n    for (var i in name) {\n      this.methods[i] = name[i];\n    }\n  } else {\n    this.methods[name] = fn;\n  }\n  return this;\n};\n\n/**\n * Adds static \"class\" methods to Models compiled from this schema.\n *\n * ####Example\n *\n *     var schema = new Schema(..);\n *     schema.static('findByName', function (name, callback) {\n *       return this.find({ name: name }, callback);\n *     });\n *\n *     var Drink = mongoose.model('Drink', schema);\n *     Drink.findByName('sanpellegrino', function (err, drinks) {\n *       //\n *     });\n *\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as statics.\n *\n * @param {String|Object} name\n * @param {Function} [fn]\n * @api public\n */\n\nSchema.prototype.static = function(name, fn) {\n  if (typeof name !== 'string') {\n    for (var i in name) {\n      this.statics[i] = name[i];\n    }\n  } else {\n    this.statics[name] = fn;\n  }\n  return this;\n};\n\n/**\n * Defines an index (most likely compound) for this schema.\n *\n * ####Example\n *\n *     schema.index({ first: 1, last: -1 })\n *\n * @param {Object} fields\n * @param {Object} [options] Options to pass to [MongoDB driver's `createIndex()` function](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#createIndex)\n * @param {String} [options.expires=null] Mongoose-specific syntactic sugar, uses [ms](https://www.npmjs.com/package/ms) to convert `expires` option into seconds for the `expireAfterSeconds` in the above link.\n * @api public\n */\n\nSchema.prototype.index = function(fields, options) {\n  fields || (fields = {});\n  options || (options = {});\n\n  if (options.expires) {\n    utils.expires(options);\n  }\n\n  this._indexes.push([fields, options]);\n  return this;\n};\n\n/**\n * Sets/gets a schema option.\n *\n * ####Example\n *\n *     schema.set('strict'); // 'true' by default\n *     schema.set('strict', false); // Sets 'strict' to false\n *     schema.set('strict'); // 'false'\n *\n * @param {String} key option name\n * @param {Object} [value] if not passed, the current option value is returned\n * @see Schema ./\n * @api public\n */\n\nSchema.prototype.set = function(key, value, _tags) {\n  if (arguments.length === 1) {\n    return this.options[key];\n  }\n\n  switch (key) {\n    case 'read':\n      this.options[key] = readPref(value, _tags);\n      break;\n    case 'safe':\n      this.options[key] = value === false\n        ? {w: 0}\n        : value;\n      break;\n    case 'timestamps':\n      this.setupTimestamp(value);\n      this.options[key] = value;\n      break;\n    default:\n      this.options[key] = value;\n  }\n\n  return this;\n};\n\n/**\n * Gets a schema option.\n *\n * @param {String} key option name\n * @api public\n */\n\nSchema.prototype.get = function(key) {\n  return this.options[key];\n};\n\n/**\n * The allowed index types\n *\n * @static indexTypes\n * @receiver Schema\n * @api public\n */\n\nvar indexTypes = '2d 2dsphere hashed text'.split(' ');\n\nObject.defineProperty(Schema, 'indexTypes', {\n  get: function() {\n    return indexTypes;\n  },\n  set: function() {\n    throw new Error('Cannot overwrite Schema.indexTypes');\n  }\n});\n\n/**\n * Returns a list of indexes that this schema declares, via `schema.index()`\n * or by `index: true` in a path's options.\n *\n * @api public\n */\n\nSchema.prototype.indexes = function() {\n  'use strict';\n\n  var indexes = [];\n  var schemaStack = [];\n\n  var collectIndexes = function(schema, prefix) {\n    // Ignore infinitely nested schemas, if we've already seen this schema\n    // along this path there must be a cycle\n    if (schemaStack.indexOf(schema) !== -1) {\n      return;\n    }\n    schemaStack.push(schema);\n\n    prefix = prefix || '';\n    var key, path, index, field, isObject, options, type;\n    var keys = Object.keys(schema.paths);\n\n    for (var i = 0; i < keys.length; ++i) {\n      key = keys[i];\n      path = schema.paths[key];\n\n      if ((path instanceof MongooseTypes.DocumentArray) || path.$isSingleNested) {\n        if (path.options.excludeIndexes !== true) {\n          collectIndexes(path.schema, prefix + key + '.');\n        }\n\n        // Retained to minimize risk of backwards breaking changes due to\n        // gh-6113\n        if ((path instanceof MongooseTypes.DocumentArray)) {\n          continue;\n        }\n      }\n\n      index = path._index || (path.caster && path.caster._index);\n\n      if (index !== false && index !== null && index !== undefined) {\n        field = {};\n        isObject = utils.isObject(index);\n        options = isObject ? index : {};\n        type = typeof index === 'string' ? index :\n          isObject ? index.type :\n            false;\n\n        if (type && ~Schema.indexTypes.indexOf(type)) {\n          field[prefix + key] = type;\n        } else if (options.text) {\n          field[prefix + key] = 'text';\n          delete options.text;\n        } else {\n          field[prefix + key] = 1;\n        }\n\n        delete options.type;\n        if (!('background' in options)) {\n          options.background = true;\n        }\n\n        indexes.push([field, options]);\n      }\n    }\n\n    schemaStack.pop();\n\n    if (prefix) {\n      fixSubIndexPaths(schema, prefix);\n    } else {\n      schema._indexes.forEach(function(index) {\n        if (!('background' in index[1])) {\n          index[1].background = true;\n        }\n      });\n      indexes = indexes.concat(schema._indexes);\n    }\n  };\n\n  collectIndexes(this);\n  return indexes;\n\n  /*!\n   * Checks for indexes added to subdocs using Schema.index().\n   * These indexes need their paths prefixed properly.\n   *\n   * schema._indexes = [ [indexObj, options], [indexObj, options] ..]\n   */\n\n  function fixSubIndexPaths(schema, prefix) {\n    var subindexes = schema._indexes,\n        len = subindexes.length,\n        indexObj,\n        newindex,\n        klen,\n        keys,\n        key,\n        i = 0,\n        j;\n\n    for (i = 0; i < len; ++i) {\n      indexObj = subindexes[i][0];\n      keys = Object.keys(indexObj);\n      klen = keys.length;\n      newindex = {};\n\n      // use forward iteration, order matters\n      for (j = 0; j < klen; ++j) {\n        key = keys[j];\n        newindex[prefix + key] = indexObj[key];\n      }\n\n      indexes.push([newindex, subindexes[i][1]]);\n    }\n  }\n};\n\n/**\n * Creates a virtual type with the given name.\n *\n * @param {String} name\n * @param {Object} [options]\n * @return {VirtualType}\n */\n\nSchema.prototype.virtual = function(name, options) {\n  if (options && options.ref) {\n    if (!options.localField) {\n      throw new Error('Reference virtuals require `localField` option');\n    }\n\n    if (!options.foreignField) {\n      throw new Error('Reference virtuals require `foreignField` option');\n    }\n\n    this.pre('init', function(obj) {\n      if (mpath.has(name, obj)) {\n        var _v = mpath.get(name, obj);\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n\n        if (options.justOne) {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v[0] :\n            _v;\n        } else {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v :\n            _v == null ? [] : [_v];\n        }\n\n        mpath.unset(name, obj);\n      }\n    });\n\n    var virtual = this.virtual(name);\n    virtual.options = options;\n    return virtual.\n      get(function() {\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n        if (name in this.$$populatedVirtuals) {\n          return this.$$populatedVirtuals[name];\n        }\n        return null;\n      }).\n      set(function(_v) {\n        if (!this.$$populatedVirtuals) {\n          this.$$populatedVirtuals = {};\n        }\n\n        if (options.justOne) {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v[0] :\n            _v;\n\n          if (typeof this.$$populatedVirtuals[name] !== 'object') {\n            this.$$populatedVirtuals[name] = null;\n          }\n        } else {\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\n            _v :\n            _v == null ? [] : [_v];\n\n          this.$$populatedVirtuals[name] = this.$$populatedVirtuals[name].filter(function(doc) {\n            return doc && typeof doc === 'object';\n          });\n        }\n      });\n  }\n\n  var virtuals = this.virtuals;\n  var parts = name.split('.');\n\n  if (this.pathType(name) === 'real') {\n    throw new Error('Virtual path \"' + name + '\"' +\n      ' conflicts with a real path in the schema');\n  }\n\n  virtuals[name] = parts.reduce(function(mem, part, i) {\n    mem[part] || (mem[part] = (i === parts.length - 1)\n      ? new VirtualType(options, name)\n      : {});\n    return mem[part];\n  }, this.tree);\n\n  return virtuals[name];\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getVirtual = function(name) {\n  return _getVirtual(this, name);\n};\n\n/*!\n * ignore\n */\n\nfunction _getVirtual(schema, name) {\n  if (schema.virtuals[name]) {\n    return schema.virtuals[name];\n  }\n  var parts = name.split('.');\n  var cur = '';\n  var nestedSchemaPath = '';\n  for (var i = 0; i < parts.length; ++i) {\n    cur += (cur.length > 0 ? '.' : '') + parts[i];\n    if (schema.virtuals[cur]) {\n      if (i === parts.length - 1) {\n        schema.virtuals[cur].$nestedSchemaPath = nestedSchemaPath;\n        return schema.virtuals[cur];\n      }\n      continue;\n    } else if (schema.paths[cur] && schema.paths[cur].schema) {\n      schema = schema.paths[cur].schema;\n      nestedSchemaPath += (nestedSchemaPath.length > 0 ? '.' : '') + cur;\n      cur = '';\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns the virtual type with the given `name`.\n *\n * @param {String} name\n * @return {VirtualType}\n */\n\nSchema.prototype.virtualpath = function(name) {\n  return this.virtuals[name];\n};\n\n/**\n * Removes the given `path` (or [`paths`]).\n *\n * @param {String|Array} path\n *\n * @api public\n */\nSchema.prototype.remove = function(path) {\n  if (typeof path === 'string') {\n    path = [path];\n  }\n  if (Array.isArray(path)) {\n    path.forEach(function(name) {\n      if (this.path(name)) {\n        delete this.paths[name];\n\n        var pieces = name.split('.');\n        var last = pieces.pop();\n        var branch = this.tree;\n        for (var i = 0; i < pieces.length; ++i) {\n          branch = branch[pieces[i]];\n        }\n        delete branch[last];\n      }\n    }, this);\n  }\n};\n\n/**\n * Loads an ES6 class into a schema. Maps setters + getters, static methods, and instance methods to schema virtuals, statics, and methods.\n *\n * @param {Function} model\n */\nSchema.prototype.loadClass = function(model, virtualsOnly) {\n  if (model === Object.prototype ||\n      model === Function.prototype ||\n      model.prototype.hasOwnProperty('$isMongooseModelPrototype')) {\n    return this;\n  }\n\n  this.loadClass(Object.getPrototypeOf(model));\n\n  // Add static methods\n  if (!virtualsOnly) {\n    Object.getOwnPropertyNames(model).forEach(function(name) {\n      if (name.match(/^(length|name|prototype)$/)) {\n        return;\n      }\n      var method = Object.getOwnPropertyDescriptor(model, name);\n      if (typeof method.value === 'function') {\n        this.static(name, method.value);\n      }\n    }, this);\n  }\n\n  // Add methods and virtuals\n  Object.getOwnPropertyNames(model.prototype).forEach(function(name) {\n    if (name.match(/^(constructor)$/)) {\n      return;\n    }\n    var method = Object.getOwnPropertyDescriptor(model.prototype, name);\n    if (!virtualsOnly) {\n      if (typeof method.value === 'function') {\n        this.method(name, method.value);\n      }\n    }\n    if (typeof method.get === 'function') {\n      this.virtual(name).get(method.get);\n    }\n    if (typeof method.set === 'function') {\n      this.virtual(name).set(method.set);\n    }\n  }, this);\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getSchema = function(path) {\n  var _this = this;\n  var pathschema = _this.path(path);\n  var resultPath = [];\n\n  if (pathschema) {\n    pathschema.$fullPath = path;\n    return pathschema;\n  }\n\n  function search(parts, schema) {\n    var p = parts.length + 1;\n    var foundschema;\n    var trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        resultPath.push(trypath);\n\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            foundschema.caster.$fullPath = resultPath.join('.');\n            return foundschema.caster;\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length && foundschema.schema) {\n            var ret;\n            if (parts[p] === '$' || isArrayFilter(parts[p])) {\n              if (p + 1 === parts.length) {\n                // comments.$\n                return foundschema;\n              }\n              // comments.$.comments.$.title\n              ret = search(parts.slice(p + 1), foundschema.schema);\n              if (ret) {\n                ret.$isUnderneathDocArray = ret.$isUnderneathDocArray ||\n                  !foundschema.schema.$isSingleNested;\n              }\n              return ret;\n            }\n            // this is the last path of the selector\n            ret = search(parts.slice(p), foundschema.schema);\n            if (ret) {\n              ret.$isUnderneathDocArray = ret.$isUnderneathDocArray ||\n                !foundschema.schema.$isSingleNested;\n            }\n            return ret;\n          }\n        }\n\n        foundschema.$fullPath = resultPath.join('.');\n\n        return foundschema;\n      }\n    }\n  }\n\n  // look for arrays\n  var parts = path.split('.');\n  for (var i = 0; i < parts.length; ++i) {\n    if (parts[i] === '$' || isArrayFilter(parts[i])) {\n      // Re: gh-5628, because `schema.path()` doesn't take $ into account.\n      parts[i] = '0';\n    }\n  }\n  return search(parts, _this);\n};\n\n/*!\n * ignore\n */\n\nSchema.prototype._getPathType = function(path) {\n  var _this = this;\n  var pathschema = _this.path(path);\n\n  if (pathschema) {\n    return 'real';\n  }\n\n  function search(parts, schema) {\n    var p = parts.length + 1,\n        foundschema,\n        trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\n            return { schema: foundschema, pathType: 'mixed' };\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length && foundschema.schema) {\n            if (parts[p] === '$' || isArrayFilter(parts[p])) {\n              if (p === parts.length - 1) {\n                return { schema: foundschema, pathType: 'nested' };\n              }\n              // comments.$.comments.$.title\n              return search(parts.slice(p + 1), foundschema.schema);\n            }\n            // this is the last path of the selector\n            return search(parts.slice(p), foundschema.schema);\n          }\n          return {\n            schema: foundschema,\n            pathType: foundschema.$isSingleNested ? 'nested' : 'array'\n          };\n        }\n        return { schema: foundschema, pathType: 'real' };\n      } else if (p === parts.length && schema.nested[trypath]) {\n        return { schema: schema, pathType: 'nested' };\n      }\n    }\n    return { schema: foundschema || schema, pathType: 'undefined' };\n  }\n\n  // look for arrays\n  return search(path.split('.'), _this);\n};\n\n/*!\n * ignore\n */\n\nfunction isArrayFilter(piece) {\n  return piece.indexOf('$[') === 0 &&\n    piece.lastIndexOf(']') === piece.length - 1;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = Schema;\n\n// require down here because of reference issues\n\n/**\n * The various built-in Mongoose Schema Types.\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *     var ObjectId = mongoose.Schema.Types.ObjectId;\n *\n * ####Types:\n *\n * - [String](#schema-string-js)\n * - [Number](#schema-number-js)\n * - [Boolean](#schema-boolean-js) | Bool\n * - [Array](#schema-array-js)\n * - [Buffer](#schema-buffer-js)\n * - [Date](#schema-date-js)\n * - [ObjectId](#schema-objectid-js) | Oid\n * - [Mixed](#schema-mixed-js)\n *\n * Using this exposed access to the `Mixed` SchemaType, we can use them in our schema.\n *\n *     var Mixed = mongoose.Schema.Types.Mixed;\n *     new mongoose.Schema({ _user: Mixed })\n *\n * @api public\n */\n\nSchema.Types = MongooseTypes = require('./schema/index');\n\n/*!\n * ignore\n */\n\nexports.ObjectId = MongooseTypes.ObjectId;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/schema.js\n// module id = 57\n// module chunks = 0","/*!\n * Module dependencies.\n */\n\nvar SchemaType = require('../schematype');\nvar utils = require('../utils');\n\n/**\n * Mixed SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction Mixed(path, options) {\n  if (options && options.default) {\n    var def = options.default;\n    if (Array.isArray(def) && def.length === 0) {\n      // make sure empty array defaults are handled\n      options.default = Array;\n    } else if (!options.shared && utils.isObject(def) && Object.keys(def).length === 0) {\n      // prevent odd \"shared\" objects between documents\n      options.default = function() {\n        return {};\n      };\n    }\n  }\n\n  SchemaType.call(this, path, options, 'Mixed');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nMixed.schemaName = 'Mixed';\n\n/*!\n * Inherits from SchemaType.\n */\nMixed.prototype = Object.create(SchemaType.prototype);\nMixed.prototype.constructor = Mixed;\n\n/**\n * Casts `val` for Mixed.\n *\n * _this is a no-op_\n *\n * @param {Object} value to cast\n * @api private\n */\n\nMixed.prototype.cast = function(val) {\n  return val;\n};\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $cond\n * @param {any} [val]\n * @api private\n */\n\nMixed.prototype.castForQuery = function($cond, val) {\n  if (arguments.length === 2) {\n    return val;\n  }\n  return $cond;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = Mixed;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/schema/mixed.js\n// module id = 58\n// module chunks = 0","/* eslint no-func-assign: 1 */\n\n/*!\n * Module dependencies.\n */\n\nconst Document = require('../document_provider')();\nconst EventEmitter = require('events').EventEmitter;\nconst internalToObjectOptions = require('../options').internalToObjectOptions;\nconst utils = require('../utils');\n\n/**\n * EmbeddedDocument constructor.\n *\n * @param {Object} obj js object returned from the db\n * @param {MongooseDocumentArray} parentArr the parent array of this document\n * @param {Boolean} skipId\n * @inherits Document\n * @api private\n */\n\nfunction EmbeddedDocument(obj, parentArr, skipId, fields, index) {\n  if (parentArr) {\n    this.__parentArray = parentArr;\n    this.__parent = parentArr._parent;\n  } else {\n    this.__parentArray = undefined;\n    this.__parent = undefined;\n  }\n  this.__index = index;\n\n  Document.call(this, obj, fields, skipId);\n\n  var _this = this;\n  this.on('isNew', function(val) {\n    _this.isNew = val;\n  });\n\n  _this.on('save', function() {\n    _this.constructor.emit('save', _this);\n  });\n}\n\n/*!\n * Inherit from Document\n */\nEmbeddedDocument.prototype = Object.create(Document.prototype);\nEmbeddedDocument.prototype.constructor = EmbeddedDocument;\n\nfor (var i in EventEmitter.prototype) {\n  EmbeddedDocument[i] = EventEmitter.prototype[i];\n}\n\nEmbeddedDocument.prototype.toBSON = function() {\n  return this.toObject(internalToObjectOptions);\n};\n\n/**\n * Marks the embedded doc modified.\n *\n * ####Example:\n *\n *     var doc = blogpost.comments.id(hexstring);\n *     doc.mixed.type = 'changed';\n *     doc.markModified('mixed.type');\n *\n * @param {String} path the path which changed\n * @api public\n * @receiver EmbeddedDocument\n */\n\nEmbeddedDocument.prototype.markModified = function(path) {\n  this.$__.activePaths.modify(path);\n  if (!this.__parentArray) {\n    return;\n  }\n\n  if (this.isNew) {\n    // Mark the WHOLE parent array as modified\n    // if this is a new document (i.e., we are initializing\n    // a document),\n    this.__parentArray._markModified();\n  } else {\n    this.__parentArray._markModified(this, path);\n  }\n};\n\n/*!\n * ignore\n */\n\nEmbeddedDocument.prototype.populate = function() {\n  throw new Error('Mongoose does not support calling populate() on nested ' +\n    'docs. Instead of `doc.arr[0].populate(\"path\")`, use ' +\n    '`doc.populate(\"arr.0.path\")`');\n};\n\n/**\n * Used as a stub for [hooks.js](https://github.com/bnoguchi/hooks-js/tree/31ec571cef0332e21121ee7157e0cf9728572cc3)\n *\n * ####NOTE:\n *\n * _This is a no-op. Does not actually save the doc to the db._\n *\n * @param {Function} [fn]\n * @return {Promise} resolved Promise\n * @api private\n */\n\nEmbeddedDocument.prototype.save = function(fn) {\n  return utils.promiseOrCallback(fn, cb => {\n    this.$__save(cb);\n  });\n};\n\n/**\n * Used as a stub for middleware\n *\n * ####NOTE:\n *\n * _This is a no-op. Does not actually save the doc to the db._\n *\n * @param {Function} [fn]\n * @method $__save\n * @api private\n */\n\nEmbeddedDocument.prototype.$__save = function(fn) {\n  return utils.immediate(() => fn(null, this));\n};\n\n/*!\n * Registers remove event listeners for triggering\n * on subdocuments.\n *\n * @param {EmbeddedDocument} sub\n * @api private\n */\n\nfunction registerRemoveListener(sub) {\n  var owner = sub.ownerDocument();\n\n  function emitRemove() {\n    owner.removeListener('save', emitRemove);\n    owner.removeListener('remove', emitRemove);\n    sub.emit('remove', sub);\n    sub.constructor.emit('remove', sub);\n    owner = sub = null;\n  }\n\n  owner.on('save', emitRemove);\n  owner.on('remove', emitRemove);\n}\n\n/*!\n * no-op for hooks\n */\n\nEmbeddedDocument.prototype.$__remove = function(cb) {\n  return cb(null, this);\n};\n\n/**\n * Removes the subdocument from its parent array.\n *\n * @param {Object} [options]\n * @param {Function} [fn]\n * @api public\n */\n\nEmbeddedDocument.prototype.remove = function(options, fn) {\n  if ( typeof options === 'function' && !fn ) {\n    fn = options;\n    options = undefined;\n  }\n  if (!this.__parentArray || (options && options.noop)) {\n    fn && fn(null);\n    return this;\n  }\n\n  var _id;\n  if (!this.willRemove) {\n    _id = this._doc._id;\n    if (!_id) {\n      throw new Error('For your own good, Mongoose does not know ' +\n          'how to remove an EmbeddedDocument that has no _id');\n    }\n    this.__parentArray.pull({_id: _id});\n    this.willRemove = true;\n    registerRemoveListener(this);\n  }\n\n  if (fn) {\n    fn(null);\n  }\n\n  return this;\n};\n\n/**\n * Override #update method of parent documents.\n * @api private\n */\n\nEmbeddedDocument.prototype.update = function() {\n  throw new Error('The #update method is not available on EmbeddedDocuments');\n};\n\n/**\n * Helper for console.log\n *\n * @api public\n */\n\nEmbeddedDocument.prototype.inspect = function() {\n  return this.toObject({\n    transform: false,\n    virtuals: false,\n    flattenDecimals: false\n  });\n};\n\n/**\n * Marks a path as invalid, causing validation to fail.\n *\n * @param {String} path the field to invalidate\n * @param {String|Error} err error which states the reason `path` was invalid\n * @return {Boolean}\n * @api public\n */\n\nEmbeddedDocument.prototype.invalidate = function(path, err, val, first) {\n  if (!this.__parent) {\n    Document.prototype.invalidate.call(this, path, err, val);\n    if (err.$isValidatorError) {\n      return true;\n    }\n    throw err;\n  }\n\n  var index = this.__index;\n  if (typeof index !== 'undefined') {\n    var parentPath = this.__parentArray._path;\n    var fullPath = [parentPath, index, path].join('.');\n    this.__parent.invalidate(fullPath, err, val);\n  }\n\n  if (first) {\n    this.$__.validationError = this.ownerDocument().$__.validationError;\n  }\n\n  return true;\n};\n\n/**\n * Marks a path as valid, removing existing validation errors.\n *\n * @param {String} path the field to mark as valid\n * @api private\n * @method $markValid\n * @receiver EmbeddedDocument\n */\n\nEmbeddedDocument.prototype.$markValid = function(path) {\n  if (!this.__parent) {\n    return;\n  }\n\n  var index = this.__index;\n  if (typeof index !== 'undefined') {\n    var parentPath = this.__parentArray._path;\n    var fullPath = [parentPath, index, path].join('.');\n    this.__parent.$markValid(fullPath);\n  }\n};\n\n/**\n * Checks if a path is invalid\n *\n * @param {String} path the field to check\n * @api private\n * @method $isValid\n * @receiver EmbeddedDocument\n */\n\nEmbeddedDocument.prototype.$isValid = function(path) {\n  var index = this.__index;\n  if (typeof index !== 'undefined' && this.__parent) {\n    return !this.__parent.$__.validationError ||\n      !this.__parent.$__.validationError.errors[this.$__fullPath(path)];\n  }\n\n  return true;\n};\n\n/**\n * Returns the top level document of this sub-document.\n *\n * @return {Document}\n */\n\nEmbeddedDocument.prototype.ownerDocument = function() {\n  if (this.$__.ownerDocument) {\n    return this.$__.ownerDocument;\n  }\n\n  var parent = this.__parent;\n  if (!parent) {\n    return this;\n  }\n\n  while (parent.__parent || parent.$parent) {\n    parent = parent.__parent || parent.$parent;\n  }\n\n  this.$__.ownerDocument = parent;\n  return this.$__.ownerDocument;\n};\n\n/**\n * Returns the full path to this document. If optional `path` is passed, it is appended to the full path.\n *\n * @param {String} [path]\n * @return {String}\n * @api private\n * @method $__fullPath\n * @memberOf EmbeddedDocument\n */\n\nEmbeddedDocument.prototype.$__fullPath = function(path) {\n  if (!this.$__.fullPath) {\n    var parent = this; // eslint-disable-line consistent-this\n    if (!parent.__parent) {\n      return path;\n    }\n\n    var paths = [];\n    while (parent.__parent || parent.$parent) {\n      if (parent.__parent) {\n        paths.unshift(parent.__parentArray._path);\n      } else {\n        paths.unshift(parent.$basePath);\n      }\n      parent = parent.__parent || parent.$parent;\n    }\n\n    this.$__.fullPath = paths.join('.');\n\n    if (!this.$__.ownerDocument) {\n      // optimization\n      this.$__.ownerDocument = parent;\n    }\n  }\n\n  return path\n    ? this.$__.fullPath + '.' + path\n    : this.$__.fullPath;\n};\n\n/**\n * Returns this sub-documents parent document.\n *\n * @api public\n */\n\nEmbeddedDocument.prototype.parent = function() {\n  return this.__parent;\n};\n\n/**\n * Returns this sub-documents parent array.\n *\n * @api public\n */\n\nEmbeddedDocument.prototype.parentArray = function() {\n  return this.__parentArray;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = EmbeddedDocument;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/types/embedded.js\n// module id = 59\n// module chunks = 0","\n/*!\n * Module exports.\n */\n\nexports.Array = require('./array');\nexports.Buffer = require('./buffer');\n\nexports.Document = // @deprecate\nexports.Embedded = require('./embedded');\n\nexports.DocumentArray = require('./documentarray');\nexports.Decimal128 = require('./decimal128');\nexports.ObjectId = require('./objectid');\n\nexports.Subdocument = require('./subdocument');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/types/index.js\n// module id = 60\n// module chunks = 0","module.exports = exports = require('./lib');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mpath@0.3.0@mpath/index.js\n// module id = 61\n// module chunks = 0","/**\n * A class representation of the BSON Code type.\n *\n * @class\n * @param {(string|function)} code a string or function.\n * @param {Object} [scope] an optional scope for the function.\n * @return {Code}\n */\nvar Code = function Code(code, scope) {\n  if (!(this instanceof Code)) return new Code(code, scope);\n  this._bsontype = 'Code';\n  this.code = code;\n  this.scope = scope;\n};\n\n/**\n * @ignore\n */\nCode.prototype.toJSON = function() {\n  return { scope: this.scope, code: this.code };\n};\n\nmodule.exports = Code;\nmodule.exports.Code = Code;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_bson@1.0.6@bson/lib/bson/code.js\n// module id = 62\n// module chunks = 0","/**\n * A class representation of the BSON DBRef type.\n *\n * @class\n * @param {string} namespace the collection name.\n * @param {ObjectID} oid the reference ObjectID.\n * @param {string} [db] optional db name, if omitted the reference is local to the current db.\n * @return {DBRef}\n */\nfunction DBRef(namespace, oid, db) {\n  if (!(this instanceof DBRef)) return new DBRef(namespace, oid, db);\n\n  this._bsontype = 'DBRef';\n  this.namespace = namespace;\n  this.oid = oid;\n  this.db = db;\n}\n\n/**\n * @ignore\n * @api private\n */\nDBRef.prototype.toJSON = function() {\n  return {\n    $ref: this.namespace,\n    $id: this.oid,\n    $db: this.db == null ? '' : this.db\n  };\n};\n\nmodule.exports = DBRef;\nmodule.exports.DBRef = DBRef;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_bson@1.0.6@bson/lib/bson/db_ref.js\n// module id = 63\n// module chunks = 0","'use strict';\n\nvar Long = require('./long');\n\nvar PARSE_STRING_REGEXP = /^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$/;\nvar PARSE_INF_REGEXP = /^(\\+|-)?(Infinity|inf)$/i;\nvar PARSE_NAN_REGEXP = /^(\\+|-)?NaN$/i;\n\nvar EXPONENT_MAX = 6111;\nvar EXPONENT_MIN = -6176;\nvar EXPONENT_BIAS = 6176;\nvar MAX_DIGITS = 34;\n\n// Nan value bits as 32 bit values (due to lack of longs)\nvar NAN_BUFFER = [\n  0x7c,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00\n].reverse();\n// Infinity value bits 32 bit values (due to lack of longs)\nvar INF_NEGATIVE_BUFFER = [\n  0xf8,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00\n].reverse();\nvar INF_POSITIVE_BUFFER = [\n  0x78,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00,\n  0x00\n].reverse();\n\nvar EXPONENT_REGEX = /^([-+])?(\\d+)?$/;\n\n// Detect if the value is a digit\nvar isDigit = function(value) {\n  return !isNaN(parseInt(value, 10));\n};\n\n// Divide two uint128 values\nvar divideu128 = function(value) {\n  var DIVISOR = Long.fromNumber(1000 * 1000 * 1000);\n  var _rem = Long.fromNumber(0);\n  var i = 0;\n\n  if (!value.parts[0] && !value.parts[1] && !value.parts[2] && !value.parts[3]) {\n    return { quotient: value, rem: _rem };\n  }\n\n  for (i = 0; i <= 3; i++) {\n    // Adjust remainder to match value of next dividend\n    _rem = _rem.shiftLeft(32);\n    // Add the divided to _rem\n    _rem = _rem.add(new Long(value.parts[i], 0));\n    value.parts[i] = _rem.div(DIVISOR).low_;\n    _rem = _rem.modulo(DIVISOR);\n  }\n\n  return { quotient: value, rem: _rem };\n};\n\n// Multiply two Long values and return the 128 bit value\nvar multiply64x2 = function(left, right) {\n  if (!left && !right) {\n    return { high: Long.fromNumber(0), low: Long.fromNumber(0) };\n  }\n\n  var leftHigh = left.shiftRightUnsigned(32);\n  var leftLow = new Long(left.getLowBits(), 0);\n  var rightHigh = right.shiftRightUnsigned(32);\n  var rightLow = new Long(right.getLowBits(), 0);\n\n  var productHigh = leftHigh.multiply(rightHigh);\n  var productMid = leftHigh.multiply(rightLow);\n  var productMid2 = leftLow.multiply(rightHigh);\n  var productLow = leftLow.multiply(rightLow);\n\n  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n  productMid = new Long(productMid.getLowBits(), 0)\n    .add(productMid2)\n    .add(productLow.shiftRightUnsigned(32));\n\n  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n  productLow = productMid.shiftLeft(32).add(new Long(productLow.getLowBits(), 0));\n\n  // Return the 128 bit result\n  return { high: productHigh, low: productLow };\n};\n\nvar lessThan = function(left, right) {\n  // Make values unsigned\n  var uhleft = left.high_ >>> 0;\n  var uhright = right.high_ >>> 0;\n\n  // Compare high bits first\n  if (uhleft < uhright) {\n    return true;\n  } else if (uhleft === uhright) {\n    var ulleft = left.low_ >>> 0;\n    var ulright = right.low_ >>> 0;\n    if (ulleft < ulright) return true;\n  }\n\n  return false;\n};\n\n// var longtoHex = function(value) {\n//   var buffer = new Buffer(8);\n//   var index = 0;\n//   // Encode the low 64 bits of the decimal\n//   // Encode low bits\n//   buffer[index++] = value.low_ & 0xff;\n//   buffer[index++] = (value.low_ >> 8) & 0xff;\n//   buffer[index++] = (value.low_ >> 16) & 0xff;\n//   buffer[index++] = (value.low_ >> 24) & 0xff;\n//   // Encode high bits\n//   buffer[index++] = value.high_ & 0xff;\n//   buffer[index++] = (value.high_ >> 8) & 0xff;\n//   buffer[index++] = (value.high_ >> 16) & 0xff;\n//   buffer[index++] = (value.high_ >> 24) & 0xff;\n//   return buffer.reverse().toString('hex');\n// };\n\n// var int32toHex = function(value) {\n//   var buffer = new Buffer(4);\n//   var index = 0;\n//   // Encode the low 64 bits of the decimal\n//   // Encode low bits\n//   buffer[index++] = value & 0xff;\n//   buffer[index++] = (value >> 8) & 0xff;\n//   buffer[index++] = (value >> 16) & 0xff;\n//   buffer[index++] = (value >> 24) & 0xff;\n//   return buffer.reverse().toString('hex');\n// };\n\n/**\n * A class representation of the BSON Decimal128 type.\n *\n * @class\n * @param {Buffer} bytes a buffer containing the raw Decimal128 bytes.\n * @return {Double}\n */\nvar Decimal128 = function(bytes) {\n  this._bsontype = 'Decimal128';\n  this.bytes = bytes;\n};\n\n/**\n * Create a Decimal128 instance from a string representation\n *\n * @method\n * @param {string} string a numeric string representation.\n * @return {Decimal128} returns a Decimal128 instance.\n */\nDecimal128.fromString = function(string) {\n  // Parse state tracking\n  var isNegative = false;\n  var sawRadix = false;\n  var foundNonZero = false;\n\n  // Total number of significant digits (no leading or trailing zero)\n  var significantDigits = 0;\n  // Total number of significand digits read\n  var nDigitsRead = 0;\n  // Total number of digits (no leading zeros)\n  var nDigits = 0;\n  // The number of the digits after radix\n  var radixPosition = 0;\n  // The index of the first non-zero in *str*\n  var firstNonZero = 0;\n\n  // Digits Array\n  var digits = [0];\n  // The number of digits in digits\n  var nDigitsStored = 0;\n  // Insertion pointer for digits\n  var digitsInsert = 0;\n  // The index of the first non-zero digit\n  var firstDigit = 0;\n  // The index of the last digit\n  var lastDigit = 0;\n\n  // Exponent\n  var exponent = 0;\n  // loop index over array\n  var i = 0;\n  // The high 17 digits of the significand\n  var significandHigh = [0, 0];\n  // The low 17 digits of the significand\n  var significandLow = [0, 0];\n  // The biased exponent\n  var biasedExponent = 0;\n\n  // Read index\n  var index = 0;\n\n  // Trim the string\n  string = string.trim();\n\n  // Naively prevent against REDOS attacks.\n  // TODO: implementing a custom parsing for this, or refactoring the regex would yield\n  //       further gains.\n  if (string.length >= 7000) {\n    throw new Error('' + string + ' not a valid Decimal128 string');\n  }\n\n  // Results\n  var stringMatch = string.match(PARSE_STRING_REGEXP);\n  var infMatch = string.match(PARSE_INF_REGEXP);\n  var nanMatch = string.match(PARSE_NAN_REGEXP);\n\n  // Validate the string\n  if ((!stringMatch && !infMatch && !nanMatch) || string.length === 0) {\n    throw new Error('' + string + ' not a valid Decimal128 string');\n  }\n\n  // Check if we have an illegal exponent format\n  if (stringMatch && stringMatch[4] && stringMatch[2] === undefined) {\n    throw new Error('' + string + ' not a valid Decimal128 string');\n  }\n\n  // Get the negative or positive sign\n  if (string[index] === '+' || string[index] === '-') {\n    isNegative = string[index++] === '-';\n  }\n\n  // Check if user passed Infinity or NaN\n  if (!isDigit(string[index]) && string[index] !== '.') {\n    if (string[index] === 'i' || string[index] === 'I') {\n      return new Decimal128(new Buffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n    } else if (string[index] === 'N') {\n      return new Decimal128(new Buffer(NAN_BUFFER));\n    }\n  }\n\n  // Read all the digits\n  while (isDigit(string[index]) || string[index] === '.') {\n    if (string[index] === '.') {\n      if (sawRadix) {\n        return new Decimal128(new Buffer(NAN_BUFFER));\n      }\n\n      sawRadix = true;\n      index = index + 1;\n      continue;\n    }\n\n    if (nDigitsStored < 34) {\n      if (string[index] !== '0' || foundNonZero) {\n        if (!foundNonZero) {\n          firstNonZero = nDigitsRead;\n        }\n\n        foundNonZero = true;\n\n        // Only store 34 digits\n        digits[digitsInsert++] = parseInt(string[index], 10);\n        nDigitsStored = nDigitsStored + 1;\n      }\n    }\n\n    if (foundNonZero) {\n      nDigits = nDigits + 1;\n    }\n\n    if (sawRadix) {\n      radixPosition = radixPosition + 1;\n    }\n\n    nDigitsRead = nDigitsRead + 1;\n    index = index + 1;\n  }\n\n  if (sawRadix && !nDigitsRead) {\n    throw new Error('' + string + ' not a valid Decimal128 string');\n  }\n\n  // Read exponent if exists\n  if (string[index] === 'e' || string[index] === 'E') {\n    // Read exponent digits\n    var match = string.substr(++index).match(EXPONENT_REGEX);\n\n    // No digits read\n    if (!match || !match[2]) {\n      return new Decimal128(new Buffer(NAN_BUFFER));\n    }\n\n    // Get exponent\n    exponent = parseInt(match[0], 10);\n\n    // Adjust the index\n    index = index + match[0].length;\n  }\n\n  // Return not a number\n  if (string[index]) {\n    return new Decimal128(new Buffer(NAN_BUFFER));\n  }\n\n  // Done reading input\n  // Find first non-zero digit in digits\n  firstDigit = 0;\n\n  if (!nDigitsStored) {\n    firstDigit = 0;\n    lastDigit = 0;\n    digits[0] = 0;\n    nDigits = 1;\n    nDigitsStored = 1;\n    significantDigits = 0;\n  } else {\n    lastDigit = nDigitsStored - 1;\n    significantDigits = nDigits;\n\n    if (exponent !== 0 && significantDigits !== 1) {\n      while (string[firstNonZero + significantDigits - 1] === '0') {\n        significantDigits = significantDigits - 1;\n      }\n    }\n  }\n\n  // Normalization of exponent\n  // Correct exponent based on radix position, and shift significand as needed\n  // to represent user input\n\n  // Overflow prevention\n  if (exponent <= radixPosition && radixPosition - exponent > 1 << 14) {\n    exponent = EXPONENT_MIN;\n  } else {\n    exponent = exponent - radixPosition;\n  }\n\n  // Attempt to normalize the exponent\n  while (exponent > EXPONENT_MAX) {\n    // Shift exponent to significand and decrease\n    lastDigit = lastDigit + 1;\n\n    if (lastDigit - firstDigit > MAX_DIGITS) {\n      // Check if we have a zero then just hard clamp, otherwise fail\n      var digitsString = digits.join('');\n      if (digitsString.match(/^0+$/)) {\n        exponent = EXPONENT_MAX;\n        break;\n      } else {\n        return new Decimal128(new Buffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n      }\n    }\n\n    exponent = exponent - 1;\n  }\n\n  while (exponent < EXPONENT_MIN || nDigitsStored < nDigits) {\n    // Shift last digit\n    if (lastDigit === 0) {\n      exponent = EXPONENT_MIN;\n      significantDigits = 0;\n      break;\n    }\n\n    if (nDigitsStored < nDigits) {\n      // adjust to match digits not stored\n      nDigits = nDigits - 1;\n    } else {\n      // adjust to round\n      lastDigit = lastDigit - 1;\n    }\n\n    if (exponent < EXPONENT_MAX) {\n      exponent = exponent + 1;\n    } else {\n      // Check if we have a zero then just hard clamp, otherwise fail\n      digitsString = digits.join('');\n      if (digitsString.match(/^0+$/)) {\n        exponent = EXPONENT_MAX;\n        break;\n      } else {\n        return new Decimal128(new Buffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));\n      }\n    }\n  }\n\n  // Round\n  // We've normalized the exponent, but might still need to round.\n  if (lastDigit - firstDigit + 1 < significantDigits && string[significantDigits] !== '0') {\n    var endOfString = nDigitsRead;\n\n    // If we have seen a radix point, 'string' is 1 longer than we have\n    // documented with ndigits_read, so inc the position of the first nonzero\n    // digit and the position that digits are read to.\n    if (sawRadix && exponent === EXPONENT_MIN) {\n      firstNonZero = firstNonZero + 1;\n      endOfString = endOfString + 1;\n    }\n\n    var roundDigit = parseInt(string[firstNonZero + lastDigit + 1], 10);\n    var roundBit = 0;\n\n    if (roundDigit >= 5) {\n      roundBit = 1;\n\n      if (roundDigit === 5) {\n        roundBit = digits[lastDigit] % 2 === 1;\n\n        for (i = firstNonZero + lastDigit + 2; i < endOfString; i++) {\n          if (parseInt(string[i], 10)) {\n            roundBit = 1;\n            break;\n          }\n        }\n      }\n    }\n\n    if (roundBit) {\n      var dIdx = lastDigit;\n\n      for (; dIdx >= 0; dIdx--) {\n        if (++digits[dIdx] > 9) {\n          digits[dIdx] = 0;\n\n          // overflowed most significant digit\n          if (dIdx === 0) {\n            if (exponent < EXPONENT_MAX) {\n              exponent = exponent + 1;\n              digits[dIdx] = 1;\n            } else {\n              return new Decimal128(\n                new Buffer(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER)\n              );\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  // Encode significand\n  // The high 17 digits of the significand\n  significandHigh = Long.fromNumber(0);\n  // The low 17 digits of the significand\n  significandLow = Long.fromNumber(0);\n\n  // read a zero\n  if (significantDigits === 0) {\n    significandHigh = Long.fromNumber(0);\n    significandLow = Long.fromNumber(0);\n  } else if (lastDigit - firstDigit < 17) {\n    dIdx = firstDigit;\n    significandLow = Long.fromNumber(digits[dIdx++]);\n    significandHigh = new Long(0, 0);\n\n    for (; dIdx <= lastDigit; dIdx++) {\n      significandLow = significandLow.multiply(Long.fromNumber(10));\n      significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n    }\n  } else {\n    dIdx = firstDigit;\n    significandHigh = Long.fromNumber(digits[dIdx++]);\n\n    for (; dIdx <= lastDigit - 17; dIdx++) {\n      significandHigh = significandHigh.multiply(Long.fromNumber(10));\n      significandHigh = significandHigh.add(Long.fromNumber(digits[dIdx]));\n    }\n\n    significandLow = Long.fromNumber(digits[dIdx++]);\n\n    for (; dIdx <= lastDigit; dIdx++) {\n      significandLow = significandLow.multiply(Long.fromNumber(10));\n      significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n    }\n  }\n\n  var significand = multiply64x2(significandHigh, Long.fromString('100000000000000000'));\n\n  significand.low = significand.low.add(significandLow);\n\n  if (lessThan(significand.low, significandLow)) {\n    significand.high = significand.high.add(Long.fromNumber(1));\n  }\n\n  // Biased exponent\n  biasedExponent = exponent + EXPONENT_BIAS;\n  var dec = { low: Long.fromNumber(0), high: Long.fromNumber(0) };\n\n  // Encode combination, exponent, and significand.\n  if (\n    significand.high\n      .shiftRightUnsigned(49)\n      .and(Long.fromNumber(1))\n      .equals(Long.fromNumber)\n  ) {\n    // Encode '11' into bits 1 to 3\n    dec.high = dec.high.or(Long.fromNumber(0x3).shiftLeft(61));\n    dec.high = dec.high.or(\n      Long.fromNumber(biasedExponent).and(Long.fromNumber(0x3fff).shiftLeft(47))\n    );\n    dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x7fffffffffff)));\n  } else {\n    dec.high = dec.high.or(Long.fromNumber(biasedExponent & 0x3fff).shiftLeft(49));\n    dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x1ffffffffffff)));\n  }\n\n  dec.low = significand.low;\n\n  // Encode sign\n  if (isNegative) {\n    dec.high = dec.high.or(Long.fromString('9223372036854775808'));\n  }\n\n  // Encode into a buffer\n  var buffer = new Buffer(16);\n  index = 0;\n\n  // Encode the low 64 bits of the decimal\n  // Encode low bits\n  buffer[index++] = dec.low.low_ & 0xff;\n  buffer[index++] = (dec.low.low_ >> 8) & 0xff;\n  buffer[index++] = (dec.low.low_ >> 16) & 0xff;\n  buffer[index++] = (dec.low.low_ >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = dec.low.high_ & 0xff;\n  buffer[index++] = (dec.low.high_ >> 8) & 0xff;\n  buffer[index++] = (dec.low.high_ >> 16) & 0xff;\n  buffer[index++] = (dec.low.high_ >> 24) & 0xff;\n\n  // Encode the high 64 bits of the decimal\n  // Encode low bits\n  buffer[index++] = dec.high.low_ & 0xff;\n  buffer[index++] = (dec.high.low_ >> 8) & 0xff;\n  buffer[index++] = (dec.high.low_ >> 16) & 0xff;\n  buffer[index++] = (dec.high.low_ >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = dec.high.high_ & 0xff;\n  buffer[index++] = (dec.high.high_ >> 8) & 0xff;\n  buffer[index++] = (dec.high.high_ >> 16) & 0xff;\n  buffer[index++] = (dec.high.high_ >> 24) & 0xff;\n\n  // Return the new Decimal128\n  return new Decimal128(buffer);\n};\n\n// Extract least significant 5 bits\nvar COMBINATION_MASK = 0x1f;\n// Extract least significant 14 bits\nvar EXPONENT_MASK = 0x3fff;\n// Value of combination field for Inf\nvar COMBINATION_INFINITY = 30;\n// Value of combination field for NaN\nvar COMBINATION_NAN = 31;\n// Value of combination field for NaN\n// var COMBINATION_SNAN = 32;\n// decimal128 exponent bias\nEXPONENT_BIAS = 6176;\n\n/**\n * Create a string representation of the raw Decimal128 value\n *\n * @method\n * @return {string} returns a Decimal128 string representation.\n */\nDecimal128.prototype.toString = function() {\n  // Note: bits in this routine are referred to starting at 0,\n  // from the sign bit, towards the coefficient.\n\n  // bits 0 - 31\n  var high;\n  // bits 32 - 63\n  var midh;\n  // bits 64 - 95\n  var midl;\n  // bits 96 - 127\n  var low;\n  // bits 1 - 5\n  var combination;\n  // decoded biased exponent (14 bits)\n  var biased_exponent;\n  // the number of significand digits\n  var significand_digits = 0;\n  // the base-10 digits in the significand\n  var significand = new Array(36);\n  for (var i = 0; i < significand.length; i++) significand[i] = 0;\n  // read pointer into significand\n  var index = 0;\n\n  // unbiased exponent\n  var exponent;\n  // the exponent if scientific notation is used\n  var scientific_exponent;\n\n  // true if the number is zero\n  var is_zero = false;\n\n  // the most signifcant significand bits (50-46)\n  var significand_msb;\n  // temporary storage for significand decoding\n  var significand128 = { parts: new Array(4) };\n  // indexing variables\n  i;\n  var j, k;\n\n  // Output string\n  var string = [];\n\n  // Unpack index\n  index = 0;\n\n  // Buffer reference\n  var buffer = this.bytes;\n\n  // Unpack the low 64bits into a long\n  low =\n    buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n  midl =\n    buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n\n  // Unpack the high 64bits into a long\n  midh =\n    buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n  high =\n    buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n\n  // Unpack index\n  index = 0;\n\n  // Create the state of the decimal\n  var dec = {\n    low: new Long(low, midl),\n    high: new Long(midh, high)\n  };\n\n  if (dec.high.lessThan(Long.ZERO)) {\n    string.push('-');\n  }\n\n  // Decode combination field and exponent\n  combination = (high >> 26) & COMBINATION_MASK;\n\n  if (combination >> 3 === 3) {\n    // Check for 'special' values\n    if (combination === COMBINATION_INFINITY) {\n      return string.join('') + 'Infinity';\n    } else if (combination === COMBINATION_NAN) {\n      return 'NaN';\n    } else {\n      biased_exponent = (high >> 15) & EXPONENT_MASK;\n      significand_msb = 0x08 + ((high >> 14) & 0x01);\n    }\n  } else {\n    significand_msb = (high >> 14) & 0x07;\n    biased_exponent = (high >> 17) & EXPONENT_MASK;\n  }\n\n  exponent = biased_exponent - EXPONENT_BIAS;\n\n  // Create string of significand digits\n\n  // Convert the 114-bit binary number represented by\n  // (significand_high, significand_low) to at most 34 decimal\n  // digits through modulo and division.\n  significand128.parts[0] = (high & 0x3fff) + ((significand_msb & 0xf) << 14);\n  significand128.parts[1] = midh;\n  significand128.parts[2] = midl;\n  significand128.parts[3] = low;\n\n  if (\n    significand128.parts[0] === 0 &&\n    significand128.parts[1] === 0 &&\n    significand128.parts[2] === 0 &&\n    significand128.parts[3] === 0\n  ) {\n    is_zero = true;\n  } else {\n    for (k = 3; k >= 0; k--) {\n      var least_digits = 0;\n      // Peform the divide\n      var result = divideu128(significand128);\n      significand128 = result.quotient;\n      least_digits = result.rem.low_;\n\n      // We now have the 9 least significant digits (in base 2).\n      // Convert and output to string.\n      if (!least_digits) continue;\n\n      for (j = 8; j >= 0; j--) {\n        // significand[k * 9 + j] = Math.round(least_digits % 10);\n        significand[k * 9 + j] = least_digits % 10;\n        // least_digits = Math.round(least_digits / 10);\n        least_digits = Math.floor(least_digits / 10);\n      }\n    }\n  }\n\n  // Output format options:\n  // Scientific - [-]d.dddE(+/-)dd or [-]dE(+/-)dd\n  // Regular    - ddd.ddd\n\n  if (is_zero) {\n    significand_digits = 1;\n    significand[index] = 0;\n  } else {\n    significand_digits = 36;\n    i = 0;\n\n    while (!significand[index]) {\n      i++;\n      significand_digits = significand_digits - 1;\n      index = index + 1;\n    }\n  }\n\n  scientific_exponent = significand_digits - 1 + exponent;\n\n  // The scientific exponent checks are dictated by the string conversion\n  // specification and are somewhat arbitrary cutoffs.\n  //\n  // We must check exponent > 0, because if this is the case, the number\n  // has trailing zeros.  However, we *cannot* output these trailing zeros,\n  // because doing so would change the precision of the value, and would\n  // change stored data if the string converted number is round tripped.\n\n  if (scientific_exponent >= 34 || scientific_exponent <= -7 || exponent > 0) {\n    // Scientific format\n    string.push(significand[index++]);\n    significand_digits = significand_digits - 1;\n\n    if (significand_digits) {\n      string.push('.');\n    }\n\n    for (i = 0; i < significand_digits; i++) {\n      string.push(significand[index++]);\n    }\n\n    // Exponent\n    string.push('E');\n    if (scientific_exponent > 0) {\n      string.push('+' + scientific_exponent);\n    } else {\n      string.push(scientific_exponent);\n    }\n  } else {\n    // Regular format with no decimal place\n    if (exponent >= 0) {\n      for (i = 0; i < significand_digits; i++) {\n        string.push(significand[index++]);\n      }\n    } else {\n      var radix_position = significand_digits + exponent;\n\n      // non-zero digits before radix\n      if (radix_position > 0) {\n        for (i = 0; i < radix_position; i++) {\n          string.push(significand[index++]);\n        }\n      } else {\n        string.push('0');\n      }\n\n      string.push('.');\n      // add leading zeros after radix\n      while (radix_position++ < 0) {\n        string.push('0');\n      }\n\n      for (i = 0; i < significand_digits - Math.max(radix_position - 1, 0); i++) {\n        string.push(significand[index++]);\n      }\n    }\n  }\n\n  return string.join('');\n};\n\nDecimal128.prototype.toJSON = function() {\n  return { $numberDecimal: this.toString() };\n};\n\nmodule.exports = Decimal128;\nmodule.exports.Decimal128 = Decimal128;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_bson@1.0.6@bson/lib/bson/decimal128.js\n// module id = 64\n// module chunks = 0","/**\n * A class representation of the BSON Double type.\n *\n * @class\n * @param {number} value the number we want to represent as a double.\n * @return {Double}\n */\nfunction Double(value) {\n  if (!(this instanceof Double)) return new Double(value);\n\n  this._bsontype = 'Double';\n  this.value = value;\n}\n\n/**\n * Access the number value.\n *\n * @method\n * @return {number} returns the wrapped double number.\n */\nDouble.prototype.valueOf = function() {\n  return this.value;\n};\n\n/**\n * @ignore\n */\nDouble.prototype.toJSON = function() {\n  return this.value;\n};\n\nmodule.exports = Double;\nmodule.exports.Double = Double;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_bson@1.0.6@bson/lib/bson/double.js\n// module id = 65\n// module chunks = 0","/**\n * A class representation of the BSON MaxKey type.\n *\n * @class\n * @return {MaxKey} A MaxKey instance\n */\nfunction MaxKey() {\n  if (!(this instanceof MaxKey)) return new MaxKey();\n\n  this._bsontype = 'MaxKey';\n}\n\nmodule.exports = MaxKey;\nmodule.exports.MaxKey = MaxKey;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_bson@1.0.6@bson/lib/bson/max_key.js\n// module id = 66\n// module chunks = 0","/**\n * Machine id.\n *\n * Create a random 3-byte value (i.e. unique for this\n * process). Other drivers use a md5 of the machine id here, but\n * that would mean an asyc call to gethostname, so we don't bother.\n * @ignore\n */\nvar MACHINE_ID = parseInt(Math.random() * 0xffffff, 10);\n\n// Regular expression that checks for hex value\nvar checkForHexRegExp = new RegExp('^[0-9a-fA-F]{24}$');\n\n// Check if buffer exists\ntry {\n  if (Buffer && Buffer.from) var hasBufferType = true;\n} catch (err) {\n  hasBufferType = false;\n}\n\n/**\n* Create a new ObjectID instance\n*\n* @class\n* @param {(string|number)} id Can be a 24 byte hex string, 12 byte binary string or a Number.\n* @property {number} generationTime The generation time of this ObjectId instance\n* @return {ObjectID} instance of ObjectID.\n*/\nvar ObjectID = function ObjectID(id) {\n  // Duck-typing to support ObjectId from different npm packages\n  if (id instanceof ObjectID) return id;\n  if (!(this instanceof ObjectID)) return new ObjectID(id);\n\n  this._bsontype = 'ObjectID';\n\n  // The most common usecase (blank id, new objectId instance)\n  if (id == null || typeof id === 'number') {\n    // Generate a new id\n    this.id = this.generate(id);\n    // If we are caching the hex string\n    if (ObjectID.cacheHexString) this.__id = this.toString('hex');\n    // Return the object\n    return;\n  }\n\n  // Check if the passed in id is valid\n  var valid = ObjectID.isValid(id);\n\n  // Throw an error if it's not a valid setup\n  if (!valid && id != null) {\n    throw new Error(\n      'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n    );\n  } else if (valid && typeof id === 'string' && id.length === 24 && hasBufferType) {\n    return new ObjectID(new Buffer(id, 'hex'));\n  } else if (valid && typeof id === 'string' && id.length === 24) {\n    return ObjectID.createFromHexString(id);\n  } else if (id != null && id.length === 12) {\n    // assume 12 byte string\n    this.id = id;\n  } else if (id != null && id.toHexString) {\n    // Duck-typing to support ObjectId from different npm packages\n    return id;\n  } else {\n    throw new Error(\n      'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n    );\n  }\n\n  if (ObjectID.cacheHexString) this.__id = this.toString('hex');\n};\n\n// Allow usage of ObjectId as well as ObjectID\n// var ObjectId = ObjectID;\n\n// Precomputed hex table enables speedy hex string conversion\nvar hexTable = [];\nfor (var i = 0; i < 256; i++) {\n  hexTable[i] = (i <= 15 ? '0' : '') + i.toString(16);\n}\n\n/**\n* Return the ObjectID id as a 24 byte hex string representation\n*\n* @method\n* @return {string} return the 24 byte hex string representation.\n*/\nObjectID.prototype.toHexString = function() {\n  if (ObjectID.cacheHexString && this.__id) return this.__id;\n\n  var hexString = '';\n  if (!this.id || !this.id.length) {\n    throw new Error(\n      'invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is [' +\n        JSON.stringify(this.id) +\n        ']'\n    );\n  }\n\n  if (this.id instanceof _Buffer) {\n    hexString = convertToHex(this.id);\n    if (ObjectID.cacheHexString) this.__id = hexString;\n    return hexString;\n  }\n\n  for (var i = 0; i < this.id.length; i++) {\n    hexString += hexTable[this.id.charCodeAt(i)];\n  }\n\n  if (ObjectID.cacheHexString) this.__id = hexString;\n  return hexString;\n};\n\n/**\n* Update the ObjectID index used in generating new ObjectID's on the driver\n*\n* @method\n* @return {number} returns next index value.\n* @ignore\n*/\nObjectID.prototype.get_inc = function() {\n  return (ObjectID.index = (ObjectID.index + 1) % 0xffffff);\n};\n\n/**\n* Update the ObjectID index used in generating new ObjectID's on the driver\n*\n* @method\n* @return {number} returns next index value.\n* @ignore\n*/\nObjectID.prototype.getInc = function() {\n  return this.get_inc();\n};\n\n/**\n* Generate a 12 byte id buffer used in ObjectID's\n*\n* @method\n* @param {number} [time] optional parameter allowing to pass in a second based timestamp.\n* @return {Buffer} return the 12 byte id buffer string.\n*/\nObjectID.prototype.generate = function(time) {\n  if ('number' !== typeof time) {\n    time = ~~(Date.now() / 1000);\n  }\n\n  // Use pid\n  var pid =\n    (typeof process === 'undefined' || process.pid === 1\n      ? Math.floor(Math.random() * 100000)\n      : process.pid) % 0xffff;\n  var inc = this.get_inc();\n  // Buffer used\n  var buffer = new Buffer(12);\n  // Encode time\n  buffer[3] = time & 0xff;\n  buffer[2] = (time >> 8) & 0xff;\n  buffer[1] = (time >> 16) & 0xff;\n  buffer[0] = (time >> 24) & 0xff;\n  // Encode machine\n  buffer[6] = MACHINE_ID & 0xff;\n  buffer[5] = (MACHINE_ID >> 8) & 0xff;\n  buffer[4] = (MACHINE_ID >> 16) & 0xff;\n  // Encode pid\n  buffer[8] = pid & 0xff;\n  buffer[7] = (pid >> 8) & 0xff;\n  // Encode index\n  buffer[11] = inc & 0xff;\n  buffer[10] = (inc >> 8) & 0xff;\n  buffer[9] = (inc >> 16) & 0xff;\n  // Return the buffer\n  return buffer;\n};\n\n/**\n* Converts the id into a 24 byte hex string for printing\n*\n* @param {String} format The Buffer toString format parameter.\n* @return {String} return the 24 byte hex string representation.\n* @ignore\n*/\nObjectID.prototype.toString = function(format) {\n  // Is the id a buffer then use the buffer toString method to return the format\n  if (this.id && this.id.copy) {\n    return this.id.toString(typeof format === 'string' ? format : 'hex');\n  }\n\n  // if(this.buffer )\n  return this.toHexString();\n};\n\n/**\n* Converts to a string representation of this Id.\n*\n* @return {String} return the 24 byte hex string representation.\n* @ignore\n*/\nObjectID.prototype.inspect = ObjectID.prototype.toString;\n\n/**\n* Converts to its JSON representation.\n*\n* @return {String} return the 24 byte hex string representation.\n* @ignore\n*/\nObjectID.prototype.toJSON = function() {\n  return this.toHexString();\n};\n\n/**\n* Compares the equality of this ObjectID with `otherID`.\n*\n* @method\n* @param {object} otherID ObjectID instance to compare against.\n* @return {boolean} the result of comparing two ObjectID's\n*/\nObjectID.prototype.equals = function equals(otherId) {\n  // var id;\n\n  if (otherId instanceof ObjectID) {\n    return this.toString() === otherId.toString();\n  } else if (\n    typeof otherId === 'string' &&\n    ObjectID.isValid(otherId) &&\n    otherId.length === 12 &&\n    this.id instanceof _Buffer\n  ) {\n    return otherId === this.id.toString('binary');\n  } else if (typeof otherId === 'string' && ObjectID.isValid(otherId) && otherId.length === 24) {\n    return otherId.toLowerCase() === this.toHexString();\n  } else if (typeof otherId === 'string' && ObjectID.isValid(otherId) && otherId.length === 12) {\n    return otherId === this.id;\n  } else if (otherId != null && (otherId instanceof ObjectID || otherId.toHexString)) {\n    return otherId.toHexString() === this.toHexString();\n  } else {\n    return false;\n  }\n};\n\n/**\n* Returns the generation date (accurate up to the second) that this ID was generated.\n*\n* @method\n* @return {date} the generation date\n*/\nObjectID.prototype.getTimestamp = function() {\n  var timestamp = new Date();\n  var time = this.id[3] | (this.id[2] << 8) | (this.id[1] << 16) | (this.id[0] << 24);\n  timestamp.setTime(Math.floor(time) * 1000);\n  return timestamp;\n};\n\n/**\n* @ignore\n*/\nObjectID.index = ~~(Math.random() * 0xffffff);\n\n/**\n* @ignore\n*/\nObjectID.createPk = function createPk() {\n  return new ObjectID();\n};\n\n/**\n* Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n*\n* @method\n* @param {number} time an integer number representing a number of seconds.\n* @return {ObjectID} return the created ObjectID\n*/\nObjectID.createFromTime = function createFromTime(time) {\n  var buffer = new Buffer([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n  // Encode time into first 4 bytes\n  buffer[3] = time & 0xff;\n  buffer[2] = (time >> 8) & 0xff;\n  buffer[1] = (time >> 16) & 0xff;\n  buffer[0] = (time >> 24) & 0xff;\n  // Return the new objectId\n  return new ObjectID(buffer);\n};\n\n// Lookup tables\n//var encodeLookup = '0123456789abcdef'.split('');\nvar decodeLookup = [];\ni = 0;\nwhile (i < 10) decodeLookup[0x30 + i] = i++;\nwhile (i < 16) decodeLookup[0x41 - 10 + i] = decodeLookup[0x61 - 10 + i] = i++;\n\nvar _Buffer = Buffer;\nvar convertToHex = function(bytes) {\n  return bytes.toString('hex');\n};\n\n/**\n* Creates an ObjectID from a hex string representation of an ObjectID.\n*\n* @method\n* @param {string} hexString create a ObjectID from a passed in 24 byte hexstring.\n* @return {ObjectID} return the created ObjectID\n*/\nObjectID.createFromHexString = function createFromHexString(string) {\n  // Throw an error if it's not a valid setup\n  if (typeof string === 'undefined' || (string != null && string.length !== 24)) {\n    throw new Error(\n      'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'\n    );\n  }\n\n  // Use Buffer.from method if available\n  if (hasBufferType) return new ObjectID(new Buffer(string, 'hex'));\n\n  // Calculate lengths\n  var array = new _Buffer(12);\n  var n = 0;\n  var i = 0;\n\n  while (i < 24) {\n    array[n++] = (decodeLookup[string.charCodeAt(i++)] << 4) | decodeLookup[string.charCodeAt(i++)];\n  }\n\n  return new ObjectID(array);\n};\n\n/**\n* Checks if a value is a valid bson ObjectId\n*\n* @method\n* @return {boolean} return true if the value is a valid bson ObjectId, return false otherwise.\n*/\nObjectID.isValid = function isValid(id) {\n  if (id == null) return false;\n\n  if (typeof id === 'number') {\n    return true;\n  }\n\n  if (typeof id === 'string') {\n    return id.length === 12 || (id.length === 24 && checkForHexRegExp.test(id));\n  }\n\n  if (id instanceof ObjectID) {\n    return true;\n  }\n\n  if (id instanceof _Buffer) {\n    return true;\n  }\n\n  // Duck-Typing detection of ObjectId like objects\n  if (id.toHexString) {\n    return id.id.length === 12 || (id.id.length === 24 && checkForHexRegExp.test(id.id));\n  }\n\n  return false;\n};\n\n/**\n* @ignore\n*/\nObject.defineProperty(ObjectID.prototype, 'generationTime', {\n  enumerable: true,\n  get: function() {\n    return this.id[3] | (this.id[2] << 8) | (this.id[1] << 16) | (this.id[0] << 24);\n  },\n  set: function(value) {\n    // Encode time into first 4 bytes\n    this.id[3] = value & 0xff;\n    this.id[2] = (value >> 8) & 0xff;\n    this.id[1] = (value >> 16) & 0xff;\n    this.id[0] = (value >> 24) & 0xff;\n  }\n});\n\n/**\n * Expose.\n */\nmodule.exports = ObjectID;\nmodule.exports.ObjectID = ObjectID;\nmodule.exports.ObjectId = ObjectID;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_bson@1.0.6@bson/lib/bson/objectid.js\n// module id = 67\n// module chunks = 0","/**\n * A class representation of the BSON RegExp type.\n *\n * @class\n * @return {BSONRegExp} A MinKey instance\n */\nfunction BSONRegExp(pattern, options) {\n  if (!(this instanceof BSONRegExp)) return new BSONRegExp();\n\n  // Execute\n  this._bsontype = 'BSONRegExp';\n  this.pattern = pattern || '';\n  this.options = options || '';\n\n  // Validate options\n  for (var i = 0; i < this.options.length; i++) {\n    if (\n      !(\n        this.options[i] === 'i' ||\n        this.options[i] === 'm' ||\n        this.options[i] === 'x' ||\n        this.options[i] === 'l' ||\n        this.options[i] === 's' ||\n        this.options[i] === 'u'\n      )\n    ) {\n      throw new Error('the regular expression options [' + this.options[i] + '] is not supported');\n    }\n  }\n}\n\nmodule.exports = BSONRegExp;\nmodule.exports.BSONRegExp = BSONRegExp;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_bson@1.0.6@bson/lib/bson/regexp.js\n// module id = 68\n// module chunks = 0","/**\n * A class representation of the BSON Symbol type.\n *\n * @class\n * @deprecated\n * @param {string} value the string representing the symbol.\n * @return {Symbol}\n */\nfunction Symbol(value) {\n  if (!(this instanceof Symbol)) return new Symbol(value);\n  this._bsontype = 'Symbol';\n  this.value = value;\n}\n\n/**\n * Access the wrapped string value.\n *\n * @method\n * @return {String} returns the wrapped string.\n */\nSymbol.prototype.valueOf = function() {\n  return this.value;\n};\n\n/**\n * @ignore\n */\nSymbol.prototype.toString = function() {\n  return this.value;\n};\n\n/**\n * @ignore\n */\nSymbol.prototype.inspect = function() {\n  return this.value;\n};\n\n/**\n * @ignore\n */\nSymbol.prototype.toJSON = function() {\n  return this.value;\n};\n\nmodule.exports = Symbol;\nmodule.exports.Symbol = Symbol;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_bson@1.0.6@bson/lib/bson/symbol.js\n// module id = 69\n// module chunks = 0","// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// Copyright 2009 Google Inc. All Rights Reserved\n\n/**\n * This type is for INTERNAL use in MongoDB only and should not be used in applications.\n * The appropriate corresponding type is the JavaScript Date type.\n * \n * Defines a Timestamp class for representing a 64-bit two's-complement\n * integer value, which faithfully simulates the behavior of a Java \"Timestamp\". This\n * implementation is derived from TimestampLib in GWT.\n *\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Timestamps.\n *\n * The internal representation of a Timestamp is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @class\n * @param {number} low  the low (signed) 32 bits of the Timestamp.\n * @param {number} high the high (signed) 32 bits of the Timestamp.\n */\nfunction Timestamp(low, high) {\n  if (!(this instanceof Timestamp)) return new Timestamp(low, high);\n  this._bsontype = 'Timestamp';\n  /**\n   * @type {number}\n   * @ignore\n   */\n  this.low_ = low | 0; // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @ignore\n   */\n  this.high_ = high | 0; // force into 32 signed bits.\n}\n\n/**\n * Return the int value.\n *\n * @return {number} the value, assuming it is a 32-bit integer.\n */\nTimestamp.prototype.toInt = function() {\n  return this.low_;\n};\n\n/**\n * Return the Number value.\n *\n * @method\n * @return {number} the closest floating-point representation to this value.\n */\nTimestamp.prototype.toNumber = function() {\n  return this.high_ * Timestamp.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();\n};\n\n/**\n * Return the JSON value.\n *\n * @method\n * @return {string} the JSON representation.\n */\nTimestamp.prototype.toJSON = function() {\n  return this.toString();\n};\n\n/**\n * Return the String value.\n *\n * @method\n * @param {number} [opt_radix] the radix in which the text should be written.\n * @return {string} the textual representation of this value.\n */\nTimestamp.prototype.toString = function(opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (this.isZero()) {\n    return '0';\n  }\n\n  if (this.isNegative()) {\n    if (this.equals(Timestamp.MIN_VALUE)) {\n      // We need to change the Timestamp value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixTimestamp = Timestamp.fromNumber(radix);\n      var div = this.div(radixTimestamp);\n      var rem = div.multiply(radixTimestamp).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Timestamp.fromNumber(Math.pow(radix, 6));\n\n  rem = this;\n  var result = '';\n\n  while (!rem.isZero()) {\n    var remDiv = rem.div(radixToPower);\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n    var digits = intval.toString(radix);\n\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n      result = '' + digits + result;\n    }\n  }\n};\n\n/**\n * Return the high 32-bits value.\n *\n * @method\n * @return {number} the high 32-bits as a signed value.\n */\nTimestamp.prototype.getHighBits = function() {\n  return this.high_;\n};\n\n/**\n * Return the low 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as a signed value.\n */\nTimestamp.prototype.getLowBits = function() {\n  return this.low_;\n};\n\n/**\n * Return the low unsigned 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as an unsigned value.\n */\nTimestamp.prototype.getLowBitsUnsigned = function() {\n  return this.low_ >= 0 ? this.low_ : Timestamp.TWO_PWR_32_DBL_ + this.low_;\n};\n\n/**\n * Returns the number of bits needed to represent the absolute value of this Timestamp.\n *\n * @method\n * @return {number} Returns the number of bits needed to represent the absolute value of this Timestamp.\n */\nTimestamp.prototype.getNumBitsAbs = function() {\n  if (this.isNegative()) {\n    if (this.equals(Timestamp.MIN_VALUE)) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ !== 0 ? this.high_ : this.low_;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & (1 << bit)) !== 0) {\n        break;\n      }\n    }\n    return this.high_ !== 0 ? bit + 33 : bit + 1;\n  }\n};\n\n/**\n * Return whether this value is zero.\n *\n * @method\n * @return {boolean} whether this value is zero.\n */\nTimestamp.prototype.isZero = function() {\n  return this.high_ === 0 && this.low_ === 0;\n};\n\n/**\n * Return whether this value is negative.\n *\n * @method\n * @return {boolean} whether this value is negative.\n */\nTimestamp.prototype.isNegative = function() {\n  return this.high_ < 0;\n};\n\n/**\n * Return whether this value is odd.\n *\n * @method\n * @return {boolean} whether this value is odd.\n */\nTimestamp.prototype.isOdd = function() {\n  return (this.low_ & 1) === 1;\n};\n\n/**\n * Return whether this Timestamp equals the other\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp equals the other\n */\nTimestamp.prototype.equals = function(other) {\n  return this.high_ === other.high_ && this.low_ === other.low_;\n};\n\n/**\n * Return whether this Timestamp does not equal the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp does not equal the other.\n */\nTimestamp.prototype.notEquals = function(other) {\n  return this.high_ !== other.high_ || this.low_ !== other.low_;\n};\n\n/**\n * Return whether this Timestamp is less than the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp is less than the other.\n */\nTimestamp.prototype.lessThan = function(other) {\n  return this.compare(other) < 0;\n};\n\n/**\n * Return whether this Timestamp is less than or equal to the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp is less than or equal to the other.\n */\nTimestamp.prototype.lessThanOrEqual = function(other) {\n  return this.compare(other) <= 0;\n};\n\n/**\n * Return whether this Timestamp is greater than the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp is greater than the other.\n */\nTimestamp.prototype.greaterThan = function(other) {\n  return this.compare(other) > 0;\n};\n\n/**\n * Return whether this Timestamp is greater than or equal to the other.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} whether this Timestamp is greater than or equal to the other.\n */\nTimestamp.prototype.greaterThanOrEqual = function(other) {\n  return this.compare(other) >= 0;\n};\n\n/**\n * Compares this Timestamp with the given one.\n *\n * @method\n * @param {Timestamp} other Timestamp to compare against.\n * @return {boolean} 0 if they are the same, 1 if the this is greater, and -1 if the given one is greater.\n */\nTimestamp.prototype.compare = function(other) {\n  if (this.equals(other)) {\n    return 0;\n  }\n\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n  if (!thisNeg && otherNeg) {\n    return 1;\n  }\n\n  // at this point, the signs are the same, so subtraction will not overflow\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * The negation of this value.\n *\n * @method\n * @return {Timestamp} the negation of this value.\n */\nTimestamp.prototype.negate = function() {\n  if (this.equals(Timestamp.MIN_VALUE)) {\n    return Timestamp.MIN_VALUE;\n  } else {\n    return this.not().add(Timestamp.ONE);\n  }\n};\n\n/**\n * Returns the sum of this and the given Timestamp.\n *\n * @method\n * @param {Timestamp} other Timestamp to add to this one.\n * @return {Timestamp} the sum of this and the given Timestamp.\n */\nTimestamp.prototype.add = function(other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xffff;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xffff;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xffff;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xffff;\n\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 + b48;\n  c48 &= 0xffff;\n  return Timestamp.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n/**\n * Returns the difference of this and the given Timestamp.\n *\n * @method\n * @param {Timestamp} other Timestamp to subtract from this.\n * @return {Timestamp} the difference of this and the given Timestamp.\n */\nTimestamp.prototype.subtract = function(other) {\n  return this.add(other.negate());\n};\n\n/**\n * Returns the product of this and the given Timestamp.\n *\n * @method\n * @param {Timestamp} other Timestamp to multiply with this.\n * @return {Timestamp} the product of this and the other.\n */\nTimestamp.prototype.multiply = function(other) {\n  if (this.isZero()) {\n    return Timestamp.ZERO;\n  } else if (other.isZero()) {\n    return Timestamp.ZERO;\n  }\n\n  if (this.equals(Timestamp.MIN_VALUE)) {\n    return other.isOdd() ? Timestamp.MIN_VALUE : Timestamp.ZERO;\n  } else if (other.equals(Timestamp.MIN_VALUE)) {\n    return this.isOdd() ? Timestamp.MIN_VALUE : Timestamp.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate()\n        .multiply(other)\n        .negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both Timestamps are small, use float multiplication\n  if (this.lessThan(Timestamp.TWO_PWR_24_) && other.lessThan(Timestamp.TWO_PWR_24_)) {\n    return Timestamp.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Divide each Timestamp into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xffff;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xffff;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xffff;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xffff;\n\n  var c48 = 0,\n    c32 = 0,\n    c16 = 0,\n    c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xffff;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xffff;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xffff;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xffff;\n  return Timestamp.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n/**\n * Returns this Timestamp divided by the given one.\n *\n * @method\n * @param {Timestamp} other Timestamp by which to divide.\n * @return {Timestamp} this Timestamp divided by the given one.\n */\nTimestamp.prototype.div = function(other) {\n  if (other.isZero()) {\n    throw Error('division by zero');\n  } else if (this.isZero()) {\n    return Timestamp.ZERO;\n  }\n\n  if (this.equals(Timestamp.MIN_VALUE)) {\n    if (other.equals(Timestamp.ONE) || other.equals(Timestamp.NEG_ONE)) {\n      return Timestamp.MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n    } else if (other.equals(Timestamp.MIN_VALUE)) {\n      return Timestamp.ONE;\n    } else {\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n      if (approx.equals(Timestamp.ZERO)) {\n        return other.isNegative() ? Timestamp.ONE : Timestamp.NEG_ONE;\n      } else {\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equals(Timestamp.MIN_VALUE)) {\n    return Timestamp.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate()\n        .div(other)\n        .negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = Timestamp.ZERO;\n  rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = Timestamp.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = Timestamp.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = Timestamp.ONE;\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n\n/**\n * Returns this Timestamp modulo the given one.\n *\n * @method\n * @param {Timestamp} other Timestamp by which to mod.\n * @return {Timestamp} this Timestamp modulo the given one.\n */\nTimestamp.prototype.modulo = function(other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n\n/**\n * The bitwise-NOT of this value.\n *\n * @method\n * @return {Timestamp} the bitwise-NOT of this value.\n */\nTimestamp.prototype.not = function() {\n  return Timestamp.fromBits(~this.low_, ~this.high_);\n};\n\n/**\n * Returns the bitwise-AND of this Timestamp and the given one.\n *\n * @method\n * @param {Timestamp} other the Timestamp with which to AND.\n * @return {Timestamp} the bitwise-AND of this and the other.\n */\nTimestamp.prototype.and = function(other) {\n  return Timestamp.fromBits(this.low_ & other.low_, this.high_ & other.high_);\n};\n\n/**\n * Returns the bitwise-OR of this Timestamp and the given one.\n *\n * @method\n * @param {Timestamp} other the Timestamp with which to OR.\n * @return {Timestamp} the bitwise-OR of this and the other.\n */\nTimestamp.prototype.or = function(other) {\n  return Timestamp.fromBits(this.low_ | other.low_, this.high_ | other.high_);\n};\n\n/**\n * Returns the bitwise-XOR of this Timestamp and the given one.\n *\n * @method\n * @param {Timestamp} other the Timestamp with which to XOR.\n * @return {Timestamp} the bitwise-XOR of this and the other.\n */\nTimestamp.prototype.xor = function(other) {\n  return Timestamp.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);\n};\n\n/**\n * Returns this Timestamp with bits shifted to the left by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Timestamp} this shifted to the left by the given amount.\n */\nTimestamp.prototype.shiftLeft = function(numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var low = this.low_;\n    if (numBits < 32) {\n      var high = this.high_;\n      return Timestamp.fromBits(low << numBits, (high << numBits) | (low >>> (32 - numBits)));\n    } else {\n      return Timestamp.fromBits(0, low << (numBits - 32));\n    }\n  }\n};\n\n/**\n * Returns this Timestamp with bits shifted to the right by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Timestamp} this shifted to the right by the given amount.\n */\nTimestamp.prototype.shiftRight = function(numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Timestamp.fromBits((low >>> numBits) | (high << (32 - numBits)), high >> numBits);\n    } else {\n      return Timestamp.fromBits(high >> (numBits - 32), high >= 0 ? 0 : -1);\n    }\n  }\n};\n\n/**\n * Returns this Timestamp with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Timestamp} this shifted to the right by the given amount, with zeros placed into the new leading bits.\n */\nTimestamp.prototype.shiftRightUnsigned = function(numBits) {\n  numBits &= 63;\n  if (numBits === 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Timestamp.fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits);\n    } else if (numBits === 32) {\n      return Timestamp.fromBits(high, 0);\n    } else {\n      return Timestamp.fromBits(high >>> (numBits - 32), 0);\n    }\n  }\n};\n\n/**\n * Returns a Timestamp representing the given (32-bit) integer value.\n *\n * @method\n * @param {number} value the 32-bit integer in question.\n * @return {Timestamp} the corresponding Timestamp value.\n */\nTimestamp.fromInt = function(value) {\n  if (-128 <= value && value < 128) {\n    var cachedObj = Timestamp.INT_CACHE_[value];\n    if (cachedObj) {\n      return cachedObj;\n    }\n  }\n\n  var obj = new Timestamp(value | 0, value < 0 ? -1 : 0);\n  if (-128 <= value && value < 128) {\n    Timestamp.INT_CACHE_[value] = obj;\n  }\n  return obj;\n};\n\n/**\n * Returns a Timestamp representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n *\n * @method\n * @param {number} value the number in question.\n * @return {Timestamp} the corresponding Timestamp value.\n */\nTimestamp.fromNumber = function(value) {\n  if (isNaN(value) || !isFinite(value)) {\n    return Timestamp.ZERO;\n  } else if (value <= -Timestamp.TWO_PWR_63_DBL_) {\n    return Timestamp.MIN_VALUE;\n  } else if (value + 1 >= Timestamp.TWO_PWR_63_DBL_) {\n    return Timestamp.MAX_VALUE;\n  } else if (value < 0) {\n    return Timestamp.fromNumber(-value).negate();\n  } else {\n    return new Timestamp(\n      (value % Timestamp.TWO_PWR_32_DBL_) | 0,\n      (value / Timestamp.TWO_PWR_32_DBL_) | 0\n    );\n  }\n};\n\n/**\n * Returns a Timestamp representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.\n *\n * @method\n * @param {number} lowBits the low 32-bits.\n * @param {number} highBits the high 32-bits.\n * @return {Timestamp} the corresponding Timestamp value.\n */\nTimestamp.fromBits = function(lowBits, highBits) {\n  return new Timestamp(lowBits, highBits);\n};\n\n/**\n * Returns a Timestamp representation of the given string, written using the given radix.\n *\n * @method\n * @param {string} str the textual representation of the Timestamp.\n * @param {number} opt_radix the radix in which the text is written.\n * @return {Timestamp} the corresponding Timestamp value.\n */\nTimestamp.fromString = function(str, opt_radix) {\n  if (str.length === 0) {\n    throw Error('number format error: empty string');\n  }\n\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (str.charAt(0) === '-') {\n    return Timestamp.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw Error('number format error: interior \"-\" character: ' + str);\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Timestamp.fromNumber(Math.pow(radix, 8));\n\n  var result = Timestamp.ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = Timestamp.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(Timestamp.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(Timestamp.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n/**\n * A cache of the Timestamp representations of small integer values.\n * @type {Object}\n * @ignore\n */\nTimestamp.INT_CACHE_ = {};\n\n// NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_16_DBL_ = 1 << 16;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_24_DBL_ = 1 << 24;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_32_DBL_ = Timestamp.TWO_PWR_16_DBL_ * Timestamp.TWO_PWR_16_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_31_DBL_ = Timestamp.TWO_PWR_32_DBL_ / 2;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_48_DBL_ = Timestamp.TWO_PWR_32_DBL_ * Timestamp.TWO_PWR_16_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_64_DBL_ = Timestamp.TWO_PWR_32_DBL_ * Timestamp.TWO_PWR_32_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nTimestamp.TWO_PWR_63_DBL_ = Timestamp.TWO_PWR_64_DBL_ / 2;\n\n/** @type {Timestamp} */\nTimestamp.ZERO = Timestamp.fromInt(0);\n\n/** @type {Timestamp} */\nTimestamp.ONE = Timestamp.fromInt(1);\n\n/** @type {Timestamp} */\nTimestamp.NEG_ONE = Timestamp.fromInt(-1);\n\n/** @type {Timestamp} */\nTimestamp.MAX_VALUE = Timestamp.fromBits(0xffffffff | 0, 0x7fffffff | 0);\n\n/** @type {Timestamp} */\nTimestamp.MIN_VALUE = Timestamp.fromBits(0, 0x80000000 | 0);\n\n/**\n * @type {Timestamp}\n * @ignore\n */\nTimestamp.TWO_PWR_24_ = Timestamp.fromInt(1 << 24);\n\n/**\n * Expose.\n */\nmodule.exports = Timestamp;\nmodule.exports.Timestamp = Timestamp;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_bson@1.0.6@bson/lib/bson/timestamp.js\n// module id = 70\n// module chunks = 0","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_lodash.get@4.4.2@lodash.get/index.js\n// module id = 71\n// module chunks = 0","'use strict';\n\nvar f = require('util').format,\n  require_optional = require('require_optional'),\n  Query = require('../connection/commands').Query,\n  MongoError = require('../error').MongoError;\n\nvar AuthSession = function(db, username, password, options) {\n  this.db = db;\n  this.username = username;\n  this.password = password;\n  this.options = options;\n};\n\nAuthSession.prototype.equal = function(session) {\n  return (\n    session.db === this.db &&\n    session.username === this.username &&\n    session.password === this.password\n  );\n};\n\n// Kerberos class\nvar Kerberos = null;\nvar MongoAuthProcess = null;\n\n// Try to grab the Kerberos class\ntry {\n  Kerberos = require_optional('kerberos').Kerberos;\n  // Authentication process for Mongo\n  MongoAuthProcess = require_optional('kerberos').processes.MongoAuthProcess;\n} catch (err) {} // eslint-disable-line\n\n/**\n * Creates a new GSSAPI authentication mechanism\n * @class\n * @return {GSSAPI} A cursor instance\n */\nvar GSSAPI = function(bson) {\n  this.bson = bson;\n  this.authStore = [];\n};\n\n/**\n * Authenticate\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {string} db Name of the database\n * @param {string} username Username\n * @param {string} password Password\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nGSSAPI.prototype.auth = function(server, connections, db, username, password, options, callback) {\n  var self = this;\n  // We don't have the Kerberos library\n  if (Kerberos == null) return callback(new Error('Kerberos library is not installed'));\n  var gssapiServiceName = options['gssapiServiceName'] || 'mongodb';\n  // Total connections\n  var count = connections.length;\n  if (count === 0) return callback(null, null);\n\n  // Valid connections\n  var numberOfValidConnections = 0;\n  var errorObject = null;\n\n  // For each connection we need to authenticate\n  while (connections.length > 0) {\n    // Execute MongoCR\n    var execute = function(connection) {\n      // Start Auth process for a connection\n      GSSAPIInitialize(\n        self,\n        db,\n        username,\n        password,\n        db,\n        gssapiServiceName,\n        server,\n        connection,\n        options,\n        function(err, r) {\n          // Adjust count\n          count = count - 1;\n\n          // If we have an error\n          if (err) {\n            errorObject = err;\n          } else if (r.result['$err']) {\n            errorObject = r.result;\n          } else if (r.result['errmsg']) {\n            errorObject = r.result;\n          } else {\n            numberOfValidConnections = numberOfValidConnections + 1;\n          }\n\n          // We have authenticated all connections\n          if (count === 0 && numberOfValidConnections > 0) {\n            // Store the auth details\n            addAuthSession(self.authStore, new AuthSession(db, username, password, options));\n            // Return correct authentication\n            callback(null, true);\n          } else if (count === 0) {\n            if (errorObject == null)\n              errorObject = new MongoError(f('failed to authenticate using mongocr'));\n            callback(errorObject, false);\n          }\n        }\n      );\n    };\n\n    var _execute = function(_connection) {\n      process.nextTick(function() {\n        execute(_connection);\n      });\n    };\n\n    _execute(connections.shift());\n  }\n};\n\n//\n// Initialize step\nvar GSSAPIInitialize = function(\n  self,\n  db,\n  username,\n  password,\n  authdb,\n  gssapiServiceName,\n  server,\n  connection,\n  options,\n  callback\n) {\n  // Create authenticator\n  var mongo_auth_process = new MongoAuthProcess(\n    connection.host,\n    connection.port,\n    gssapiServiceName,\n    options\n  );\n\n  // Perform initialization\n  mongo_auth_process.init(username, password, function(err) {\n    if (err) return callback(err, false);\n\n    // Perform the first step\n    mongo_auth_process.transition('', function(err, payload) {\n      if (err) return callback(err, false);\n\n      // Call the next db step\n      MongoDBGSSAPIFirstStep(\n        self,\n        mongo_auth_process,\n        payload,\n        db,\n        username,\n        password,\n        authdb,\n        server,\n        connection,\n        callback\n      );\n    });\n  });\n};\n\n//\n// Perform first step against mongodb\nvar MongoDBGSSAPIFirstStep = function(\n  self,\n  mongo_auth_process,\n  payload,\n  db,\n  username,\n  password,\n  authdb,\n  server,\n  connection,\n  callback\n) {\n  // Build the sasl start command\n  var command = {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload: payload,\n    autoAuthorize: 1\n  };\n\n  // Write the commmand on the connection\n  server(\n    connection,\n    new Query(self.bson, '$external.$cmd', command, {\n      numberToSkip: 0,\n      numberToReturn: 1\n    }),\n    function(err, r) {\n      if (err) return callback(err, false);\n      var doc = r.result;\n      // Execute mongodb transition\n      mongo_auth_process.transition(r.result.payload, function(err, payload) {\n        if (err) return callback(err, false);\n\n        // MongoDB API Second Step\n        MongoDBGSSAPISecondStep(\n          self,\n          mongo_auth_process,\n          payload,\n          doc,\n          db,\n          username,\n          password,\n          authdb,\n          server,\n          connection,\n          callback\n        );\n      });\n    }\n  );\n};\n\n//\n// Perform first step against mongodb\nvar MongoDBGSSAPISecondStep = function(\n  self,\n  mongo_auth_process,\n  payload,\n  doc,\n  db,\n  username,\n  password,\n  authdb,\n  server,\n  connection,\n  callback\n) {\n  // Build Authentication command to send to MongoDB\n  var command = {\n    saslContinue: 1,\n    conversationId: doc.conversationId,\n    payload: payload\n  };\n\n  // Execute the command\n  // Write the commmand on the connection\n  server(\n    connection,\n    new Query(self.bson, '$external.$cmd', command, {\n      numberToSkip: 0,\n      numberToReturn: 1\n    }),\n    function(err, r) {\n      if (err) return callback(err, false);\n      var doc = r.result;\n      // Call next transition for kerberos\n      mongo_auth_process.transition(doc.payload, function(err, payload) {\n        if (err) return callback(err, false);\n\n        // Call the last and third step\n        MongoDBGSSAPIThirdStep(\n          self,\n          mongo_auth_process,\n          payload,\n          doc,\n          db,\n          username,\n          password,\n          authdb,\n          server,\n          connection,\n          callback\n        );\n      });\n    }\n  );\n};\n\nvar MongoDBGSSAPIThirdStep = function(\n  self,\n  mongo_auth_process,\n  payload,\n  doc,\n  db,\n  username,\n  password,\n  authdb,\n  server,\n  connection,\n  callback\n) {\n  // Build final command\n  var command = {\n    saslContinue: 1,\n    conversationId: doc.conversationId,\n    payload: payload\n  };\n\n  // Execute the command\n  server(\n    connection,\n    new Query(self.bson, '$external.$cmd', command, {\n      numberToSkip: 0,\n      numberToReturn: 1\n    }),\n    function(err, r) {\n      if (err) return callback(err, false);\n      mongo_auth_process.transition(null, function(err) {\n        if (err) return callback(err, null);\n        callback(null, r);\n      });\n    }\n  );\n};\n\n// Add to store only if it does not exist\nvar addAuthSession = function(authStore, session) {\n  var found = false;\n\n  for (var i = 0; i < authStore.length; i++) {\n    if (authStore[i].equal(session)) {\n      found = true;\n      break;\n    }\n  }\n\n  if (!found) authStore.push(session);\n};\n\n/**\n * Remove authStore credentials\n * @method\n * @param {string} db Name of database we are removing authStore details about\n * @return {object}\n */\nGSSAPI.prototype.logout = function(dbName) {\n  this.authStore = this.authStore.filter(function(x) {\n    return x.db !== dbName;\n  });\n};\n\n/**\n * Re authenticate pool\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nGSSAPI.prototype.reauthenticate = function(server, connections, callback) {\n  var authStore = this.authStore.slice(0);\n  var count = authStore.length;\n  if (count === 0) return callback(null, null);\n  // Iterate over all the auth details stored\n  for (var i = 0; i < authStore.length; i++) {\n    this.auth(\n      server,\n      connections,\n      authStore[i].db,\n      authStore[i].username,\n      authStore[i].password,\n      authStore[i].options,\n      function(err) {\n        count = count - 1;\n        // Done re-authenticating\n        if (count === 0) {\n          callback(err, null);\n        }\n      }\n    );\n  }\n};\n\n/**\n * This is a result from a authentication strategy\n *\n * @callback authResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {boolean} result The result of the authentication process\n */\n\nmodule.exports = GSSAPI;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/auth/gssapi.js\n// module id = 72\n// module chunks = 0","'use strict';\n\nvar f = require('util').format,\n  crypto = require('crypto'),\n  Query = require('../connection/commands').Query,\n  MongoError = require('../error').MongoError;\n\nvar AuthSession = function(db, username, password) {\n  this.db = db;\n  this.username = username;\n  this.password = password;\n};\n\nAuthSession.prototype.equal = function(session) {\n  return (\n    session.db === this.db &&\n    session.username === this.username &&\n    session.password === this.password\n  );\n};\n\n/**\n * Creates a new MongoCR authentication mechanism\n * @class\n * @return {MongoCR} A cursor instance\n */\nvar MongoCR = function(bson) {\n  this.bson = bson;\n  this.authStore = [];\n};\n\n// Add to store only if it does not exist\nvar addAuthSession = function(authStore, session) {\n  var found = false;\n\n  for (var i = 0; i < authStore.length; i++) {\n    if (authStore[i].equal(session)) {\n      found = true;\n      break;\n    }\n  }\n\n  if (!found) authStore.push(session);\n};\n\n/**\n * Authenticate\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {string} db Name of the database\n * @param {string} username Username\n * @param {string} password Password\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nMongoCR.prototype.auth = function(server, connections, db, username, password, callback) {\n  var self = this;\n  // Total connections\n  var count = connections.length;\n  if (count === 0) return callback(null, null);\n\n  // Valid connections\n  var numberOfValidConnections = 0;\n  var errorObject = null;\n\n  // For each connection we need to authenticate\n  while (connections.length > 0) {\n    // Execute MongoCR\n    var executeMongoCR = function(connection) {\n      // Write the commmand on the connection\n      server(\n        connection,\n        new Query(\n          self.bson,\n          f('%s.$cmd', db),\n          {\n            getnonce: 1\n          },\n          {\n            numberToSkip: 0,\n            numberToReturn: 1\n          }\n        ),\n        function(err, r) {\n          var nonce = null;\n          var key = null;\n\n          // Adjust the number of connections left\n          // Get nonce\n          if (err == null) {\n            nonce = r.result.nonce;\n            // Use node md5 generator\n            var md5 = crypto.createHash('md5');\n            // Generate keys used for authentication\n            md5.update(username + ':mongo:' + password, 'utf8');\n            var hash_password = md5.digest('hex');\n            // Final key\n            md5 = crypto.createHash('md5');\n            md5.update(nonce + username + hash_password, 'utf8');\n            key = md5.digest('hex');\n          }\n\n          // Execute command\n          // Write the commmand on the connection\n          server(\n            connection,\n            new Query(\n              self.bson,\n              f('%s.$cmd', db),\n              {\n                authenticate: 1,\n                user: username,\n                nonce: nonce,\n                key: key\n              },\n              {\n                numberToSkip: 0,\n                numberToReturn: 1\n              }\n            ),\n            function(err, r) {\n              count = count - 1;\n\n              // If we have an error\n              if (err) {\n                errorObject = err;\n              } else if (r.result['$err']) {\n                errorObject = r.result;\n              } else if (r.result['errmsg']) {\n                errorObject = r.result;\n              } else {\n                numberOfValidConnections = numberOfValidConnections + 1;\n              }\n\n              // We have authenticated all connections\n              if (count === 0 && numberOfValidConnections > 0) {\n                // Store the auth details\n                addAuthSession(self.authStore, new AuthSession(db, username, password));\n                // Return correct authentication\n                callback(null, true);\n              } else if (count === 0) {\n                if (errorObject == null)\n                  errorObject = new MongoError(f('failed to authenticate using mongocr'));\n                callback(errorObject, false);\n              }\n            }\n          );\n        }\n      );\n    };\n\n    var _execute = function(_connection) {\n      process.nextTick(function() {\n        executeMongoCR(_connection);\n      });\n    };\n\n    _execute(connections.shift());\n  }\n};\n\n/**\n * Remove authStore credentials\n * @method\n * @param {string} db Name of database we are removing authStore details about\n * @return {object}\n */\nMongoCR.prototype.logout = function(dbName) {\n  this.authStore = this.authStore.filter(function(x) {\n    return x.db !== dbName;\n  });\n};\n\n/**\n * Re authenticate pool\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nMongoCR.prototype.reauthenticate = function(server, connections, callback) {\n  var authStore = this.authStore.slice(0);\n  var count = authStore.length;\n  if (count === 0) return callback(null, null);\n  // Iterate over all the auth details stored\n  for (var i = 0; i < authStore.length; i++) {\n    this.auth(\n      server,\n      connections,\n      authStore[i].db,\n      authStore[i].username,\n      authStore[i].password,\n      function(err) {\n        count = count - 1;\n        // Done re-authenticating\n        if (count === 0) {\n          callback(err, null);\n        }\n      }\n    );\n  }\n};\n\n/**\n * This is a result from a authentication strategy\n *\n * @callback authResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {boolean} result The result of the authentication process\n */\n\nmodule.exports = MongoCR;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/auth/mongocr.js\n// module id = 73\n// module chunks = 0","'use strict';\n\nvar f = require('util').format,\n  retrieveBSON = require('../connection/utils').retrieveBSON,\n  Query = require('../connection/commands').Query,\n  MongoError = require('../error').MongoError;\n\nvar BSON = retrieveBSON(),\n  Binary = BSON.Binary;\n\nvar AuthSession = function(db, username, password) {\n  this.db = db;\n  this.username = username;\n  this.password = password;\n};\n\nAuthSession.prototype.equal = function(session) {\n  return (\n    session.db === this.db &&\n    session.username === this.username &&\n    session.password === this.password\n  );\n};\n\n/**\n * Creates a new Plain authentication mechanism\n * @class\n * @return {Plain} A cursor instance\n */\nvar Plain = function(bson) {\n  this.bson = bson;\n  this.authStore = [];\n};\n\n/**\n * Authenticate\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {string} db Name of the database\n * @param {string} username Username\n * @param {string} password Password\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nPlain.prototype.auth = function(server, connections, db, username, password, callback) {\n  var self = this;\n  // Total connections\n  var count = connections.length;\n  if (count === 0) return callback(null, null);\n\n  // Valid connections\n  var numberOfValidConnections = 0;\n  var errorObject = null;\n\n  // For each connection we need to authenticate\n  while (connections.length > 0) {\n    // Execute MongoCR\n    var execute = function(connection) {\n      // Create payload\n      var payload = new Binary(f('\\x00%s\\x00%s', username, password));\n\n      // Let's start the sasl process\n      var command = {\n        saslStart: 1,\n        mechanism: 'PLAIN',\n        payload: payload,\n        autoAuthorize: 1\n      };\n\n      // Let's start the process\n      server(\n        connection,\n        new Query(self.bson, '$external.$cmd', command, {\n          numberToSkip: 0,\n          numberToReturn: 1\n        }),\n        function(err, r) {\n          // Adjust count\n          count = count - 1;\n\n          // If we have an error\n          if (err) {\n            errorObject = err;\n          } else if (r.result['$err']) {\n            errorObject = r.result;\n          } else if (r.result['errmsg']) {\n            errorObject = r.result;\n          } else {\n            numberOfValidConnections = numberOfValidConnections + 1;\n          }\n\n          // We have authenticated all connections\n          if (count === 0 && numberOfValidConnections > 0) {\n            // Store the auth details\n            addAuthSession(self.authStore, new AuthSession(db, username, password));\n            // Return correct authentication\n            callback(null, true);\n          } else if (count === 0) {\n            if (errorObject == null)\n              errorObject = new MongoError(f('failed to authenticate using mongocr'));\n            callback(errorObject, false);\n          }\n        }\n      );\n    };\n\n    var _execute = function(_connection) {\n      process.nextTick(function() {\n        execute(_connection);\n      });\n    };\n\n    _execute(connections.shift());\n  }\n};\n\n// Add to store only if it does not exist\nvar addAuthSession = function(authStore, session) {\n  var found = false;\n\n  for (var i = 0; i < authStore.length; i++) {\n    if (authStore[i].equal(session)) {\n      found = true;\n      break;\n    }\n  }\n\n  if (!found) authStore.push(session);\n};\n\n/**\n * Remove authStore credentials\n * @method\n * @param {string} db Name of database we are removing authStore details about\n * @return {object}\n */\nPlain.prototype.logout = function(dbName) {\n  this.authStore = this.authStore.filter(function(x) {\n    return x.db !== dbName;\n  });\n};\n\n/**\n * Re authenticate pool\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nPlain.prototype.reauthenticate = function(server, connections, callback) {\n  var authStore = this.authStore.slice(0);\n  var count = authStore.length;\n  if (count === 0) return callback(null, null);\n  // Iterate over all the auth details stored\n  for (var i = 0; i < authStore.length; i++) {\n    this.auth(\n      server,\n      connections,\n      authStore[i].db,\n      authStore[i].username,\n      authStore[i].password,\n      function(err) {\n        count = count - 1;\n        // Done re-authenticating\n        if (count === 0) {\n          callback(err, null);\n        }\n      }\n    );\n  }\n};\n\n/**\n * This is a result from a authentication strategy\n *\n * @callback authResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {boolean} result The result of the authentication process\n */\n\nmodule.exports = Plain;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/auth/plain.js\n// module id = 74\n// module chunks = 0","'use strict';\n\nvar f = require('util').format,\n  crypto = require('crypto'),\n  retrieveBSON = require('../connection/utils').retrieveBSON,\n  Query = require('../connection/commands').Query,\n  MongoError = require('../error').MongoError;\n\nvar BSON = retrieveBSON(),\n  Binary = BSON.Binary;\n\nvar AuthSession = function(db, username, password) {\n  this.db = db;\n  this.username = username;\n  this.password = password;\n};\n\nAuthSession.prototype.equal = function(session) {\n  return (\n    session.db === this.db &&\n    session.username === this.username &&\n    session.password === this.password\n  );\n};\n\nvar id = 0;\n\n/**\n * Creates a new ScramSHA1 authentication mechanism\n * @class\n * @return {ScramSHA1} A cursor instance\n */\nvar ScramSHA1 = function(bson) {\n  this.bson = bson;\n  this.authStore = [];\n  this.id = id++;\n};\n\nvar parsePayload = function(payload) {\n  var dict = {};\n  var parts = payload.split(',');\n\n  for (var i = 0; i < parts.length; i++) {\n    var valueParts = parts[i].split('=');\n    dict[valueParts[0]] = valueParts[1];\n  }\n\n  return dict;\n};\n\nvar passwordDigest = function(username, password) {\n  if (typeof username !== 'string') throw new MongoError('username must be a string');\n  if (typeof password !== 'string') throw new MongoError('password must be a string');\n  if (password.length === 0) throw new MongoError('password cannot be empty');\n  // Use node md5 generator\n  var md5 = crypto.createHash('md5');\n  // Generate keys used for authentication\n  md5.update(username + ':mongo:' + password, 'utf8');\n  return md5.digest('hex');\n};\n\n// XOR two buffers\nvar xor = function(a, b) {\n  if (!Buffer.isBuffer(a)) a = new Buffer(a);\n  if (!Buffer.isBuffer(b)) b = new Buffer(b);\n  var res = [];\n  if (a.length > b.length) {\n    for (var i = 0; i < b.length; i++) {\n      res.push(a[i] ^ b[i]);\n    }\n  } else {\n    for (i = 0; i < a.length; i++) {\n      res.push(a[i] ^ b[i]);\n    }\n  }\n  return new Buffer(res);\n};\n\nvar _hiCache = {};\nvar _hiCacheCount = 0;\nvar _hiCachePurge = function() {\n  _hiCache = {};\n  _hiCacheCount = 0;\n};\n\nvar hi = function(data, salt, iterations) {\n  // omit the work if already generated\n  var key = [data, salt.toString('base64'), iterations].join('_');\n  if (_hiCache[key] !== undefined) {\n    return _hiCache[key];\n  }\n\n  // generate the salt\n  var saltedData = crypto.pbkdf2Sync(data, salt, iterations, 20, 'sha1');\n\n  // cache a copy to speed up the next lookup, but prevent unbounded cache growth\n  if (_hiCacheCount >= 200) {\n    _hiCachePurge();\n  }\n\n  _hiCache[key] = saltedData;\n  _hiCacheCount += 1;\n  return saltedData;\n};\n\n/**\n * Authenticate\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {string} db Name of the database\n * @param {string} username Username\n * @param {string} password Password\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nScramSHA1.prototype.auth = function(server, connections, db, username, password, callback) {\n  var self = this;\n  // Total connections\n  var count = connections.length;\n  if (count === 0) return callback(null, null);\n\n  // Valid connections\n  var numberOfValidConnections = 0;\n  var errorObject = null;\n\n  // Execute MongoCR\n  var executeScram = function(connection) {\n    // Clean up the user\n    username = username.replace('=', '=3D').replace(',', '=2C');\n\n    // Create a random nonce\n    var nonce = crypto.randomBytes(24).toString('base64');\n    // var nonce = 'MsQUY9iw0T9fx2MUEz6LZPwGuhVvWAhc'\n    var firstBare = f('n=%s,r=%s', username, nonce);\n\n    // Build command structure\n    var cmd = {\n      saslStart: 1,\n      mechanism: 'SCRAM-SHA-1',\n      payload: new Binary(f('n,,%s', firstBare)),\n      autoAuthorize: 1\n    };\n\n    // Handle the error\n    var handleError = function(err, r) {\n      if (err) {\n        numberOfValidConnections = numberOfValidConnections - 1;\n        errorObject = err;\n        return false;\n      } else if (r.result['$err']) {\n        errorObject = r.result;\n        return false;\n      } else if (r.result['errmsg']) {\n        errorObject = r.result;\n        return false;\n      } else {\n        numberOfValidConnections = numberOfValidConnections + 1;\n      }\n\n      return true;\n    };\n\n    // Finish up\n    var finish = function(_count, _numberOfValidConnections) {\n      if (_count === 0 && _numberOfValidConnections > 0) {\n        // Store the auth details\n        addAuthSession(self.authStore, new AuthSession(db, username, password));\n        // Return correct authentication\n        return callback(null, true);\n      } else if (_count === 0) {\n        if (errorObject == null)\n          errorObject = new MongoError(f('failed to authenticate using scram'));\n        return callback(errorObject, false);\n      }\n    };\n\n    var handleEnd = function(_err, _r) {\n      // Handle any error\n      handleError(_err, _r);\n      // Adjust the number of connections\n      count = count - 1;\n      // Execute the finish\n      finish(count, numberOfValidConnections);\n    };\n\n    // Write the commmand on the connection\n    server(\n      connection,\n      new Query(self.bson, f('%s.$cmd', db), cmd, {\n        numberToSkip: 0,\n        numberToReturn: 1\n      }),\n      function(err, r) {\n        // Do we have an error, handle it\n        if (handleError(err, r) === false) {\n          count = count - 1;\n\n          if (count === 0 && numberOfValidConnections > 0) {\n            // Store the auth details\n            addAuthSession(self.authStore, new AuthSession(db, username, password));\n            // Return correct authentication\n            return callback(null, true);\n          } else if (count === 0) {\n            if (errorObject == null)\n              errorObject = new MongoError(f('failed to authenticate using scram'));\n            return callback(errorObject, false);\n          }\n\n          return;\n        }\n\n        // Get the dictionary\n        var dict = parsePayload(r.result.payload.value());\n\n        // Unpack dictionary\n        var iterations = parseInt(dict.i, 10);\n        var salt = dict.s;\n        var rnonce = dict.r;\n\n        // Set up start of proof\n        var withoutProof = f('c=biws,r=%s', rnonce);\n        var passwordDig = passwordDigest(username, password);\n        var saltedPassword = hi(passwordDig, new Buffer(salt, 'base64'), iterations);\n\n        // Create the client key\n        var hmac = crypto.createHmac('sha1', saltedPassword);\n        hmac.update(new Buffer('Client Key'));\n        var clientKey = new Buffer(hmac.digest('base64'), 'base64');\n\n        // Create the stored key\n        var hash = crypto.createHash('sha1');\n        hash.update(clientKey);\n        var storedKey = new Buffer(hash.digest('base64'), 'base64');\n\n        // Create the authentication message\n        var authMsg = [firstBare, r.result.payload.value().toString('base64'), withoutProof].join(\n          ','\n        );\n\n        // Create client signature\n        hmac = crypto.createHmac('sha1', storedKey);\n        hmac.update(new Buffer(authMsg));\n        var clientSig = new Buffer(hmac.digest('base64'), 'base64');\n\n        // Create client proof\n        var clientProof = f('p=%s', new Buffer(xor(clientKey, clientSig)).toString('base64'));\n\n        // Create client final\n        var clientFinal = [withoutProof, clientProof].join(',');\n\n        //\n        // Create continue message\n        var cmd = {\n          saslContinue: 1,\n          conversationId: r.result.conversationId,\n          payload: new Binary(new Buffer(clientFinal))\n        };\n\n        //\n        // Execute sasl continue\n        // Write the commmand on the connection\n        server(\n          connection,\n          new Query(self.bson, f('%s.$cmd', db), cmd, {\n            numberToSkip: 0,\n            numberToReturn: 1\n          }),\n          function(err, r) {\n            if (r && r.result.done === false) {\n              var cmd = {\n                saslContinue: 1,\n                conversationId: r.result.conversationId,\n                payload: new Buffer(0)\n              };\n\n              // Write the commmand on the connection\n              server(\n                connection,\n                new Query(self.bson, f('%s.$cmd', db), cmd, {\n                  numberToSkip: 0,\n                  numberToReturn: 1\n                }),\n                function(err, r) {\n                  handleEnd(err, r);\n                }\n              );\n            } else {\n              handleEnd(err, r);\n            }\n          }\n        );\n      }\n    );\n  };\n\n  var _execute = function(_connection) {\n    process.nextTick(function() {\n      executeScram(_connection);\n    });\n  };\n\n  // For each connection we need to authenticate\n  while (connections.length > 0) {\n    _execute(connections.shift());\n  }\n};\n\n// Add to store only if it does not exist\nvar addAuthSession = function(authStore, session) {\n  var found = false;\n\n  for (var i = 0; i < authStore.length; i++) {\n    if (authStore[i].equal(session)) {\n      found = true;\n      break;\n    }\n  }\n\n  if (!found) authStore.push(session);\n};\n\n/**\n * Remove authStore credentials\n * @method\n * @param {string} db Name of database we are removing authStore details about\n * @return {object}\n */\nScramSHA1.prototype.logout = function(dbName) {\n  this.authStore = this.authStore.filter(function(x) {\n    return x.db !== dbName;\n  });\n};\n\n/**\n * Re authenticate pool\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nScramSHA1.prototype.reauthenticate = function(server, connections, callback) {\n  var authStore = this.authStore.slice(0);\n  var count = authStore.length;\n  // No connections\n  if (count === 0) return callback(null, null);\n  // Iterate over all the auth details stored\n  for (var i = 0; i < authStore.length; i++) {\n    this.auth(\n      server,\n      connections,\n      authStore[i].db,\n      authStore[i].username,\n      authStore[i].password,\n      function(err) {\n        count = count - 1;\n        // Done re-authenticating\n        if (count === 0) {\n          callback(err, null);\n        }\n      }\n    );\n  }\n};\n\nmodule.exports = ScramSHA1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/auth/scram.js\n// module id = 75\n// module chunks = 0","'use strict';\n\nvar f = require('util').format,\n  Query = require('../connection/commands').Query,\n  MongoError = require('../error').MongoError;\n\nvar AuthSession = function(db, username, password) {\n  this.db = db;\n  this.username = username;\n  this.password = password;\n};\n\nAuthSession.prototype.equal = function(session) {\n  return (\n    session.db === this.db &&\n    session.username === this.username &&\n    session.password === this.password\n  );\n};\n\n/**\n * Creates a new X509 authentication mechanism\n * @class\n * @return {X509} A cursor instance\n */\nvar X509 = function(bson) {\n  this.bson = bson;\n  this.authStore = [];\n};\n\n/**\n * Authenticate\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {string} db Name of the database\n * @param {string} username Username\n * @param {string} password Password\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nX509.prototype.auth = function(server, connections, db, username, password, callback) {\n  var self = this;\n  // Total connections\n  var count = connections.length;\n  if (count === 0) return callback(null, null);\n\n  // Valid connections\n  var numberOfValidConnections = 0;\n  var errorObject = null;\n\n  // For each connection we need to authenticate\n  while (connections.length > 0) {\n    // Execute MongoCR\n    var execute = function(connection) {\n      // Let's start the sasl process\n      var command = {\n        authenticate: 1,\n        mechanism: 'MONGODB-X509'\n      };\n\n      // Add username if specified\n      if (username) {\n        command.user = username;\n      }\n\n      // Let's start the process\n      server(\n        connection,\n        new Query(self.bson, '$external.$cmd', command, {\n          numberToSkip: 0,\n          numberToReturn: 1\n        }),\n        function(err, r) {\n          // Adjust count\n          count = count - 1;\n\n          // If we have an error\n          if (err) {\n            errorObject = err;\n          } else if (r.result['$err']) {\n            errorObject = r.result;\n          } else if (r.result['errmsg']) {\n            errorObject = r.result;\n          } else {\n            numberOfValidConnections = numberOfValidConnections + 1;\n          }\n\n          // We have authenticated all connections\n          if (count === 0 && numberOfValidConnections > 0) {\n            // Store the auth details\n            addAuthSession(self.authStore, new AuthSession(db, username, password));\n            // Return correct authentication\n            callback(null, true);\n          } else if (count === 0) {\n            if (errorObject == null)\n              errorObject = new MongoError(f('failed to authenticate using mongocr'));\n            callback(errorObject, false);\n          }\n        }\n      );\n    };\n\n    var _execute = function(_connection) {\n      process.nextTick(function() {\n        execute(_connection);\n      });\n    };\n\n    _execute(connections.shift());\n  }\n};\n\n// Add to store only if it does not exist\nvar addAuthSession = function(authStore, session) {\n  var found = false;\n\n  for (var i = 0; i < authStore.length; i++) {\n    if (authStore[i].equal(session)) {\n      found = true;\n      break;\n    }\n  }\n\n  if (!found) authStore.push(session);\n};\n\n/**\n * Remove authStore credentials\n * @method\n * @param {string} db Name of database we are removing authStore details about\n * @return {object}\n */\nX509.prototype.logout = function(dbName) {\n  this.authStore = this.authStore.filter(function(x) {\n    return x.db !== dbName;\n  });\n};\n\n/**\n * Re authenticate pool\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nX509.prototype.reauthenticate = function(server, connections, callback) {\n  var authStore = this.authStore.slice(0);\n  var count = authStore.length;\n  if (count === 0) return callback(null, null);\n  // Iterate over all the auth details stored\n  for (var i = 0; i < authStore.length; i++) {\n    this.auth(\n      server,\n      connections,\n      authStore[i].db,\n      authStore[i].username,\n      authStore[i].password,\n      function(err) {\n        count = count - 1;\n        // Done re-authenticating\n        if (count === 0) {\n          callback(err, null);\n        }\n      }\n    );\n  }\n};\n\n/**\n * This is a result from a authentication strategy\n *\n * @callback authResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {boolean} result The result of the authentication process\n */\n\nmodule.exports = X509;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/auth/x509.js\n// module id = 76\n// module chunks = 0","'use strict';\n\nvar Logger = require('./connection/logger'),\n  retrieveBSON = require('./connection/utils').retrieveBSON,\n  MongoError = require('./error').MongoError,\n  MongoNetworkError = require('./error').MongoNetworkError,\n  f = require('util').format;\n\nvar BSON = retrieveBSON(),\n  Long = BSON.Long;\n\n/**\n * This is a cursor results callback\n *\n * @callback resultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {object} document\n */\n\n/**\n * @fileOverview The **Cursor** class is an internal class that embodies a cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query.\n *\n * **CURSORS Cannot directly be instantiated**\n * @example\n * var Server = require('mongodb-core').Server\n *   , ReadPreference = require('mongodb-core').ReadPreference\n *   , assert = require('assert');\n *\n * var server = new Server({host: 'localhost', port: 27017});\n * // Wait for the connection event\n * server.on('connect', function(server) {\n *   assert.equal(null, err);\n *\n *   // Execute the write\n *   var cursor = _server.cursor('integration_tests.inserts_example4', {\n *       find: 'integration_tests.example4'\n *     , query: {a:1}\n *   }, {\n *     readPreference: new ReadPreference('secondary');\n *   });\n *\n *   // Get the first document\n *   cursor.next(function(err, doc) {\n *     assert.equal(null, err);\n *     server.destroy();\n *   });\n * });\n *\n * // Start connecting\n * server.connect();\n */\n\n/**\n * Creates a new Cursor, not to be used directly\n * @class\n * @param {object} bson An instance of the BSON parser\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {{object}|Long} cmd The selector (can be a command or a cursorId)\n * @param {object} [options=null] Optional settings.\n * @param {object} [options.batchSize=1000] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {object} [options.transforms=null] Transform methods for the cursor results\n * @param {function} [options.transforms.query] Transform the value returned from the initial query\n * @param {function} [options.transforms.doc] Transform each document returned from Cursor.prototype.next\n * @param {object} topology The server topology instance.\n * @param {object} topologyOptions The server topology options.\n * @return {Cursor} A cursor instance\n * @property {number} cursorBatchSize The current cursorBatchSize for the cursor\n * @property {number} cursorLimit The current cursorLimit for the cursor\n * @property {number} cursorSkip The current cursorSkip for the cursor\n */\nvar Cursor = function(bson, ns, cmd, options, topology, topologyOptions) {\n  options = options || {};\n\n  // Cursor pool\n  this.pool = null;\n  // Cursor server\n  this.server = null;\n\n  // Do we have a not connected handler\n  this.disconnectHandler = options.disconnectHandler;\n\n  // Set local values\n  this.bson = bson;\n  this.ns = ns;\n  this.cmd = cmd;\n  this.options = options;\n  this.topology = topology;\n\n  // All internal state\n  this.cursorState = {\n    cursorId: null,\n    cmd: cmd,\n    documents: options.documents || [],\n    cursorIndex: 0,\n    dead: false,\n    killed: false,\n    init: false,\n    notified: false,\n    limit: options.limit || cmd.limit || 0,\n    skip: options.skip || cmd.skip || 0,\n    batchSize: options.batchSize || cmd.batchSize || 1000,\n    currentLimit: 0,\n    // Result field name if not a cursor (contains the array of results)\n    transforms: options.transforms\n  };\n\n  // Add promoteLong to cursor state\n  if (typeof topologyOptions.promoteLongs === 'boolean') {\n    this.cursorState.promoteLongs = topologyOptions.promoteLongs;\n  } else if (typeof options.promoteLongs === 'boolean') {\n    this.cursorState.promoteLongs = options.promoteLongs;\n  } else if (typeof options.session === 'object') {\n    this.cursorState.session = options.session;\n  }\n\n  // Add promoteValues to cursor state\n  if (typeof topologyOptions.promoteValues === 'boolean') {\n    this.cursorState.promoteValues = topologyOptions.promoteValues;\n  } else if (typeof options.promoteValues === 'boolean') {\n    this.cursorState.promoteValues = options.promoteValues;\n  }\n\n  // Add promoteBuffers to cursor state\n  if (typeof topologyOptions.promoteBuffers === 'boolean') {\n    this.cursorState.promoteBuffers = topologyOptions.promoteBuffers;\n  } else if (typeof options.promoteBuffers === 'boolean') {\n    this.cursorState.promoteBuffers = options.promoteBuffers;\n  }\n\n  if (topologyOptions.reconnect) {\n    this.cursorState.reconnect = topologyOptions.reconnect;\n  }\n\n  // Logger\n  this.logger = Logger('Cursor', topologyOptions);\n\n  //\n  // Did we pass in a cursor id\n  if (typeof cmd === 'number') {\n    this.cursorState.cursorId = Long.fromNumber(cmd);\n    this.cursorState.lastCursorId = this.cursorState.cursorId;\n  } else if (cmd instanceof Long) {\n    this.cursorState.cursorId = cmd;\n    this.cursorState.lastCursorId = cmd;\n  }\n};\n\nCursor.prototype.setCursorBatchSize = function(value) {\n  this.cursorState.batchSize = value;\n};\n\nCursor.prototype.cursorBatchSize = function() {\n  return this.cursorState.batchSize;\n};\n\nCursor.prototype.setCursorLimit = function(value) {\n  this.cursorState.limit = value;\n};\n\nCursor.prototype.cursorLimit = function() {\n  return this.cursorState.limit;\n};\n\nCursor.prototype.setCursorSkip = function(value) {\n  this.cursorState.skip = value;\n};\n\nCursor.prototype.cursorSkip = function() {\n  return this.cursorState.skip;\n};\n\n//\n// Handle callback (including any exceptions thrown)\nvar handleCallback = function(callback, err, result) {\n  try {\n    callback(err, result);\n  } catch (err) {\n    process.nextTick(function() {\n      throw err;\n    });\n  }\n};\n\n// Internal methods\nCursor.prototype._find = function(callback) {\n  var self = this;\n\n  if (self.logger.isDebug()) {\n    self.logger.debug(\n      f(\n        'issue initial query [%s] with flags [%s]',\n        JSON.stringify(self.cmd),\n        JSON.stringify(self.query)\n      )\n    );\n  }\n\n  var queryCallback = function(err, r) {\n    if (err) return callback(err);\n\n    // Get the raw message\n    var result = r.message;\n\n    // Query failure bit set\n    if (result.queryFailure) {\n      return callback(new MongoError(result.documents[0]), null);\n    }\n\n    // Check if we have a command cursor\n    if (\n      Array.isArray(result.documents) &&\n      result.documents.length === 1 &&\n      (!self.cmd.find || (self.cmd.find && self.cmd.virtual === false)) &&\n      (result.documents[0].cursor !== 'string' ||\n        result.documents[0]['$err'] ||\n        result.documents[0]['errmsg'] ||\n        Array.isArray(result.documents[0].result))\n    ) {\n      // We have a an error document return the error\n      if (result.documents[0]['$err'] || result.documents[0]['errmsg']) {\n        return callback(new MongoError(result.documents[0]), null);\n      }\n\n      // We have a cursor document\n      if (result.documents[0].cursor != null && typeof result.documents[0].cursor !== 'string') {\n        var id = result.documents[0].cursor.id;\n        // If we have a namespace change set the new namespace for getmores\n        if (result.documents[0].cursor.ns) {\n          self.ns = result.documents[0].cursor.ns;\n        }\n        // Promote id to long if needed\n        self.cursorState.cursorId = typeof id === 'number' ? Long.fromNumber(id) : id;\n        self.cursorState.lastCursorId = self.cursorState.cursorId;\n        // If we have a firstBatch set it\n        if (Array.isArray(result.documents[0].cursor.firstBatch)) {\n          self.cursorState.documents = result.documents[0].cursor.firstBatch; //.reverse();\n        }\n\n        // Return after processing command cursor\n        return callback(null, result);\n      }\n\n      if (Array.isArray(result.documents[0].result)) {\n        self.cursorState.documents = result.documents[0].result;\n        self.cursorState.cursorId = Long.ZERO;\n        return callback(null, result);\n      }\n    }\n\n    // Otherwise fall back to regular find path\n    self.cursorState.cursorId = result.cursorId;\n    self.cursorState.documents = result.documents;\n    self.cursorState.lastCursorId = result.cursorId;\n\n    // Transform the results with passed in transformation method if provided\n    if (self.cursorState.transforms && typeof self.cursorState.transforms.query === 'function') {\n      self.cursorState.documents = self.cursorState.transforms.query(result);\n    }\n\n    // Return callback\n    callback(null, result);\n  };\n\n  // Options passed to the pool\n  var queryOptions = {};\n\n  // If we have a raw query decorate the function\n  if (self.options.raw || self.cmd.raw) {\n    // queryCallback.raw = self.options.raw || self.cmd.raw;\n    queryOptions.raw = self.options.raw || self.cmd.raw;\n  }\n\n  // Do we have documentsReturnedIn set on the query\n  if (typeof self.query.documentsReturnedIn === 'string') {\n    // queryCallback.documentsReturnedIn = self.query.documentsReturnedIn;\n    queryOptions.documentsReturnedIn = self.query.documentsReturnedIn;\n  }\n\n  // Add promote Long value if defined\n  if (typeof self.cursorState.promoteLongs === 'boolean') {\n    queryOptions.promoteLongs = self.cursorState.promoteLongs;\n  }\n\n  // Add promote values if defined\n  if (typeof self.cursorState.promoteValues === 'boolean') {\n    queryOptions.promoteValues = self.cursorState.promoteValues;\n  }\n\n  // Add promote values if defined\n  if (typeof self.cursorState.promoteBuffers === 'boolean') {\n    queryOptions.promoteBuffers = self.cursorState.promoteBuffers;\n  }\n\n  if (typeof self.cursorState.session === 'object') {\n    queryOptions.session = self.cursorState.session;\n  }\n\n  // Write the initial command out\n  self.server.s.pool.write(self.query, queryOptions, queryCallback);\n};\n\nCursor.prototype._getmore = function(callback) {\n  if (this.logger.isDebug())\n    this.logger.debug(f('schedule getMore call for query [%s]', JSON.stringify(this.query)));\n  // Determine if it's a raw query\n  var raw = this.options.raw || this.cmd.raw;\n\n  // Set the current batchSize\n  var batchSize = this.cursorState.batchSize;\n  if (\n    this.cursorState.limit > 0 &&\n    this.cursorState.currentLimit + batchSize > this.cursorState.limit\n  ) {\n    batchSize = this.cursorState.limit - this.cursorState.currentLimit;\n  }\n\n  // Default pool\n  var pool = this.server.s.pool;\n\n  // We have a wire protocol handler\n  this.server.wireProtocolHandler.getMore(\n    this.bson,\n    this.ns,\n    this.cursorState,\n    batchSize,\n    raw,\n    pool,\n    this.options,\n    callback\n  );\n};\n\nCursor.prototype._killcursor = function(callback) {\n  // Set cursor to dead\n  this.cursorState.dead = true;\n  this.cursorState.killed = true;\n  // Remove documents\n  this.cursorState.documents = [];\n\n  // If no cursor id just return\n  if (\n    this.cursorState.cursorId == null ||\n    this.cursorState.cursorId.isZero() ||\n    this.cursorState.init === false\n  ) {\n    if (callback) callback(null, null);\n    return;\n  }\n\n  // Default pool\n  var pool = this.server.s.pool;\n  // Execute command\n  this.server.wireProtocolHandler.killCursor(this.bson, this.ns, this.cursorState, pool, callback);\n};\n\n/**\n * Clone the cursor\n * @method\n * @return {Cursor}\n */\nCursor.prototype.clone = function() {\n  return this.topology.cursor(this.ns, this.cmd, this.options);\n};\n\n/**\n * Checks if the cursor is dead\n * @method\n * @return {boolean} A boolean signifying if the cursor is dead or not\n */\nCursor.prototype.isDead = function() {\n  return this.cursorState.dead === true;\n};\n\n/**\n * Checks if the cursor was killed by the application\n * @method\n * @return {boolean} A boolean signifying if the cursor was killed by the application\n */\nCursor.prototype.isKilled = function() {\n  return this.cursorState.killed === true;\n};\n\n/**\n * Checks if the cursor notified it's caller about it's death\n * @method\n * @return {boolean} A boolean signifying if the cursor notified the callback\n */\nCursor.prototype.isNotified = function() {\n  return this.cursorState.notified === true;\n};\n\n/**\n * Returns current buffered documents length\n * @method\n * @return {number} The number of items in the buffered documents\n */\nCursor.prototype.bufferedCount = function() {\n  return this.cursorState.documents.length - this.cursorState.cursorIndex;\n};\n\n/**\n * Returns current buffered documents\n * @method\n * @return {Array} An array of buffered documents\n */\nCursor.prototype.readBufferedDocuments = function(number) {\n  var unreadDocumentsLength = this.cursorState.documents.length - this.cursorState.cursorIndex;\n  var length = number < unreadDocumentsLength ? number : unreadDocumentsLength;\n  var elements = this.cursorState.documents.slice(\n    this.cursorState.cursorIndex,\n    this.cursorState.cursorIndex + length\n  );\n\n  // Transform the doc with passed in transformation method if provided\n  if (this.cursorState.transforms && typeof this.cursorState.transforms.doc === 'function') {\n    // Transform all the elements\n    for (var i = 0; i < elements.length; i++) {\n      elements[i] = this.cursorState.transforms.doc(elements[i]);\n    }\n  }\n\n  // Ensure we do not return any more documents than the limit imposed\n  // Just return the number of elements up to the limit\n  if (\n    this.cursorState.limit > 0 &&\n    this.cursorState.currentLimit + elements.length > this.cursorState.limit\n  ) {\n    elements = elements.slice(0, this.cursorState.limit - this.cursorState.currentLimit);\n    this.kill();\n  }\n\n  // Adjust current limit\n  this.cursorState.currentLimit = this.cursorState.currentLimit + elements.length;\n  this.cursorState.cursorIndex = this.cursorState.cursorIndex + elements.length;\n\n  // Return elements\n  return elements;\n};\n\n/**\n * Kill the cursor\n * @method\n * @param {resultCallback} callback A callback function\n */\nCursor.prototype.kill = function(callback) {\n  this._killcursor(callback);\n};\n\n/**\n * Resets the cursor\n * @method\n * @return {null}\n */\nCursor.prototype.rewind = function() {\n  if (this.cursorState.init) {\n    if (!this.cursorState.dead) {\n      this.kill();\n    }\n\n    this.cursorState.currentLimit = 0;\n    this.cursorState.init = false;\n    this.cursorState.dead = false;\n    this.cursorState.killed = false;\n    this.cursorState.notified = false;\n    this.cursorState.documents = [];\n    this.cursorState.cursorId = null;\n    this.cursorState.cursorIndex = 0;\n  }\n};\n\n/**\n * Validate if the pool is dead and return error\n */\nvar isConnectionDead = function(self, callback) {\n  if (self.pool && self.pool.isDestroyed()) {\n    self.cursorState.notified = true;\n    self.cursorState.killed = true;\n    self.cursorState.documents = [];\n    self.cursorState.cursorIndex = 0;\n    callback(\n      new MongoNetworkError(\n        f('connection to host %s:%s was destroyed', self.pool.host, self.pool.port)\n      )\n    );\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Validate if the cursor is dead but was not explicitly killed by user\n */\nvar isCursorDeadButNotkilled = function(self, callback) {\n  // Cursor is dead but not marked killed, return null\n  if (self.cursorState.dead && !self.cursorState.killed) {\n    self.cursorState.notified = true;\n    self.cursorState.killed = true;\n    self.cursorState.documents = [];\n    self.cursorState.cursorIndex = 0;\n    handleCallback(callback, null, null);\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Validate if the cursor is dead and was killed by user\n */\nvar isCursorDeadAndKilled = function(self, callback) {\n  if (self.cursorState.dead && self.cursorState.killed) {\n    handleCallback(callback, new MongoError('cursor is dead'));\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Validate if the cursor was killed by the user\n */\nvar isCursorKilled = function(self, callback) {\n  if (self.cursorState.killed) {\n    self.cursorState.notified = true;\n    self.cursorState.documents = [];\n    self.cursorState.cursorIndex = 0;\n    handleCallback(callback, null, null);\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Mark cursor as being dead and notified\n */\nvar setCursorDeadAndNotified = function(self, callback) {\n  self.cursorState.dead = true;\n  self.cursorState.notified = true;\n  self.cursorState.documents = [];\n  self.cursorState.cursorIndex = 0;\n  handleCallback(callback, null, null);\n};\n\n/**\n * Mark cursor as being notified\n */\nvar setCursorNotified = function(self, callback) {\n  self.cursorState.notified = true;\n  self.cursorState.documents = [];\n  self.cursorState.cursorIndex = 0;\n  handleCallback(callback, null, null);\n};\n\nvar nextFunction = function(self, callback) {\n  // We have notified about it\n  if (self.cursorState.notified) {\n    return callback(new Error('cursor is exhausted'));\n  }\n\n  // Cursor is killed return null\n  if (isCursorKilled(self, callback)) return;\n\n  // Cursor is dead but not marked killed, return null\n  if (isCursorDeadButNotkilled(self, callback)) return;\n\n  // We have a dead and killed cursor, attempting to call next should error\n  if (isCursorDeadAndKilled(self, callback)) return;\n\n  // We have just started the cursor\n  if (!self.cursorState.init) {\n    // Topology is not connected, save the call in the provided store to be\n    // Executed at some point when the handler deems it's reconnected\n    if (!self.topology.isConnected(self.options)) {\n      // Only need this for single server, because repl sets and mongos\n      // will always continue trying to reconnect\n      if (self.topology._type === 'server' && !self.topology.s.options.reconnect) {\n        // Reconnect is disabled, so we'll never reconnect\n        return callback(new MongoError('no connection available'));\n      }\n\n      if (self.disconnectHandler != null) {\n        if (self.topology.isDestroyed()) {\n          // Topology was destroyed, so don't try to wait for it to reconnect\n          return callback(new MongoError('Topology was destroyed'));\n        }\n\n        return self.disconnectHandler.addObjectAndMethod(\n          'cursor',\n          self,\n          'next',\n          [callback],\n          callback\n        );\n      }\n    }\n\n    try {\n      self.server = self.topology.getServer(self.options);\n    } catch (err) {\n      // Handle the error and add object to next method call\n      if (self.disconnectHandler != null) {\n        return self.disconnectHandler.addObjectAndMethod(\n          'cursor',\n          self,\n          'next',\n          [callback],\n          callback\n        );\n      }\n\n      // Otherwise return the error\n      return callback(err);\n    }\n\n    // Set as init\n    self.cursorState.init = true;\n\n    // Server does not support server\n    if (self.cmd && self.cmd.collation && self.server.ismaster.maxWireVersion < 5) {\n      return callback(new MongoError(f('server %s does not support collation', self.server.name)));\n    }\n\n    try {\n      self.query = self.server.wireProtocolHandler.command(\n        self.bson,\n        self.ns,\n        self.cmd,\n        self.cursorState,\n        self.topology,\n        self.options\n      );\n    } catch (err) {\n      return callback(err);\n    }\n  }\n\n  // If we don't have a cursorId execute the first query\n  if (self.cursorState.cursorId == null) {\n    // Check if pool is dead and return if not possible to\n    // execute the query against the db\n    if (isConnectionDead(self, callback)) return;\n\n    // Check if topology is destroyed\n    if (self.topology.isDestroyed())\n      return callback(\n        new MongoNetworkError('connection destroyed, not possible to instantiate cursor')\n      );\n\n    // query, cmd, options, cursorState, callback\n    self._find(function(err) {\n      if (err) return handleCallback(callback, err, null);\n\n      if (\n        self.cursorState.documents.length === 0 &&\n        self.cursorState.cursorId &&\n        self.cursorState.cursorId.isZero() &&\n        !self.cmd.tailable &&\n        !self.cmd.awaitData\n      ) {\n        return setCursorNotified(self, callback);\n      }\n\n      nextFunction(self, callback);\n    });\n  } else if (\n    self.cursorState.limit > 0 &&\n    self.cursorState.currentLimit >= self.cursorState.limit\n  ) {\n    // Ensure we kill the cursor on the server\n    self.kill();\n    // Set cursor in dead and notified state\n    return setCursorDeadAndNotified(self, callback);\n  } else if (\n    self.cursorState.cursorIndex === self.cursorState.documents.length &&\n    !Long.ZERO.equals(self.cursorState.cursorId)\n  ) {\n    // Ensure an empty cursor state\n    self.cursorState.documents = [];\n    self.cursorState.cursorIndex = 0;\n\n    // Check if topology is destroyed\n    if (self.topology.isDestroyed())\n      return callback(\n        new MongoNetworkError('connection destroyed, not possible to instantiate cursor')\n      );\n\n    // Check if connection is dead and return if not possible to\n    // execute a getmore on this connection\n    if (isConnectionDead(self, callback)) return;\n\n    // Execute the next get more\n    self._getmore(function(err, doc, connection) {\n      if (err) return handleCallback(callback, err);\n\n      // Save the returned connection to ensure all getMore's fire over the same connection\n      self.connection = connection;\n\n      // Tailable cursor getMore result, notify owner about it\n      // No attempt is made here to retry, this is left to the user of the\n      // core module to handle to keep core simple\n      if (\n        self.cursorState.documents.length === 0 &&\n        self.cmd.tailable &&\n        Long.ZERO.equals(self.cursorState.cursorId)\n      ) {\n        // No more documents in the tailed cursor\n        return handleCallback(\n          callback,\n          new MongoError({\n            message: 'No more documents in tailed cursor',\n            tailable: self.cmd.tailable,\n            awaitData: self.cmd.awaitData\n          })\n        );\n      } else if (\n        self.cursorState.documents.length === 0 &&\n        self.cmd.tailable &&\n        !Long.ZERO.equals(self.cursorState.cursorId)\n      ) {\n        return nextFunction(self, callback);\n      }\n\n      if (self.cursorState.limit > 0 && self.cursorState.currentLimit >= self.cursorState.limit) {\n        return setCursorDeadAndNotified(self, callback);\n      }\n\n      nextFunction(self, callback);\n    });\n  } else if (\n    self.cursorState.documents.length === self.cursorState.cursorIndex &&\n    self.cmd.tailable &&\n    Long.ZERO.equals(self.cursorState.cursorId)\n  ) {\n    return handleCallback(\n      callback,\n      new MongoError({\n        message: 'No more documents in tailed cursor',\n        tailable: self.cmd.tailable,\n        awaitData: self.cmd.awaitData\n      })\n    );\n  } else if (\n    self.cursorState.documents.length === self.cursorState.cursorIndex &&\n    Long.ZERO.equals(self.cursorState.cursorId)\n  ) {\n    setCursorDeadAndNotified(self, callback);\n  } else {\n    if (self.cursorState.limit > 0 && self.cursorState.currentLimit >= self.cursorState.limit) {\n      // Ensure we kill the cursor on the server\n      self.kill();\n      // Set cursor in dead and notified state\n      return setCursorDeadAndNotified(self, callback);\n    }\n\n    // Increment the current cursor limit\n    self.cursorState.currentLimit += 1;\n\n    // Get the document\n    var doc = self.cursorState.documents[self.cursorState.cursorIndex++];\n\n    // Doc overflow\n    if (!doc || doc.$err) {\n      // Ensure we kill the cursor on the server\n      self.kill();\n      // Set cursor in dead and notified state\n      return setCursorDeadAndNotified(self, function() {\n        handleCallback(callback, new MongoError(doc ? doc.$err : undefined));\n      });\n    }\n\n    // Transform the doc with passed in transformation method if provided\n    if (self.cursorState.transforms && typeof self.cursorState.transforms.doc === 'function') {\n      doc = self.cursorState.transforms.doc(doc);\n    }\n\n    // Return the document\n    handleCallback(callback, null, doc);\n  }\n};\n\n/**\n * Retrieve the next document from the cursor\n * @method\n * @param {resultCallback} callback A callback function\n */\nCursor.prototype.next = function(callback) {\n  nextFunction(this, callback);\n};\n\nmodule.exports = Cursor;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/cursor.js\n// module id = 77\n// module chunks = 0","'use strict';\n\nvar Snappy = require('../connection/utils').retrieveSnappy(),\n  zlib = require('zlib');\n\nvar compressorIDs = {\n  snappy: 1,\n  zlib: 2\n};\n\nvar uncompressibleCommands = [\n  'ismaster',\n  'saslStart',\n  'saslContinue',\n  'getnonce',\n  'authenticate',\n  'createUser',\n  'updateUser',\n  'copydbSaslStart',\n  'copydbgetnonce',\n  'copydb'\n];\n\n// Facilitate compressing a message using an agreed compressor\nvar compress = function(self, dataToBeCompressed, callback) {\n  switch (self.options.agreedCompressor) {\n    case 'snappy':\n      Snappy.compress(dataToBeCompressed, callback);\n      break;\n    case 'zlib':\n      // Determine zlibCompressionLevel\n      var zlibOptions = {};\n      if (self.options.zlibCompressionLevel) {\n        zlibOptions.level = self.options.zlibCompressionLevel;\n      }\n      zlib.deflate(dataToBeCompressed, zlibOptions, callback);\n      break;\n    default:\n      throw new Error(\n        'Attempt to compress message using unknown compressor \"' +\n          self.options.agreedCompressor +\n          '\".'\n      );\n  }\n};\n\n// Decompress a message using the given compressor\nvar decompress = function(compressorID, compressedData, callback) {\n  if (compressorID < 0 || compressorID > compressorIDs.length) {\n    throw new Error(\n      'Server sent message compressed using an unsupported compressor. (Received compressor ID ' +\n        compressorID +\n        ')'\n    );\n  }\n  switch (compressorID) {\n    case compressorIDs.snappy:\n      Snappy.uncompress(compressedData, callback);\n      break;\n    case compressorIDs.zlib:\n      zlib.inflate(compressedData, callback);\n      break;\n    default:\n      callback(null, compressedData);\n  }\n};\n\nmodule.exports = {\n  compressorIDs: compressorIDs,\n  uncompressibleCommands: uncompressibleCommands,\n  compress: compress,\n  decompress: decompress\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/wireprotocol/compression.js\n// module id = 78\n// module chunks = 0","'use strict';\n\nvar Long = require('mongodb-core').BSON.Long,\n  MongoError = require('mongodb-core').MongoError,\n  util = require('util');\n\n// Error codes\nvar UNKNOWN_ERROR = 8;\nvar INVALID_BSON_ERROR = 22;\nvar WRITE_CONCERN_ERROR = 64;\nvar MULTIPLE_ERROR = 65;\n\n// Insert types\nvar INSERT = 1;\nvar UPDATE = 2;\nvar REMOVE = 3;\n\n// Get write concern\nvar writeConcern = function(target, col, options) {\n  var writeConcern = {};\n\n  // Collection level write concern\n  if (col.writeConcern && col.writeConcern.w != null) writeConcern.w = col.writeConcern.w;\n  if (col.writeConcern && col.writeConcern.j != null) writeConcern.j = col.writeConcern.j;\n  if (col.writeConcern && col.writeConcern.fsync != null)\n    writeConcern.fsync = col.writeConcern.fsync;\n  if (col.writeConcern && col.writeConcern.wtimeout != null)\n    writeConcern.wtimeout = col.writeConcern.wtimeout;\n\n  // Options level write concern\n  if (options && options.w != null) writeConcern.w = options.w;\n  if (options && options.wtimeout != null) writeConcern.wtimeout = options.wtimeout;\n  if (options && options.j != null) writeConcern.j = options.j;\n  if (options && options.fsync != null) writeConcern.fsync = options.fsync;\n\n  // Return write concern\n  return writeConcern;\n};\n\n/**\n * Helper function to define properties\n * @ignore\n */\nvar defineReadOnlyProperty = function(self, name, value) {\n  Object.defineProperty(self, name, {\n    enumerable: true,\n    get: function() {\n      return value;\n    }\n  });\n};\n\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n * @ignore\n */\nvar Batch = function(batchType, originalZeroIndex) {\n  this.originalZeroIndex = originalZeroIndex;\n  this.currentIndex = 0;\n  this.originalIndexes = [];\n  this.batchType = batchType;\n  this.operations = [];\n  this.size = 0;\n  this.sizeBytes = 0;\n};\n\n/**\n * Wraps a legacy operation so we can correctly rewrite it's error\n * @ignore\n */\nvar LegacyOp = function(batchType, operation, index) {\n  this.batchType = batchType;\n  this.index = index;\n  this.operation = operation;\n};\n\n/**\n * Create a new BulkWriteResult instance (INTERNAL TYPE, do not instantiate directly)\n *\n * @class\n * @property {boolean} ok Did bulk operation correctly execute\n * @property {number} nInserted number of inserted documents\n * @property {number} nUpdated number of documents updated logically\n * @property {number} nUpserted Number of upserted documents\n * @property {number} nModified Number of documents updated physically on disk\n * @property {number} nRemoved Number of removed documents\n * @return {BulkWriteResult} a BulkWriteResult instance\n */\nvar BulkWriteResult = function(bulkResult) {\n  defineReadOnlyProperty(this, 'ok', bulkResult.ok);\n  defineReadOnlyProperty(this, 'nInserted', bulkResult.nInserted);\n  defineReadOnlyProperty(this, 'nUpserted', bulkResult.nUpserted);\n  defineReadOnlyProperty(this, 'nMatched', bulkResult.nMatched);\n  defineReadOnlyProperty(this, 'nModified', bulkResult.nModified);\n  defineReadOnlyProperty(this, 'nRemoved', bulkResult.nRemoved);\n\n  /**\n   * Return an array of inserted ids\n   *\n   * @return {object[]}\n   */\n  this.getInsertedIds = function() {\n    return bulkResult.insertedIds;\n  };\n\n  /**\n   * Return an array of upserted ids\n   *\n   * @return {object[]}\n   */\n  this.getUpsertedIds = function() {\n    return bulkResult.upserted;\n  };\n\n  /**\n   * Return the upserted id at position x\n   *\n   * @param {number} index the number of the upserted id to return, returns undefined if no result for passed in index\n   * @return {object}\n   */\n  this.getUpsertedIdAt = function(index) {\n    return bulkResult.upserted[index];\n  };\n\n  /**\n   * Return raw internal result\n   *\n   * @return {object}\n   */\n  this.getRawResponse = function() {\n    return bulkResult;\n  };\n\n  /**\n   * Returns true if the bulk operation contains a write error\n   *\n   * @return {boolean}\n   */\n  this.hasWriteErrors = function() {\n    return bulkResult.writeErrors.length > 0;\n  };\n\n  /**\n   * Returns the number of write errors off the bulk operation\n   *\n   * @return {number}\n   */\n  this.getWriteErrorCount = function() {\n    return bulkResult.writeErrors.length;\n  };\n\n  /**\n   * Returns a specific write error object\n   *\n   * @param {number} index of the write error to return, returns null if there is no result for passed in index\n   * @return {WriteError}\n   */\n  this.getWriteErrorAt = function(index) {\n    if (index < bulkResult.writeErrors.length) {\n      return bulkResult.writeErrors[index];\n    }\n    return null;\n  };\n\n  /**\n   * Retrieve all write errors\n   *\n   * @return {object[]}\n   */\n  this.getWriteErrors = function() {\n    return bulkResult.writeErrors;\n  };\n\n  /**\n   * Retrieve lastOp if available\n   *\n   * @return {object}\n   */\n  this.getLastOp = function() {\n    return bulkResult.lastOp;\n  };\n\n  /**\n   * Retrieve the write concern error if any\n   *\n   * @return {WriteConcernError}\n   */\n  this.getWriteConcernError = function() {\n    if (bulkResult.writeConcernErrors.length === 0) {\n      return null;\n    } else if (bulkResult.writeConcernErrors.length === 1) {\n      // Return the error\n      return bulkResult.writeConcernErrors[0];\n    } else {\n      // Combine the errors\n      var errmsg = '';\n      for (var i = 0; i < bulkResult.writeConcernErrors.length; i++) {\n        var err = bulkResult.writeConcernErrors[i];\n        errmsg = errmsg + err.errmsg;\n\n        // TODO: Something better\n        if (i === 0) errmsg = errmsg + ' and ';\n      }\n\n      return new WriteConcernError({ errmsg: errmsg, code: WRITE_CONCERN_ERROR });\n    }\n  };\n\n  this.toJSON = function() {\n    return bulkResult;\n  };\n\n  this.toString = function() {\n    return 'BulkWriteResult(' + this.toJSON(bulkResult) + ')';\n  };\n\n  this.isOk = function() {\n    return bulkResult.ok === 1;\n  };\n};\n\n/**\n * Create a new WriteConcernError instance (INTERNAL TYPE, do not instantiate directly)\n *\n * @class\n * @property {number} code Write concern error code.\n * @property {string} errmsg Write concern error message.\n * @return {WriteConcernError} a WriteConcernError instance\n */\nvar WriteConcernError = function(err) {\n  if (!(this instanceof WriteConcernError)) return new WriteConcernError(err);\n\n  // Define properties\n  defineReadOnlyProperty(this, 'code', err.code);\n  defineReadOnlyProperty(this, 'errmsg', err.errmsg);\n\n  this.toJSON = function() {\n    return { code: err.code, errmsg: err.errmsg };\n  };\n\n  this.toString = function() {\n    return 'WriteConcernError(' + err.errmsg + ')';\n  };\n};\n\n/**\n * Create a new WriteError instance (INTERNAL TYPE, do not instantiate directly)\n *\n * @class\n * @property {number} code Write concern error code.\n * @property {number} index Write concern error original bulk operation index.\n * @property {string} errmsg Write concern error message.\n * @return {WriteConcernError} a WriteConcernError instance\n */\nvar WriteError = function(err) {\n  if (!(this instanceof WriteError)) return new WriteError(err);\n\n  // Define properties\n  defineReadOnlyProperty(this, 'code', err.code);\n  defineReadOnlyProperty(this, 'index', err.index);\n  defineReadOnlyProperty(this, 'errmsg', err.errmsg);\n\n  //\n  // Define access methods\n  this.getOperation = function() {\n    return err.op;\n  };\n\n  this.toJSON = function() {\n    return { code: err.code, index: err.index, errmsg: err.errmsg, op: err.op };\n  };\n\n  this.toString = function() {\n    return 'WriteError(' + JSON.stringify(this.toJSON()) + ')';\n  };\n};\n\n/**\n * Merges results into shared data structure\n * @ignore\n */\nvar mergeBatchResults = function(ordered, batch, bulkResult, err, result) {\n  // If we have an error set the result to be the err object\n  if (err) {\n    result = err;\n  } else if (result && result.result) {\n    result = result.result;\n  } else if (result == null) {\n    return;\n  }\n\n  // Do we have a top level error stop processing and return\n  if (result.ok === 0 && bulkResult.ok === 1) {\n    bulkResult.ok = 0;\n\n    var writeError = {\n      index: 0,\n      code: result.code || 0,\n      errmsg: result.message,\n      op: batch.operations[0]\n    };\n\n    bulkResult.writeErrors.push(new WriteError(writeError));\n    return;\n  } else if (result.ok === 0 && bulkResult.ok === 0) {\n    return;\n  }\n\n  // Deal with opTime if available\n  if (result.opTime || result.lastOp) {\n    var opTime = result.lastOp || result.opTime;\n    var lastOpTS = null;\n    var lastOpT = null;\n\n    // We have a time stamp\n    if (opTime && opTime._bsontype === 'Timestamp') {\n      if (bulkResult.lastOp == null) {\n        bulkResult.lastOp = opTime;\n      } else if (opTime.greaterThan(bulkResult.lastOp)) {\n        bulkResult.lastOp = opTime;\n      }\n    } else {\n      // Existing TS\n      if (bulkResult.lastOp) {\n        lastOpTS =\n          typeof bulkResult.lastOp.ts === 'number'\n            ? Long.fromNumber(bulkResult.lastOp.ts)\n            : bulkResult.lastOp.ts;\n        lastOpT =\n          typeof bulkResult.lastOp.t === 'number'\n            ? Long.fromNumber(bulkResult.lastOp.t)\n            : bulkResult.lastOp.t;\n      }\n\n      // Current OpTime TS\n      var opTimeTS = typeof opTime.ts === 'number' ? Long.fromNumber(opTime.ts) : opTime.ts;\n      var opTimeT = typeof opTime.t === 'number' ? Long.fromNumber(opTime.t) : opTime.t;\n\n      // Compare the opTime's\n      if (bulkResult.lastOp == null) {\n        bulkResult.lastOp = opTime;\n      } else if (opTimeTS.greaterThan(lastOpTS)) {\n        bulkResult.lastOp = opTime;\n      } else if (opTimeTS.equals(lastOpTS)) {\n        if (opTimeT.greaterThan(lastOpT)) {\n          bulkResult.lastOp = opTime;\n        }\n      }\n    }\n  }\n\n  // If we have an insert Batch type\n  if (batch.batchType === INSERT && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  }\n\n  // If we have an insert Batch type\n  if (batch.batchType === REMOVE && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n\n  var nUpserted = 0;\n\n  // We have an array of upserted values, we need to rewrite the indexes\n  if (Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n\n    for (var i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n        index: result.upserted[i].index + batch.originalZeroIndex,\n        _id: result.upserted[i]._id\n      });\n    }\n  } else if (result.upserted) {\n    nUpserted = 1;\n\n    bulkResult.upserted.push({\n      index: batch.originalZeroIndex,\n      _id: result.upserted\n    });\n  }\n\n  // If we have an update Batch type\n  if (batch.batchType === UPDATE && result.n) {\n    var nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n\n    if (typeof nModified === 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = null;\n    }\n  }\n\n  if (Array.isArray(result.writeErrors)) {\n    for (i = 0; i < result.writeErrors.length; i++) {\n      writeError = {\n        index: batch.originalZeroIndex + result.writeErrors[i].index,\n        code: result.writeErrors[i].code,\n        errmsg: result.writeErrors[i].errmsg,\n        op: batch.operations[result.writeErrors[i].index]\n      };\n\n      bulkResult.writeErrors.push(new WriteError(writeError));\n    }\n  }\n\n  if (result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n};\n\n//\n// Clone the options\nvar cloneOptions = function(options) {\n  var clone = {};\n  var keys = Object.keys(options);\n  for (var i = 0; i < keys.length; i++) {\n    clone[keys[i]] = options[keys[i]];\n  }\n\n  return clone;\n};\n\n/**\n * Creates a new BulkWriteError\n *\n * @class\n * @param {Error|string|object} message The error message\n * @param {BulkWriteResult} result The result of the bulk write operation\n * @return {BulkWriteError} A BulkWriteError instance\n * @extends {MongoError}\n */\nconst BulkWriteError = function(error, result) {\n  var message = error.err || error.errmsg || error.errMessage || error;\n  MongoError.call(this, message);\n\n  var keys = typeof error === 'object' ? Object.keys(error) : [];\n  for (var i = 0; i < keys.length; i++) {\n    this[keys[i]] = error[keys[i]];\n  }\n\n  this.name = 'BulkWriteError';\n  this.result = result;\n};\nutil.inherits(BulkWriteError, MongoError);\n\n// Exports symbols\nexports.BulkWriteError = BulkWriteError;\nexports.BulkWriteResult = BulkWriteResult;\nexports.WriteError = WriteError;\nexports.Batch = Batch;\nexports.LegacyOp = LegacyOp;\nexports.mergeBatchResults = mergeBatchResults;\nexports.cloneOptions = cloneOptions;\nexports.writeConcern = writeConcern;\nexports.INVALID_BSON_ERROR = INVALID_BSON_ERROR;\nexports.WRITE_CONCERN_ERROR = WRITE_CONCERN_ERROR;\nexports.MULTIPLE_ERROR = MULTIPLE_ERROR;\nexports.UNKNOWN_ERROR = UNKNOWN_ERROR;\nexports.INSERT = INSERT;\nexports.UPDATE = UPDATE;\nexports.REMOVE = REMOVE;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/bulk/common.js\n// module id = 79\n// module chunks = 0","'use strict';\n\nvar EventEmitter = require('events').EventEmitter,\n  inherits = require('util').inherits,\n  getSingleProperty = require('./utils').getSingleProperty,\n  shallowClone = require('./utils').shallowClone,\n  parseIndexOptions = require('./utils').parseIndexOptions,\n  debugOptions = require('./utils').debugOptions,\n  CommandCursor = require('./command_cursor'),\n  handleCallback = require('./utils').handleCallback,\n  filterOptions = require('./utils').filterOptions,\n  toError = require('./utils').toError,\n  ReadPreference = require('mongodb-core').ReadPreference,\n  f = require('util').format,\n  Admin = require('./admin'),\n  Code = require('mongodb-core').BSON.Code,\n  MongoError = require('mongodb-core').MongoError,\n  ObjectID = require('mongodb-core').ObjectID,\n  Define = require('./metadata'),\n  Logger = require('mongodb-core').Logger,\n  Collection = require('./collection'),\n  crypto = require('crypto'),\n  mergeOptionsAndWriteConcern = require('./utils').mergeOptionsAndWriteConcern,\n  executeOperation = require('./utils').executeOperation;\n\nvar debugFields = [\n  'authSource',\n  'w',\n  'wtimeout',\n  'j',\n  'native_parser',\n  'forceServerObjectId',\n  'serializeFunctions',\n  'raw',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'bufferMaxEntries',\n  'numberOfRetries',\n  'retryMiliSeconds',\n  'readPreference',\n  'pkFactory',\n  'parentDb',\n  'promiseLibrary',\n  'noListener'\n];\n\n// Filter out any write concern options\nvar illegalCommandFields = [\n  'w',\n  'wtimeout',\n  'j',\n  'fsync',\n  'autoIndexId',\n  'strict',\n  'serializeFunctions',\n  'pkFactory',\n  'raw',\n  'readPreference',\n  'session'\n];\n\n/**\n * @fileOverview The **Db** class is a class that represents a MongoDB Database.\n *\n * @example\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Get an additional db\n *   const testDb = client.db('test');\n *   client.close();\n * });\n */\n\n// Allowed parameters\nvar legalOptionNames = [\n  'w',\n  'wtimeout',\n  'fsync',\n  'j',\n  'readPreference',\n  'readPreferenceTags',\n  'native_parser',\n  'forceServerObjectId',\n  'pkFactory',\n  'serializeFunctions',\n  'raw',\n  'bufferMaxEntries',\n  'authSource',\n  'ignoreUndefined',\n  'promoteLongs',\n  'promiseLibrary',\n  'readConcern',\n  'retryMiliSeconds',\n  'numberOfRetries',\n  'parentDb',\n  'noListener',\n  'loggerLevel',\n  'logger',\n  'promoteBuffers',\n  'promoteLongs',\n  'promoteValues',\n  'compression',\n  'retryWrites'\n];\n\n/**\n * Creates a new Db instance\n * @class\n * @param {string} databaseName The name of the database this instance represents.\n * @param {(Server|ReplSet|Mongos)} topology The server topology for the database.\n * @param {object} [options=null] Optional settings.\n * @param {string} [options.authSource=null] If the database authentication is dependent on another databaseName.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\n * @param {boolean} [options.promoteLongs=true] Promotes Long values to number if they fit inside the 53 bits resolution.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {number} [options.bufferMaxEntries=-1] Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited.\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {object} [options.pkFactory=null] A primary key factory object for generation of custom _id keys.\n * @param {object} [options.promiseLibrary=null] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {object} [options.readConcern=null] Specify a read concern for the collection. (only MongoDB 3.2 or higher supported)\n * @param {object} [options.readConcern.level='local'] Specify a read concern level for the collection operations, one of [local|majority]. (only MongoDB 3.2 or higher supported)\n * @property {(Server|ReplSet|Mongos)} serverConfig Get the current db topology.\n * @property {number} bufferMaxEntries Current bufferMaxEntries value for the database\n * @property {string} databaseName The name of the database this instance represents.\n * @property {object} options The options associated with the db instance.\n * @property {boolean} native_parser The current value of the parameter native_parser.\n * @property {boolean} slaveOk The current slaveOk value for the db instance.\n * @property {object} writeConcern The current write concern values.\n * @property {object} topology Access the topology object (single server, replicaset or mongos).\n * @fires Db#close\n * @fires Db#reconnect\n * @fires Db#error\n * @fires Db#timeout\n * @fires Db#parseError\n * @fires Db#fullsetup\n * @return {Db} a Db instance.\n */\nvar Db = function(databaseName, topology, options) {\n  options = options || {};\n  if (!(this instanceof Db)) return new Db(databaseName, topology, options);\n  EventEmitter.call(this);\n  var self = this;\n\n  // Get the promiseLibrary\n  var promiseLibrary = options.promiseLibrary || Promise;\n\n  // Filter the options\n  options = filterOptions(options, legalOptionNames);\n\n  // Ensure we put the promiseLib in the options\n  options.promiseLibrary = promiseLibrary;\n\n  // var self = this;  // Internal state of the db object\n  this.s = {\n    // Database name\n    databaseName: databaseName,\n    // DbCache\n    dbCache: {},\n    // Children db's\n    children: [],\n    // Topology\n    topology: topology,\n    // Options\n    options: options,\n    // Logger instance\n    logger: Logger('Db', options),\n    // Get the bson parser\n    bson: topology ? topology.bson : null,\n    // Unpack read preference\n    readPreference: options.readPreference,\n    // Set buffermaxEntries\n    bufferMaxEntries: typeof options.bufferMaxEntries === 'number' ? options.bufferMaxEntries : -1,\n    // Parent db (if chained)\n    parentDb: options.parentDb || null,\n    // Set up the primary key factory or fallback to ObjectID\n    pkFactory: options.pkFactory || ObjectID,\n    // Get native parser\n    nativeParser: options.nativeParser || options.native_parser,\n    // Promise library\n    promiseLibrary: promiseLibrary,\n    // No listener\n    noListener: typeof options.noListener === 'boolean' ? options.noListener : false,\n    // ReadConcern\n    readConcern: options.readConcern\n  };\n\n  // Ensure we have a valid db name\n  validateDatabaseName(self.s.databaseName);\n\n  // Add a read Only property\n  getSingleProperty(this, 'serverConfig', self.s.topology);\n  getSingleProperty(this, 'bufferMaxEntries', self.s.bufferMaxEntries);\n  getSingleProperty(this, 'databaseName', self.s.databaseName);\n\n  // This is a child db, do not register any listeners\n  if (options.parentDb) return;\n  if (this.s.noListener) return;\n\n  // Add listeners\n  topology.on('error', createListener(self, 'error', self));\n  topology.on('timeout', createListener(self, 'timeout', self));\n  topology.on('close', createListener(self, 'close', self));\n  topology.on('parseError', createListener(self, 'parseError', self));\n  topology.once('open', createListener(self, 'open', self));\n  topology.once('fullsetup', createListener(self, 'fullsetup', self));\n  topology.once('all', createListener(self, 'all', self));\n  topology.on('reconnect', createListener(self, 'reconnect', self));\n};\n\ninherits(Db, EventEmitter);\n\nvar define = (Db.define = new Define('Db', Db, false));\n\n// Topology\nObject.defineProperty(Db.prototype, 'topology', {\n  enumerable: true,\n  get: function() {\n    return this.s.topology;\n  }\n});\n\n// Options\nObject.defineProperty(Db.prototype, 'options', {\n  enumerable: true,\n  get: function() {\n    return this.s.options;\n  }\n});\n\n// slaveOk specified\nObject.defineProperty(Db.prototype, 'slaveOk', {\n  enumerable: true,\n  get: function() {\n    if (\n      this.s.options.readPreference != null &&\n      (this.s.options.readPreference !== 'primary' ||\n        this.s.options.readPreference.mode !== 'primary')\n    ) {\n      return true;\n    }\n    return false;\n  }\n});\n\n// get the write Concern\nObject.defineProperty(Db.prototype, 'writeConcern', {\n  enumerable: true,\n  get: function() {\n    var ops = {};\n    if (this.s.options.w != null) ops.w = this.s.options.w;\n    if (this.s.options.j != null) ops.j = this.s.options.j;\n    if (this.s.options.fsync != null) ops.fsync = this.s.options.fsync;\n    if (this.s.options.wtimeout != null) ops.wtimeout = this.s.options.wtimeout;\n    return ops;\n  }\n});\n\n/**\n * Ensures provided read preference is properly converted into an object\n * @param {(ReadPreference|string|object)} readPreference the user provided read preference\n * @return {ReadPreference}\n */\nconst convertReadPreference = function(readPreference) {\n  if (readPreference) {\n    if (typeof readPreference === 'string') {\n      return new ReadPreference(readPreference);\n    } else if (\n      readPreference &&\n      !(readPreference instanceof ReadPreference) &&\n      typeof readPreference === 'object'\n    ) {\n      const mode = readPreference.mode || readPreference.preference;\n      if (mode && typeof mode === 'string') {\n        return new ReadPreference(mode, readPreference.tags, {\n          maxStalenessSeconds: readPreference.maxStalenessSeconds\n        });\n      }\n    } else if (!(readPreference instanceof ReadPreference)) {\n      throw new TypeError('Invalid read preference: ' + readPreference);\n    }\n  }\n\n  return readPreference;\n};\n\n/**\n * The callback format for results\n * @callback Db~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object} result The result object if the command was executed successfully.\n */\nvar executeCommand = function(self, command, options, callback) {\n  // Did the user destroy the topology\n  if (self.serverConfig && self.serverConfig.isDestroyed())\n    return callback(new MongoError('topology was destroyed'));\n  // Get the db name we are executing against\n  var dbName = options.dbName || options.authdb || self.s.databaseName;\n\n  // If we have a readPreference set\n  if (options.readPreference == null && self.s.readPreference) {\n    options.readPreference = self.s.readPreference;\n  }\n\n  // Convert the readPreference if its not a write\n  if (options.readPreference) {\n    options.readPreference = convertReadPreference(options.readPreference);\n  } else {\n    options.readPreference = ReadPreference.primary;\n  }\n\n  // Debug information\n  if (self.s.logger.isDebug())\n    self.s.logger.debug(\n      f(\n        'executing command %s against %s with options [%s]',\n        JSON.stringify(command),\n        f('%s.$cmd', dbName),\n        JSON.stringify(debugOptions(debugFields, options))\n      )\n    );\n\n  // Execute command\n  self.s.topology.command(f('%s.$cmd', dbName), command, options, function(err, result) {\n    if (err) return handleCallback(callback, err);\n    if (options.full) return handleCallback(callback, null, result);\n    handleCallback(callback, null, result.result);\n  });\n};\n\n/**\n * Execute a command\n * @method\n * @param {object} command The command hash\n * @param {object} [options=null] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.command = function(command, options, callback) {\n  // Change the callback\n  if (typeof options === 'function') (callback = options), (options = {});\n  // Clone the options\n  options = shallowClone(options);\n\n  return executeOperation(this.s.topology, executeCommand, [this, command, options, callback]);\n};\n\ndefine.classMethod('command', { callback: true, promise: true });\n\n/**\n * Return the Admin db instance\n * @method\n * @return {Admin} return the new Admin db instance\n */\nDb.prototype.admin = function() {\n  return new Admin(this, this.s.topology, this.s.promiseLibrary);\n};\n\ndefine.classMethod('admin', { callback: false, promise: false, returns: [Admin] });\n\n/**\n * The callback format for the collection method, must be used if strict is specified\n * @callback Db~collectionResultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Collection} collection The collection instance.\n */\n\nvar collectionKeys = [\n  'pkFactory',\n  'readPreference',\n  'serializeFunctions',\n  'strict',\n  'readConcern',\n  'ignoreUndefined',\n  'promoteValues',\n  'promoteBuffers',\n  'promoteLongs'\n];\n\n/**\n * Fetch a specific collection (containing the actual collection information). If the application does not use strict mode you\n * can use it without a callback in the following way: `var collection = db.collection('mycollection');`\n *\n * @method\n * @param {string} name the collection name we wish to access.\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\n * @param {object} [options.pkFactory=null] A primary key factory object for generation of custom _id keys.\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n * @param {boolean} [options.strict=false] Returns an error if the collection does not exist\n * @param {object} [options.readConcern=null] Specify a read concern for the collection. (only MongoDB 3.2 or higher supported)\n * @param {object} [options.readConcern.level='local'] Specify a read concern level for the collection operations, one of [local|majority]. (only MongoDB 3.2 or higher supported)\n * @param {Db~collectionResultCallback} [callback] The collection result callback\n * @return {Collection} return the new Collection instance if not in strict mode\n */\nDb.prototype.collection = function(name, options, callback) {\n  var self = this;\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n  options = shallowClone(options);\n  // Set the promise library\n  options.promiseLibrary = this.s.promiseLibrary;\n\n  // If we have not set a collection level readConcern set the db level one\n  options.readConcern = options.readConcern || this.s.readConcern;\n\n  // Do we have ignoreUndefined set\n  if (this.s.options.ignoreUndefined) {\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\n  }\n\n  // Merge in all needed options and ensure correct writeConcern merging from db level\n  options = mergeOptionsAndWriteConcern(options, this.s.options, collectionKeys, true);\n\n  // Execute\n  if (options == null || !options.strict) {\n    try {\n      var collection = new Collection(\n        this,\n        this.s.topology,\n        this.s.databaseName,\n        name,\n        this.s.pkFactory,\n        options\n      );\n      if (callback) callback(null, collection);\n      return collection;\n    } catch (err) {\n      if (err instanceof MongoError && callback) return callback(err);\n      throw err;\n    }\n  }\n\n  // Strict mode\n  if (typeof callback !== 'function') {\n    throw toError(f('A callback is required in strict mode. While getting collection %s.', name));\n  }\n\n  // Did the user destroy the topology\n  if (self.serverConfig && self.serverConfig.isDestroyed()) {\n    return callback(new MongoError('topology was destroyed'));\n  }\n\n  // Strict mode\n  this.listCollections({ name: name }, options).toArray(function(err, collections) {\n    if (err != null) return handleCallback(callback, err, null);\n    if (collections.length === 0)\n      return handleCallback(\n        callback,\n        toError(f('Collection %s does not exist. Currently in strict mode.', name)),\n        null\n      );\n\n    try {\n      return handleCallback(\n        callback,\n        null,\n        new Collection(self, self.s.topology, self.s.databaseName, name, self.s.pkFactory, options)\n      );\n    } catch (err) {\n      return handleCallback(callback, err, null);\n    }\n  });\n};\n\ndefine.classMethod('collection', { callback: true, promise: false, returns: [Collection] });\n\nfunction decorateWithWriteConcern(command, self, options) {\n  // Do we support write concerns 3.4 and higher\n  if (self.s.topology.capabilities().commandsTakeWriteConcern) {\n    // Get the write concern settings\n    var finalOptions = writeConcern(shallowClone(options), self, options);\n    // Add the write concern to the command\n    if (finalOptions.writeConcern) {\n      command.writeConcern = finalOptions.writeConcern;\n    }\n  }\n}\n\nvar createCollection = function(self, name, options, callback) {\n  // Get the write concern options\n  var finalOptions = writeConcern(shallowClone(options), self, options);\n  // Did the user destroy the topology\n  if (self.serverConfig && self.serverConfig.isDestroyed()) {\n    return callback(new MongoError('topology was destroyed'));\n  }\n\n  // Check if we have the name\n  self\n    .listCollections({ name: name }, finalOptions)\n    .setReadPreference(ReadPreference.PRIMARY)\n    .toArray(function(err, collections) {\n      if (err != null) return handleCallback(callback, err, null);\n      if (collections.length > 0 && finalOptions.strict) {\n        return handleCallback(\n          callback,\n          MongoError.create({\n            message: f('Collection %s already exists. Currently in strict mode.', name),\n            driver: true\n          }),\n          null\n        );\n      } else if (collections.length > 0) {\n        try {\n          return handleCallback(\n            callback,\n            null,\n            new Collection(\n              self,\n              self.s.topology,\n              self.s.databaseName,\n              name,\n              self.s.pkFactory,\n              options\n            )\n          );\n        } catch (err) {\n          return handleCallback(callback, err);\n        }\n      }\n\n      // Create collection command\n      var cmd = { create: name };\n\n      // Decorate command with writeConcern if supported\n      decorateWithWriteConcern(cmd, self, options);\n      // Add all optional parameters\n      for (var n in options) {\n        if (\n          options[n] != null &&\n          typeof options[n] !== 'function' &&\n          illegalCommandFields.indexOf(n) === -1\n        ) {\n          cmd[n] = options[n];\n        }\n      }\n\n      // Force a primary read Preference\n      finalOptions.readPreference = ReadPreference.PRIMARY;\n\n      // Execute command\n      self.command(cmd, finalOptions, function(err) {\n        if (err) return handleCallback(callback, err);\n        handleCallback(\n          callback,\n          null,\n          new Collection(\n            self,\n            self.s.topology,\n            self.s.databaseName,\n            name,\n            self.s.pkFactory,\n            options\n          )\n        );\n      });\n    });\n};\n\n/**\n * Create a new collection on a server with the specified options. Use this to create capped collections.\n * More information about command options available at https://docs.mongodb.com/manual/reference/command/create/\n *\n * @method\n * @param {string} name the collection name we wish to access.\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\n * @param {object} [options.pkFactory=null] A primary key factory object for generation of custom _id keys.\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n * @param {boolean} [options.strict=false] Returns an error if the collection does not exist\n * @param {boolean} [options.capped=false] Create a capped collection.\n * @param {boolean} [options.autoIndexId=true] Create an index on the _id field of the document, True by default on MongoDB 2.2 or higher off for version < 2.2.\n * @param {number} [options.size=null] The size of the capped collection in bytes.\n * @param {number} [options.max=null] The maximum number of documents in the capped collection.\n * @param {number} [options.flags=null] Optional. Available for the MMAPv1 storage engine only to set the usePowerOf2Sizes and the noPadding flag.\n * @param {object} [options.storageEngine=null] Allows users to specify configuration to the storage engine on a per-collection basis when creating a collection on MongoDB 3.0 or higher.\n * @param {object} [options.validator=null] Allows users to specify validation rules or expressions for the collection. For more information, see Document Validation on MongoDB 3.2 or higher.\n * @param {string} [options.validationLevel=null] Determines how strictly MongoDB applies the validation rules to existing documents during an update on MongoDB 3.2 or higher.\n * @param {string} [options.validationAction=null] Determines whether to error on invalid documents or just warn about the violations but allow invalid documents to be inserted on MongoDB 3.2 or higher.\n * @param {object} [options.indexOptionDefaults=null] Allows users to specify a default configuration for indexes when creating a collection on MongoDB 3.2 or higher.\n * @param {string} [options.viewOn=null] The name of the source collection or view from which to create the view. The name is not the full namespace of the collection or view; i.e. does not include the database name and implies the same database as the view to create on MongoDB 3.4 or higher.\n * @param {array} [options.pipeline=null] An array that consists of the aggregation pipeline stage. create creates the view by applying the specified pipeline to the viewOn collection or view on MongoDB 3.4 or higher.\n * @param {object} [options.collation=null] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~collectionResultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.createCollection = function(name, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n  options.promiseLibrary = options.promiseLibrary || this.s.promiseLibrary;\n\n  return executeOperation(this.s.topology, createCollection, [this, name, options, callback]);\n};\n\ndefine.classMethod('createCollection', { callback: true, promise: true });\n\n/**\n * Get all the db statistics.\n *\n * @method\n * @param {object} [options=null] Optional settings.\n * @param {number} [options.scale=null] Divide the returned sizes by scale value.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The collection result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.stats = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n  // Build command object\n  var commandObject = { dbStats: true };\n  // Check if we have the scale value\n  if (options['scale'] != null) commandObject['scale'] = options['scale'];\n\n  // If we have a readPreference set\n  if (options.readPreference == null && this.s.readPreference) {\n    options.readPreference = this.s.readPreference;\n  }\n\n  // Execute the command\n  return this.command(commandObject, options, callback);\n};\n\ndefine.classMethod('stats', { callback: true, promise: true });\n\n// Transformation methods for cursor results\nvar listCollectionsTranforms = function(databaseName) {\n  var matching = f('%s.', databaseName);\n\n  return {\n    doc: function(doc) {\n      var index = doc.name.indexOf(matching);\n      // Remove database name if available\n      if (doc.name && index === 0) {\n        doc.name = doc.name.substr(index + matching.length);\n      }\n\n      return doc;\n    }\n  };\n};\n\n/**\n * Get the list of all collection information for the specified db.\n *\n * @method\n * @param {object} [filter={}] Query to filter collections by\n * @param {object} [options=null] Optional settings.\n * @param {number} [options.batchSize=null] The batchSize for the returned command cursor or if pre 2.8 the systems batch collection\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @return {CommandCursor}\n */\nDb.prototype.listCollections = function(filter, options) {\n  filter = filter || {};\n  options = options || {};\n\n  // Shallow clone the object\n  options = shallowClone(options);\n  // Set the promise library\n  options.promiseLibrary = this.s.promiseLibrary;\n\n  // Ensure valid readPreference\n  if (options.readPreference) {\n    options.readPreference = convertReadPreference(options.readPreference);\n  } else {\n    options.readPreference = this.s.readPreference || ReadPreference.primary;\n  }\n\n  // We have a list collections command\n  if (this.serverConfig.capabilities().hasListCollectionsCommand) {\n    // Cursor options\n    var cursor = options.batchSize ? { batchSize: options.batchSize } : {};\n    // Build the command\n    var command = { listCollections: true, filter: filter, cursor: cursor };\n    // Set the AggregationCursor constructor\n    options.cursorFactory = CommandCursor;\n    // Create the cursor\n    cursor = this.s.topology.cursor(f('%s.$cmd', this.s.databaseName), command, options);\n    // Do we have a readPreference, apply it\n    if (options.readPreference) {\n      cursor.setReadPreference(options.readPreference);\n    }\n    // Return the cursor\n    return cursor;\n  }\n\n  // We cannot use the listCollectionsCommand\n  if (!this.serverConfig.capabilities().hasListCollectionsCommand) {\n    // If we have legacy mode and have not provided a full db name filter it\n    if (\n      typeof filter.name === 'string' &&\n      !new RegExp('^' + this.databaseName + '\\\\.').test(filter.name)\n    ) {\n      filter = shallowClone(filter);\n      filter.name = f('%s.%s', this.s.databaseName, filter.name);\n    }\n  }\n\n  // No filter, filter by current database\n  if (filter == null) {\n    filter.name = f('/%s/', this.s.databaseName);\n  }\n\n  // Rewrite the filter to use $and to filter out indexes\n  if (filter.name) {\n    filter = { $and: [{ name: filter.name }, { name: /^((?!\\$).)*$/ }] };\n  } else {\n    filter = { name: /^((?!\\$).)*$/ };\n  }\n\n  // Return options\n  var _options = { transforms: listCollectionsTranforms(this.s.databaseName) };\n  // Get the cursor\n  cursor = this.collection(Db.SYSTEM_NAMESPACE_COLLECTION).find(filter, _options);\n  // Do we have a readPreference, apply it\n  if (options.readPreference) cursor.setReadPreference(options.readPreference);\n  // Set the passed in batch size if one was provided\n  if (options.batchSize) cursor = cursor.batchSize(options.batchSize);\n  // We have a fallback mode using legacy systems collections\n  return cursor;\n};\n\ndefine.classMethod('listCollections', {\n  callback: false,\n  promise: false,\n  returns: [CommandCursor]\n});\n\nvar evaluate = function(self, code, parameters, options, callback) {\n  var finalCode = code;\n  var finalParameters = [];\n\n  // Did the user destroy the topology\n  if (self.serverConfig && self.serverConfig.isDestroyed())\n    return callback(new MongoError('topology was destroyed'));\n\n  // If not a code object translate to one\n  if (!(finalCode && finalCode._bsontype === 'Code')) finalCode = new Code(finalCode);\n  // Ensure the parameters are correct\n  if (parameters != null && !Array.isArray(parameters) && typeof parameters !== 'function') {\n    finalParameters = [parameters];\n  } else if (parameters != null && Array.isArray(parameters) && typeof parameters !== 'function') {\n    finalParameters = parameters;\n  }\n\n  // Create execution selector\n  var cmd = { $eval: finalCode, args: finalParameters };\n  // Check if the nolock parameter is passed in\n  if (options['nolock']) {\n    cmd['nolock'] = options['nolock'];\n  }\n\n  // Set primary read preference\n  options.readPreference = new ReadPreference(ReadPreference.PRIMARY);\n\n  // Execute the command\n  self.command(cmd, options, function(err, result) {\n    if (err) return handleCallback(callback, err, null);\n    if (result && result.ok === 1) return handleCallback(callback, null, result.retval);\n    if (result)\n      return handleCallback(\n        callback,\n        MongoError.create({ message: f('eval failed: %s', result.errmsg), driver: true }),\n        null\n      );\n    handleCallback(callback, err, result);\n  });\n};\n\n/**\n * Evaluate JavaScript on the server\n *\n * @method\n * @param {Code} code JavaScript to execute on server.\n * @param {(object|array)} parameters The parameters for the call.\n * @param {object} [options=null] Optional settings.\n * @param {boolean} [options.nolock=false] Tell MongoDB not to block on the evaulation of the javascript.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The results callback\n * @deprecated Eval is deprecated on MongoDB 3.2 and forward\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.eval = function(code, parameters, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  parameters = args.length ? args.shift() : parameters;\n  options = args.length ? args.shift() || {} : {};\n\n  return executeOperation(this.s.topology, evaluate, [this, code, parameters, options, callback]);\n};\n\ndefine.classMethod('eval', { callback: true, promise: true });\n\n/**\n * Rename a collection.\n *\n * @method\n * @param {string} fromCollection Name of current collection to rename.\n * @param {string} toCollection New name of of the collection.\n * @param {object} [options=null] Optional settings.\n * @param {boolean} [options.dropTarget=false] Drop the target name collection if it previously exists.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~collectionResultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.renameCollection = function(fromCollection, toCollection, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n  // Add return new collection\n  options.new_collection = true;\n\n  const collection = this.collection(fromCollection);\n  return executeOperation(this.s.topology, collection.rename.bind(collection), [\n    toCollection,\n    options,\n    callback\n  ]);\n};\n\ndefine.classMethod('renameCollection', { callback: true, promise: true });\n\n/**\n * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n *\n * @method\n * @param {string} name Name of collection to drop\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.dropCollection = function(name, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // Command to execute\n  var cmd = { drop: name };\n\n  // Decorate with write concern\n  decorateWithWriteConcern(cmd, this, options);\n\n  // options\n  const opts = Object.assign({}, this.s.options, { readPreference: ReadPreference.PRIMARY });\n  if (options.session) opts.session = options.session;\n\n  return executeOperation(this.s.topology, dropCollection, [this, cmd, opts, callback]);\n};\n\nconst dropCollection = (self, cmd, options, callback) => {\n  return self.command(cmd, options, function(err, result) {\n    // Did the user destroy the topology\n    if (self.serverConfig && self.serverConfig.isDestroyed()) {\n      return callback(new MongoError('topology was destroyed'));\n    }\n\n    if (err) return handleCallback(callback, err);\n    if (result.ok) return handleCallback(callback, null, true);\n    handleCallback(callback, null, false);\n  });\n};\n\ndefine.classMethod('dropCollection', { callback: true, promise: true });\n\n/**\n * Drop a database, removing it permanently from the server.\n *\n * @method\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.dropDatabase = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n  // Drop database command\n  var cmd = { dropDatabase: 1 };\n\n  // Decorate with write concern\n  decorateWithWriteConcern(cmd, this, options);\n\n  // Ensure primary only\n  const finalOptions = Object.assign(\n    {},\n    { readPreference: ReadPreference.PRIMARY },\n    this.s.options\n  );\n  if (options.session) {\n    finalOptions.session = options.session;\n  }\n\n  return executeOperation(this.s.topology, dropDatabase, [this, cmd, finalOptions, callback]);\n};\n\nconst dropDatabase = (self, cmd, options, callback) => {\n  self.command(cmd, options, function(err, result) {\n    // Did the user destroy the topology\n    if (self.serverConfig && self.serverConfig.isDestroyed()) {\n      return callback(new MongoError('topology was destroyed'));\n    }\n\n    if (callback == null) return;\n    if (err) return handleCallback(callback, err, null);\n    handleCallback(callback, null, result.ok ? true : false);\n  });\n};\n\ndefine.classMethod('dropDatabase', { callback: true, promise: true });\n\n/**\n * Fetch all collections for the current db.\n *\n * @method\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~collectionsResultCallback} [callback] The results callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.collections = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeOperation(this.s.topology, collections, [this, options, callback]);\n};\n\nvar collections = function(self, options, callback) {\n  // Let's get the collection names\n  self.listCollections({}, options).toArray(function(err, documents) {\n    if (err != null) return handleCallback(callback, err, null);\n    // Filter collections removing any illegal ones\n    documents = documents.filter(function(doc) {\n      return doc.name.indexOf('$') === -1;\n    });\n\n    // Return the collection objects\n    handleCallback(\n      callback,\n      null,\n      documents.map(function(d) {\n        return new Collection(\n          self,\n          self.s.topology,\n          self.s.databaseName,\n          d.name,\n          self.s.pkFactory,\n          self.s.options\n        );\n      })\n    );\n  });\n};\n\ndefine.classMethod('collections', { callback: true, promise: true });\n\n/**\n * Runs a command on the database as admin.\n * @method\n * @param {object} command The command hash\n * @param {object} [options=null] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.executeDbAdminCommand = function(selector, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // Convert read preference\n  if (options.readPreference) {\n    options.readPreference = convertReadPreference(options.readPreference);\n  }\n\n  return executeOperation(this.s.topology, executeDbAdminCommand, [\n    this,\n    selector,\n    options,\n    callback\n  ]);\n};\n\nconst executeDbAdminCommand = (self, selector, options, callback) => {\n  self.s.topology.command('admin.$cmd', selector, options, function(err, result) {\n    // Did the user destroy the topology\n    if (self.serverConfig && self.serverConfig.isDestroyed()) {\n      return callback(new MongoError('topology was destroyed'));\n    }\n\n    if (err) return handleCallback(callback, err);\n    handleCallback(callback, null, result.result);\n  });\n};\n\ndefine.classMethod('executeDbAdminCommand', { callback: true, promise: true });\n\n/**\n * Creates an index on the db and collection collection.\n * @method\n * @param {string} name Name of the collection to create the index on.\n * @param {(string|object)} fieldOrSpec Defines the index.\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.unique=false] Creates an unique index.\n * @param {boolean} [options.sparse=false] Creates a sparse index.\n * @param {boolean} [options.background=false] Creates the index in the background, yielding whenever possible.\n * @param {boolean} [options.dropDups=false] A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value\n * @param {number} [options.min=null] For geospatial indexes set the lower bound for the co-ordinates.\n * @param {number} [options.max=null] For geospatial indexes set the high bound for the co-ordinates.\n * @param {number} [options.v=null] Specify the format version of the indexes.\n * @param {number} [options.expireAfterSeconds=null] Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)\n * @param {number} [options.name=null] Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)\n * @param {object} [options.partialFilterExpression=null] Creates a partial index based on the given filter object (MongoDB 3.2 or higher)\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.createIndex = function(name, fieldOrSpec, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options ? shallowClone(options) : {};\n\n  return executeOperation(this.s.topology, createIndex, [\n    this,\n    name,\n    fieldOrSpec,\n    options,\n    callback\n  ]);\n};\n\nvar createIndex = function(self, name, fieldOrSpec, options, callback) {\n  // Get the write concern options\n  var finalOptions = Object.assign({}, { readPreference: ReadPreference.PRIMARY }, options);\n  finalOptions = writeConcern(finalOptions, self, options);\n\n  // Ensure we have a callback\n  if (finalOptions.writeConcern && typeof callback !== 'function') {\n    throw MongoError.create({\n      message: 'Cannot use a writeConcern without a provided callback',\n      driver: true\n    });\n  }\n\n  // Did the user destroy the topology\n  if (self.serverConfig && self.serverConfig.isDestroyed())\n    return callback(new MongoError('topology was destroyed'));\n\n  // Attempt to run using createIndexes command\n  createIndexUsingCreateIndexes(self, name, fieldOrSpec, options, function(err, result) {\n    if (err == null) return handleCallback(callback, err, result);\n\n    // 67 = 'CannotCreateIndex' (malformed index options)\n    // 85 = 'IndexOptionsConflict' (index already exists with different options)\n    // 11000 = 'DuplicateKey' (couldn't build unique index because of dupes)\n    // 11600 = 'InterruptedAtShutdown' (interrupted at shutdown)\n    // These errors mean that the server recognized `createIndex` as a command\n    // and so we don't need to fallback to an insert.\n    if (err.code === 67 || err.code === 11000 || err.code === 85 || err.code === 11600) {\n      return handleCallback(callback, err, result);\n    }\n\n    // Create command\n    var doc = createCreateIndexCommand(self, name, fieldOrSpec, options);\n    // Set no key checking\n    finalOptions.checkKeys = false;\n    // Insert document\n    self.s.topology.insert(\n      f('%s.%s', self.s.databaseName, Db.SYSTEM_INDEX_COLLECTION),\n      doc,\n      finalOptions,\n      function(err, result) {\n        if (callback == null) return;\n        if (err) return handleCallback(callback, err);\n        if (result == null) return handleCallback(callback, null, null);\n        if (result.result.writeErrors)\n          return handleCallback(callback, MongoError.create(result.result.writeErrors[0]), null);\n        handleCallback(callback, null, doc.name);\n      }\n    );\n  });\n};\n\ndefine.classMethod('createIndex', { callback: true, promise: true });\n\n/**\n * Ensures that an index exists, if it does not it creates it\n * @method\n * @deprecated since version 2.0\n * @param {string} name The index name\n * @param {(string|object)} fieldOrSpec Defines the index.\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.unique=false] Creates an unique index.\n * @param {boolean} [options.sparse=false] Creates a sparse index.\n * @param {boolean} [options.background=false] Creates the index in the background, yielding whenever possible.\n * @param {boolean} [options.dropDups=false] A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value\n * @param {number} [options.min=null] For geospatial indexes set the lower bound for the co-ordinates.\n * @param {number} [options.max=null] For geospatial indexes set the high bound for the co-ordinates.\n * @param {number} [options.v=null] Specify the format version of the indexes.\n * @param {number} [options.expireAfterSeconds=null] Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)\n * @param {number} [options.name=null] Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.ensureIndex = function(name, fieldOrSpec, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeOperation(this.s.topology, ensureIndex, [\n    this,\n    name,\n    fieldOrSpec,\n    options,\n    callback\n  ]);\n};\n\nvar ensureIndex = function(self, name, fieldOrSpec, options, callback) {\n  // Get the write concern options\n  var finalOptions = writeConcern({}, self, options);\n  // Create command\n  var selector = createCreateIndexCommand(self, name, fieldOrSpec, options);\n  var index_name = selector.name;\n\n  // Did the user destroy the topology\n  if (self.serverConfig && self.serverConfig.isDestroyed())\n    return callback(new MongoError('topology was destroyed'));\n\n  // Merge primary readPreference\n  finalOptions.readPreference = ReadPreference.PRIMARY;\n\n  // Check if the index allready exists\n  self.indexInformation(name, finalOptions, function(err, indexInformation) {\n    if (err != null && err.code !== 26) return handleCallback(callback, err, null);\n    // If the index does not exist, create it\n    if (indexInformation == null || !indexInformation[index_name]) {\n      self.createIndex(name, fieldOrSpec, options, callback);\n    } else {\n      if (typeof callback === 'function') return handleCallback(callback, null, index_name);\n    }\n  });\n};\n\ndefine.classMethod('ensureIndex', { callback: true, promise: true });\n\nDb.prototype.addChild = function(db) {\n  if (this.s.parentDb) return this.s.parentDb.addChild(db);\n  this.s.children.push(db);\n};\n\nvar _executeAuthCreateUserCommand = function(self, username, password, options, callback) {\n  // Special case where there is no password ($external users)\n  if (typeof username === 'string' && password != null && typeof password === 'object') {\n    options = password;\n    password = null;\n  }\n\n  // Unpack all options\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  // Error out if we digestPassword set\n  if (options.digestPassword != null) {\n    throw toError(\n      \"The digestPassword option is not supported via add_user. Please use db.command('createUser', ...) instead for this option.\"\n    );\n  }\n\n  // Get additional values\n  var customData = options.customData != null ? options.customData : {};\n  var roles = Array.isArray(options.roles) ? options.roles : [];\n  var maxTimeMS = typeof options.maxTimeMS === 'number' ? options.maxTimeMS : null;\n\n  // If not roles defined print deprecated message\n  if (roles.length === 0) {\n    console.log('Creating a user without roles is deprecated in MongoDB >= 2.6');\n  }\n\n  // Get the error options\n  var commandOptions = { writeCommand: true };\n  if (options['dbName']) commandOptions.dbName = options['dbName'];\n\n  // Add maxTimeMS to options if set\n  if (maxTimeMS != null) commandOptions.maxTimeMS = maxTimeMS;\n\n  // Check the db name and add roles if needed\n  if (\n    (self.databaseName.toLowerCase() === 'admin' || options.dbName === 'admin') &&\n    !Array.isArray(options.roles)\n  ) {\n    roles = ['root'];\n  } else if (!Array.isArray(options.roles)) {\n    roles = ['dbOwner'];\n  }\n\n  // Build the command to execute\n  var command = {\n    createUser: username,\n    customData: customData,\n    roles: roles,\n    digestPassword: false\n  };\n\n  // Apply write concern to command\n  command = writeConcern(command, self, options);\n\n  // Use node md5 generator\n  var md5 = crypto.createHash('md5');\n  // Generate keys used for authentication\n  md5.update(username + ':mongo:' + password);\n  var userPassword = md5.digest('hex');\n\n  // No password\n  if (typeof password === 'string') {\n    command.pwd = userPassword;\n  }\n\n  // Force write using primary\n  commandOptions.readPreference = ReadPreference.primary;\n\n  // Execute the command\n  self.command(command, commandOptions, function(err, result) {\n    if (err && err.ok === 0 && err.code === undefined)\n      return handleCallback(callback, { code: -5000 }, null);\n    if (err) return handleCallback(callback, err, null);\n    handleCallback(\n      callback,\n      !result.ok ? toError(result) : null,\n      result.ok ? [{ user: username, pwd: '' }] : null\n    );\n  });\n};\n\nvar addUser = function(self, username, password, options, callback) {\n  // Did the user destroy the topology\n  if (self.serverConfig && self.serverConfig.isDestroyed())\n    return callback(new MongoError('topology was destroyed'));\n  // Attempt to execute auth command\n  _executeAuthCreateUserCommand(self, username, password, options, function(err, r) {\n    // We need to perform the backward compatible insert operation\n    if (err && err.code === -5000) {\n      var finalOptions = writeConcern(shallowClone(options), self, options);\n      // Use node md5 generator\n      var md5 = crypto.createHash('md5');\n      // Generate keys used for authentication\n      md5.update(username + ':mongo:' + password);\n      var userPassword = md5.digest('hex');\n\n      // If we have another db set\n      var db = options.dbName ? new Db(options.dbName, self.s.topology, self.s.options) : self;\n\n      // Fetch a user collection\n      var collection = db.collection(Db.SYSTEM_USER_COLLECTION);\n\n      // Check if we are inserting the first user\n      collection.count({}, finalOptions, function(err, count) {\n        // We got an error (f.ex not authorized)\n        if (err != null) return handleCallback(callback, err, null);\n        // Check if the user exists and update i\n        collection\n          .find({ user: username }, { dbName: options['dbName'] }, finalOptions)\n          .toArray(function(err) {\n            // We got an error (f.ex not authorized)\n            if (err != null) return handleCallback(callback, err, null);\n            // Add command keys\n            finalOptions.upsert = true;\n\n            // We have a user, let's update the password or upsert if not\n            collection.update(\n              { user: username },\n              { $set: { user: username, pwd: userPassword } },\n              finalOptions,\n              function(err) {\n                if (count === 0 && err)\n                  return handleCallback(callback, null, [{ user: username, pwd: userPassword }]);\n                if (err) return handleCallback(callback, err, null);\n                handleCallback(callback, null, [{ user: username, pwd: userPassword }]);\n              }\n            );\n          });\n      });\n\n      return;\n    }\n\n    if (err) return handleCallback(callback, err);\n    handleCallback(callback, err, r);\n  });\n};\n\n/**\n * Add a user to the database.\n * @method\n * @param {string} username The username.\n * @param {string} password The password.\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {object} [options.customData=null] Custom data associated with the user (only Mongodb 2.6 or higher)\n * @param {object[]} [options.roles=null] Roles associated with the created user (only Mongodb 2.6 or higher)\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.addUser = function(username, password, options, callback) {\n  // Unpack the parameters\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  options = args.length ? args.shift() || {} : {};\n\n  return executeOperation(this.s.topology, addUser, [this, username, password, options, callback]);\n};\n\ndefine.classMethod('addUser', { callback: true, promise: true });\n\nvar _executeAuthRemoveUserCommand = function(self, username, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // Did the user destroy the topology\n  if (self.serverConfig && self.serverConfig.isDestroyed())\n    return callback(new MongoError('topology was destroyed'));\n  // Get the error options\n  var commandOptions = { writeCommand: true };\n  if (options['dbName']) commandOptions.dbName = options['dbName'];\n\n  // Get additional values\n  var maxTimeMS = typeof options.maxTimeMS === 'number' ? options.maxTimeMS : null;\n\n  // Add maxTimeMS to options if set\n  if (maxTimeMS != null) commandOptions.maxTimeMS = maxTimeMS;\n\n  // Build the command to execute\n  var command = {\n    dropUser: username\n  };\n\n  // Apply write concern to command\n  command = writeConcern(command, self, options);\n\n  // Force write using primary\n  commandOptions.readPreference = ReadPreference.primary;\n\n  // Execute the command\n  self.command(command, commandOptions, function(err, result) {\n    if (err && !err.ok && err.code === undefined) return handleCallback(callback, { code: -5000 });\n    if (err) return handleCallback(callback, err, null);\n    handleCallback(callback, null, result.ok ? true : false);\n  });\n};\n\nvar removeUser = function(self, username, options, callback) {\n  // Attempt to execute command\n  _executeAuthRemoveUserCommand(self, username, options, function(err, result) {\n    if (err && err.code === -5000) {\n      var finalOptions = writeConcern(shallowClone(options), self, options);\n      // If we have another db set\n      var db = options.dbName ? new Db(options.dbName, self.s.topology, self.s.options) : self;\n\n      // Fetch a user collection\n      var collection = db.collection(Db.SYSTEM_USER_COLLECTION);\n\n      // Locate the user\n      collection.findOne({ user: username }, finalOptions, function(err, user) {\n        if (user == null) return handleCallback(callback, err, false);\n        collection.remove({ user: username }, finalOptions, function(err) {\n          handleCallback(callback, err, true);\n        });\n      });\n\n      return;\n    }\n\n    if (err) return handleCallback(callback, err);\n    handleCallback(callback, err, result);\n  });\n};\n\ndefine.classMethod('removeUser', { callback: true, promise: true });\n\n/**\n * Remove a user from a database\n * @method\n * @param {string} username The username.\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.removeUser = function(username, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  options = args.length ? args.shift() || {} : {};\n\n  return executeOperation(this.s.topology, removeUser, [this, username, options, callback]);\n};\n\n/**\n * Set the current profiling level of MongoDB\n *\n * @param {string} level The new profiling level (off, slow_only, all).\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback.\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.setProfilingLevel = function(level, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeOperation(this.s.topology, setProfilingLevel, [this, level, options, callback]);\n};\n\nvar setProfilingLevel = function(self, level, options, callback) {\n  var command = {};\n  var profile = 0;\n\n  if (level === 'off') {\n    profile = 0;\n  } else if (level === 'slow_only') {\n    profile = 1;\n  } else if (level === 'all') {\n    profile = 2;\n  } else {\n    return callback(new Error('Error: illegal profiling level value ' + level));\n  }\n\n  // Set up the profile number\n  command['profile'] = profile;\n\n  self.command(command, options, function(err, doc) {\n    if (err == null && doc.ok === 1) return callback(null, level);\n    return err != null\n      ? callback(err, null)\n      : callback(new Error('Error with profile command'), null);\n  });\n};\n\ndefine.classMethod('setProfilingLevel', { callback: true, promise: true });\n\n/**\n * Retrive the current profiling information for MongoDB\n *\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Query the system.profile collection directly.\n */\nDb.prototype.profilingInfo = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeOperation(this.s.topology, profilingInfo, [this, options, callback]);\n};\n\nvar profilingInfo = function(self, options, callback) {\n  try {\n    self\n      .collection('system.profile')\n      .find({}, null, options)\n      .toArray(callback);\n  } catch (err) {\n    return callback(err, null);\n  }\n};\n\ndefine.classMethod('profilingInfo', { callback: true, promise: true });\n\n/**\n * Retrieve the current profiling Level for MongoDB\n *\n * @param {Object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.profilingLevel = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeOperation(this.s.topology, profilingLevel, [this, options, callback]);\n};\n\nvar profilingLevel = function(self, options, callback) {\n  self.command({ profile: -1 }, options, function(err, doc) {\n    if (err == null && doc.ok === 1) {\n      var was = doc.was;\n      if (was === 0) return callback(null, 'off');\n      if (was === 1) return callback(null, 'slow_only');\n      if (was === 2) return callback(null, 'all');\n      return callback(new Error('Error: illegal profiling level value ' + was), null);\n    } else {\n      err != null ? callback(err, null) : callback(new Error('Error with profile command'), null);\n    }\n  });\n};\n\ndefine.classMethod('profilingLevel', { callback: true, promise: true });\n\n/**\n * Retrieves this collections index info.\n * @method\n * @param {string} name The name of the collection.\n * @param {object} [options=null] Optional settings.\n * @param {boolean} [options.full=false] Returns the full raw index information.\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nDb.prototype.indexInformation = function(name, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeOperation(this.s.topology, indexInformation, [this, name, options, callback]);\n};\n\nvar indexInformation = function(self, name, options, callback) {\n  // If we specified full information\n  var full = options['full'] == null ? false : options['full'];\n\n  // Did the user destroy the topology\n  if (self.serverConfig && self.serverConfig.isDestroyed())\n    return callback(new MongoError('topology was destroyed'));\n  // Process all the results from the index command and collection\n  var processResults = function(indexes) {\n    // Contains all the information\n    var info = {};\n    // Process all the indexes\n    for (var i = 0; i < indexes.length; i++) {\n      var index = indexes[i];\n      // Let's unpack the object\n      info[index.name] = [];\n      for (var name in index.key) {\n        info[index.name].push([name, index.key[name]]);\n      }\n    }\n\n    return info;\n  };\n\n  // Get the list of indexes of the specified collection\n  self\n    .collection(name)\n    .listIndexes(options)\n    .toArray(function(err, indexes) {\n      if (err) return callback(toError(err));\n      if (!Array.isArray(indexes)) return handleCallback(callback, null, []);\n      if (full) return handleCallback(callback, null, indexes);\n      handleCallback(callback, null, processResults(indexes));\n    });\n};\n\ndefine.classMethod('indexInformation', { callback: true, promise: true });\n\nvar createCreateIndexCommand = function(db, name, fieldOrSpec, options) {\n  var indexParameters = parseIndexOptions(fieldOrSpec);\n  var fieldHash = indexParameters.fieldHash;\n\n  // Generate the index name\n  var indexName = typeof options.name === 'string' ? options.name : indexParameters.name;\n  var selector = {\n    ns: db.databaseName + '.' + name,\n    key: fieldHash,\n    name: indexName\n  };\n\n  // Ensure we have a correct finalUnique\n  var finalUnique = options == null || 'object' === typeof options ? false : options;\n  // Set up options\n  options = options == null || typeof options === 'boolean' ? {} : options;\n\n  // Add all the options\n  var keysToOmit = Object.keys(selector);\n  for (var optionName in options) {\n    if (keysToOmit.indexOf(optionName) === -1) {\n      selector[optionName] = options[optionName];\n    }\n  }\n\n  if (selector['unique'] == null) selector['unique'] = finalUnique;\n\n  // Remove any write concern operations\n  var removeKeys = ['w', 'wtimeout', 'j', 'fsync', 'readPreference'];\n  for (var i = 0; i < removeKeys.length; i++) {\n    delete selector[removeKeys[i]];\n  }\n\n  // Return the command creation selector\n  return selector;\n};\n\nvar createIndexUsingCreateIndexes = function(self, name, fieldOrSpec, options, callback) {\n  // Build the index\n  var indexParameters = parseIndexOptions(fieldOrSpec);\n  // Generate the index name\n  var indexName = typeof options.name === 'string' ? options.name : indexParameters.name;\n  // Set up the index\n  var indexes = [{ name: indexName, key: indexParameters.fieldHash }];\n  // merge all the options\n  var keysToOmit = Object.keys(indexes[0]).concat([\n    'w',\n    'wtimeout',\n    'j',\n    'fsync',\n    'readPreference',\n    'session'\n  ]);\n\n  for (var optionName in options) {\n    if (keysToOmit.indexOf(optionName) === -1) {\n      indexes[0][optionName] = options[optionName];\n    }\n  }\n\n  // Get capabilities\n  var capabilities = self.s.topology.capabilities();\n\n  // Did the user pass in a collation, check if our write server supports it\n  if (indexes[0].collation && capabilities && !capabilities.commandsTakeCollation) {\n    // Create a new error\n    var error = new MongoError(f('server/primary/mongos does not support collation'));\n    error.code = 67;\n    // Return the error\n    return callback(error);\n  }\n\n  // Create command, apply write concern to command\n  var cmd = writeConcern({ createIndexes: name, indexes: indexes }, self, options);\n\n  // Decorate command with writeConcern if supported\n  decorateWithWriteConcern(cmd, self, options);\n\n  // ReadPreference primary\n  options.readPreference = ReadPreference.PRIMARY;\n\n  // Build the command\n  self.command(cmd, options, function(err, result) {\n    if (err) return handleCallback(callback, err, null);\n    if (result.ok === 0) return handleCallback(callback, toError(result), null);\n    // Return the indexName for backward compatibility\n    handleCallback(callback, null, indexName);\n  });\n};\n\n// Validate the database name\nvar validateDatabaseName = function(databaseName) {\n  if (typeof databaseName !== 'string')\n    throw MongoError.create({ message: 'database name must be a string', driver: true });\n  if (databaseName.length === 0)\n    throw MongoError.create({ message: 'database name cannot be the empty string', driver: true });\n  if (databaseName === '$external') return;\n\n  var invalidChars = [' ', '.', '$', '/', '\\\\'];\n  for (var i = 0; i < invalidChars.length; i++) {\n    if (databaseName.indexOf(invalidChars[i]) !== -1)\n      throw MongoError.create({\n        message: \"database names cannot contain the character '\" + invalidChars[i] + \"'\",\n        driver: true\n      });\n  }\n};\n\n// Get write concern\nvar writeConcern = function(target, db, options) {\n  if (options.w != null || options.j != null || options.fsync != null) {\n    var opts = {};\n    if (options.w) opts.w = options.w;\n    if (options.wtimeout) opts.wtimeout = options.wtimeout;\n    if (options.j) opts.j = options.j;\n    if (options.fsync) opts.fsync = options.fsync;\n    target.writeConcern = opts;\n  } else if (\n    db.writeConcern.w != null ||\n    db.writeConcern.j != null ||\n    db.writeConcern.fsync != null\n  ) {\n    target.writeConcern = db.writeConcern;\n  }\n\n  return target;\n};\n\n// Add listeners to topology\nvar createListener = function(self, e, object) {\n  var listener = function(err) {\n    if (object.listeners(e).length > 0) {\n      object.emit(e, err, self);\n\n      // Emit on all associated db's if available\n      for (var i = 0; i < self.s.children.length; i++) {\n        self.s.children[i].emit(e, err, self.s.children[i]);\n      }\n    }\n  };\n  return listener;\n};\n\n/**\n * Unref all sockets\n * @method\n */\nDb.prototype.unref = function() {\n  this.s.topology.unref();\n};\n\n/**\n * Db close event\n *\n * Emitted after a socket closed against a single server or mongos proxy.\n *\n * @event Db#close\n * @type {MongoError}\n */\n\n/**\n * Db reconnect event\n *\n *  * Server: Emitted when the driver has reconnected and re-authenticated.\n *  * ReplicaSet: N/A\n *  * Mongos: Emitted when the driver reconnects and re-authenticates successfully against a Mongos.\n *\n * @event Db#reconnect\n * @type {object}\n */\n\n/**\n * Db error event\n *\n * Emitted after an error occurred against a single server or mongos proxy.\n *\n * @event Db#error\n * @type {MongoError}\n */\n\n/**\n * Db timeout event\n *\n * Emitted after a socket timeout occurred against a single server or mongos proxy.\n *\n * @event Db#timeout\n * @type {MongoError}\n */\n\n/**\n * Db parseError event\n *\n * The parseError event is emitted if the driver detects illegal or corrupt BSON being received from the server.\n *\n * @event Db#parseError\n * @type {MongoError}\n */\n\n/**\n * Db fullsetup event, emitted when all servers in the topology have been connected to at start up time.\n *\n * * Server: Emitted when the driver has connected to the single server and has authenticated.\n * * ReplSet: Emitted after the driver has attempted to connect to all replicaset members.\n * * Mongos: Emitted after the driver has attempted to connect to all mongos proxies.\n *\n * @event Db#fullsetup\n * @type {Db}\n */\n\n// Constants\nDb.SYSTEM_NAMESPACE_COLLECTION = 'system.namespaces';\nDb.SYSTEM_INDEX_COLLECTION = 'system.indexes';\nDb.SYSTEM_PROFILE_COLLECTION = 'system.profile';\nDb.SYSTEM_USER_COLLECTION = 'system.users';\nDb.SYSTEM_COMMAND_COLLECTION = '$cmd';\nDb.SYSTEM_JS_COLLECTION = 'system.js';\n\nmodule.exports = Db;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/db.js\n// module id = 80\n// module chunks = 0","'use strict';\n\nvar CServer = require('mongodb-core').Server,\n  Cursor = require('../cursor'),\n  AggregationCursor = require('../aggregation_cursor'),\n  CommandCursor = require('../command_cursor'),\n  ServerCapabilities = require('./topology_base').ServerCapabilities,\n  TopologyBase = require('./topology_base').TopologyBase,\n  Store = require('./topology_base').Store,\n  Define = require('../metadata'),\n  MongoError = require('mongodb-core').MongoError,\n  MAX_JS_INT = require('../utils').MAX_JS_INT,\n  translateOptions = require('../utils').translateOptions,\n  filterOptions = require('../utils').filterOptions,\n  mergeOptions = require('../utils').mergeOptions;\n\n/**\n * @fileOverview The **Server** class is a class that represents a single server topology and is\n * used to construct connections.\n *\n * **Server Should not be used, use MongoClient.connect**\n */\n\n// Allowed parameters\nvar legalOptionNames = [\n  'ha',\n  'haInterval',\n  'acceptableLatencyMS',\n  'poolSize',\n  'ssl',\n  'checkServerIdentity',\n  'sslValidate',\n  'sslCA',\n  'sslCRL',\n  'sslCert',\n  'ciphers',\n  'ecdhCurve',\n  'sslKey',\n  'sslPass',\n  'socketOptions',\n  'bufferMaxEntries',\n  'store',\n  'auto_reconnect',\n  'autoReconnect',\n  'emitError',\n  'keepAlive',\n  'keepAliveInitialDelay',\n  'noDelay',\n  'connectTimeoutMS',\n  'socketTimeoutMS',\n  'family',\n  'loggerLevel',\n  'logger',\n  'reconnectTries',\n  'reconnectInterval',\n  'monitoring',\n  'appname',\n  'domainsEnabled',\n  'servername',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'compression',\n  'promiseLibrary'\n];\n\n/**\n * Creates a new Server instance\n * @class\n * @deprecated\n * @param {string} host The host for the server, can be either an IP4, IP6 or domain socket style host.\n * @param {number} [port] The server port if IP4.\n * @param {object} [options=null] Optional settings.\n * @param {number} [options.poolSize=5] Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n * @param {boolean} [options.ssl=false] Use ssl connection (needs to have a mongod server with ssl support)\n * @param {object} [options.sslValidate=true] Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {array} [options.sslCA=null] Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCRL=null] Array of revocation certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslCert=null] String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {string} [options.ciphers=null] Passed directly through to tls.createSecureContext. See https://nodejs.org/dist/latest-v9.x/docs/api/tls.html#tls_tls_createsecurecontext_options for more info.\n * @param {string} [options.ecdhCurve=null] Passed directly through to tls.createSecureContext. See https://nodejs.org/dist/latest-v9.x/docs/api/tls.html#tls_tls_createsecurecontext_options for more info.\n * @param {(Buffer|string)} [options.sslKey=null] String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslPass=null] String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {object} [options.socketOptions=null] Socket options\n * @param {boolean} [options.socketOptions.autoReconnect=true] Reconnect on error.\n * @param {boolean} [options.socketOptions.noDelay=true] TCP Socket NoDelay option.\n * @param {boolean} [options.socketOptions.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.socketOptions.keepAliveInitialDelay=30000] The number of milliseconds to wait before initiating keepAlive on the TCP socket\n * @param {number} [options.socketOptions.connectTimeoutMS=0] TCP Connection timeout setting\n * @param {number} [options.socketOptions.socketTimeoutMS=0] TCP Socket timeout setting\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @param {number} [options.monitoring=true] Triggers the server instance to call ismaster\n * @param {number} [options.haInterval=10000] The interval of calling ismaster when monitoring is enabled.\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @fires Server#connect\n * @fires Server#close\n * @fires Server#error\n * @fires Server#timeout\n * @fires Server#parseError\n * @fires Server#reconnect\n * @property {string} parserType the parser type used (c++ or js).\n * @return {Server} a Server instance.\n */\nclass Server extends TopologyBase {\n  constructor(host, port, options) {\n    super();\n    var self = this;\n\n    // Filter the options\n    options = filterOptions(options, legalOptionNames);\n\n    // Promise library\n    const promiseLibrary = options.promiseLibrary;\n\n    // Stored options\n    var storeOptions = {\n      force: false,\n      bufferMaxEntries:\n        typeof options.bufferMaxEntries === 'number' ? options.bufferMaxEntries : MAX_JS_INT\n    };\n\n    // Shared global store\n    var store = options.store || new Store(self, storeOptions);\n\n    // Detect if we have a socket connection\n    if (host.indexOf('/') !== -1) {\n      if (port != null && typeof port === 'object') {\n        options = port;\n        port = null;\n      }\n    } else if (port == null) {\n      throw MongoError.create({ message: 'port must be specified', driver: true });\n    }\n\n    // Get the reconnect option\n    var reconnect = typeof options.auto_reconnect === 'boolean' ? options.auto_reconnect : true;\n    reconnect = typeof options.autoReconnect === 'boolean' ? options.autoReconnect : reconnect;\n\n    // Clone options\n    var clonedOptions = mergeOptions(\n      {},\n      {\n        host: host,\n        port: port,\n        disconnectHandler: store,\n        cursorFactory: Cursor,\n        reconnect: reconnect,\n        emitError: typeof options.emitError === 'boolean' ? options.emitError : true,\n        size: typeof options.poolSize === 'number' ? options.poolSize : 5\n      }\n    );\n\n    // Translate any SSL options and other connectivity options\n    clonedOptions = translateOptions(clonedOptions, options);\n\n    // Socket options\n    var socketOptions =\n      options.socketOptions && Object.keys(options.socketOptions).length > 0\n        ? options.socketOptions\n        : options;\n\n    // Translate all the options to the mongodb-core ones\n    clonedOptions = translateOptions(clonedOptions, socketOptions);\n\n    // Build default client information\n    clonedOptions.clientInfo = this.clientInfo;\n    // Do we have an application specific string\n    if (options.appname) {\n      clonedOptions.clientInfo.application = { name: options.appname };\n    }\n\n    // Define the internal properties\n    this.s = {\n      // Create an instance of a server instance from mongodb-core\n      coreTopology: new CServer(clonedOptions),\n      // Server capabilities\n      sCapabilities: null,\n      // Cloned options\n      clonedOptions: clonedOptions,\n      // Reconnect\n      reconnect: clonedOptions.reconnect,\n      // Emit error\n      emitError: clonedOptions.emitError,\n      // Pool size\n      poolSize: clonedOptions.size,\n      // Store Options\n      storeOptions: storeOptions,\n      // Store\n      store: store,\n      // Host\n      host: host,\n      // Port\n      port: port,\n      // Options\n      options: options,\n      // Server Session Pool\n      sessionPool: null,\n      // Active client sessions\n      sessions: [],\n      // Promise library\n      promiseLibrary: promiseLibrary || Promise\n    };\n  }\n\n  // Connect\n  connect(_options, callback) {\n    var self = this;\n    if ('function' === typeof _options) (callback = _options), (_options = {});\n    if (_options == null) _options = this.s.clonedOptions;\n    if (!('function' === typeof callback)) callback = null;\n    _options = Object.assign({}, this.s.clonedOptions, _options);\n    self.s.options = _options;\n\n    // Update bufferMaxEntries\n    self.s.storeOptions.bufferMaxEntries =\n      typeof _options.bufferMaxEntries === 'number' ? _options.bufferMaxEntries : -1;\n\n    // Error handler\n    var connectErrorHandler = function() {\n      return function(err) {\n        // Remove all event handlers\n        var events = ['timeout', 'error', 'close'];\n        events.forEach(function(e) {\n          self.s.coreTopology.removeListener(e, connectHandlers[e]);\n        });\n\n        self.s.coreTopology.removeListener('connect', connectErrorHandler);\n\n        // Try to callback\n        try {\n          callback(err);\n        } catch (err) {\n          process.nextTick(function() {\n            throw err;\n          });\n        }\n      };\n    };\n\n    // Actual handler\n    var errorHandler = function(event) {\n      return function(err) {\n        if (event !== 'error') {\n          self.emit(event, err);\n        }\n      };\n    };\n\n    // Error handler\n    var reconnectHandler = function() {\n      self.emit('reconnect', self);\n      self.s.store.execute();\n    };\n\n    // Reconnect failed\n    var reconnectFailedHandler = function(err) {\n      self.emit('reconnectFailed', err);\n      self.s.store.flush(err);\n    };\n\n    // Destroy called on topology, perform cleanup\n    var destroyHandler = function() {\n      self.s.store.flush();\n    };\n\n    // relay the event\n    var relay = function(event) {\n      return function(t, server) {\n        self.emit(event, t, server);\n      };\n    };\n\n    // Connect handler\n    var connectHandler = function() {\n      // Clear out all the current handlers left over\n      ['timeout', 'error', 'close', 'destroy'].forEach(function(e) {\n        self.s.coreTopology.removeAllListeners(e);\n      });\n\n      // Set up listeners\n      self.s.coreTopology.on('timeout', errorHandler('timeout'));\n      self.s.coreTopology.once('error', errorHandler('error'));\n      self.s.coreTopology.on('close', errorHandler('close'));\n      // Only called on destroy\n      self.s.coreTopology.on('destroy', destroyHandler);\n\n      // Emit open event\n      self.emit('open', null, self);\n\n      // Return correctly\n      try {\n        callback(null, self);\n      } catch (err) {\n        console.log(err.stack);\n        process.nextTick(function() {\n          throw err;\n        });\n      }\n    };\n\n    // Set up listeners\n    var connectHandlers = {\n      timeout: connectErrorHandler('timeout'),\n      error: connectErrorHandler('error'),\n      close: connectErrorHandler('close')\n    };\n\n    // Clear out all the current handlers left over\n    [\n      'timeout',\n      'error',\n      'close',\n      'serverOpening',\n      'serverDescriptionChanged',\n      'serverHeartbeatStarted',\n      'serverHeartbeatSucceeded',\n      'serverHeartbeatFailed',\n      'serverClosed',\n      'topologyOpening',\n      'topologyClosed',\n      'topologyDescriptionChanged'\n    ].forEach(function(e) {\n      self.s.coreTopology.removeAllListeners(e);\n    });\n\n    // Add the event handlers\n    self.s.coreTopology.once('timeout', connectHandlers.timeout);\n    self.s.coreTopology.once('error', connectHandlers.error);\n    self.s.coreTopology.once('close', connectHandlers.close);\n    self.s.coreTopology.once('connect', connectHandler);\n    // Reconnect server\n    self.s.coreTopology.on('reconnect', reconnectHandler);\n    self.s.coreTopology.on('reconnectFailed', reconnectFailedHandler);\n\n    // Set up SDAM listeners\n    self.s.coreTopology.on('serverDescriptionChanged', relay('serverDescriptionChanged'));\n    self.s.coreTopology.on('serverHeartbeatStarted', relay('serverHeartbeatStarted'));\n    self.s.coreTopology.on('serverHeartbeatSucceeded', relay('serverHeartbeatSucceeded'));\n    self.s.coreTopology.on('serverHeartbeatFailed', relay('serverHeartbeatFailed'));\n    self.s.coreTopology.on('serverOpening', relay('serverOpening'));\n    self.s.coreTopology.on('serverClosed', relay('serverClosed'));\n    self.s.coreTopology.on('topologyOpening', relay('topologyOpening'));\n    self.s.coreTopology.on('topologyClosed', relay('topologyClosed'));\n    self.s.coreTopology.on('topologyDescriptionChanged', relay('topologyDescriptionChanged'));\n    self.s.coreTopology.on('attemptReconnect', relay('attemptReconnect'));\n    self.s.coreTopology.on('monitoring', relay('monitoring'));\n\n    // Start connection\n    self.s.coreTopology.connect(_options);\n  }\n}\n\nObject.defineProperty(Server.prototype, 'poolSize', {\n  enumerable: true,\n  get: function() {\n    return this.s.coreTopology.connections().length;\n  }\n});\n\nObject.defineProperty(Server.prototype, 'autoReconnect', {\n  enumerable: true,\n  get: function() {\n    return this.s.reconnect;\n  }\n});\n\nObject.defineProperty(Server.prototype, 'host', {\n  enumerable: true,\n  get: function() {\n    return this.s.host;\n  }\n});\n\nObject.defineProperty(Server.prototype, 'port', {\n  enumerable: true,\n  get: function() {\n    return this.s.port;\n  }\n});\n\nconst define = (Server.define = new Define('Server', Server, false));\ndefine.classMethod('capabilities', {\n  callback: false,\n  promise: false,\n  returns: [ServerCapabilities]\n});\n\ndefine.classMethod('command', { callback: true, promise: false });\ndefine.classMethod('insert', { callback: true, promise: false });\ndefine.classMethod('update', { callback: true, promise: false });\ndefine.classMethod('remove', { callback: true, promise: false });\ndefine.classMethod('isConnected', { callback: false, promise: false, returns: [Boolean] });\ndefine.classMethod('isDestroyed', { callback: false, promise: false, returns: [Boolean] });\ndefine.classMethod('cursor', {\n  callback: false,\n  promise: false,\n  returns: [Cursor, AggregationCursor, CommandCursor]\n});\n\ndefine.classMethod('close', { callback: false, promise: false });\ndefine.classMethod('auth', { callback: true, promise: false });\ndefine.classMethod('logout', { callback: true, promise: false });\ndefine.classMethod('connections', { callback: false, promise: false, returns: [Array] });\n\n/**\n * Server connect event\n *\n * @event Server#connect\n * @type {object}\n */\n\n/**\n * Server close event\n *\n * @event Server#close\n * @type {object}\n */\n\n/**\n * Server reconnect event\n *\n * @event Server#reconnect\n * @type {object}\n */\n\n/**\n * Server error event\n *\n * @event Server#error\n * @type {MongoError}\n */\n\n/**\n * Server timeout event\n *\n * @event Server#timeout\n * @type {object}\n */\n\n/**\n * Server parseError event\n *\n * @event Server#parseError\n * @type {object}\n */\n\nmodule.exports = Server;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/topologies/server.js\n// module id = 81\n// module chunks = 0","\n/*!\n * Connection states\n */\n\nvar STATES = module.exports = exports = Object.create(null);\n\nvar disconnected = 'disconnected';\nvar connected = 'connected';\nvar connecting = 'connecting';\nvar disconnecting = 'disconnecting';\nvar uninitialized = 'uninitialized';\n\nSTATES[0] = disconnected;\nSTATES[1] = connected;\nSTATES[2] = connecting;\nSTATES[3] = disconnecting;\nSTATES[99] = uninitialized;\n\nSTATES[disconnected] = 0;\nSTATES[connected] = 1;\nSTATES[connecting] = 2;\nSTATES[disconnecting] = 3;\nSTATES[uninitialized] = 99;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/connectionstate.js\n// module id = 82\n// module chunks = 0","/*!\n * ignore\n */\n\nconst assert = require('assert');\nconst mquery = require('mquery');\n\n/**\n * Helper for multiplexing promise implementations\n *\n * @api private\n */\n\nvar store = {\n  _promise: null\n};\n\n/**\n * Get the current promise constructor\n *\n * @api private\n */\n\nstore.get = function() {\n  return store._promise;\n};\n\n/**\n * Set the current promise constructor\n *\n * @api private\n */\n\nstore.set = function(lib) {\n  assert.ok(typeof lib === 'function',\n    `mongoose.Promise must be a function, got ${lib}`);\n  store._promise = lib;\n  mquery.Promise = lib;\n};\n\n/*!\n * Use native promises by default\n */\n\nstore.set(global.Promise);\n\nmodule.exports = store;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/promise_provider.js\n// module id = 83\n// module chunks = 0","'use strict';\n\n/*!\n * Module requirements.\n */\n\nvar Types = {\n  Number: require('../number')\n};\n\n/*!\n * @ignore\n */\n\nexports.castToNumber = castToNumber;\nexports.castArraysOfNumbers = castArraysOfNumbers;\n\n/*!\n * @ignore\n */\n\nfunction castToNumber(val) {\n  return Types.Number.prototype.cast.call(this, val);\n}\n\nfunction castArraysOfNumbers(arr, self) {\n  arr.forEach(function(v, i) {\n    if (Array.isArray(v)) {\n      castArraysOfNumbers(v, self);\n    } else {\n      arr[i] = castToNumber.call(self, v);\n    }\n  });\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/schema/operators/helpers.js\n// module id = 84\n// module chunks = 0","'use strict';\n\n/*!\n * Module dependencies.\n */\n\nvar ObjectId = require('../types/objectid');\nvar utils = require('../utils');\n\nexports.flatten = flatten;\nexports.modifiedPaths = modifiedPaths;\n\n/*!\n * ignore\n */\n\nfunction flatten(update, path, options) {\n  var keys;\n  if (update && utils.isMongooseObject(update) && !Buffer.isBuffer(update)) {\n    keys = Object.keys(update.toObject({ transform: false, virtuals: false }));\n  } else {\n    keys = Object.keys(update || {});\n  }\n\n  var numKeys = keys.length;\n  var result = {};\n  path = path ? path + '.' : '';\n\n  for (var i = 0; i < numKeys; ++i) {\n    var key = keys[i];\n    var val = update[key];\n    result[path + key] = val;\n    if (shouldFlatten(val)) {\n      if (options && options.skipArrays && Array.isArray(val)) {\n        continue;\n      }\n      var flat = flatten(val, path + key, options);\n      for (var k in flat) {\n        result[k] = flat[k];\n      }\n      if (Array.isArray(val)) {\n        result[path + key] = val;\n      }\n    }\n  }\n\n  return result;\n}\n\n/*!\n * ignore\n */\n\nfunction modifiedPaths(update, path, result) {\n  var keys = Object.keys(update || {});\n  var numKeys = keys.length;\n  result = result || {};\n  path = path ? path + '.' : '';\n\n  for (var i = 0; i < numKeys; ++i) {\n    var key = keys[i];\n    var val = update[key];\n\n    result[path + key] = true;\n    if (utils.isMongooseObject(val) && !Buffer.isBuffer(val)) {\n      val = val.toObject({ transform: false, virtuals: false });\n    }\n    if (shouldFlatten(val)) {\n      modifiedPaths(val, path + key, result);\n    }\n  }\n\n  return result;\n}\n\n/*!\n * ignore\n */\n\nfunction shouldFlatten(val) {\n  return val &&\n    typeof val === 'object' &&\n    !(val instanceof Date) &&\n    !(val instanceof ObjectId) &&\n    (!Array.isArray(val) || val.length > 0) &&\n    !(val instanceof Buffer);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/services/common.js\n// module id = 85\n// module chunks = 0","'use strict';\n\n/*!\n * ignore\n */\n\nmodule.exports = function isDefiningProjection(val) {\n  if (val == null) {\n    // `undefined` or `null` become exclusive projections\n    return true;\n  }\n  if (typeof val === 'object') {\n    // Only cases where a value does **not** define whether the whole projection\n    // is inclusive or exclusive are `$meta` and `$slice`.\n    return !('$meta' in val) && !('$slice' in val);\n  }\n  return true;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/services/projection/isDefiningProjection.js\n// module id = 86\n// module chunks = 0","'use strict';\n\n/**\n * methods a collection must implement\n */\n\nvar methods = [\n    'find'\n  , 'findOne'\n  , 'update'\n  , 'updateMany',\n  , 'updateOne'\n  , 'replaceOne'\n  , 'remove'\n  , 'count'\n  , 'distinct'\n  , 'findAndModify'\n  , 'aggregate'\n  , 'findStream'\n  , 'deleteOne'\n  , 'deleteMany'\n];\n\n/**\n * Collection base class from which implementations inherit\n */\n\nfunction Collection () {}\n\nfor (var i = 0, len = methods.length; i < len; ++i) {\n  var method = methods[i];\n  Collection.prototype[method] = notImplemented(method);\n}\n\nmodule.exports = exports = Collection;\nCollection.methods = methods;\n\n/**\n * creates a function which throws an implementation error\n */\n\nfunction notImplemented (method) {\n  return function () {\n    throw new Error('collection.' + method + ' not implemented');\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mquery@3.0.0@mquery/lib/collection/collection.js\n// module id = 87\n// module chunks = 0","var path = require('path'),\n  fs = require('fs'),\n  f = require('util').format,\n  resolveFrom = require('resolve-from'),\n  semver = require('semver');\n\nvar exists = fs.existsSync || path.existsSync;\n\n// Find the location of a package.json file near or above the given location\nvar find_package_json = function(location) {\n  var found = false;\n\n  while(!found) {\n    if (exists(location + '/package.json')) {\n      found = location;\n    } else if (location !== '/') {\n      location = path.dirname(location);\n    } else {\n      return false;\n    }\n  }\n\n  return location;\n}\n\n// Find the package.json object of the module closest up the module call tree that contains name in that module's peerOptionalDependencies\nvar find_package_json_with_name = function(name) {\n  // Walk up the module call tree until we find a module containing name in its peerOptionalDependencies\n  var currentModule = module;\n  var found = false;\n  while (currentModule) {\n    // Check currentModule has a package.json\n    location = currentModule.filename;\n    var location = find_package_json(location)\n    if (!location) {\n      currentModule = currentModule.parent;\n      continue;\n    }\n\n    // Read the package.json file\n    var object = JSON.parse(fs.readFileSync(f('%s/package.json', location)));\n    // Is the name defined by interal file references\n    var parts = name.split(/\\//);\n\n    // Check whether this package.json contains peerOptionalDependencies containing the name we're searching for\n    if (!object.peerOptionalDependencies || (object.peerOptionalDependencies && !object.peerOptionalDependencies[parts[0]])) {\n      currentModule = currentModule.parent;\n      continue;\n    }\n    found = true;\n    break;\n  }\n\n  // Check whether name has been found in currentModule's peerOptionalDependencies\n  if (!found) {\n    throw new Error(f('no optional dependency [%s] defined in peerOptionalDependencies in any package.json', parts[0]));\n  }\n\n  return {\n    object: object,\n    parts: parts\n  }\n}\n\nvar require_optional = function(name, options) {\n  options = options || {};\n  options.strict = typeof options.strict == 'boolean' ? options.strict : true;\n\n  var res = find_package_json_with_name(name)\n  var object = res.object;\n  var parts = res.parts;\n\n  // Unpack the expected version\n  var expectedVersions = object.peerOptionalDependencies[parts[0]];\n  // The resolved package\n  var moduleEntry = undefined;\n  // Module file\n  var moduleEntryFile = name;\n\n  try {\n    // Validate if it's possible to read the module\n    moduleEntry = require(moduleEntryFile);\n  } catch(err) {\n    // Attempt to resolve in top level package\n    try {\n      // Get the module entry file\n      moduleEntryFile = resolveFrom(process.cwd(), name);\n      if(moduleEntryFile == null) return undefined;\n      // Attempt to resolve the module\n      moduleEntry = require(moduleEntryFile);\n    } catch(err) {\n      if(err.code === 'MODULE_NOT_FOUND') return undefined;\n    }\n  }\n\n  // Resolve the location of the module's package.json file\n  var location = find_package_json(require.resolve(moduleEntryFile));\n  if(!location) {\n    throw new Error('package.json can not be located');\n  }\n\n  // Read the module file\n  var dependentOnModule = JSON.parse(fs.readFileSync(f('%s/package.json', location)));\n  // Get the version\n  var version = dependentOnModule.version;\n  // Validate if the found module satisfies the version id\n  if(semver.satisfies(version, expectedVersions) == false\n    && options.strict) {\n      var error = new Error(f('optional dependency [%s] found but version [%s] did not satisfy constraint [%s]', parts[0], version, expectedVersions));\n      error.code = 'OPTIONAL_MODULE_NOT_FOUND';\n      throw error;\n  }\n\n  // Satifies the module requirement\n  return moduleEntry;\n}\n\nrequire_optional.exists = function(name) {\n  try {\n    var m = require_optional(name);\n    if(m === undefined) return false;\n    return true;\n  } catch(err) {\n    return false;\n  }\n}\n\nmodule.exports = require_optional;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_require_optional@1.0.1@require_optional/index.js\n// module id = 88\n// module chunks = 0","/**\n * A class representation of a BSON Int32 type.\n *\n * @class\n * @param {number} value the number we want to represent as an int32.\n * @return {Int32}\n */\nvar Int32 = function(value) {\n  if (!(this instanceof Int32)) return new Int32(value);\n\n  this._bsontype = 'Int32';\n  this.value = value;\n};\n\n/**\n * Access the number value.\n *\n * @method\n * @return {number} returns the wrapped int32 number.\n */\nInt32.prototype.valueOf = function() {\n  return this.value;\n};\n\n/**\n * @ignore\n */\nInt32.prototype.toJSON = function() {\n  return this.value;\n};\n\nmodule.exports = Int32;\nmodule.exports.Int32 = Int32;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_bson@1.0.6@bson/lib/bson/int_32.js\n// module id = 89\n// module chunks = 0","'use strict';\n\n// We have an ES6 Map available, return the native instance\nif (typeof global.Map !== 'undefined') {\n  module.exports = global.Map;\n  module.exports.Map = global.Map;\n} else {\n  // We will return a polyfill\n  var Map = function(array) {\n    this._keys = [];\n    this._values = {};\n\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] == null) continue; // skip null and undefined\n      var entry = array[i];\n      var key = entry[0];\n      var value = entry[1];\n      // Add the key to the list of keys in order\n      this._keys.push(key);\n      // Add the key and value to the values dictionary with a point\n      // to the location in the ordered keys list\n      this._values[key] = { v: value, i: this._keys.length - 1 };\n    }\n  };\n\n  Map.prototype.clear = function() {\n    this._keys = [];\n    this._values = {};\n  };\n\n  Map.prototype.delete = function(key) {\n    var value = this._values[key];\n    if (value == null) return false;\n    // Delete entry\n    delete this._values[key];\n    // Remove the key from the ordered keys list\n    this._keys.splice(value.i, 1);\n    return true;\n  };\n\n  Map.prototype.entries = function() {\n    var self = this;\n    var index = 0;\n\n    return {\n      next: function() {\n        var key = self._keys[index++];\n        return {\n          value: key !== undefined ? [key, self._values[key].v] : undefined,\n          done: key !== undefined ? false : true\n        };\n      }\n    };\n  };\n\n  Map.prototype.forEach = function(callback, self) {\n    self = self || this;\n\n    for (var i = 0; i < this._keys.length; i++) {\n      var key = this._keys[i];\n      // Call the forEach callback\n      callback.call(self, this._values[key].v, key, self);\n    }\n  };\n\n  Map.prototype.get = function(key) {\n    return this._values[key] ? this._values[key].v : undefined;\n  };\n\n  Map.prototype.has = function(key) {\n    return this._values[key] != null;\n  };\n\n  Map.prototype.keys = function() {\n    var self = this;\n    var index = 0;\n\n    return {\n      next: function() {\n        var key = self._keys[index++];\n        return {\n          value: key !== undefined ? key : undefined,\n          done: key !== undefined ? false : true\n        };\n      }\n    };\n  };\n\n  Map.prototype.set = function(key, value) {\n    if (this._values[key]) {\n      this._values[key].v = value;\n      return this;\n    }\n\n    // Add the key to the list of keys in order\n    this._keys.push(key);\n    // Add the key and value to the values dictionary with a point\n    // to the location in the ordered keys list\n    this._values[key] = { v: value, i: this._keys.length - 1 };\n    return this;\n  };\n\n  Map.prototype.values = function() {\n    var self = this;\n    var index = 0;\n\n    return {\n      next: function() {\n        var key = self._keys[index++];\n        return {\n          value: key !== undefined ? self._values[key].v : undefined,\n          done: key !== undefined ? false : true\n        };\n      }\n    };\n  };\n\n  // Last ismaster\n  Object.defineProperty(Map.prototype, 'size', {\n    enumerable: true,\n    get: function() {\n      return this._keys.length;\n    }\n  });\n\n  module.exports = Map;\n  module.exports.Map = Map;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_bson@1.0.6@bson/lib/bson/map.js\n// module id = 90\n// module chunks = 0","'use strict';\n\nvar f = require('util').format,\n  require_optional = require('require_optional'),\n  Query = require('../connection/commands').Query,\n  MongoError = require('../error').MongoError;\n\nvar AuthSession = function(db, username, password, options) {\n  this.db = db;\n  this.username = username;\n  this.password = password;\n  this.options = options;\n};\n\nAuthSession.prototype.equal = function(session) {\n  return (\n    session.db === this.db &&\n    session.username === this.username &&\n    session.password === this.password\n  );\n};\n\n// Kerberos class\nvar Kerberos = null;\nvar MongoAuthProcess = null;\n\n// Try to grab the Kerberos class\ntry {\n  Kerberos = require_optional('kerberos').Kerberos;\n  // Authentication process for Mongo\n  MongoAuthProcess = require_optional('kerberos').processes.MongoAuthProcess;\n} catch (err) {} // eslint-disable-line\n\n/**\n * Creates a new SSPI authentication mechanism\n * @class\n * @return {SSPI} A cursor instance\n */\nvar SSPI = function(bson) {\n  this.bson = bson;\n  this.authStore = [];\n};\n\n/**\n * Authenticate\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {string} db Name of the database\n * @param {string} username Username\n * @param {string} password Password\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nSSPI.prototype.auth = function(server, connections, db, username, password, options, callback) {\n  var self = this;\n  // We don't have the Kerberos library\n  if (Kerberos == null) return callback(new Error('Kerberos library is not installed'));\n  var gssapiServiceName = options['gssapiServiceName'] || 'mongodb';\n  // Total connections\n  var count = connections.length;\n  if (count === 0) return callback(null, null);\n\n  // Valid connections\n  var numberOfValidConnections = 0;\n  var errorObject = null;\n\n  // For each connection we need to authenticate\n  while (connections.length > 0) {\n    // Execute MongoCR\n    var execute = function(connection) {\n      // Start Auth process for a connection\n      SSIPAuthenticate(\n        self,\n        username,\n        password,\n        gssapiServiceName,\n        server,\n        connection,\n        options,\n        function(err, r) {\n          // Adjust count\n          count = count - 1;\n\n          // If we have an error\n          if (err) {\n            errorObject = err;\n          } else if (r && typeof r === 'object' && r.result['$err']) {\n            errorObject = r.result;\n          } else if (r && typeof r === 'object' && r.result['errmsg']) {\n            errorObject = r.result;\n          } else {\n            numberOfValidConnections = numberOfValidConnections + 1;\n          }\n\n          // We have authenticated all connections\n          if (count === 0 && numberOfValidConnections > 0) {\n            // Store the auth details\n            addAuthSession(self.authStore, new AuthSession(db, username, password, options));\n            // Return correct authentication\n            callback(null, true);\n          } else if (count === 0) {\n            if (errorObject == null)\n              errorObject = new MongoError(f('failed to authenticate using mongocr'));\n            callback(errorObject, false);\n          }\n        }\n      );\n    };\n\n    var _execute = function(_connection) {\n      process.nextTick(function() {\n        execute(_connection);\n      });\n    };\n\n    _execute(connections.shift());\n  }\n};\n\nvar SSIPAuthenticate = function(\n  self,\n  username,\n  password,\n  gssapiServiceName,\n  server,\n  connection,\n  options,\n  callback\n) {\n  // Build Authentication command to send to MongoDB\n  var command = {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload: '',\n    autoAuthorize: 1\n  };\n\n  // Create authenticator\n  var mongo_auth_process = new MongoAuthProcess(\n    connection.host,\n    connection.port,\n    gssapiServiceName,\n    options\n  );\n\n  // Execute first sasl step\n  server(\n    connection,\n    new Query(self.bson, '$external.$cmd', command, {\n      numberToSkip: 0,\n      numberToReturn: 1\n    }),\n    function(err, r) {\n      if (err) return callback(err, false);\n      var doc = r.result;\n\n      mongo_auth_process.init(username, password, function(err) {\n        if (err) return callback(err);\n\n        mongo_auth_process.transition(doc.payload, function(err, payload) {\n          if (err) return callback(err);\n\n          // Perform the next step against mongod\n          var command = {\n            saslContinue: 1,\n            conversationId: doc.conversationId,\n            payload: payload\n          };\n\n          // Execute the command\n          server(\n            connection,\n            new Query(self.bson, '$external.$cmd', command, {\n              numberToSkip: 0,\n              numberToReturn: 1\n            }),\n            function(err, r) {\n              if (err) return callback(err, false);\n              var doc = r.result;\n\n              mongo_auth_process.transition(doc.payload, function(err, payload) {\n                if (err) return callback(err);\n\n                // Perform the next step against mongod\n                var command = {\n                  saslContinue: 1,\n                  conversationId: doc.conversationId,\n                  payload: payload\n                };\n\n                // Execute the command\n                server(\n                  connection,\n                  new Query(self.bson, '$external.$cmd', command, {\n                    numberToSkip: 0,\n                    numberToReturn: 1\n                  }),\n                  function(err, r) {\n                    if (err) return callback(err, false);\n                    var doc = r.result;\n\n                    mongo_auth_process.transition(doc.payload, function(err, payload) {\n                      // Perform the next step against mongod\n                      var command = {\n                        saslContinue: 1,\n                        conversationId: doc.conversationId,\n                        payload: payload\n                      };\n\n                      // Execute the command\n                      server(\n                        connection,\n                        new Query(self.bson, '$external.$cmd', command, {\n                          numberToSkip: 0,\n                          numberToReturn: 1\n                        }),\n                        function(err, r) {\n                          if (err) return callback(err, false);\n                          var doc = r.result;\n\n                          if (doc.done) return callback(null, true);\n                          callback(new Error('Authentication failed'), false);\n                        }\n                      );\n                    });\n                  }\n                );\n              });\n            }\n          );\n        });\n      });\n    }\n  );\n};\n\n// Add to store only if it does not exist\nvar addAuthSession = function(authStore, session) {\n  var found = false;\n\n  for (var i = 0; i < authStore.length; i++) {\n    if (authStore[i].equal(session)) {\n      found = true;\n      break;\n    }\n  }\n\n  if (!found) authStore.push(session);\n};\n\n/**\n * Remove authStore credentials\n * @method\n * @param {string} db Name of database we are removing authStore details about\n * @return {object}\n */\nSSPI.prototype.logout = function(dbName) {\n  this.authStore = this.authStore.filter(function(x) {\n    return x.db !== dbName;\n  });\n};\n\n/**\n * Re authenticate pool\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nSSPI.prototype.reauthenticate = function(server, connections, callback) {\n  var authStore = this.authStore.slice(0);\n  var count = authStore.length;\n  if (count === 0) return callback(null, null);\n  // Iterate over all the auth details stored\n  for (var i = 0; i < authStore.length; i++) {\n    this.auth(\n      server,\n      connections,\n      authStore[i].db,\n      authStore[i].username,\n      authStore[i].password,\n      authStore[i].options,\n      function(err) {\n        count = count - 1;\n        // Done re-authenticating\n        if (count === 0) {\n          callback(err, null);\n        }\n      }\n    );\n  }\n};\n\n/**\n * This is a result from a authentication strategy\n *\n * @callback authResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {boolean} result The result of the authentication process\n */\n\nmodule.exports = SSPI;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/auth/sspi.js\n// module id = 91\n// module chunks = 0","'use strict';\n\nvar inherits = require('util').inherits,\n  f = require('util').format,\n  EventEmitter = require('events').EventEmitter,\n  ReadPreference = require('./read_preference'),\n  Logger = require('../connection/logger'),\n  debugOptions = require('../connection/utils').debugOptions,\n  retrieveBSON = require('../connection/utils').retrieveBSON,\n  Pool = require('../connection/pool'),\n  Query = require('../connection/commands').Query,\n  MongoError = require('../error').MongoError,\n  MongoNetworkError = require('../error').MongoNetworkError,\n  TwoSixWireProtocolSupport = require('../wireprotocol/2_6_support'),\n  ThreeTwoWireProtocolSupport = require('../wireprotocol/3_2_support'),\n  BasicCursor = require('../cursor'),\n  sdam = require('./shared'),\n  createClientInfo = require('./shared').createClientInfo,\n  createCompressionInfo = require('./shared').createCompressionInfo,\n  resolveClusterTime = require('./shared').resolveClusterTime,\n  SessionMixins = require('./shared').SessionMixins;\n\n// Used for filtering out fields for loggin\nvar debugFields = [\n  'reconnect',\n  'reconnectTries',\n  'reconnectInterval',\n  'emitError',\n  'cursorFactory',\n  'host',\n  'port',\n  'size',\n  'keepAlive',\n  'keepAliveInitialDelay',\n  'noDelay',\n  'connectionTimeout',\n  'checkServerIdentity',\n  'socketTimeout',\n  'singleBufferSerializtion',\n  'ssl',\n  'ca',\n  'crl',\n  'cert',\n  'key',\n  'rejectUnauthorized',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'servername'\n];\n\n// Server instance id\nvar id = 0;\nvar serverAccounting = false;\nvar servers = {};\nvar BSON = retrieveBSON();\n\n/**\n * Creates a new Server instance\n * @class\n * @param {boolean} [options.reconnect=true] Server will attempt to reconnect on loss of connection\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @param {number} [options.monitoring=true] Enable the server state monitoring (calling ismaster at monitoringInterval)\n * @param {number} [options.monitoringInterval=5000] The interval of calling ismaster when monitoring is enabled.\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {string} options.host The server host\n * @param {number} options.port The server port\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=300000] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=30000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=360000] TCP Socket timeout setting\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {string} [options.appname=null] Application name, passed in on ismaster call and logged in mongod server logs. Maximum size 128 bytes.\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @return {Server} A cursor instance\n * @fires Server#connect\n * @fires Server#close\n * @fires Server#error\n * @fires Server#timeout\n * @fires Server#parseError\n * @fires Server#reconnect\n * @fires Server#reconnectFailed\n * @fires Server#serverHeartbeatStarted\n * @fires Server#serverHeartbeatSucceeded\n * @fires Server#serverHeartbeatFailed\n * @fires Server#topologyOpening\n * @fires Server#topologyClosed\n * @fires Server#topologyDescriptionChanged\n * @property {string} type the topology type.\n * @property {string} parserType the parser type used (c++ or js).\n */\nvar Server = function(options) {\n  options = options || {};\n\n  // Add event listener\n  EventEmitter.call(this);\n\n  // Server instance id\n  this.id = id++;\n\n  // Internal state\n  this.s = {\n    // Options\n    options: options,\n    // Logger\n    logger: Logger('Server', options),\n    // Factory overrides\n    Cursor: options.cursorFactory || BasicCursor,\n    // BSON instance\n    bson:\n      options.bson ||\n      new BSON([\n        BSON.Binary,\n        BSON.Code,\n        BSON.DBRef,\n        BSON.Decimal128,\n        BSON.Double,\n        BSON.Int32,\n        BSON.Long,\n        BSON.Map,\n        BSON.MaxKey,\n        BSON.MinKey,\n        BSON.ObjectId,\n        BSON.BSONRegExp,\n        BSON.Symbol,\n        BSON.Timestamp\n      ]),\n    // Pool\n    pool: null,\n    // Disconnect handler\n    disconnectHandler: options.disconnectHandler,\n    // Monitor thread (keeps the connection alive)\n    monitoring: typeof options.monitoring === 'boolean' ? options.monitoring : true,\n    // Is the server in a topology\n    inTopology: !!options.parent,\n    // Monitoring timeout\n    monitoringInterval:\n      typeof options.monitoringInterval === 'number' ? options.monitoringInterval : 5000,\n    // Topology id\n    topologyId: -1,\n    compression: { compressors: createCompressionInfo(options) },\n    // Optional parent topology\n    parent: options.parent\n  };\n\n  // If this is a single deployment we need to track the clusterTime here\n  if (!this.s.parent) {\n    this.s.clusterTime = null;\n  }\n\n  // Curent ismaster\n  this.ismaster = null;\n  // Current ping time\n  this.lastIsMasterMS = -1;\n  // The monitoringProcessId\n  this.monitoringProcessId = null;\n  // Initial connection\n  this.initialConnect = true;\n  // Wire protocol handler, default to oldest known protocol handler\n  // this gets changed when the first ismaster is called.\n  this.wireProtocolHandler = new TwoSixWireProtocolSupport();\n  // Default type\n  this._type = 'server';\n  // Set the client info\n  this.clientInfo = createClientInfo(options);\n\n  // Max Stalleness values\n  // last time we updated the ismaster state\n  this.lastUpdateTime = 0;\n  // Last write time\n  this.lastWriteDate = 0;\n  // Stalleness\n  this.staleness = 0;\n};\n\ninherits(Server, EventEmitter);\nObject.assign(Server.prototype, SessionMixins);\n\nObject.defineProperty(Server.prototype, 'type', {\n  enumerable: true,\n  get: function() {\n    return this._type;\n  }\n});\n\nObject.defineProperty(Server.prototype, 'parserType', {\n  enumerable: true,\n  get: function() {\n    return BSON.native ? 'c++' : 'js';\n  }\n});\n\nObject.defineProperty(Server.prototype, 'logicalSessionTimeoutMinutes', {\n  enumerable: true,\n  get: function() {\n    if (!this.ismaster) return null;\n    return this.ismaster.logicalSessionTimeoutMinutes || null;\n  }\n});\n\n// In single server deployments we track the clusterTime directly on the topology, however\n// in Mongos and ReplSet deployments we instead need to delegate the clusterTime up to the\n// tracking objects so we can ensure we are gossiping the maximum time received from the\n// server.\nObject.defineProperty(Server.prototype, 'clusterTime', {\n  enumerable: true,\n  set: function(clusterTime) {\n    const settings = this.s.parent ? this.s.parent : this.s;\n    resolveClusterTime(settings, clusterTime);\n  },\n  get: function() {\n    const settings = this.s.parent ? this.s.parent : this.s;\n    return settings.clusterTime || null;\n  }\n});\n\nServer.enableServerAccounting = function() {\n  serverAccounting = true;\n  servers = {};\n};\n\nServer.disableServerAccounting = function() {\n  serverAccounting = false;\n};\n\nServer.servers = function() {\n  return servers;\n};\n\nObject.defineProperty(Server.prototype, 'name', {\n  enumerable: true,\n  get: function() {\n    return this.s.options.host + ':' + this.s.options.port;\n  }\n});\n\nfunction isSupportedServer(response) {\n  return response && typeof response.maxWireVersion === 'number' && response.maxWireVersion >= 2;\n}\n\nfunction configureWireProtocolHandler(self, ismaster) {\n  // 3.2 wire protocol handler\n  if (ismaster.maxWireVersion >= 4) {\n    return new ThreeTwoWireProtocolSupport(new TwoSixWireProtocolSupport());\n  }\n\n  // default to 2.6 wire protocol handler\n  return new TwoSixWireProtocolSupport();\n}\n\nfunction disconnectHandler(self, type, ns, cmd, options, callback) {\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if (\n    !self.s.pool.isConnected() &&\n    self.s.options.reconnect &&\n    self.s.disconnectHandler != null &&\n    !options.monitoring\n  ) {\n    self.s.disconnectHandler.add(type, ns, cmd, options, callback);\n    return true;\n  }\n\n  // If we have no connection error\n  if (!self.s.pool.isConnected()) {\n    callback(new MongoError(f('no connection available to server %s', self.name)));\n    return true;\n  }\n}\n\nfunction monitoringProcess(self) {\n  return function() {\n    // Pool was destroyed do not continue process\n    if (self.s.pool.isDestroyed()) return;\n    // Emit monitoring Process event\n    self.emit('monitoring', self);\n    // Perform ismaster call\n    // Query options\n    var queryOptions = { numberToSkip: 0, numberToReturn: -1, checkKeys: false, slaveOk: true };\n    // Create a query instance\n    var query = new Query(self.s.bson, 'admin.$cmd', { ismaster: true }, queryOptions);\n    // Get start time\n    var start = new Date().getTime();\n\n    // Execute the ismaster query\n    self.s.pool.write(\n      query,\n      {\n        socketTimeout:\n          typeof self.s.options.connectionTimeout !== 'number'\n            ? 2000\n            : self.s.options.connectionTimeout,\n        monitoring: true\n      },\n      function(err, result) {\n        // Set initial lastIsMasterMS\n        self.lastIsMasterMS = new Date().getTime() - start;\n        if (self.s.pool.isDestroyed()) return;\n        // Update the ismaster view if we have a result\n        if (result) {\n          self.ismaster = result.result;\n        }\n        // Re-schedule the monitoring process\n        self.monitoringProcessId = setTimeout(monitoringProcess(self), self.s.monitoringInterval);\n      }\n    );\n  };\n}\n\nvar eventHandler = function(self, event) {\n  return function(err) {\n    // Log information of received information if in info mode\n    if (self.s.logger.isInfo()) {\n      var object = err instanceof MongoError ? JSON.stringify(err) : {};\n      self.s.logger.info(\n        f('server %s fired event %s out with message %s', self.name, event, object)\n      );\n    }\n\n    // Handle connect event\n    if (event === 'connect') {\n      // Issue an ismaster command at connect\n      // Query options\n      var queryOptions = { numberToSkip: 0, numberToReturn: -1, checkKeys: false, slaveOk: true };\n      // Create a query instance\n      var compressors =\n        self.s.compression && self.s.compression.compressors ? self.s.compression.compressors : [];\n      var query = new Query(\n        self.s.bson,\n        'admin.$cmd',\n        { ismaster: true, client: self.clientInfo, compression: compressors },\n        queryOptions\n      );\n      // Get start time\n      var start = new Date().getTime();\n      // Execute the ismaster query\n      self.s.pool.write(\n        query,\n        {\n          socketTimeout: self.s.options.connectionTimeout || 2000\n        },\n        function(err, result) {\n          // Set initial lastIsMasterMS\n          self.lastIsMasterMS = new Date().getTime() - start;\n          if (err) {\n            self.destroy();\n            return self.emit('error', err);\n          }\n\n          if (!isSupportedServer(result.result)) {\n            self.destroy();\n            const latestSupportedVersion = '2.6';\n            const message =\n              'Server at ' +\n              self.s.options.host +\n              ':' +\n              self.s.options.port +\n              ' reports wire version ' +\n              (result.result.maxWireVersion || 0) +\n              ', but this version of Node.js Driver requires at least 2 (MongoDB' +\n              latestSupportedVersion +\n              ').';\n            return self.emit('error', new MongoError(message), self);\n          }\n\n          // Determine whether the server is instructing us to use a compressor\n          if (result.result && result.result.compression) {\n            for (var i = 0; i < self.s.compression.compressors.length; i++) {\n              if (result.result.compression.indexOf(self.s.compression.compressors[i]) > -1) {\n                self.s.pool.options.agreedCompressor = self.s.compression.compressors[i];\n                break;\n              }\n            }\n\n            if (self.s.compression.zlibCompressionLevel) {\n              self.s.pool.options.zlibCompressionLevel = self.s.compression.zlibCompressionLevel;\n            }\n          }\n\n          // Ensure no error emitted after initial connect when reconnecting\n          self.initialConnect = false;\n          // Save the ismaster\n          self.ismaster = result.result;\n\n          // It's a proxy change the type so\n          // the wireprotocol will send $readPreference\n          if (self.ismaster.msg === 'isdbgrid') {\n            self._type = 'mongos';\n          }\n          // Add the correct wire protocol handler\n          self.wireProtocolHandler = configureWireProtocolHandler(self, self.ismaster);\n          // Have we defined self monitoring\n          if (self.s.monitoring) {\n            self.monitoringProcessId = setTimeout(\n              monitoringProcess(self),\n              self.s.monitoringInterval\n            );\n          }\n\n          // Emit server description changed if something listening\n          sdam.emitServerDescriptionChanged(self, {\n            address: self.name,\n            arbiters: [],\n            hosts: [],\n            passives: [],\n            type: sdam.getTopologyType(self)\n          });\n\n          if (!self.s.inTopology) {\n            // Emit topology description changed if something listening\n            sdam.emitTopologyDescriptionChanged(self, {\n              topologyType: 'Single',\n              servers: [\n                {\n                  address: self.name,\n                  arbiters: [],\n                  hosts: [],\n                  passives: [],\n                  type: sdam.getTopologyType(self)\n                }\n              ]\n            });\n          }\n\n          // Log the ismaster if available\n          if (self.s.logger.isInfo()) {\n            self.s.logger.info(\n              f('server %s connected with ismaster [%s]', self.name, JSON.stringify(self.ismaster))\n            );\n          }\n\n          // Emit connect\n          self.emit('connect', self);\n        }\n      );\n    } else if (\n      event === 'error' ||\n      event === 'parseError' ||\n      event === 'close' ||\n      event === 'timeout' ||\n      event === 'reconnect' ||\n      event === 'attemptReconnect' ||\n      'reconnectFailed'\n    ) {\n      // Remove server instance from accounting\n      if (\n        serverAccounting &&\n        ['close', 'timeout', 'error', 'parseError', 'reconnectFailed'].indexOf(event) !== -1\n      ) {\n        // Emit toplogy opening event if not in topology\n        if (!self.s.inTopology) {\n          self.emit('topologyOpening', { topologyId: self.id });\n        }\n\n        delete servers[self.id];\n      }\n\n      if (event === 'close') {\n        // Closing emits a server description changed event going to unknown.\n        sdam.emitServerDescriptionChanged(self, {\n          address: self.name,\n          arbiters: [],\n          hosts: [],\n          passives: [],\n          type: 'Unknown'\n        });\n      }\n\n      // Reconnect failed return error\n      if (event === 'reconnectFailed') {\n        self.emit('reconnectFailed', err);\n        // Emit error if any listeners\n        if (self.listeners('error').length > 0) {\n          self.emit('error', err);\n        }\n        // Terminate\n        return;\n      }\n\n      // On first connect fail\n      if (\n        self.s.pool.state === 'disconnected' &&\n        self.initialConnect &&\n        ['close', 'timeout', 'error', 'parseError'].indexOf(event) !== -1\n      ) {\n        self.initialConnect = false;\n        return self.emit(\n          'error',\n          new MongoNetworkError(\n            f('failed to connect to server [%s] on first connect [%s]', self.name, err)\n          )\n        );\n      }\n\n      // Reconnect event, emit the server\n      if (event === 'reconnect') {\n        // Reconnecting emits a server description changed event going from unknown to the\n        // current server type.\n        sdam.emitServerDescriptionChanged(self, {\n          address: self.name,\n          arbiters: [],\n          hosts: [],\n          passives: [],\n          type: sdam.getTopologyType(self)\n        });\n        return self.emit(event, self);\n      }\n\n      // Emit the event\n      self.emit(event, err);\n    }\n  };\n};\n\n/**\n * Initiate server connect\n * @method\n * @param {array} [options.auth=null] Array of auth options to apply on connect\n */\nServer.prototype.connect = function(options) {\n  var self = this;\n  options = options || {};\n\n  // Set the connections\n  if (serverAccounting) servers[this.id] = this;\n\n  // Do not allow connect to be called on anything that's not disconnected\n  if (self.s.pool && !self.s.pool.isDisconnected() && !self.s.pool.isDestroyed()) {\n    throw new MongoError(f('server instance in invalid state %s', self.s.pool.state));\n  }\n\n  // Create a pool\n  self.s.pool = new Pool(this, Object.assign(self.s.options, options, { bson: this.s.bson }));\n\n  // Set up listeners\n  self.s.pool.on('close', eventHandler(self, 'close'));\n  self.s.pool.on('error', eventHandler(self, 'error'));\n  self.s.pool.on('timeout', eventHandler(self, 'timeout'));\n  self.s.pool.on('parseError', eventHandler(self, 'parseError'));\n  self.s.pool.on('connect', eventHandler(self, 'connect'));\n  self.s.pool.on('reconnect', eventHandler(self, 'reconnect'));\n  self.s.pool.on('reconnectFailed', eventHandler(self, 'reconnectFailed'));\n\n  // Emit toplogy opening event if not in topology\n  if (!self.s.inTopology) {\n    this.emit('topologyOpening', { topologyId: self.id });\n  }\n\n  // Emit opening server event\n  self.emit('serverOpening', {\n    topologyId: self.s.topologyId !== -1 ? self.s.topologyId : self.id,\n    address: self.name\n  });\n\n  // Connect with optional auth settings\n  if (options.auth) {\n    self.s.pool.connect.apply(self.s.pool, options.auth);\n  } else {\n    self.s.pool.connect();\n  }\n};\n\n/**\n * Get the server description\n * @method\n * @return {object}\n */\nServer.prototype.getDescription = function() {\n  var ismaster = this.ismaster || {};\n  var description = {\n    type: sdam.getTopologyType(this),\n    address: this.name\n  };\n\n  // Add fields if available\n  if (ismaster.hosts) description.hosts = ismaster.hosts;\n  if (ismaster.arbiters) description.arbiters = ismaster.arbiters;\n  if (ismaster.passives) description.passives = ismaster.passives;\n  if (ismaster.setName) description.setName = ismaster.setName;\n  return description;\n};\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nServer.prototype.lastIsMaster = function() {\n  return this.ismaster;\n};\n\n/**\n * Unref all connections belong to this server\n * @method\n */\nServer.prototype.unref = function() {\n  this.s.pool.unref();\n};\n\n/**\n * Figure out if the server is connected\n * @method\n * @return {boolean}\n */\nServer.prototype.isConnected = function() {\n  if (!this.s.pool) return false;\n  return this.s.pool.isConnected();\n};\n\n/**\n * Figure out if the server instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nServer.prototype.isDestroyed = function() {\n  if (!this.s.pool) return false;\n  return this.s.pool.isDestroyed();\n};\n\nfunction basicWriteValidations(self) {\n  if (!self.s.pool) return new MongoError('server instance is not connected');\n  if (self.s.pool.isDestroyed()) return new MongoError('server instance pool was destroyed');\n}\n\nfunction basicReadValidations(self, options) {\n  basicWriteValidations(self, options);\n\n  if (options.readPreference && !(options.readPreference instanceof ReadPreference)) {\n    throw new Error('readPreference must be an instance of ReadPreference');\n  }\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.checkKeys=false] Specify if the bson parser should validate keys.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {Boolean} [options.fullResult=false] Return the full envelope instead of just the result document.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.command = function(ns, cmd, options, callback) {\n  var self = this;\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  var result = basicReadValidations(self, options);\n  if (result) return callback(result);\n\n  // Clone the options\n  options = Object.assign({}, options, { wireProtocolCommand: false });\n\n  // Debug log\n  if (self.s.logger.isDebug())\n    self.s.logger.debug(\n      f(\n        'executing command [%s] against %s',\n        JSON.stringify({\n          ns: ns,\n          cmd: cmd,\n          options: debugOptions(debugFields, options)\n        }),\n        self.name\n      )\n    );\n\n  // If we are not connected or have a disconnectHandler specified\n  if (disconnectHandler(self, 'command', ns, cmd, options, callback)) return;\n\n  // Check if we have collation support\n  if (this.ismaster && this.ismaster.maxWireVersion < 5 && cmd.collation) {\n    return callback(new MongoError(f('server %s does not support collation', this.name)));\n  }\n\n  // Are we executing against a specific topology\n  var topology = options.topology || {};\n  // Create the query object\n  var query = self.wireProtocolHandler.command(self.s.bson, ns, cmd, {}, topology, options);\n  // Set slave OK of the query\n  query.slaveOk = options.readPreference ? options.readPreference.slaveOk() : false;\n\n  // Write options\n  var writeOptions = {\n    raw: typeof options.raw === 'boolean' ? options.raw : false,\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\n    command: true,\n    monitoring: typeof options.monitoring === 'boolean' ? options.monitoring : false,\n    fullResult: typeof options.fullResult === 'boolean' ? options.fullResult : false,\n    requestId: query.requestId,\n    socketTimeout: typeof options.socketTimeout === 'number' ? options.socketTimeout : null,\n    session: options.session || null\n  };\n\n  // Write the operation to the pool\n  self.s.pool.write(query, writeOptions, callback);\n};\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.insert = function(ns, ops, options, callback) {\n  var self = this;\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  var result = basicWriteValidations(self, options);\n  if (result) return callback(result);\n\n  // If we are not connected or have a disconnectHandler specified\n  if (disconnectHandler(self, 'insert', ns, ops, options, callback)) return;\n\n  // Setup the docs as an array\n  ops = Array.isArray(ops) ? ops : [ops];\n\n  // Execute write\n  return self.wireProtocolHandler.insert(\n    self.s.pool,\n    self.ismaster,\n    ns,\n    self.s.bson,\n    ops,\n    options,\n    callback\n  );\n};\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.update = function(ns, ops, options, callback) {\n  var self = this;\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  var result = basicWriteValidations(self, options);\n  if (result) return callback(result);\n\n  // If we are not connected or have a disconnectHandler specified\n  if (disconnectHandler(self, 'update', ns, ops, options, callback)) return;\n\n  // Check if we have collation support\n  if (this.ismaster && this.ismaster.maxWireVersion < 5 && options.collation) {\n    return callback(new MongoError(f('server %s does not support collation', this.name)));\n  }\n\n  // Setup the docs as an array\n  ops = Array.isArray(ops) ? ops : [ops];\n  // Execute write\n  return self.wireProtocolHandler.update(\n    self.s.pool,\n    self.ismaster,\n    ns,\n    self.s.bson,\n    ops,\n    options,\n    callback\n  );\n};\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.remove = function(ns, ops, options, callback) {\n  var self = this;\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  var result = basicWriteValidations(self, options);\n  if (result) return callback(result);\n\n  // If we are not connected or have a disconnectHandler specified\n  if (disconnectHandler(self, 'remove', ns, ops, options, callback)) return;\n\n  // Check if we have collation support\n  if (this.ismaster && this.ismaster.maxWireVersion < 5 && options.collation) {\n    return callback(new MongoError(f('server %s does not support collation', this.name)));\n  }\n\n  // Setup the docs as an array\n  ops = Array.isArray(ops) ? ops : [ops];\n  // Execute write\n  return self.wireProtocolHandler.remove(\n    self.s.pool,\n    self.ismaster,\n    ns,\n    self.s.bson,\n    ops,\n    options,\n    callback\n  );\n};\n\n/**\n * Get a new cursor\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options] Options for the cursor\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {object} [options.topology] The internal topology of the created cursor\n * @returns {Cursor}\n */\nServer.prototype.cursor = function(ns, cmd, options) {\n  options = options || {};\n  const topology = options.topology || this;\n\n  // Set up final cursor type\n  var FinalCursor = options.cursorFactory || this.s.Cursor;\n\n  // Return the cursor\n  return new FinalCursor(this.s.bson, ns, cmd, options, topology, this.s.options);\n};\n\n/**\n * Logout from a database\n * @method\n * @param {string} db The db we are logging out from\n * @param {authResultCallback} callback A callback function\n */\nServer.prototype.logout = function(dbName, callback) {\n  this.s.pool.logout(dbName, callback);\n};\n\n/**\n * Authenticate using a specified mechanism\n * @method\n * @param {string} mechanism The Auth mechanism we are invoking\n * @param {string} db The db we are invoking the mechanism against\n * @param {...object} param Parameters for the specific mechanism\n * @param {authResultCallback} callback A callback function\n */\nServer.prototype.auth = function(mechanism, db) {\n  var self = this;\n\n  // If we have the default mechanism we pick mechanism based on the wire\n  // protocol max version. If it's >= 3 then scram-sha1 otherwise mongodb-cr\n  if (mechanism === 'default' && self.ismaster && self.ismaster.maxWireVersion >= 3) {\n    mechanism = 'scram-sha-1';\n  } else if (mechanism === 'default') {\n    mechanism = 'mongocr';\n  }\n\n  // Slice all the arguments off\n  var args = Array.prototype.slice.call(arguments, 0);\n  // Set the mechanism\n  args[0] = mechanism;\n  // Get the callback\n  var callback = args[args.length - 1];\n\n  // If we are not connected or have a disconnectHandler specified\n  if (disconnectHandler(self, 'auth', db, args, {}, callback)) {\n    return;\n  }\n\n  // Do not authenticate if we are an arbiter\n  if (this.lastIsMaster() && this.lastIsMaster().arbiterOnly) {\n    return callback(null, true);\n  }\n\n  // Apply the arguments to the pool\n  self.s.pool.auth.apply(self.s.pool, args);\n};\n\n/**\n * Compare two server instances\n * @method\n * @param {Server} server Server to compare equality against\n * @return {boolean}\n */\nServer.prototype.equals = function(server) {\n  if (typeof server === 'string') return this.name.toLowerCase() === server.toLowerCase();\n  if (server.name) return this.name.toLowerCase() === server.name.toLowerCase();\n  return false;\n};\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nServer.prototype.connections = function() {\n  return this.s.pool.allConnections();\n};\n\n/**\n * Get server\n * @method\n * @return {Server}\n */\nServer.prototype.getServer = function() {\n  return this;\n};\n\n/**\n * Get connection\n * @method\n * @return {Connection}\n */\nServer.prototype.getConnection = function() {\n  return this.s.pool.get();\n};\n\nvar listeners = ['close', 'error', 'timeout', 'parseError', 'connect'];\n\n/**\n * Destroy the server connection\n * @method\n * @param {boolean} [options.emitClose=false] Emit close event on destroy\n * @param {boolean} [options.emitDestroy=false] Emit destroy event on destroy\n * @param {boolean} [options.force=false] Force destroy the pool\n */\nServer.prototype.destroy = function(options) {\n  options = options || {};\n  var self = this;\n\n  // Set the connections\n  if (serverAccounting) delete servers[this.id];\n\n  // Destroy the monitoring process if any\n  if (this.monitoringProcessId) {\n    clearTimeout(this.monitoringProcessId);\n  }\n\n  // No pool, return\n  if (!self.s.pool) return;\n\n  // Emit close event\n  if (options.emitClose) {\n    self.emit('close', self);\n  }\n\n  // Emit destroy event\n  if (options.emitDestroy) {\n    self.emit('destroy', self);\n  }\n\n  // Remove all listeners\n  listeners.forEach(function(event) {\n    self.s.pool.removeAllListeners(event);\n  });\n\n  // Emit opening server event\n  if (self.listeners('serverClosed').length > 0)\n    self.emit('serverClosed', {\n      topologyId: self.s.topologyId !== -1 ? self.s.topologyId : self.id,\n      address: self.name\n    });\n\n  // Emit toplogy opening event if not in topology\n  if (self.listeners('topologyClosed').length > 0 && !self.s.inTopology) {\n    self.emit('topologyClosed', { topologyId: self.id });\n  }\n\n  if (self.s.logger.isDebug()) {\n    self.s.logger.debug(f('destroy called on server %s', self.name));\n  }\n\n  // Destroy the pool\n  this.s.pool.destroy(options.force);\n};\n\n/**\n * A server connect event, used to verify that the connection is up and running\n *\n * @event Server#connect\n * @type {Server}\n */\n\n/**\n * A server reconnect event, used to verify that the server topology has reconnected\n *\n * @event Server#reconnect\n * @type {Server}\n */\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event Server#serverOpening\n * @type {object}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Server#serverClosed\n * @type {object}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Server#serverDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Server#topologyOpening\n * @type {object}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Server#topologyClosed\n * @type {object}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Server#topologyDescriptionChanged\n * @type {object}\n */\n\n/**\n * Server reconnect failed\n *\n * @event Server#reconnectFailed\n * @type {Error}\n */\n\n/**\n * Server connection pool closed\n *\n * @event Server#close\n * @type {object}\n */\n\n/**\n * Server connection pool caused an error\n *\n * @event Server#error\n * @type {Error}\n */\n\n/**\n * Server destroyed was called\n *\n * @event Server#destroy\n * @type {Server}\n */\n\nmodule.exports = Server;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/topologies/server.js\n// module id = 92\n// module chunks = 0","'use strict';\n\nvar common = require('./common'),\n  utils = require('../utils'),\n  toError = require('../utils').toError,\n  handleCallback = require('../utils').handleCallback,\n  shallowClone = utils.shallowClone,\n  BulkWriteResult = common.BulkWriteResult,\n  ObjectID = require('mongodb-core').BSON.ObjectID,\n  Define = require('../metadata'),\n  BSON = require('mongodb-core').BSON,\n  Batch = common.Batch,\n  mergeBatchResults = common.mergeBatchResults,\n  executeOperation = require('../utils').executeOperation,\n  BulkWriteError = require('./common').BulkWriteError;\n\nvar bson = new BSON([\n  BSON.Binary,\n  BSON.Code,\n  BSON.DBRef,\n  BSON.Decimal128,\n  BSON.Double,\n  BSON.Int32,\n  BSON.Long,\n  BSON.Map,\n  BSON.MaxKey,\n  BSON.MinKey,\n  BSON.ObjectId,\n  BSON.BSONRegExp,\n  BSON.Symbol,\n  BSON.Timestamp\n]);\n\n/**\n * Create a FindOperatorsOrdered instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @return {FindOperatorsOrdered} a FindOperatorsOrdered instance.\n */\nvar FindOperatorsOrdered = function(self) {\n  this.s = self.s;\n};\n\n/**\n * Add a single update document to the bulk operation\n *\n * @method\n * @param {object} doc update operations\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.update = function(updateDocument) {\n  // Perform upsert\n  var upsert = typeof this.s.currentOp.upsert === 'boolean' ? this.s.currentOp.upsert : false;\n\n  // Establish the update command\n  var document = {\n    q: this.s.currentOp.selector,\n    u: updateDocument,\n    multi: true,\n    upsert: upsert\n  };\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the update document to the list\n  return addToOperationsList(this, common.UPDATE, document);\n};\n\n/**\n * Add a single update one document to the bulk operation\n *\n * @method\n * @param {object} doc update operations\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.updateOne = function(updateDocument) {\n  // Perform upsert\n  var upsert = typeof this.s.currentOp.upsert === 'boolean' ? this.s.currentOp.upsert : false;\n\n  // Establish the update command\n  var document = {\n    q: this.s.currentOp.selector,\n    u: updateDocument,\n    multi: false,\n    upsert: upsert\n  };\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the update document to the list\n  return addToOperationsList(this, common.UPDATE, document);\n};\n\n/**\n * Add a replace one operation to the bulk operation\n *\n * @method\n * @param {object} doc the new document to replace the existing one with\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.replaceOne = function(updateDocument) {\n  this.updateOne(updateDocument);\n};\n\n/**\n * Upsert modifier for update bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {FindOperatorsOrdered}\n */\nFindOperatorsOrdered.prototype.upsert = function() {\n  this.s.currentOp.upsert = true;\n  return this;\n};\n\n/**\n * Add a remove one operation to the bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.deleteOne = function() {\n  // Establish the update command\n  var document = {\n    q: this.s.currentOp.selector,\n    limit: 1\n  };\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the remove document to the list\n  return addToOperationsList(this, common.REMOVE, document);\n};\n\n// Backward compatibility\nFindOperatorsOrdered.prototype.removeOne = FindOperatorsOrdered.prototype.deleteOne;\n\n/**\n * Add a remove operation to the bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.delete = function() {\n  // Establish the update command\n  var document = {\n    q: this.s.currentOp.selector,\n    limit: 0\n  };\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the remove document to the list\n  return addToOperationsList(this, common.REMOVE, document);\n};\n\n// Backward compatibility\nFindOperatorsOrdered.prototype.remove = FindOperatorsOrdered.prototype.delete;\n\n// Add to internal list of documents\nvar addToOperationsList = function(_self, docType, document) {\n  // Get the bsonSize\n  var bsonSize = bson.calculateObjectSize(document, {\n    checkKeys: false\n  });\n\n  // Throw error if the doc is bigger than the max BSON size\n  if (bsonSize >= _self.s.maxBatchSizeBytes) {\n    throw toError('document is larger than the maximum size ' + _self.s.maxBatchSizeBytes);\n  }\n\n  // Create a new batch object if we don't have a current one\n  if (_self.s.currentBatch == null) _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);\n\n  // Check if we need to create a new batch\n  if (\n    _self.s.currentBatchSize + 1 >= _self.s.maxWriteBatchSize ||\n    _self.s.currentBatchSizeBytes + _self.s.currentBatchSizeBytes >= _self.s.maxBatchSizeBytes ||\n    _self.s.currentBatch.batchType !== docType\n  ) {\n    // Save the batch to the execution stack\n    _self.s.batches.push(_self.s.currentBatch);\n\n    // Create a new batch\n    _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);\n\n    // Reset the current size trackers\n    _self.s.currentBatchSize = 0;\n    _self.s.currentBatchSizeBytes = 0;\n  } else {\n    // Update current batch size\n    _self.s.currentBatchSize = _self.s.currentBatchSize + 1;\n    _self.s.currentBatchSizeBytes = _self.s.currentBatchSizeBytes + bsonSize;\n  }\n\n  if (docType === common.INSERT) {\n    _self.s.bulkResult.insertedIds.push({ index: _self.s.currentIndex, _id: document._id });\n  }\n\n  // We have an array of documents\n  if (Array.isArray(document)) {\n    throw toError('operation passed in cannot be an Array');\n  } else {\n    _self.s.currentBatch.originalIndexes.push(_self.s.currentIndex);\n    _self.s.currentBatch.operations.push(document);\n    _self.s.currentBatchSizeBytes = _self.s.currentBatchSizeBytes + bsonSize;\n    _self.s.currentIndex = _self.s.currentIndex + 1;\n  }\n\n  // Return self\n  return _self;\n};\n\n/**\n * Create a new OrderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @property {number} length Get the number of operations in the bulk.\n * @return {OrderedBulkOperation} a OrderedBulkOperation instance.\n */\nfunction OrderedBulkOperation(topology, collection, options) {\n  options = options == null ? {} : options;\n  // TODO Bring from driver information in isMaster\n  var executed = false;\n\n  // Current item\n  var currentOp = null;\n\n  // Handle to the bson serializer, used to calculate running sizes\n  var bson = topology.bson;\n\n  // Namespace for the operation\n  var namespace = collection.collectionName;\n\n  // Set max byte size\n  var maxBatchSizeBytes =\n    topology.isMasterDoc && topology.isMasterDoc.maxBsonObjectSize\n      ? topology.isMasterDoc.maxBsonObjectSize\n      : 1024 * 1025 * 16;\n  var maxWriteBatchSize =\n    topology.isMasterDoc && topology.isMasterDoc.maxWriteBatchSize\n      ? topology.isMasterDoc.maxWriteBatchSize\n      : 1000;\n\n  // Get the write concern\n  var writeConcern = common.writeConcern(shallowClone(options), collection, options);\n\n  // Get the promiseLibrary\n  var promiseLibrary = options.promiseLibrary || Promise;\n\n  // Final results\n  var bulkResult = {\n    ok: 1,\n    writeErrors: [],\n    writeConcernErrors: [],\n    insertedIds: [],\n    nInserted: 0,\n    nUpserted: 0,\n    nMatched: 0,\n    nModified: 0,\n    nRemoved: 0,\n    upserted: []\n  };\n\n  // Internal state\n  this.s = {\n    // Final result\n    bulkResult: bulkResult,\n    // Current batch state\n    currentBatch: null,\n    currentIndex: 0,\n    currentBatchSize: 0,\n    currentBatchSizeBytes: 0,\n    batches: [],\n    // Write concern\n    writeConcern: writeConcern,\n    // Max batch size options\n    maxBatchSizeBytes: maxBatchSizeBytes,\n    maxWriteBatchSize: maxWriteBatchSize,\n    // Namespace\n    namespace: namespace,\n    // BSON\n    bson: bson,\n    // Topology\n    topology: topology,\n    // Options\n    options: options,\n    // Current operation\n    currentOp: currentOp,\n    // Executed\n    executed: executed,\n    // Collection\n    collection: collection,\n    // Promise Library\n    promiseLibrary: promiseLibrary,\n    // Fundamental error\n    err: null,\n    // Bypass validation\n    bypassDocumentValidation:\n      typeof options.bypassDocumentValidation === 'boolean'\n        ? options.bypassDocumentValidation\n        : false,\n    // check keys\n    checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : true\n  };\n}\n\nvar define = (OrderedBulkOperation.define = new Define(\n  'OrderedBulkOperation',\n  OrderedBulkOperation,\n  false\n));\n\nOrderedBulkOperation.prototype.raw = function(op) {\n  var key = Object.keys(op)[0];\n\n  // Set up the force server object id\n  var forceServerObjectId =\n    typeof this.s.options.forceServerObjectId === 'boolean'\n      ? this.s.options.forceServerObjectId\n      : this.s.collection.s.db.options.forceServerObjectId;\n\n  // Update operations\n  if (\n    (op.updateOne && op.updateOne.q) ||\n    (op.updateMany && op.updateMany.q) ||\n    (op.replaceOne && op.replaceOne.q)\n  ) {\n    op[key].multi = op.updateOne || op.replaceOne ? false : true;\n    return addToOperationsList(this, common.UPDATE, op[key]);\n  }\n\n  // Crud spec update format\n  if (op.updateOne || op.updateMany || op.replaceOne) {\n    var multi = op.updateOne || op.replaceOne ? false : true;\n    var operation = { q: op[key].filter, u: op[key].update || op[key].replacement, multi: multi };\n    operation.upsert = op[key].upsert ? true : false;\n    if (op.collation) operation.collation = op.collation;\n    if (op[key].arrayFilters) operation.arrayFilters = op[key].arrayFilters;\n    return addToOperationsList(this, common.UPDATE, operation);\n  }\n\n  // Remove operations\n  if (\n    op.removeOne ||\n    op.removeMany ||\n    (op.deleteOne && op.deleteOne.q) ||\n    (op.deleteMany && op.deleteMany.q)\n  ) {\n    op[key].limit = op.removeOne ? 1 : 0;\n    return addToOperationsList(this, common.REMOVE, op[key]);\n  }\n\n  // Crud spec delete operations, less efficient\n  if (op.deleteOne || op.deleteMany) {\n    var limit = op.deleteOne ? 1 : 0;\n    operation = { q: op[key].filter, limit: limit };\n    if (op.collation) operation.collation = op.collation;\n    return addToOperationsList(this, common.REMOVE, operation);\n  }\n\n  // Insert operations\n  if (op.insertOne && op.insertOne.document == null) {\n    if (forceServerObjectId !== true && op.insertOne._id == null) op.insertOne._id = new ObjectID();\n    return addToOperationsList(this, common.INSERT, op.insertOne);\n  } else if (op.insertOne && op.insertOne.document) {\n    if (forceServerObjectId !== true && op.insertOne.document._id == null)\n      op.insertOne.document._id = new ObjectID();\n    return addToOperationsList(this, common.INSERT, op.insertOne.document);\n  }\n\n  if (op.insertMany) {\n    for (var i = 0; i < op.insertMany.length; i++) {\n      if (forceServerObjectId !== true && op.insertMany[i]._id == null)\n        op.insertMany[i]._id = new ObjectID();\n      addToOperationsList(this, common.INSERT, op.insertMany[i]);\n    }\n\n    return;\n  }\n\n  // No valid type of operation\n  throw toError(\n    'bulkWrite only supports insertOne, insertMany, updateOne, updateMany, removeOne, removeMany, deleteOne, deleteMany'\n  );\n};\n\n/**\n * Add a single insert document to the bulk operation\n *\n * @param {object} doc the document to insert\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nOrderedBulkOperation.prototype.insert = function(document) {\n  if (this.s.collection.s.db.options.forceServerObjectId !== true && document._id == null)\n    document._id = new ObjectID();\n  return addToOperationsList(this, common.INSERT, document);\n};\n\n/**\n * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne\n *\n * @method\n * @param {object} selector The selector for the bulk operation.\n * @throws {MongoError}\n * @return {FindOperatorsOrdered}\n */\nOrderedBulkOperation.prototype.find = function(selector) {\n  if (!selector) {\n    throw toError('Bulk find operation must specify a selector');\n  }\n\n  // Save a current selector\n  this.s.currentOp = {\n    selector: selector\n  };\n\n  return new FindOperatorsOrdered(this);\n};\n\nObject.defineProperty(OrderedBulkOperation.prototype, 'length', {\n  enumerable: true,\n  get: function() {\n    return this.s.currentIndex;\n  }\n});\n\n//\n// Execute next write command in a chain\nvar executeCommands = function(self, options, callback) {\n  if (self.s.batches.length === 0) {\n    return handleCallback(callback, null, new BulkWriteResult(self.s.bulkResult));\n  }\n\n  // Ordered execution of the command\n  var batch = self.s.batches.shift();\n\n  var resultHandler = function(err, result) {\n    // Error is a driver related error not a bulk op error, terminate\n    if ((err && err.driver) || (err && err.message)) {\n      return handleCallback(callback, err);\n    }\n\n    // If we have and error\n    if (err) err.ok = 0;\n    // Merge the results together\n    var mergeResult = mergeBatchResults(true, batch, self.s.bulkResult, err, result);\n    const writeResult = new BulkWriteResult(self.s.bulkResult);\n    if (mergeResult != null) {\n      return handleCallback(callback, null, writeResult);\n    }\n\n    // If we are ordered and have errors and they are\n    // not all replication errors terminate the operation\n    if (self.s.bulkResult.writeErrors.length > 0) {\n      if (self.s.bulkResult.writeErrors.length === 1) {\n        return handleCallback(\n          callback,\n          new BulkWriteError(toError(self.s.bulkResult.writeErrors[0]), writeResult),\n          null\n        );\n      }\n\n      return handleCallback(\n        callback,\n        new BulkWriteError(\n          toError({\n            message: 'write operation failed',\n            code: self.s.bulkResult.writeErrors[0].code,\n            writeErrors: self.s.bulkResult.writeErrors\n          }),\n          writeResult\n        ),\n        null\n      );\n    } else if (writeResult.getWriteConcernError()) {\n      return handleCallback(\n        callback,\n        new BulkWriteError(toError(writeResult.getWriteConcernError()), writeResult),\n        null\n      );\n    }\n\n    // Execute the next command in line\n    executeCommands(self, options, callback);\n  };\n\n  var finalOptions = Object.assign({ ordered: true }, options);\n  if (self.s.writeConcern != null) {\n    finalOptions.writeConcern = self.s.writeConcern;\n  }\n\n  // Set an operationIf if provided\n  if (self.operationId) {\n    resultHandler.operationId = self.operationId;\n  }\n\n  // Serialize functions\n  if (self.s.options.serializeFunctions) {\n    finalOptions.serializeFunctions = true;\n  }\n\n  // Ignore undefined\n  if (self.s.options.ignoreUndefined) {\n    finalOptions.ignoreUndefined = true;\n  }\n\n  // Is the bypassDocumentValidation options specific\n  if (self.s.bypassDocumentValidation === true) {\n    finalOptions.bypassDocumentValidation = true;\n  }\n\n  // Is the checkKeys option disabled\n  if (self.s.checkKeys === false) {\n    finalOptions.checkKeys = false;\n  }\n\n  try {\n    if (batch.batchType === common.INSERT) {\n      self.s.topology.insert(\n        self.s.collection.namespace,\n        batch.operations,\n        finalOptions,\n        resultHandler\n      );\n    } else if (batch.batchType === common.UPDATE) {\n      self.s.topology.update(\n        self.s.collection.namespace,\n        batch.operations,\n        finalOptions,\n        resultHandler\n      );\n    } else if (batch.batchType === common.REMOVE) {\n      self.s.topology.remove(\n        self.s.collection.namespace,\n        batch.operations,\n        finalOptions,\n        resultHandler\n      );\n    }\n  } catch (err) {\n    // Force top level error\n    err.ok = 0;\n    // Merge top level error and return\n    handleCallback(callback, null, mergeBatchResults(false, batch, self.s.bulkResult, err, null));\n  }\n};\n\n/**\n * The callback format for results\n * @callback OrderedBulkOperation~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {BulkWriteResult} result The bulk write result.\n */\n\n/**\n * Execute the ordered bulk operation\n *\n * @method\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.fsync=false] Specify a file sync write concern.\n * @param {OrderedBulkOperation~resultCallback} [callback] The result callback\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\nOrderedBulkOperation.prototype.execute = function(_writeConcern, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  if (this.s.executed) {\n    var executedError = toError('batch cannot be re-executed');\n    return typeof callback === 'function'\n      ? callback(executedError, null)\n      : this.s.promiseLibrary.reject(executedError);\n  }\n\n  if (typeof _writeConcern === 'function') {\n    callback = _writeConcern;\n  } else if (_writeConcern && typeof _writeConcern === 'object') {\n    this.s.writeConcern = _writeConcern;\n  }\n\n  // If we have current batch\n  if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n\n  // If we have no operations in the bulk raise an error\n  if (this.s.batches.length === 0) {\n    var emptyBatchError = toError('Invalid Operation, no operations specified');\n    return typeof callback === 'function'\n      ? callback(emptyBatchError, null)\n      : this.s.promiseLibrary.reject(emptyBatchError);\n  }\n\n  return executeOperation(this.s.topology, executeCommands, [this, options, callback]);\n};\n\ndefine.classMethod('execute', { callback: true, promise: false });\n\n/**\n * Returns an unordered batch object\n * @ignore\n */\nvar initializeOrderedBulkOp = function(topology, collection, options) {\n  return new OrderedBulkOperation(topology, collection, options);\n};\n\ninitializeOrderedBulkOp.OrderedBulkOperation = OrderedBulkOperation;\nmodule.exports = initializeOrderedBulkOp;\nmodule.exports.Bulk = OrderedBulkOperation;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/bulk/ordered.js\n// module id = 93\n// module chunks = 0","'use strict';\n\nvar common = require('./common'),\n  utils = require('../utils'),\n  toError = require('../utils').toError,\n  handleCallback = require('../utils').handleCallback,\n  shallowClone = utils.shallowClone,\n  BulkWriteResult = common.BulkWriteResult,\n  ObjectID = require('mongodb-core').BSON.ObjectID,\n  BSON = require('mongodb-core').BSON,\n  Define = require('../metadata'),\n  Batch = common.Batch,\n  mergeBatchResults = common.mergeBatchResults,\n  executeOperation = require('../utils').executeOperation,\n  BulkWriteError = require('./common').BulkWriteError;\n\nvar bson = new BSON([\n  BSON.Binary,\n  BSON.Code,\n  BSON.DBRef,\n  BSON.Decimal128,\n  BSON.Double,\n  BSON.Int32,\n  BSON.Long,\n  BSON.Map,\n  BSON.MaxKey,\n  BSON.MinKey,\n  BSON.ObjectId,\n  BSON.BSONRegExp,\n  BSON.Symbol,\n  BSON.Timestamp\n]);\n\n/**\n * Create a FindOperatorsUnordered instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @property {number} length Get the number of operations in the bulk.\n * @return {FindOperatorsUnordered} a FindOperatorsUnordered instance.\n */\nvar FindOperatorsUnordered = function(self) {\n  this.s = self.s;\n};\n\n/**\n * Add a single update document to the bulk operation\n *\n * @method\n * @param {object} updateDocument update operations\n * @throws {MongoError}\n * @return {FindOperatorsUnordered}\n */\nFindOperatorsUnordered.prototype.update = function(updateDocument) {\n  // Perform upsert\n  var upsert = typeof this.s.currentOp.upsert === 'boolean' ? this.s.currentOp.upsert : false;\n\n  // Establish the update command\n  var document = {\n    q: this.s.currentOp.selector,\n    u: updateDocument,\n    multi: true,\n    upsert: upsert\n  };\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the update document to the list\n  return addToOperationsList(this, common.UPDATE, document);\n};\n\n/**\n * Add a single update one document to the bulk operation\n *\n * @method\n * @param {object} updateDocument update operations\n * @throws {MongoError}\n * @return {FindOperatorsUnordered}\n */\nFindOperatorsUnordered.prototype.updateOne = function(updateDocument) {\n  // Perform upsert\n  var upsert = typeof this.s.currentOp.upsert === 'boolean' ? this.s.currentOp.upsert : false;\n\n  // Establish the update command\n  var document = {\n    q: this.s.currentOp.selector,\n    u: updateDocument,\n    multi: false,\n    upsert: upsert\n  };\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the update document to the list\n  return addToOperationsList(this, common.UPDATE, document);\n};\n\n/**\n * Add a replace one operation to the bulk operation\n *\n * @method\n * @param {object} updateDocument the new document to replace the existing one with\n * @throws {MongoError}\n * @return {FindOperatorsUnordered}\n */\nFindOperatorsUnordered.prototype.replaceOne = function(updateDocument) {\n  this.updateOne(updateDocument);\n};\n\n/**\n * Upsert modifier for update bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {FindOperatorsUnordered}\n */\nFindOperatorsUnordered.prototype.upsert = function() {\n  this.s.currentOp.upsert = true;\n  return this;\n};\n\n/**\n * Add a remove one operation to the bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {FindOperatorsUnordered}\n */\nFindOperatorsUnordered.prototype.removeOne = function() {\n  // Establish the update command\n  var document = {\n    q: this.s.currentOp.selector,\n    limit: 1\n  };\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the remove document to the list\n  return addToOperationsList(this, common.REMOVE, document);\n};\n\n/**\n * Add a remove operation to the bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {FindOperatorsUnordered}\n */\nFindOperatorsUnordered.prototype.remove = function() {\n  // Establish the update command\n  var document = {\n    q: this.s.currentOp.selector,\n    limit: 0\n  };\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the remove document to the list\n  return addToOperationsList(this, common.REMOVE, document);\n};\n\n//\n// Add to the operations list\n//\nvar addToOperationsList = function(_self, docType, document) {\n  // Get the bsonSize\n  var bsonSize = bson.calculateObjectSize(document, {\n    checkKeys: false\n  });\n  // Throw error if the doc is bigger than the max BSON size\n  if (bsonSize >= _self.s.maxBatchSizeBytes)\n    throw toError('document is larger than the maximum size ' + _self.s.maxBatchSizeBytes);\n  // Holds the current batch\n  _self.s.currentBatch = null;\n  // Get the right type of batch\n  if (docType === common.INSERT) {\n    _self.s.currentBatch = _self.s.currentInsertBatch;\n  } else if (docType === common.UPDATE) {\n    _self.s.currentBatch = _self.s.currentUpdateBatch;\n  } else if (docType === common.REMOVE) {\n    _self.s.currentBatch = _self.s.currentRemoveBatch;\n  }\n\n  // Create a new batch object if we don't have a current one\n  if (_self.s.currentBatch == null) _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);\n\n  // Check if we need to create a new batch\n  if (\n    _self.s.currentBatch.size + 1 >= _self.s.maxWriteBatchSize ||\n    _self.s.currentBatch.sizeBytes + bsonSize >= _self.s.maxBatchSizeBytes ||\n    _self.s.currentBatch.batchType !== docType\n  ) {\n    // Save the batch to the execution stack\n    _self.s.batches.push(_self.s.currentBatch);\n\n    // Create a new batch\n    _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);\n  }\n\n  // We have an array of documents\n  if (Array.isArray(document)) {\n    throw toError('operation passed in cannot be an Array');\n  } else {\n    _self.s.currentBatch.operations.push(document);\n    _self.s.currentBatch.originalIndexes.push(_self.s.currentIndex);\n    _self.s.currentIndex = _self.s.currentIndex + 1;\n  }\n\n  // Save back the current Batch to the right type\n  if (docType === common.INSERT) {\n    _self.s.currentInsertBatch = _self.s.currentBatch;\n    _self.s.bulkResult.insertedIds.push({\n      index: _self.s.bulkResult.insertedIds.length,\n      _id: document._id\n    });\n  } else if (docType === common.UPDATE) {\n    _self.s.currentUpdateBatch = _self.s.currentBatch;\n  } else if (docType === common.REMOVE) {\n    _self.s.currentRemoveBatch = _self.s.currentBatch;\n  }\n\n  // Update current batch size\n  _self.s.currentBatch.size = _self.s.currentBatch.size + 1;\n  _self.s.currentBatch.sizeBytes = _self.s.currentBatch.sizeBytes + bsonSize;\n\n  // Return self\n  return _self;\n};\n\n/**\n * Create a new UnorderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @property {number} length Get the number of operations in the bulk.\n * @return {UnorderedBulkOperation} a UnorderedBulkOperation instance.\n */\nvar UnorderedBulkOperation = function(topology, collection, options) {\n  options = options == null ? {} : options;\n\n  // Get the namesspace for the write operations\n  var namespace = collection.collectionName;\n  // Used to mark operation as executed\n  var executed = false;\n\n  // Current item\n  // var currentBatch = null;\n  var currentOp = null;\n\n  // Handle to the bson serializer, used to calculate running sizes\n  var bson = topology.bson;\n\n  // Set max byte size\n  var maxBatchSizeBytes =\n    topology.isMasterDoc && topology.isMasterDoc.maxBsonObjectSize\n      ? topology.isMasterDoc.maxBsonObjectSize\n      : 1024 * 1025 * 16;\n  var maxWriteBatchSize =\n    topology.isMasterDoc && topology.isMasterDoc.maxWriteBatchSize\n      ? topology.isMasterDoc.maxWriteBatchSize\n      : 1000;\n\n  // Get the write concern\n  var writeConcern = common.writeConcern(shallowClone(options), collection, options);\n\n  // Get the promiseLibrary\n  var promiseLibrary = options.promiseLibrary || Promise;\n\n  // Final results\n  var bulkResult = {\n    ok: 1,\n    writeErrors: [],\n    writeConcernErrors: [],\n    insertedIds: [],\n    nInserted: 0,\n    nUpserted: 0,\n    nMatched: 0,\n    nModified: 0,\n    nRemoved: 0,\n    upserted: []\n  };\n\n  // Internal state\n  this.s = {\n    // Final result\n    bulkResult: bulkResult,\n    // Current batch state\n    currentInsertBatch: null,\n    currentUpdateBatch: null,\n    currentRemoveBatch: null,\n    currentBatch: null,\n    currentIndex: 0,\n    batches: [],\n    // Write concern\n    writeConcern: writeConcern,\n    // Max batch size options\n    maxBatchSizeBytes: maxBatchSizeBytes,\n    maxWriteBatchSize: maxWriteBatchSize,\n    // Namespace\n    namespace: namespace,\n    // BSON\n    bson: bson,\n    // Topology\n    topology: topology,\n    // Options\n    options: options,\n    // Current operation\n    currentOp: currentOp,\n    // Executed\n    executed: executed,\n    // Collection\n    collection: collection,\n    // Promise Library\n    promiseLibrary: promiseLibrary,\n    // Bypass validation\n    bypassDocumentValidation:\n      typeof options.bypassDocumentValidation === 'boolean'\n        ? options.bypassDocumentValidation\n        : false,\n    // check keys\n    checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : true\n  };\n};\n\nvar define = (UnorderedBulkOperation.define = new Define(\n  'UnorderedBulkOperation',\n  UnorderedBulkOperation,\n  false\n));\n\n/**\n * Add a single insert document to the bulk operation\n *\n * @param {object} document the document to insert\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nUnorderedBulkOperation.prototype.insert = function(document) {\n  if (this.s.collection.s.db.options.forceServerObjectId !== true && document._id == null)\n    document._id = new ObjectID();\n  return addToOperationsList(this, common.INSERT, document);\n};\n\n/**\n * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne\n *\n * @method\n * @param {object} selector The selector for the bulk operation.\n * @throws {MongoError}\n * @return {FindOperatorsUnordered}\n */\nUnorderedBulkOperation.prototype.find = function(selector) {\n  if (!selector) {\n    throw toError('Bulk find operation must specify a selector');\n  }\n\n  // Save a current selector\n  this.s.currentOp = {\n    selector: selector\n  };\n\n  return new FindOperatorsUnordered(this);\n};\n\nObject.defineProperty(UnorderedBulkOperation.prototype, 'length', {\n  enumerable: true,\n  get: function() {\n    return this.s.currentIndex;\n  }\n});\n\nUnorderedBulkOperation.prototype.raw = function(op) {\n  var key = Object.keys(op)[0];\n\n  // Set up the force server object id\n  var forceServerObjectId =\n    typeof this.s.options.forceServerObjectId === 'boolean'\n      ? this.s.options.forceServerObjectId\n      : this.s.collection.s.db.options.forceServerObjectId;\n\n  // Update operations\n  if (\n    (op.updateOne && op.updateOne.q) ||\n    (op.updateMany && op.updateMany.q) ||\n    (op.replaceOne && op.replaceOne.q)\n  ) {\n    op[key].multi = op.updateOne || op.replaceOne ? false : true;\n    return addToOperationsList(this, common.UPDATE, op[key]);\n  }\n\n  // Crud spec update format\n  if (op.updateOne || op.updateMany || op.replaceOne) {\n    var multi = op.updateOne || op.replaceOne ? false : true;\n    var operation = { q: op[key].filter, u: op[key].update || op[key].replacement, multi: multi };\n    if (op[key].upsert) operation.upsert = true;\n    if (op[key].arrayFilters) operation.arrayFilters = op[key].arrayFilters;\n    return addToOperationsList(this, common.UPDATE, operation);\n  }\n\n  // Remove operations\n  if (\n    op.removeOne ||\n    op.removeMany ||\n    (op.deleteOne && op.deleteOne.q) ||\n    (op.deleteMany && op.deleteMany.q)\n  ) {\n    op[key].limit = op.removeOne ? 1 : 0;\n    return addToOperationsList(this, common.REMOVE, op[key]);\n  }\n\n  // Crud spec delete operations, less efficient\n  if (op.deleteOne || op.deleteMany) {\n    var limit = op.deleteOne ? 1 : 0;\n    operation = { q: op[key].filter, limit: limit };\n    return addToOperationsList(this, common.REMOVE, operation);\n  }\n\n  // Insert operations\n  if (op.insertOne && op.insertOne.document == null) {\n    if (forceServerObjectId !== true && op.insertOne._id == null) op.insertOne._id = new ObjectID();\n    return addToOperationsList(this, common.INSERT, op.insertOne);\n  } else if (op.insertOne && op.insertOne.document) {\n    if (forceServerObjectId !== true && op.insertOne.document._id == null)\n      op.insertOne.document._id = new ObjectID();\n    return addToOperationsList(this, common.INSERT, op.insertOne.document);\n  }\n\n  if (op.insertMany) {\n    for (var i = 0; i < op.insertMany.length; i++) {\n      if (forceServerObjectId !== true && op.insertMany[i]._id == null)\n        op.insertMany[i]._id = new ObjectID();\n      addToOperationsList(this, common.INSERT, op.insertMany[i]);\n    }\n\n    return;\n  }\n\n  // No valid type of operation\n  throw toError(\n    'bulkWrite only supports insertOne, insertMany, updateOne, updateMany, removeOne, removeMany, deleteOne, deleteMany'\n  );\n};\n\n//\n// Execute the command\nvar executeBatch = function(self, batch, options, callback) {\n  var finalOptions = Object.assign({ ordered: false }, options);\n  if (self.s.writeConcern != null) {\n    finalOptions.writeConcern = self.s.writeConcern;\n  }\n\n  var resultHandler = function(err, result) {\n    // Error is a driver related error not a bulk op error, terminate\n    if ((err && err.driver) || (err && err.message)) {\n      return handleCallback(callback, err);\n    }\n\n    // If we have and error\n    if (err) err.ok = 0;\n    handleCallback(callback, null, mergeBatchResults(false, batch, self.s.bulkResult, err, result));\n  };\n\n  // Set an operationIf if provided\n  if (self.operationId) {\n    resultHandler.operationId = self.operationId;\n  }\n\n  // Serialize functions\n  if (self.s.options.serializeFunctions) {\n    finalOptions.serializeFunctions = true;\n  }\n\n  // Ignore undefined\n  if (self.s.options.ignoreUndefined) {\n    finalOptions.ignoreUndefined = true;\n  }\n\n  // Is the bypassDocumentValidation options specific\n  if (self.s.bypassDocumentValidation === true) {\n    finalOptions.bypassDocumentValidation = true;\n  }\n\n  // Is the checkKeys option disabled\n  if (self.s.checkKeys === false) {\n    finalOptions.checkKeys = false;\n  }\n\n  try {\n    if (batch.batchType === common.INSERT) {\n      self.s.topology.insert(\n        self.s.collection.namespace,\n        batch.operations,\n        finalOptions,\n        resultHandler\n      );\n    } else if (batch.batchType === common.UPDATE) {\n      self.s.topology.update(\n        self.s.collection.namespace,\n        batch.operations,\n        finalOptions,\n        resultHandler\n      );\n    } else if (batch.batchType === common.REMOVE) {\n      self.s.topology.remove(\n        self.s.collection.namespace,\n        batch.operations,\n        finalOptions,\n        resultHandler\n      );\n    }\n  } catch (err) {\n    // Force top level error\n    err.ok = 0;\n    // Merge top level error and return\n    handleCallback(callback, null, mergeBatchResults(false, batch, self.s.bulkResult, err, null));\n  }\n};\n\n//\n// Execute all the commands\nvar executeBatches = function(self, options, callback) {\n  var numberOfCommandsToExecute = self.s.batches.length;\n  // Execute over all the batches\n  for (var i = 0; i < self.s.batches.length; i++) {\n    executeBatch(self, self.s.batches[i], options, function(err) {\n      // Count down the number of commands left to execute\n      numberOfCommandsToExecute = numberOfCommandsToExecute - 1;\n\n      // Execute\n      if (numberOfCommandsToExecute === 0) {\n        // Driver level error\n        if (err) return handleCallback(callback, err);\n\n        const writeResult = new BulkWriteResult(self.s.bulkResult);\n        if (self.s.bulkResult.writeErrors.length > 0) {\n          if (self.s.bulkResult.writeErrors.length === 1) {\n            return handleCallback(\n              callback,\n              new BulkWriteError(toError(self.s.bulkResult.writeErrors[0]), writeResult),\n              null\n            );\n          }\n\n          return handleCallback(\n            callback,\n            new BulkWriteError(\n              toError({\n                message: 'write operation failed',\n                code: self.s.bulkResult.writeErrors[0].code,\n                writeErrors: self.s.bulkResult.writeErrors\n              }),\n              writeResult\n            ),\n            null\n          );\n        } else if (writeResult.getWriteConcernError()) {\n          return handleCallback(\n            callback,\n            new BulkWriteError(toError(writeResult.getWriteConcernError()), writeResult),\n            null\n          );\n        }\n\n        return handleCallback(callback, null, writeResult);\n      }\n    });\n  }\n};\n\n/**\n * The callback format for results\n * @callback UnorderedBulkOperation~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {BulkWriteResult} result The bulk write result.\n */\n\n/**\n * Execute the ordered bulk operation\n *\n * @method\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.fsync=false] Specify a file sync write concern.\n * @param {UnorderedBulkOperation~resultCallback} [callback] The result callback\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\nUnorderedBulkOperation.prototype.execute = function(_writeConcern, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  if (this.s.executed) {\n    var executedError = toError('batch cannot be re-executed');\n    return typeof callback === 'function'\n      ? callback(executedError, null)\n      : this.s.promiseLibrary.reject(executedError);\n  }\n\n  if (typeof _writeConcern === 'function') {\n    callback = _writeConcern;\n  } else if (_writeConcern && typeof _writeConcern === 'object') {\n    this.s.writeConcern = _writeConcern;\n  }\n\n  // If we have current batch\n  if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n  if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n  if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n\n  // If we have no operations in the bulk raise an error\n  if (this.s.batches.length === 0) {\n    var emptyBatchError = toError('Invalid Operation, no operations specified');\n    return typeof callback === 'function'\n      ? callback(emptyBatchError, null)\n      : this.s.promiseLibrary.reject(emptyBatchError);\n  }\n\n  return executeOperation(this.s.topology, executeBatches, [this, options, callback]);\n};\n\ndefine.classMethod('execute', { callback: true, promise: false });\n\n/**\n * Returns an unordered batch object\n * @ignore\n */\nvar initializeUnorderedBulkOp = function(topology, collection, options) {\n  return new UnorderedBulkOperation(topology, collection, options);\n};\n\ninitializeUnorderedBulkOp.UnorderedBulkOperation = UnorderedBulkOperation;\nmodule.exports = initializeUnorderedBulkOp;\nmodule.exports.Bulk = UnorderedBulkOperation;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/bulk/unordered.js\n// module id = 94\n// module chunks = 0","'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst StrictModeError = require('./error/strict');\nconst Types = require('./schema/index');\nconst get = require('lodash.get');\nconst util = require('util');\nconst utils = require('./utils');\n\nconst ALLOWED_GEOWITHIN_GEOJSON_TYPES = ['Polygon', 'MultiPolygon'];\n\n/**\n * Handles internal casting for query filters.\n *\n * @param {Schema} schema\n * @param {Object} obj Object to cast\n * @param {Object} options the query options\n * @param {Query} context passed to setters\n * @api private\n */\nmodule.exports = function cast(schema, obj, options, context) {\n  if (Array.isArray(obj)) {\n    throw new Error('Query filter must be an object, got an array ', util.inspect(obj));\n  }\n\n  var paths = Object.keys(obj);\n  var i = paths.length;\n  var _keys;\n  var any$conditionals;\n  var schematype;\n  var nested;\n  var path;\n  var type;\n  var val;\n\n  options = options || {};\n\n  while (i--) {\n    path = paths[i];\n    val = obj[path];\n\n    if (path === '$or' || path === '$nor' || path === '$and') {\n      var k = val.length;\n\n      while (k--) {\n        val[k] = cast(schema, val[k], options, context);\n      }\n    } else if (path === '$where') {\n      type = typeof val;\n\n      if (type !== 'string' && type !== 'function') {\n        throw new Error('Must have a string or function for $where');\n      }\n\n      if (type === 'function') {\n        obj[path] = val.toString();\n      }\n\n      continue;\n    } else if (path === '$elemMatch') {\n      val = cast(schema, val, options, context);\n    } else {\n      if (!schema) {\n        // no casting for Mixed types\n        continue;\n      }\n\n      schematype = schema.path(path);\n\n      // Check for embedded discriminator paths\n      if (!schematype) {\n        let split = path.split('.');\n        let j = split.length;\n        while (j--) {\n          let pathFirstHalf = split.slice(0, j).join('.');\n          let pathLastHalf = split.slice(j).join('.');\n          let _schematype = schema.path(pathFirstHalf);\n          let discriminatorKey = get(_schematype, 'schema.options.discriminatorKey');\n          // gh-6027: if we haven't found the schematype but this path is\n          // underneath an embedded discriminator and the embedded discriminator\n          // key is in the query, use the embedded discriminator schema\n          if (_schematype != null &&\n              get(_schematype, 'schema.discriminators') != null &&\n              discriminatorKey != null &&\n              pathLastHalf !== discriminatorKey) {\n            const discriminatorVal = get(obj, pathFirstHalf + '.' + discriminatorKey);\n            if (discriminatorVal) {\n              schematype = _schematype.schema.discriminators[discriminatorVal].\n                path(pathLastHalf);\n            }\n          }\n        }\n      }\n\n      if (!schematype) {\n        // Handle potential embedded array queries\n        var split = path.split('.'),\n            j = split.length,\n            pathFirstHalf,\n            pathLastHalf,\n            remainingConds;\n\n        // Find the part of the var path that is a path of the Schema\n        while (j--) {\n          pathFirstHalf = split.slice(0, j).join('.');\n          schematype = schema.path(pathFirstHalf);\n          if (schematype) {\n            break;\n          }\n        }\n\n        // If a substring of the input path resolves to an actual real path...\n        if (schematype) {\n          // Apply the casting; similar code for $elemMatch in schema/array.js\n          if (schematype.caster && schematype.caster.schema) {\n            remainingConds = {};\n            pathLastHalf = split.slice(j).join('.');\n            remainingConds[pathLastHalf] = val;\n            obj[path] = cast(schematype.caster.schema, remainingConds, options, context)[pathLastHalf];\n          } else {\n            obj[path] = val;\n          }\n          continue;\n        }\n\n        if (utils.isObject(val)) {\n          // handle geo schemas that use object notation\n          // { loc: { long: Number, lat: Number }\n\n          var geo = '';\n          if (val.$near) {\n            geo = '$near';\n          } else if (val.$nearSphere) {\n            geo = '$nearSphere';\n          } else if (val.$within) {\n            geo = '$within';\n          } else if (val.$geoIntersects) {\n            geo = '$geoIntersects';\n          } else if (val.$geoWithin) {\n            geo = '$geoWithin';\n          }\n\n          if (geo) {\n            var numbertype = new Types.Number('__QueryCasting__');\n            var value = val[geo];\n\n            if (val.$maxDistance != null) {\n              val.$maxDistance = numbertype.castForQueryWrapper({\n                val: val.$maxDistance,\n                context: context\n              });\n            }\n            if (val.$minDistance != null) {\n              val.$minDistance = numbertype.castForQueryWrapper({\n                val: val.$minDistance,\n                context: context\n              });\n            }\n\n            if (geo === '$within') {\n              var withinType = value.$center\n                  || value.$centerSphere\n                  || value.$box\n                  || value.$polygon;\n\n              if (!withinType) {\n                throw new Error('Bad $within parameter: ' + JSON.stringify(val));\n              }\n\n              value = withinType;\n            } else if (geo === '$near' &&\n                typeof value.type === 'string' && Array.isArray(value.coordinates)) {\n              // geojson; cast the coordinates\n              value = value.coordinates;\n            } else if ((geo === '$near' || geo === '$nearSphere' || geo === '$geoIntersects') &&\n                value.$geometry && typeof value.$geometry.type === 'string' &&\n                Array.isArray(value.$geometry.coordinates)) {\n              if (value.$maxDistance != null) {\n                value.$maxDistance = numbertype.castForQueryWrapper({\n                  val: value.$maxDistance,\n                  context: context\n                });\n              }\n              if (value.$minDistance != null) {\n                value.$minDistance = numbertype.castForQueryWrapper({\n                  val: value.$minDistance,\n                  context: context\n                });\n              }\n              if (utils.isMongooseObject(value.$geometry)) {\n                value.$geometry = value.$geometry.toObject({\n                  transform: false,\n                  virtuals: false\n                });\n              }\n              value = value.$geometry.coordinates;\n            } else if (geo === '$geoWithin') {\n              if (value.$geometry) {\n                if (utils.isMongooseObject(value.$geometry)) {\n                  value.$geometry = value.$geometry.toObject({ virtuals: false });\n                }\n                var geoWithinType = value.$geometry.type;\n                if (ALLOWED_GEOWITHIN_GEOJSON_TYPES.indexOf(geoWithinType) === -1) {\n                  throw new Error('Invalid geoJSON type for $geoWithin \"' +\n                    geoWithinType + '\", must be \"Polygon\" or \"MultiPolygon\"');\n                }\n                value = value.$geometry.coordinates;\n              } else {\n                value = value.$box || value.$polygon || value.$center ||\n                  value.$centerSphere;\n                if (utils.isMongooseObject(value)) {\n                  value = value.toObject({ virtuals: false });\n                }\n              }\n            }\n\n            _cast(value, numbertype, context);\n            continue;\n          }\n        }\n\n        if (options.upsert && options.strict && !schema.nested[path]) {\n          if (options.strict === 'throw') {\n            throw new StrictModeError(path);\n          }\n          throw new StrictModeError(path, 'Path \"' + path + '\" is not in ' +\n            'schema, strict mode is `true`, and upsert is `true`.');\n        } else if (options.strictQuery === 'throw') {\n          throw new StrictModeError(path, 'Path \"' + path + '\" is not in ' +\n            'schema and strictQuery is true.');\n        } else if (options.strictQuery) {\n          delete obj[path];\n        }\n      } else if (val == null) {\n        continue;\n      } else if (val.constructor.name === 'Object') {\n        any$conditionals = Object.keys(val).some(function(k) {\n          return k.charAt(0) === '$' && k !== '$id' && k !== '$ref';\n        });\n\n        if (!any$conditionals) {\n          obj[path] = schematype.castForQueryWrapper({\n            val: val,\n            context: context\n          });\n        } else {\n          var ks = Object.keys(val),\n              $cond;\n\n          k = ks.length;\n\n          while (k--) {\n            $cond = ks[k];\n            nested = val[$cond];\n\n            if ($cond === '$not') {\n              if (nested && schematype && !schematype.caster) {\n                _keys = Object.keys(nested);\n                if (_keys.length && _keys[0].charAt(0) === '$') {\n                  for (var key in nested) {\n                    nested[key] = schematype.castForQueryWrapper({\n                      $conditional: key,\n                      val: nested[key],\n                      context: context\n                    });\n                  }\n                } else {\n                  val[$cond] = schematype.castForQueryWrapper({\n                    $conditional: $cond,\n                    val: nested,\n                    context: context\n                  });\n                }\n                continue;\n              }\n              cast(schematype.caster ? schematype.caster.schema : schema, nested, options, context);\n            } else {\n              val[$cond] = schematype.castForQueryWrapper({\n                $conditional: $cond,\n                val: nested,\n                context: context\n              });\n            }\n          }\n        }\n      } else if (val.constructor.name === 'Array' && ['Buffer', 'Array'].indexOf(schematype.instance) === -1) {\n        var casted = [];\n        for (var valIndex = 0; valIndex < val.length; valIndex++) {\n          casted.push(schematype.castForQueryWrapper({\n            val: val[valIndex],\n            context: context\n          }));\n        }\n\n        obj[path] = { $in: casted };\n      } else {\n        obj[path] = schematype.castForQueryWrapper({\n          val: val,\n          context: context\n        });\n      }\n    }\n  }\n\n  return obj;\n};\n\nfunction _cast(val, numbertype, context) {\n  if (Array.isArray(val)) {\n    val.forEach(function(item, i) {\n      if (Array.isArray(item) || utils.isObject(item)) {\n        return _cast(item, numbertype, context);\n      }\n      val[i] = numbertype.castForQueryWrapper({ val: item, context: context });\n    });\n  } else {\n    var nearKeys = Object.keys(val);\n    var nearLen = nearKeys.length;\n    while (nearLen--) {\n      var nkey = nearKeys[nearLen];\n      var item = val[nkey];\n      if (Array.isArray(item) || utils.isObject(item)) {\n        _cast(item, numbertype, context);\n        val[nkey] = item;\n      } else {\n        val[nkey] = numbertype.castForQuery({ val: item, context: context });\n      }\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/cast.js\n// module id = 95\n// module chunks = 0","/*!\n * Module dependencies.\n */\n\nvar MongooseError = require('./');\n\n/**\n * Strict mode error constructor\n *\n * @param {String} type\n * @param {String} value\n * @inherits MongooseError\n * @api private\n */\n\nfunction StrictModeError(path, msg) {\n  msg = msg || 'Field `' + path + '` is not in schema and strict ' +\n    'mode is set to throw.';\n  MongooseError.call(this, msg);\n  this.name = 'StrictModeError';\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this);\n  } else {\n    this.stack = new Error().stack;\n  }\n  this.path = path;\n}\n\n/*!\n * Inherits from MongooseError.\n */\n\nStrictModeError.prototype = Object.create(MongooseError.prototype);\nStrictModeError.prototype.constructor = MongooseError;\n\nmodule.exports = StrictModeError;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/error/strict.js\n// module id = 96\n// module chunks = 0","/*!\n * Module requirements\n */\n\nconst MongooseError = require('./');\n\n/**\n * Document Validation Error\n *\n * @api private\n * @param {Document} instance\n * @inherits MongooseError\n */\n\nfunction ValidationError(instance) {\n  this.errors = {};\n  this._message = '';\n  if (instance && instance.constructor.name === 'model') {\n    this._message = instance.constructor.modelName + ' validation failed';\n    MongooseError.call(this, this._message);\n  } else {\n    this._message = 'Validation failed';\n    MongooseError.call(this, this._message);\n  }\n  this.name = 'ValidationError';\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this);\n  } else {\n    this.stack = new Error().stack;\n  }\n  if (instance) {\n    instance.errors = this.errors;\n  }\n}\n\n/*!\n * Inherits from MongooseError.\n */\n\nValidationError.prototype = Object.create(MongooseError.prototype);\nValidationError.prototype.constructor = MongooseError;\n\n/**\n * Console.log helper\n */\n\nValidationError.prototype.toString = function() {\n  return this.name + ': ' + _generateMessage(this);\n};\n\n/*!\n * inspect helper\n */\n\nValidationError.prototype.inspect = function() {\n  return Object.assign(new Error(this.message), this);\n};\n\n/*!\n * Helper for JSON.stringify\n */\n\nValidationError.prototype.toJSON = function() {\n  return Object.assign({}, this, { message: this.message });\n};\n\n/*!\n * add message\n */\n\nValidationError.prototype.addError = function(path, error) {\n  this.errors[path] = error;\n  this.message = this._message + ': ' + _generateMessage(this);\n};\n\n/*!\n * ignore\n */\n\nfunction _generateMessage(err) {\n  var keys = Object.keys(err.errors || {});\n  var len = keys.length;\n  var msgs = [];\n  var key;\n\n  for (var i = 0; i < len; ++i) {\n    key = keys[i];\n    if (err === err.errors[key]) {\n      continue;\n    }\n    msgs.push(key + ': ' + err.errors[key].message);\n  }\n\n  return msgs.join(', ');\n}\n\n/*!\n * Module exports\n */\n\nmodule.exports = exports = ValidationError;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/error/validation.js\n// module id = 97\n// module chunks = 0","/*!\n * Module dependencies.\n */\n\nvar CastError = require('./error/cast');\nvar ObjectParameterError = require('./error/objectParameter');\nvar QueryCursor = require('./cursor/QueryCursor');\nvar ReadPreference = require('./drivers').ReadPreference;\nvar cast = require('./cast');\nvar castUpdate = require('./services/query/castUpdate');\nvar hasDollarKeys = require('./services/query/hasDollarKeys');\nvar helpers = require('./queryhelpers');\nvar isInclusive = require('./services/projection/isInclusive');\nvar mquery = require('mquery');\nvar selectPopulatedFields = require('./services/query/selectPopulatedFields');\nvar setDefaultsOnInsert = require('./services/setDefaultsOnInsert');\nvar slice = require('sliced');\nvar updateValidators = require('./services/updateValidators');\nvar util = require('util');\nvar utils = require('./utils');\n\n/**\n * Query constructor used for building queries. You do not need\n * to instantiate a `Query` directly. Instead use Model functions like\n * [`Model.find()`](/docs/api.html#find_find).\n *\n * ####Example:\n *\n *     const query = MyModel.find(); // `query` is an instance of `Query`\n *     query.setOptions({ lean : true });\n *     query.collection(model.collection);\n *     query.where('age').gte(21).exec(callback);\n *\n *     // You can instantiate a query directly. There is no need to do\n *     // this unless you're an advanced user with a very good reason to.\n *     const query = new mongoose.Query();\n *\n * @param {Object} [options]\n * @param {Object} [model]\n * @param {Object} [conditions]\n * @param {Object} [collection] Mongoose collection\n * @api public\n */\n\nfunction Query(conditions, options, model, collection) {\n  // this stuff is for dealing with custom queries created by #toConstructor\n  if (!this._mongooseOptions) {\n    this._mongooseOptions = {};\n  }\n  options = options || {};\n\n  // this is the case where we have a CustomQuery, we need to check if we got\n  // options passed in, and if we did, merge them in\n  var keys = Object.keys(options);\n  for (var i = 0; i < keys.length; ++i) {\n    var k = keys[i];\n    this._mongooseOptions[k] = options[k];\n  }\n\n  if (collection) {\n    this.mongooseCollection = collection;\n  }\n\n  if (model) {\n    this.model = model;\n    this.schema = model.schema;\n  }\n\n  // this is needed because map reduce returns a model that can be queried, but\n  // all of the queries on said model should be lean\n  if (this.model && this.model._mapreduce) {\n    this.lean();\n  }\n\n  // inherit mquery\n  mquery.call(this, this.mongooseCollection, options);\n\n  if (conditions) {\n    this.find(conditions);\n  }\n\n  this.options = this.options || {};\n  if (this.schema != null && this.schema.options.collation != null) {\n    this.options.collation = this.schema.options.collation;\n  }\n}\n\n/*!\n * inherit mquery\n */\n\nQuery.prototype = new mquery;\nQuery.prototype.constructor = Query;\nQuery.base = mquery.prototype;\n\n/**\n * Flag to opt out of using `$geoWithin`.\n *\n *     mongoose.Query.use$geoWithin = false;\n *\n * MongoDB 2.4 deprecated the use of `$within`, replacing it with `$geoWithin`. Mongoose uses `$geoWithin` by default (which is 100% backward compatible with $within). If you are running an older version of MongoDB, set this flag to `false` so your `within()` queries continue to work.\n *\n * @see http://docs.mongodb.org/manual/reference/operator/geoWithin/\n * @default true\n * @property use$geoWithin\n * @memberOf Query\n * @receiver Query\n * @api public\n */\n\nQuery.use$geoWithin = mquery.use$geoWithin;\n\n/**\n * Converts this query to a customized, reusable query constructor with all arguments and options retained.\n *\n * ####Example\n *\n *     // Create a query for adventure movies and read from the primary\n *     // node in the replica-set unless it is down, in which case we'll\n *     // read from a secondary node.\n *     var query = Movie.find({ tags: 'adventure' }).read('primaryPreferred');\n *\n *     // create a custom Query constructor based off these settings\n *     var Adventure = query.toConstructor();\n *\n *     // Adventure is now a subclass of mongoose.Query and works the same way but with the\n *     // default query parameters and options set.\n *     Adventure().exec(callback)\n *\n *     // further narrow down our query results while still using the previous settings\n *     Adventure().where({ name: /^Life/ }).exec(callback);\n *\n *     // since Adventure is a stand-alone constructor we can also add our own\n *     // helper methods and getters without impacting global queries\n *     Adventure.prototype.startsWith = function (prefix) {\n *       this.where({ name: new RegExp('^' + prefix) })\n *       return this;\n *     }\n *     Object.defineProperty(Adventure.prototype, 'highlyRated', {\n *       get: function () {\n *         this.where({ rating: { $gt: 4.5 }});\n *         return this;\n *       }\n *     })\n *     Adventure().highlyRated.startsWith('Life').exec(callback)\n *\n * New in 3.7.3\n *\n * @return {Query} subclass-of-Query\n * @api public\n */\n\nQuery.prototype.toConstructor = function toConstructor() {\n  var model = this.model;\n  var coll = this.mongooseCollection;\n\n  var CustomQuery = function(criteria, options) {\n    if (!(this instanceof CustomQuery)) {\n      return new CustomQuery(criteria, options);\n    }\n    this._mongooseOptions = utils.clone(p._mongooseOptions);\n    Query.call(this, criteria, options || null, model, coll);\n  };\n\n  util.inherits(CustomQuery, Query);\n\n  // set inherited defaults\n  var p = CustomQuery.prototype;\n\n  p.options = {};\n\n  p.setOptions(this.options);\n\n  p.op = this.op;\n  p._conditions = utils.clone(this._conditions);\n  p._fields = utils.clone(this._fields);\n  p._update = utils.clone(this._update, {\n    flattenDecimals: false\n  });\n  p._path = this._path;\n  p._distinct = this._distinct;\n  p._collection = this._collection;\n  p._mongooseOptions = this._mongooseOptions;\n\n  return CustomQuery;\n};\n\n/**\n * Specifies a javascript function or expression to pass to MongoDBs query system.\n *\n * ####Example\n *\n *     query.$where('this.comments.length === 10 || this.name.length === 5')\n *\n *     // or\n *\n *     query.$where(function () {\n *       return this.comments.length === 10 || this.name.length === 5;\n *     })\n *\n * ####NOTE:\n *\n * Only use `$where` when you have a condition that cannot be met using other MongoDB operators like `$lt`.\n * **Be sure to read about all of [its caveats](http://docs.mongodb.org/manual/reference/operator/where/) before using.**\n *\n * @see $where http://docs.mongodb.org/manual/reference/operator/where/\n * @method $where\n * @param {String|Function} js javascript string or function\n * @return {Query} this\n * @memberOf Query\n * @method $where\n * @api public\n */\n\n/**\n * Specifies a `path` for use with chaining.\n *\n * ####Example\n *\n *     // instead of writing:\n *     User.find({age: {$gte: 21, $lte: 65}}, callback);\n *\n *     // we can instead write:\n *     User.where('age').gte(21).lte(65);\n *\n *     // passing query conditions is permitted\n *     User.find().where({ name: 'vonderful' })\n *\n *     // chaining\n *     User\n *     .where('age').gte(21).lte(65)\n *     .where('name', /^vonderful/i)\n *     .where('friends').slice(10)\n *     .exec(callback)\n *\n * @method where\n * @memberOf Query\n * @param {String|Object} [path]\n * @param {any} [val]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.slice = function() {\n  if (arguments.length === 0) {\n    return this;\n  }\n\n  this._validate('slice');\n\n  var path;\n  var val;\n\n  if (arguments.length === 1) {\n    var arg = arguments[0];\n    if (typeof arg === 'object' && !Array.isArray(arg)) {\n      var keys = Object.keys(arg);\n      var numKeys = keys.length;\n      for (var i = 0; i < numKeys; ++i) {\n        this.slice(keys[i], arg[keys[i]]);\n      }\n      return this;\n    }\n    this._ensurePath('slice');\n    path = this._path;\n    val = arguments[0];\n  } else if (arguments.length === 2) {\n    if ('number' === typeof arguments[0]) {\n      this._ensurePath('slice');\n      path = this._path;\n      val = slice(arguments);\n    } else {\n      path = arguments[0];\n      val = arguments[1];\n    }\n  } else if (arguments.length === 3) {\n    path = arguments[0];\n    val = slice(arguments, 1);\n  }\n\n  var p = {};\n  p[path] = { $slice: val };\n  return this.select(p);\n};\n\n\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n *\n * ####Example\n *\n *     User.where('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @method equals\n * @memberOf Query\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for an `$or` condition.\n *\n * ####Example\n *\n *     query.or([{ color: 'red' }, { status: 'emergency' }])\n *\n * @see $or http://docs.mongodb.org/manual/reference/operator/or/\n * @method or\n * @memberOf Query\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for a `$nor` condition.\n *\n * ####Example\n *\n *     query.nor([{ color: 'green' }, { status: 'ok' }])\n *\n * @see $nor http://docs.mongodb.org/manual/reference/operator/nor/\n * @method nor\n * @memberOf Query\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for a `$and` condition.\n *\n * ####Example\n *\n *     query.and([{ color: 'green' }, { status: 'ok' }])\n *\n * @method and\n * @memberOf Query\n * @see $and http://docs.mongodb.org/manual/reference/operator/and/\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies a $gt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * ####Example\n *\n *     Thing.find().where('age').gt(21)\n *\n *     // or\n *     Thing.find().gt('age', 21)\n *\n * @method gt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @see $gt http://docs.mongodb.org/manual/reference/operator/gt/\n * @api public\n */\n\n/**\n * Specifies a $gte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method gte\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @see $gte http://docs.mongodb.org/manual/reference/operator/gte/\n * @api public\n */\n\n/**\n * Specifies a $lt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @see $lt http://docs.mongodb.org/manual/reference/operator/lt/\n * @api public\n */\n\n/**\n * Specifies a $lte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lte\n * @see $lte http://docs.mongodb.org/manual/reference/operator/lte/\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $ne query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $ne http://docs.mongodb.org/manual/reference/operator/ne/\n * @method ne\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $in query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $in http://docs.mongodb.org/manual/reference/operator/in/\n * @method in\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $nin query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $nin http://docs.mongodb.org/manual/reference/operator/nin/\n * @method nin\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $all query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $all http://docs.mongodb.org/manual/reference/operator/all/\n * @method all\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $size query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * ####Example\n *\n *     MyModel.where('tags').size(0).exec(function (err, docs) {\n *       if (err) return handleError(err);\n *\n *       assert(Array.isArray(docs));\n *       console.log('documents with 0 tags', docs);\n *     })\n *\n * @see $size http://docs.mongodb.org/manual/reference/operator/size/\n * @method size\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $regex query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $regex http://docs.mongodb.org/manual/reference/operator/regex/\n * @method regex\n * @memberOf Query\n * @param {String} [path]\n * @param {String|RegExp} val\n * @api public\n */\n\n/**\n * Specifies a $maxDistance query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $maxDistance http://docs.mongodb.org/manual/reference/operator/maxDistance/\n * @method maxDistance\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a `$mod` condition, filters documents for documents whose\n * `path` property is a number that is equal to `remainder` modulo `divisor`.\n *\n * ####Example\n *\n *     // All find products whose inventory is odd\n *     Product.find().mod('inventory', [2, 1]);\n *     Product.find().where('inventory').mod([2, 1]);\n *     // This syntax is a little strange, but supported.\n *     Product.find().where('inventory').mod(2, 1);\n *\n * @method mod\n * @memberOf Query\n * @param {String} [path]\n * @param {Array} val must be of length 2, first element is `divisor`, 2nd element is `remainder`.\n * @return {Query} this\n * @see $mod http://docs.mongodb.org/manual/reference/operator/mod/\n * @api public\n */\n\nQuery.prototype.mod = function() {\n  var val;\n  var path;\n\n  if (arguments.length === 1) {\n    this._ensurePath('mod');\n    val = arguments[0];\n    path = this._path;\n  } else if (arguments.length === 2 && !Array.isArray(arguments[1])) {\n    this._ensurePath('mod');\n    val = slice(arguments);\n    path = this._path;\n  } else if (arguments.length === 3) {\n    val = slice(arguments, 1);\n    path = arguments[0];\n  } else {\n    val = arguments[1];\n    path = arguments[0];\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$mod = val;\n  return this;\n};\n\n/**\n * Specifies an `$exists` condition\n *\n * ####Example\n *\n *     // { name: { $exists: true }}\n *     Thing.where('name').exists()\n *     Thing.where('name').exists(true)\n *     Thing.find().exists('name')\n *\n *     // { name: { $exists: false }}\n *     Thing.where('name').exists(false);\n *     Thing.find().exists('name', false);\n *\n * @method exists\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @see $exists http://docs.mongodb.org/manual/reference/operator/exists/\n * @api public\n */\n\n/**\n * Specifies an `$elemMatch` condition\n *\n * ####Example\n *\n *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n *\n *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n *\n *     query.elemMatch('comment', function (elem) {\n *       elem.where('author').equals('autobot');\n *       elem.where('votes').gte(5);\n *     })\n *\n *     query.where('comment').elemMatch(function (elem) {\n *       elem.where({ author: 'autobot' });\n *       elem.where('votes').gte(5);\n *     })\n *\n * @method elemMatch\n * @memberOf Query\n * @param {String|Object|Function} path\n * @param {Object|Function} criteria\n * @return {Query} this\n * @see $elemMatch http://docs.mongodb.org/manual/reference/operator/elemMatch/\n * @api public\n */\n\n/**\n * Defines a `$within` or `$geoWithin` argument for geo-spatial queries.\n *\n * ####Example\n *\n *     query.where(path).within().box()\n *     query.where(path).within().circle()\n *     query.where(path).within().geometry()\n *\n *     query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });\n *     query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\n *     query.where('loc').within({ polygon: [[],[],[],[]] });\n *\n *     query.where('loc').within([], [], []) // polygon\n *     query.where('loc').within([], []) // box\n *     query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry\n *\n * **MUST** be used after `where()`.\n *\n * ####NOTE:\n *\n * As of Mongoose 3.7, `$geoWithin` is always used for queries. To change this behavior, see [Query.use$geoWithin](#query_Query-use%2524geoWithin).\n *\n * ####NOTE:\n *\n * In Mongoose 3.7, `within` changed from a getter to a function. If you need the old syntax, use [this](https://github.com/ebensing/mongoose-within).\n *\n * @method within\n * @see $polygon http://docs.mongodb.org/manual/reference/operator/polygon/\n * @see $box http://docs.mongodb.org/manual/reference/operator/box/\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @see $center http://docs.mongodb.org/manual/reference/operator/center/\n * @see $centerSphere http://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @memberOf Query\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies a $slice projection for an array.\n *\n * ####Example\n *\n *     query.slice('comments', 5)\n *     query.slice('comments', -5)\n *     query.slice('comments', [10, 5])\n *     query.where('comments').slice(5)\n *     query.where('comments').slice([-10, 5])\n *\n * @method slice\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val number/range of elements to slice\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields#RetrievingaSubsetofFields-RetrievingaSubrangeofArrayElements\n * @see $slice http://docs.mongodb.org/manual/reference/projection/slice/#prj._S_slice\n * @api public\n */\n\n/**\n * Specifies the maximum number of documents the query will return.\n *\n * ####Example\n *\n *     query.limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method limit\n * @memberOf Query\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies the number of documents to skip.\n *\n * ####Example\n *\n *     query.skip(100).limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method skip\n * @memberOf Query\n * @param {Number} val\n * @see cursor.skip http://docs.mongodb.org/manual/reference/method/cursor.skip/\n * @api public\n */\n\n/**\n * Specifies the maxScan option.\n *\n * ####Example\n *\n *     query.maxScan(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method maxScan\n * @memberOf Query\n * @param {Number} val\n * @see maxScan http://docs.mongodb.org/manual/reference/operator/maxScan/\n * @api public\n */\n\n/**\n * Specifies the batchSize option.\n *\n * ####Example\n *\n *     query.batchSize(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method batchSize\n * @memberOf Query\n * @param {Number} val\n * @see batchSize http://docs.mongodb.org/manual/reference/method/cursor.batchSize/\n * @api public\n */\n\n/**\n * Specifies the `comment` option.\n *\n * ####Example\n *\n *     query.comment('login query')\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method comment\n * @memberOf Query\n * @param {Number} val\n * @see comment http://docs.mongodb.org/manual/reference/operator/comment/\n * @api public\n */\n\n/**\n * Specifies this query as a `snapshot` query.\n *\n * ####Example\n *\n *     query.snapshot() // true\n *     query.snapshot(true)\n *     query.snapshot(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method snapshot\n * @memberOf Query\n * @see snapshot http://docs.mongodb.org/manual/reference/operator/snapshot/\n * @return {Query} this\n * @api public\n */\n\n/**\n * Sets query hints.\n *\n * ####Example\n *\n *     query.hint({ indexA: 1, indexB: -1})\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method hint\n * @memberOf Query\n * @param {Object} val a hint object\n * @return {Query} this\n * @see $hint http://docs.mongodb.org/manual/reference/operator/hint/\n * @api public\n */\n\n/**\n * Specifies which document fields to include or exclude (also known as the query \"projection\")\n *\n * When using string syntax, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included. Lastly, if a path is prefixed with `+`, it forces inclusion of the path, which is useful for paths excluded at the [schema level](/docs/api.html#schematype_SchemaType-select).\n *\n * A projection _must_ be either inclusive or exclusive. In other words, you must\n * either list the fields to include (which excludes all others), or list the fields\n * to exclude (which implies all other fields are included). The [`_id` field is the only exception because MongoDB includes it by default](https://docs.mongodb.com/manual/tutorial/project-fields-from-query-results/#suppress-id-field).\n *\n * ####Example\n *\n *     // include a and b, exclude other fields\n *     query.select('a b');\n *\n *     // exclude c and d, include other fields\n *     query.select('-c -d');\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     query.select({ a: 1, b: 1 });\n *     query.select({ c: 0, d: 0 });\n *\n *     // force inclusion of field excluded at schema level\n *     query.select('+path')\n *\n * @method select\n * @memberOf Query\n * @param {Object|String} arg\n * @return {Query} this\n * @see SchemaType\n * @api public\n */\n\nQuery.prototype.select = function select() {\n  var arg = arguments[0];\n  if (!arg) return this;\n  var i;\n  var len;\n\n  if (arguments.length !== 1) {\n    throw new Error('Invalid select: select only takes 1 argument');\n  }\n\n  this._validate('select');\n\n  var fields = this._fields || (this._fields = {});\n  var userProvidedFields = this._userProvidedFields || (this._userProvidedFields = {});\n  var type = typeof arg;\n\n  if (('string' == type || Object.prototype.toString.call(arg) === '[object Arguments]') &&\n    'number' == typeof arg.length || Array.isArray(arg)) {\n    if ('string' == type)\n      arg = arg.split(/\\s+/);\n\n    for (i = 0, len = arg.length; i < len; ++i) {\n      var field = arg[i];\n      if (!field) continue;\n      var include = '-' == field[0] ? 0 : 1;\n      if (include === 0) field = field.substring(1);\n      fields[field] = include;\n      userProvidedFields[field] = include;\n    }\n\n    return this;\n  }\n\n  if (utils.isObject(arg)) {\n    var keys = Object.keys(arg);\n    for (i = 0; i < keys.length; ++i) {\n      fields[keys[i]] = arg[keys[i]];\n      userProvidedFields[keys[i]] = arg[keys[i]];\n    }\n    return this;\n  }\n\n  throw new TypeError('Invalid select() argument. Must be string or object.');\n};\n\n/**\n * _DEPRECATED_ Sets the slaveOk option.\n *\n * **Deprecated** in MongoDB 2.2 in favor of [read preferences](#query_Query-read).\n *\n * ####Example:\n *\n *     query.slaveOk() // true\n *     query.slaveOk(true)\n *     query.slaveOk(false)\n *\n * @method slaveOk\n * @memberOf Query\n * @deprecated use read() preferences instead if on mongodb >= 2.2\n * @param {Boolean} v defaults to true\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see slaveOk http://docs.mongodb.org/manual/reference/method/rs.slaveOk/\n * @see read() #query_Query-read\n * @return {Query} this\n * @api public\n */\n\n/**\n * Determines the MongoDB nodes from which to read.\n *\n * ####Preferences:\n *\n *     primary - (default) Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\n *     secondary            Read from secondary if available, otherwise error.\n *     primaryPreferred     Read from primary if available, otherwise a secondary.\n *     secondaryPreferred   Read from a secondary if available, otherwise read from the primary.\n *     nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.\n *\n * Aliases\n *\n *     p   primary\n *     pp  primaryPreferred\n *     s   secondary\n *     sp  secondaryPreferred\n *     n   nearest\n *\n * ####Example:\n *\n *     new Query().read('primary')\n *     new Query().read('p')  // same as primary\n *\n *     new Query().read('primaryPreferred')\n *     new Query().read('pp') // same as primaryPreferred\n *\n *     new Query().read('secondary')\n *     new Query().read('s')  // same as secondary\n *\n *     new Query().read('secondaryPreferred')\n *     new Query().read('sp') // same as secondaryPreferred\n *\n *     new Query().read('nearest')\n *     new Query().read('n')  // same as nearest\n *\n *     // read from secondaries with matching tags\n *     new Query().read('s', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }])\n *\n * Read more about how to use read preferrences [here](http://docs.mongodb.org/manual/applications/replication/#read-preference) and [here](http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).\n *\n * @method read\n * @memberOf Query\n * @param {String} pref one of the listed preference options or aliases\n * @param {Array} [tags] optional tags for this query\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.read = function read(pref, tags) {\n  // first cast into a ReadPreference object to support tags\n  var read = new ReadPreference(pref, tags);\n  this.options.readPreference = read;\n  return this;\n};\n\n/**\n * Merges another Query or conditions object into this one.\n *\n * When a Query is passed, conditions, field selection and options are merged.\n *\n * New in 3.7.0\n *\n * @method merge\n * @memberOf Query\n * @param {Query|Object} source\n * @return {Query} this\n */\n\n/**\n * Sets query options. Some options only make sense for certain operations.\n *\n * ####Options:\n *\n * The following options are only for `find()`:\n * - [tailable](http://www.mongodb.org/display/DOCS/Tailable+Cursors)\n * - [sort](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsort(\\)%7D%7D)\n * - [limit](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D)\n * - [skip](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D)\n * - [maxscan](https://docs.mongodb.org/v3.2/reference/operator/meta/maxScan/#metaOp._S_maxScan)\n * - [batchSize](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D)\n * - [comment](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment)\n * - [snapshot](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D)\n * - [readPreference](http://docs.mongodb.org/manual/applications/replication/#read-preference)\n * - [hint](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint)\n *\n * The following options are only for `update()`, `updateOne()`, `updateMany()`, `replaceOne()`, `findOneAndUpdate()`, and `findByIdAndUpdate()`:\n * - [upsert](https://docs.mongodb.com/manual/reference/method/db.collection.update/)\n * - [writeConcern](https://docs.mongodb.com/manual/reference/method/db.collection.update/)\n *\n * The following options are only for `find()`, `findOne()`, `findById()`, `findOneAndUpdate()`, and `findByIdAndUpdate()`:\n * - [lean](./api.html#query_Query-lean)\n *\n * The following options are only for all operations **except** `update()`, `updateOne()`, `updateMany()`, `remove()`, `deleteOne()`, and `deleteMany()`:\n * - [maxTimeMS](https://docs.mongodb.com/manual/reference/operator/meta/maxTimeMS/)\n *\n * The following options are for all operations:\n * - [collation](https://docs.mongodb.com/manual/reference/collation/)\n *\n * @param {Object} options\n * @api public\n */\n\nQuery.prototype.setOptions = function(options, overwrite) {\n  // overwrite is only for internal use\n  if (overwrite) {\n    // ensure that _mongooseOptions & options are two different objects\n    this._mongooseOptions = (options && utils.clone(options)) || {};\n    this.options = options || {};\n\n    if ('populate' in options) {\n      this.populate(this._mongooseOptions);\n    }\n    return this;\n  }\n\n  if (options == null) {\n    return this;\n  }\n\n  if (Array.isArray(options.populate)) {\n    var populate = options.populate;\n    delete options.populate;\n    var _numPopulate = populate.length;\n    for (var i = 0; i < _numPopulate; ++i) {\n      this.populate(populate[i]);\n    }\n  }\n\n  if ('useFindAndModify' in options) {\n    this._mongooseOptions.useFindAndModify = options.useFindAndModify;\n    delete options.useFindAndModify;\n  }\n  if ('omitUndefined' in options) {\n    this._mongooseOptions.omitUndefined = options.omitUndefined;\n    delete options.omitUndefined;\n  }\n\n  return Query.base.setOptions.call(this, options);\n};\n\n/**\n * Returns the current query conditions as a JSON object.\n *\n * ####Example:\n *\n *     var query = new Query();\n *     query.find({ a: 1 }).where('b').gt(2);\n *     query.getQuery(); // { a: 1, b: { $gt: 2 } }\n *\n * @return {Object} current query conditions\n * @api public\n */\n\nQuery.prototype.getQuery = function() {\n  return this._conditions;\n};\n\n/**\n * Returns the current update operations as a JSON object.\n *\n * ####Example:\n *\n *     var query = new Query();\n *     query.update({}, { $set: { a: 5 } });\n *     query.getUpdate(); // { $set: { a: 5 } }\n *\n * @return {Object} current update operations\n * @api public\n */\n\nQuery.prototype.getUpdate = function() {\n  return this._update;\n};\n\n/**\n * Returns fields selection for this query.\n *\n * @method _fieldsForExec\n * @return {Object}\n * @api private\n * @receiver Query\n */\n\n/**\n * Return an update document with corrected $set operations.\n *\n * @method _updateForExec\n * @api private\n * @receiver Query\n */\n\nQuery.prototype._updateForExec = function() {\n  var update = utils.clone(this._update, {\n    transform: false,\n    depopulate: true\n  });\n  var ops = Object.keys(update);\n  var i = ops.length;\n  var ret = {};\n\n  while (i--) {\n    var op = ops[i];\n\n    if (this.options.overwrite) {\n      ret[op] = update[op];\n      continue;\n    }\n\n    if ('$' !== op[0]) {\n      // fix up $set sugar\n      if (!ret.$set) {\n        if (update.$set) {\n          ret.$set = update.$set;\n        } else {\n          ret.$set = {};\n        }\n      }\n      ret.$set[op] = update[op];\n      ops.splice(i, 1);\n      if (!~ops.indexOf('$set')) ops.push('$set');\n    } else if ('$set' === op) {\n      if (!ret.$set) {\n        ret[op] = update[op];\n      }\n    } else {\n      ret[op] = update[op];\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Makes sure _path is set.\n *\n * @method _ensurePath\n * @param {String} method\n * @api private\n * @receiver Query\n */\n\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n *\n * @method canMerge\n * @memberOf Query\n * @param {Object} conds\n * @return {Boolean}\n * @api private\n */\n\n/**\n * Returns default options for this query.\n *\n * @param {Model} model\n * @api private\n */\n\nQuery.prototype._optionsForExec = function(model) {\n  const options = utils.clone(this.options);\n\n  delete options.populate;\n  model = model || this.model;\n\n  if (!model) {\n    return options;\n  }\n\n  if (!('safe' in options) && model.schema.options.safe) {\n    options.safe = model.schema.options.safe;\n  }\n\n  if (!('readPreference' in options) && model.schema.options.read) {\n    options.readPreference = model.schema.options.read;\n  }\n\n  if (options.upsert !== void 0) {\n    options.upsert = !!options.upsert;\n  }\n\n  return options;\n};\n\n/**\n * Sets the lean option.\n *\n * Documents returned from queries with the `lean` option enabled are plain javascript objects, not [MongooseDocuments](#document-js). They have no `save` method, getters/setters or other Mongoose magic applied.\n *\n * ####Example:\n *\n *     new Query().lean() // true\n *     new Query().lean(true)\n *     new Query().lean(false)\n *\n *     Model.find().lean().exec(function (err, docs) {\n *       docs[0] instanceof mongoose.Document // false\n *     });\n *\n * This is a [great](https://groups.google.com/forum/#!topic/mongoose-orm/u2_DzDydcnA/discussion) option in high-performance read-only scenarios, especially when combined with [stream](#query_Query-stream).\n *\n * @param {Boolean|Object} bool defaults to true\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.lean = function(v) {\n  this._mongooseOptions.lean = arguments.length ? v : true;\n  return this;\n};\n\n/**\n * Gets/sets the error flag on this query. If this flag is not null or\n * undefined, the `exec()` promise will reject without executing.\n *\n * ####Example:\n *\n *     Query().error(); // Get current error value\n *     Query().error(null); // Unset the current error\n *     Query().error(new Error('test')); // `exec()` will resolve with test\n *     Schema.pre('find', function() {\n *       if (!this.getQuery().userId) {\n *         this.error(new Error('Not allowed to query without setting userId'));\n *       }\n *     });\n *\n * Note that query casting runs **after** hooks, so cast errors will override\n * custom errors.\n *\n * ####Example:\n *     var TestSchema = new Schema({ num: Number });\n *     var TestModel = db.model('Test', TestSchema);\n *     TestModel.find({ num: 'not a number' }).error(new Error('woops')).exec(function(error) {\n *       // `error` will be a cast error because `num` failed to cast\n *     });\n *\n * @param {Error|null} err if set, `exec()` will fail fast before sending the query to MongoDB\n * @returns {Query} this\n * @api public\n */\n\nQuery.prototype.error = function error(err) {\n  if (arguments.length === 0) {\n    return this._error;\n  }\n\n  this._error = err;\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQuery.prototype._unsetCastError = function _unsetCastError() {\n  if (this._error != null && !(this._error instanceof CastError)) {\n    return;\n  }\n  return this.error(null);\n};\n\n/**\n * Getter/setter around the current mongoose-specific options for this query\n * (populate, lean, etc.)\n *\n * @param {Object} options if specified, overwrites the current options\n * @returns {Object} the options\n * @api public\n */\n\nQuery.prototype.mongooseOptions = function(v) {\n  if (arguments.length > 0) {\n    this._mongooseOptions = v;\n  }\n  return this._mongooseOptions;\n};\n\n/*!\n * ignore\n */\n\nQuery.prototype._castConditions = function() {\n  try {\n    this.cast(this.model);\n    this._unsetCastError();\n  } catch (err) {\n    this.error(err);\n  }\n};\n\n/**\n * Thunk around find()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\nQuery.prototype._find = function(callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return this;\n  }\n\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n\n  var fields = this._fieldsForExec();\n  var mongooseOptions = this._mongooseOptions;\n  var _this = this;\n  var userProvidedFields = _this._userProvidedFields || {};\n\n  var cb = function(err, docs) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (docs.length === 0) {\n      return callback(null, docs);\n    }\n\n    if (!mongooseOptions.populate) {\n      return !!mongooseOptions.lean === true\n        ? callback(null, docs)\n        : completeMany(_this.model, docs, fields, userProvidedFields, null, callback);\n    }\n\n    var pop = helpers.preparePopulationOptionsMQ(_this, mongooseOptions);\n    pop.__noPromise = true;\n    _this.model.populate(docs, pop, function(err, docs) {\n      if (err) return callback(err);\n      return !!mongooseOptions.lean === true\n        ? callback(null, docs)\n        : completeMany(_this.model, docs, fields, userProvidedFields, pop, callback);\n    });\n  };\n\n  var options = this._optionsForExec();\n  options.fields = this._fieldsForExec();\n  var filter = this._conditions;\n  return this._collection.find(filter, options, cb);\n};\n\n/**\n * Finds documents.\n *\n * When no `callback` is passed, the query is not executed. When the query is executed, the result will be an array of documents.\n *\n * ####Example\n *\n *     query.find({ name: 'Los Pollos Hermanos' }).find(callback)\n *\n * @param {Object} [filter] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.find = function(conditions, callback) {\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n  }\n\n  conditions = utils.toObject(conditions);\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (conditions != null) {\n    this.error(new ObjectParameterError(conditions, 'filter', 'find'));\n  }\n\n  // if we don't have a callback, then just return the query object\n  if (!callback) {\n    return Query.base.find.call(this);\n  }\n\n  this._find(callback);\n\n  return this;\n};\n\n/**\n * Merges another Query or conditions object into this one.\n *\n * When a Query is passed, conditions, field selection and options are merged.\n *\n * @param {Query|Object} source\n * @return {Query} this\n */\n\nQuery.prototype.merge = function(source) {\n  if (!source) {\n    return this;\n  }\n\n  var opts = { overwrite: true };\n\n  if (source instanceof Query) {\n    // if source has a feature, apply it to ourselves\n\n    if (source._conditions) {\n      utils.merge(this._conditions, source._conditions, opts);\n    }\n\n    if (source._fields) {\n      this._fields || (this._fields = {});\n      utils.merge(this._fields, source._fields, opts);\n    }\n\n    if (source.options) {\n      this.options || (this.options = {});\n      utils.merge(this.options, source.options, opts);\n    }\n\n    if (source._update) {\n      this._update || (this._update = {});\n      utils.mergeClone(this._update, source._update);\n    }\n\n    if (source._distinct) {\n      this._distinct = source._distinct;\n    }\n\n    return this;\n  }\n\n  // plain object\n  utils.merge(this._conditions, source, opts);\n\n  return this;\n};\n\n/*!\n * hydrates many documents\n *\n * @param {Model} model\n * @param {Array} docs\n * @param {Object} fields\n * @param {Query} self\n * @param {Array} [pop] array of paths used in population\n * @param {Function} callback\n */\n\nfunction completeMany(model, docs, fields, userProvidedFields, pop, callback) {\n  var arr = [];\n  var count = docs.length;\n  var len = count;\n  var opts = pop ? { populated: pop } : undefined;\n  var error = null;\n  function init(_error) {\n    if (_error != null) {\n      error = error || _error;\n    }\n    if (error != null) {\n      --count || process.nextTick(() => callback(error));\n      return;\n    }\n    --count || process.nextTick(() => callback(error, arr));\n  }\n  for (var i = 0; i < len; ++i) {\n    arr[i] = helpers.createModel(model, docs[i], fields, userProvidedFields);\n    try {\n      arr[i].init(docs[i], opts, init);\n    } catch (error) {\n      init(error);\n    }\n  }\n}\n\n/**\n * Adds a collation to this op (MongoDB 3.4 and up)\n *\n * @param {Object} value\n * @return {Query} this\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/method/cursor.collation/#cursor.collation\n * @api public\n */\n\nQuery.prototype.collation = function(value) {\n  if (this.options == null) {\n    this.options = {};\n  }\n  this.options.collation = value;\n  return this;\n};\n\n/**\n * Thunk around findOne()\n *\n * @param {Function} [callback]\n * @see findOne http://docs.mongodb.org/manual/reference/method/db.collection.findOne/\n * @api private\n */\n\nQuery.prototype._findOne = function(callback) {\n  this._castConditions();\n\n  if (this.error()) {\n    return callback(this.error());\n  }\n\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n\n  var options = this._mongooseOptions;\n  var projection = this._fieldsForExec();\n  var userProvidedFields = this._userProvidedFields || {};\n  var _this = this;\n\n  // don't pass in the conditions because we already merged them in\n  Query.base.findOne.call(_this, {}, function(err, doc) {\n    if (err) {\n      return callback(err);\n    }\n    if (!doc) {\n      return callback(null, null);\n    }\n\n    if (!options.populate) {\n      return !!options.lean === true\n        ? callback(null, doc)\n        : completeOne(_this.model, doc, null, {}, projection, userProvidedFields, null, callback);\n    }\n\n    var pop = helpers.preparePopulationOptionsMQ(_this, options);\n    pop.__noPromise = true;\n    _this.model.populate(doc, pop, function(err, doc) {\n      if (err) {\n        return callback(err);\n      }\n      return !!options.lean === true\n        ? callback(null, doc)\n        : completeOne(_this.model, doc, null, {}, projection, userProvidedFields, pop, callback);\n    });\n  });\n};\n\n/**\n * Declares the query a findOne operation. When executed, the first found document is passed to the callback.\n *\n * Passing a `callback` executes the query. The result of the query is a single document.\n *\n * * *Note:* `conditions` is optional, and if `conditions` is null or undefined,\n * mongoose will send an empty `findOne` command to MongoDB, which will return\n * an arbitrary document. If you're querying by `_id`, use `Model.findById()`\n * instead.\n *\n * This function triggers the following middleware.\n *\n * - `findOne()`\n *\n * ####Example\n *\n *     var query  = Kitten.where({ color: 'white' });\n *     query.findOne(function (err, kitten) {\n *       if (err) return handleError(err);\n *       if (kitten) {\n *         // doc may be null if no document matched\n *       }\n *     });\n *\n * @param {Object} [filter] mongodb selector\n * @param {Object} [projection] optional fields to return\n * @param {Object} [options] see [`setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback] optional params are (error, document)\n * @return {Query} this\n * @see findOne http://docs.mongodb.org/manual/reference/method/db.collection.findOne/\n * @see Query.select #query_Query-select\n * @api public\n */\n\nQuery.prototype.findOne = function(conditions, projection, options, callback) {\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = null;\n    projection = null;\n    options = null;\n  } else if (typeof projection === 'function') {\n    callback = projection;\n    options = null;\n    projection = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  // make sure we don't send in the whole Document to merge()\n  conditions = utils.toObject(conditions);\n\n  this.op = 'findOne';\n\n  if (options) {\n    this.setOptions(options);\n  }\n\n  if (projection) {\n    this.select(projection);\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (conditions != null) {\n    this.error(new ObjectParameterError(conditions, 'filter', 'findOne'));\n  }\n\n  if (!callback) {\n    // already merged in the conditions, don't need to send them in.\n    return Query.base.findOne.call(this);\n  }\n\n  this._findOne(callback);\n\n  return this;\n};\n\n/**\n * Thunk around count()\n *\n * @param {Function} [callback]\n * @see count http://docs.mongodb.org/manual/reference/method/db.collection.count/\n * @api private\n */\n\nQuery.prototype._count = function(callback) {\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    this.error(err);\n  }\n\n  if (this.error()) {\n    return callback(this.error());\n  }\n\n  var conds = this._conditions;\n  var options = this._optionsForExec();\n\n  this._collection.count(conds, options, utils.tick(callback));\n};\n\n/**\n * Specifying this query as a `count` query.\n *\n * Passing a `callback` executes the query.\n *\n * This function triggers the following middleware.\n *\n * - `count()`\n *\n * ####Example:\n *\n *     var countQuery = model.where({ 'color': 'black' }).count();\n *\n *     query.count({ color: 'black' }).count(callback)\n *\n *     query.count({ color: 'black' }, callback)\n *\n *     query.where('color', 'black').count(function (err, count) {\n *       if (err) return handleError(err);\n *       console.log('there are %d kittens', count);\n *     })\n *\n * @param {Object} [criteria] mongodb selector\n * @param {Function} [callback] optional params are (error, count)\n * @return {Query} this\n * @see count http://docs.mongodb.org/manual/reference/method/db.collection.count/\n * @api public\n */\n\nQuery.prototype.count = function(conditions, callback) {\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = undefined;\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  this.op = 'count';\n  if (!callback) {\n    return this;\n  }\n\n  this._count(callback);\n\n  return this;\n};\n\n/**\n * Declares or executes a distict() operation.\n *\n * Passing a `callback` executes the query.\n *\n * This function does not trigger any middleware.\n *\n * ####Example\n *\n *     distinct(field, conditions, callback)\n *     distinct(field, conditions)\n *     distinct(field, callback)\n *     distinct(field)\n *     distinct(callback)\n *     distinct()\n *\n * @param {String} [field]\n * @param {Object|Query} [filter]\n * @param {Function} [callback] optional params are (error, arr)\n * @return {Query} this\n * @see distinct http://docs.mongodb.org/manual/reference/method/db.collection.distinct/\n * @api public\n */\n\nQuery.prototype.distinct = function(field, conditions, callback) {\n  if (!callback) {\n    if (typeof conditions === 'function') {\n      callback = conditions;\n      conditions = undefined;\n    } else if (typeof field === 'function') {\n      callback = field;\n      field = undefined;\n      conditions = undefined;\n    }\n  }\n\n  conditions = utils.toObject(conditions);\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (conditions != null) {\n    this.error(new ObjectParameterError(conditions, 'filter', 'distinct'));\n  }\n\n  if (callback != null) {\n    this._castConditions();\n\n    if (this.error() != null) {\n      callback(this.error());\n      return this;\n    }\n  }\n\n  return Query.base.distinct.call(this, {}, field, callback);\n};\n\n/**\n * Sets the sort order\n *\n * If an object is passed, values allowed are `asc`, `desc`, `ascending`, `descending`, `1`, and `-1`.\n *\n * If a string is passed, it must be a space delimited list of path names. The\n * sort order of each path is ascending unless the path name is prefixed with `-`\n * which will be treated as descending.\n *\n * ####Example\n *\n *     // sort by \"field\" ascending and \"test\" descending\n *     query.sort({ field: 'asc', test: -1 });\n *\n *     // equivalent\n *     query.sort('field -test');\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|String} arg\n * @return {Query} this\n * @see cursor.sort http://docs.mongodb.org/manual/reference/method/cursor.sort/\n * @api public\n */\n\nQuery.prototype.sort = function(arg) {\n  if (arguments.length > 1) {\n    throw new Error('sort() only takes 1 Argument');\n  }\n\n  return Query.base.sort.call(this, arg);\n};\n\n/**\n * Declare and/or execute this query as a remove() operation.\n *\n * This function does not trigger any middleware\n *\n * ####Example\n *\n *     Model.remove({ artist: 'Anne Murray' }, callback)\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback, you must first call `remove()` and then execute it by using the `exec()` method.\n *\n *     // not executed\n *     var query = Model.find().remove({ name: 'Anne Murray' })\n *\n *     // executed\n *     query.remove({ name: 'Anne Murray' }, callback)\n *     query.remove({ name: 'Anne Murray' }).remove(callback)\n *\n *     // executed without a callback\n *     query.exec()\n *\n *     // summary\n *     query.remove(conds, fn); // executes\n *     query.remove(conds)\n *     query.remove(fn) // executes\n *     query.remove()\n *\n * @param {Object|Query} [filter] mongodb selector\n * @param {Function} [callback] optional params are (error, writeOpResult)\n * @return {Query} this\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see remove http://docs.mongodb.org/manual/reference/method/db.collection.remove/\n * @api public\n */\n\nQuery.prototype.remove = function(filter, callback) {\n  if (typeof filter === 'function') {\n    callback = filter;\n    filter = null;\n  }\n\n  filter = utils.toObject(filter);\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (filter != null) {\n    this.error(new ObjectParameterError(filter, 'filter', 'remove'));\n  }\n\n  if (!callback) {\n    return Query.base.remove.call(this);\n  }\n\n  return this._remove(callback);\n};\n\n/*!\n * ignore\n */\n\nQuery.prototype._remove = function(callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return this;\n  }\n\n  return Query.base.remove.call(this, helpers.handleWriteOpResult(callback));\n};\n\n/**\n * Declare and/or execute this query as a `deleteOne()` operation. Works like\n * remove, except it deletes at most one document regardless of the `single`\n * option.\n *\n * This function does not trigger any middleware.\n *\n * ####Example\n *\n *     Character.deleteOne({ name: 'Eddard Stark' }, callback)\n *     Character.deleteOne({ name: 'Eddard Stark' }).then(next)\n *\n * @param {Object|Query} [filter] mongodb selector\n * @param {Function} [callback] optional params are (error, writeOpResult)\n * @return {Query} this\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see remove http://docs.mongodb.org/manual/reference/method/db.collection.remove/\n * @api public\n */\n\nQuery.prototype.deleteOne = function(filter, callback) {\n  if (typeof filter === 'function') {\n    callback = filter;\n    filter = null;\n  }\n\n  filter = utils.toObject(filter);\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (filter != null) {\n    this.error(new ObjectParameterError(filter, 'filter', 'deleteOne'));\n  }\n\n  if (!callback) {\n    return Query.base.deleteOne.call(this);\n  }\n\n  return this._deleteOne.call(this, callback);\n};\n\n/*!\n * ignore\n */\n\nQuery.prototype._deleteOne = function(callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return this;\n  }\n\n  return Query.base.deleteOne.call(this, helpers.handleWriteOpResult(callback));\n};\n\n/**\n * Declare and/or execute this query as a `deleteMany()` operation. Works like\n * remove, except it deletes _every_ document that matches `criteria` in the\n * collection, regardless of the value of `single`.\n *\n * This function does not trigger any middleware\n *\n * ####Example\n *\n *     Character.deleteMany({ name: /Stark/, age: { $gte: 18 } }, callback)\n *     Character.deleteMany({ name: /Stark/, age: { $gte: 18 } }).then(next)\n *\n * @param {Object|Query} [filter] mongodb selector\n * @param {Function} [callback] optional params are (error, writeOpResult)\n * @return {Query} this\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @see remove http://docs.mongodb.org/manual/reference/method/db.collection.remove/\n * @api public\n */\n\nQuery.prototype.deleteMany = function(filter, callback) {\n  if (typeof filter === 'function') {\n    callback = filter;\n    filter = null;\n  }\n\n  filter = utils.toObject(filter);\n\n  if (mquery.canMerge(filter)) {\n    this.merge(filter);\n\n    prepareDiscriminatorCriteria(this);\n  } else if (filter != null) {\n    this.error(new ObjectParameterError(filter, 'filter', 'deleteMany'));\n  }\n\n  if (!callback) {\n    return Query.base.deleteMany.call(this);\n  }\n\n  return this._deleteMany.call(this, callback);\n};\n\n/*!\n * ignore\n */\n\nQuery.prototype._deleteMany = function(callback) {\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return this;\n  }\n\n  return Query.base.deleteMany.call(this, helpers.handleWriteOpResult(callback));\n};\n\n/*!\n * hydrates a document\n *\n * @param {Model} model\n * @param {Document} doc\n * @param {Object} res 3rd parameter to callback\n * @param {Object} fields\n * @param {Query} self\n * @param {Array} [pop] array of paths used in population\n * @param {Function} callback\n */\n\nfunction completeOne(model, doc, res, options, fields, userProvidedFields, pop, callback) {\n  var opts = pop ?\n    {populated: pop}\n    : undefined;\n\n  var casted = helpers.createModel(model, doc, fields, userProvidedFields);\n  try {\n    casted.init(doc, opts, _init);\n  } catch (error) {\n    _init(error);\n  }\n\n  function _init(err) {\n    if (err) {\n      return process.nextTick(() => callback(err));\n    }\n\n    if (options.rawResult) {\n      res.value = casted;\n      return process.nextTick(() => callback(null, res));\n    }\n    process.nextTick(() => callback(null, casted));\n  }\n}\n\n/*!\n * If the model is a discriminator type and not root, then add the key & value to the criteria.\n */\n\nfunction prepareDiscriminatorCriteria(query) {\n  if (!query || !query.model || !query.model.schema) {\n    return;\n  }\n\n  var schema = query.model.schema;\n\n  if (schema && schema.discriminatorMapping && !schema.discriminatorMapping.isRoot) {\n    query._conditions[schema.discriminatorMapping.key] = schema.discriminatorMapping.value;\n  }\n}\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) update command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any) to the callback. The query executes immediately if `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndUpdate()`\n *\n * ####Available options\n *\n * - `new`: bool - if true, return the modified document rather than the original. defaults to false (changed in 4.0)\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\n * - `fields`: {Object|String} - Field selection. Equivalent to `.select(fields).findOneAndUpdate()`\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\n * - `setDefaultsOnInsert`: if this and `upsert` are true, mongoose will apply the [defaults](http://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created. This option only works on MongoDB >= 2.4 because it relies on [MongoDB's `$setOnInsert` operator](https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/).\n * - `rawResult`: if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * - `context` (string) if set to 'query' and `runValidators` is on, `this` will refer to the query in custom validator functions that update validation runs. Does nothing if `runValidators` is false.\n *\n * ####Callback Signature\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * ####Examples\n *\n *     query.findOneAndUpdate(conditions, update, options, callback) // executes\n *     query.findOneAndUpdate(conditions, update, options)  // returns Query\n *     query.findOneAndUpdate(conditions, update, callback) // executes\n *     query.findOneAndUpdate(conditions, update)           // returns Query\n *     query.findOneAndUpdate(update, callback)             // returns Query\n *     query.findOneAndUpdate(update)                       // returns Query\n *     query.findOneAndUpdate(callback)                     // executes\n *     query.findOneAndUpdate()                             // returns Query\n *\n * @method findOneAndUpdate\n * @memberOf Query\n * @param {Object|Query} [query]\n * @param {Object} [doc]\n * @param {Object} [options]\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](http://mongoosejs.com/docs/api.html#query_Query-lean).\n * @param {Function} [callback] optional params are (error, doc), _unless_ `rawResult` is used, in which case params are (error, writeOpResult)\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOneAndUpdate = function(criteria, doc, options, callback) {\n  this.op = 'findOneAndUpdate';\n  this._validate();\n\n  switch (arguments.length) {\n    case 3:\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 2:\n      if (typeof doc === 'function') {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      options = undefined;\n      break;\n    case 1:\n      if (typeof criteria === 'function') {\n        callback = criteria;\n        criteria = options = doc = undefined;\n      } else {\n        doc = criteria;\n        criteria = options = undefined;\n      }\n  }\n\n  if (mquery.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  // apply doc\n  if (doc) {\n    this._mergeUpdate(doc);\n  }\n\n  if (options) {\n    options = utils.clone(options);\n    if (options.projection) {\n      this.select(options.projection);\n      delete options.projection;\n    }\n    if (options.fields) {\n      this.select(options.fields);\n      delete options.fields;\n    }\n\n    this.setOptions(options);\n  }\n\n  if (!callback) {\n    return this;\n  }\n\n  return this._findOneAndUpdate(callback);\n};\n\n/*!\n * Thunk around findOneAndUpdate()\n *\n * @param {Function} [callback]\n * @api private\n */\n\nQuery.prototype._findOneAndUpdate = function(callback) {\n  if (this.error() != null) {\n    return callback(this.error());\n  }\n\n  this._findAndModify('update', callback);\n  return this;\n};\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) remove command.\n *\n * Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if `callback` is passed.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndRemove()`\n *\n * ####Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `rawResult`: if true, resolves to the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n *\n * ####Callback Signature\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * ####Examples\n *\n *     A.where().findOneAndRemove(conditions, options, callback) // executes\n *     A.where().findOneAndRemove(conditions, options)  // return Query\n *     A.where().findOneAndRemove(conditions, callback) // executes\n *     A.where().findOneAndRemove(conditions) // returns Query\n *     A.where().findOneAndRemove(callback)   // executes\n *     A.where().findOneAndRemove()           // returns Query\n *\n * @method findOneAndRemove\n * @memberOf Query\n * @param {Object} [conditions]\n * @param {Object} [options]\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Function} [callback] optional params are (error, document)\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nQuery.prototype.findOneAndRemove = function(conditions, options, callback) {\n  this.op = 'findOneAndRemove';\n  this._validate();\n\n  switch (arguments.length) {\n    case 2:\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 1:\n      if (typeof conditions === 'function') {\n        callback = conditions;\n        conditions = undefined;\n        options = undefined;\n      }\n      break;\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  options && this.setOptions(options);\n\n  if (!callback) {\n    return this;\n  }\n\n  this._findOneAndRemove(callback);\n\n  return this;\n};\n\n/*!\n * Thunk around findOneAndRemove()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\nQuery.prototype._findOneAndRemove = function(callback) {\n  if (this.error() != null) {\n    return callback(this.error());\n  }\n\n  Query.base.findOneAndRemove.call(this, callback);\n};\n\n/*!\n * Override mquery.prototype._findAndModify to provide casting etc.\n *\n * @param {String} type - either \"remove\" or \"update\"\n * @param {Function} callback\n * @api private\n */\n\nQuery.prototype._findAndModify = function(type, callback) {\n  if (typeof callback !== 'function') {\n    throw new Error('Expected callback in _findAndModify');\n  }\n\n  var model = this.model;\n  var schema = model.schema;\n  var _this = this;\n  var castedQuery;\n  var castedDoc = this._update;\n  var fields;\n  var opts;\n  var doValidate;\n\n  castedQuery = castQuery(this);\n  if (castedQuery instanceof Error) {\n    return callback(castedQuery);\n  }\n\n  opts = this._optionsForExec(model);\n\n  if ('strict' in opts) {\n    this._mongooseOptions.strict = opts.strict;\n  }\n\n  var isOverwriting = this.options.overwrite && !hasDollarKeys(castedDoc);\n  if (isOverwriting) {\n    castedDoc = new this.model(castedDoc, null, true);\n  }\n\n  if (type === 'remove') {\n    opts.remove = true;\n  } else {\n    if (!('new' in opts)) {\n      opts.new = false;\n    }\n    if (!('upsert' in opts)) {\n      opts.upsert = false;\n    }\n    if (opts.upsert || opts['new']) {\n      opts.remove = false;\n    }\n\n    if (isOverwriting) {\n      doValidate = function(callback) {\n        castedDoc.validate(callback);\n      };\n    } else {\n      castedDoc = castDoc(this, opts.overwrite);\n      castedDoc = setDefaultsOnInsert(this._conditions, schema, castedDoc, opts);\n      if (!castedDoc) {\n        if (opts.upsert) {\n          // still need to do the upsert to empty doc\n          var doc = utils.clone(castedQuery);\n          delete doc._id;\n          castedDoc = {$set: doc};\n        } else {\n          return this.findOne(callback);\n        }\n      } else if (castedDoc instanceof Error) {\n        return callback(castedDoc);\n      } else {\n        // In order to make MongoDB 2.6 happy (see\n        // https://jira.mongodb.org/browse/SERVER-12266 and related issues)\n        // if we have an actual update document but $set is empty, junk the $set.\n        if (castedDoc.$set && Object.keys(castedDoc.$set).length === 0) {\n          delete castedDoc.$set;\n        }\n      }\n\n      doValidate = updateValidators(this, schema, castedDoc, opts);\n    }\n  }\n\n  this._applyPaths();\n  var userProvidedFields = this._userProvidedFields || {};\n\n  var options = this._mongooseOptions;\n\n  if (this._fields) {\n    fields = utils.clone(this._fields);\n    opts.fields = this._castFields(fields);\n    if (opts.fields instanceof Error) {\n      return callback(opts.fields);\n    }\n  }\n\n  if (opts.sort) convertSortToArray(opts);\n\n  var cb = function(err, doc, res) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (!doc || (utils.isObject(doc) && Object.keys(doc).length === 0)) {\n      if (opts.rawResult) {\n        return callback(null, res);\n      }\n      return callback(null, null);\n    }\n\n    if (!options.populate) {\n      if (!!options.lean === true) {\n        return _completeOneLean(doc, res, opts, callback);\n      }\n      return completeOne(_this.model, doc, res, opts, fields, userProvidedFields, null, callback);\n    }\n\n    var pop = helpers.preparePopulationOptionsMQ(_this, options);\n    pop.__noPromise = true;\n    _this.model.populate(doc, pop, function(err, doc) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (!!options.lean === true) {\n        return _completeOneLean(doc, res, opts, callback);\n      }\n      return completeOne(_this.model, doc, res, opts, fields, userProvidedFields, pop, callback);\n    });\n  };\n\n  var _callback;\n\n  var useFindAndModify = true;\n  var base = _this.model && _this.model.base;\n  if ('useFindAndModify' in base.options) {\n    useFindAndModify = base.get('useFindAndModify');\n  }\n  if ('useFindAndModify' in options) {\n    useFindAndModify = options.useFindAndModify;\n  }\n  if (useFindAndModify === false) {\n    // Bypass mquery\n    var collection = _this._collection.collection;\n    if ('new' in opts) {\n      opts.returnOriginal = !opts['new'];\n      delete opts['new'];\n    }\n    if ('fields' in opts) {\n      opts.projection = opts.fields;\n      delete opts.fields;\n    }\n\n    if (type === 'remove') {\n      collection.findOneAndDelete(castedQuery, opts, utils.tick(function(error, res) {\n        return cb(error, res ? res.value : res, res);\n      }));\n\n      return this;\n    }\n\n    if (opts.runValidators && doValidate) {\n      _callback = function(error) {\n        if (error) {\n          return callback(error);\n        }\n        if (castedDoc && castedDoc.toBSON) {\n          castedDoc = castedDoc.toBSON();\n        }\n        collection.findOneAndUpdate(castedQuery, castedDoc, opts, utils.tick(function(error, res) {\n          return cb(error, res ? res.value : res, res);\n        }));\n      };\n\n      try {\n        doValidate(_callback);\n      } catch (error) {\n        callback(error);\n      }\n    } else {\n      if (castedDoc && castedDoc.toBSON) {\n        castedDoc = castedDoc.toBSON();\n      }\n      collection.findOneAndUpdate(castedQuery, castedDoc, opts, utils.tick(function(error, res) {\n        return cb(error, res ? res.value : res, res);\n      }));\n    }\n\n    return this;\n  }\n\n  if (opts.runValidators && doValidate) {\n    _callback = function(error) {\n      if (error) {\n        return callback(error);\n      }\n      if (castedDoc && castedDoc.toBSON) {\n        castedDoc = castedDoc.toBSON();\n      }\n      _this._collection.findAndModify(castedQuery, castedDoc, opts, utils.tick(function(error, res) {\n        return cb(error, res ? res.value : res, res);\n      }));\n    };\n\n    try {\n      doValidate(_callback);\n    } catch (error) {\n      callback(error);\n    }\n  } else {\n    if (castedDoc && castedDoc.toBSON) {\n      castedDoc = castedDoc.toBSON();\n    }\n    this._collection.findAndModify(castedQuery, castedDoc, opts, utils.tick(function(error, res) {\n      return cb(error, res ? res.value : res, res);\n    }));\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _completeOneLean(doc, res, opts, callback) {\n  if (opts.rawResult) {\n    return callback(null, res);\n  }\n  return callback(null, doc);\n}\n\n/*!\n * Override mquery.prototype._mergeUpdate to handle mongoose objects in\n * updates.\n *\n * @param {Object} doc\n * @api private\n */\n\nQuery.prototype._mergeUpdate = function(doc) {\n  if (!this._update) this._update = {};\n  if (doc instanceof Query) {\n    if (doc._update) {\n      utils.mergeClone(this._update, doc._update);\n    }\n  } else {\n    utils.mergeClone(this._update, doc);\n  }\n};\n\n/*!\n * The mongodb driver 1.3.23 only supports the nested array sort\n * syntax. We must convert it or sorting findAndModify will not work.\n */\n\nfunction convertSortToArray(opts) {\n  if (Array.isArray(opts.sort)) {\n    return;\n  }\n  if (!utils.isObject(opts.sort)) {\n    return;\n  }\n\n  var sort = [];\n\n  for (var key in opts.sort) {\n    if (utils.object.hasOwnProperty(opts.sort, key)) {\n      sort.push([key, opts.sort[key]]);\n    }\n  }\n\n  opts.sort = sort;\n}\n\n/*!\n * ignore\n */\n\nfunction _updateThunk(op, callback) {\n  var schema = this.model.schema;\n  var doValidate;\n  var _this = this;\n\n  this._castConditions();\n\n  if (this.error() != null) {\n    callback(this.error());\n    return this;\n  }\n\n  var castedQuery = this._conditions;\n  var castedDoc;\n  var options = this._optionsForExec(this.model);\n\n  this._update = utils.clone(this._update, options);\n  var isOverwriting = this.options.overwrite && !hasDollarKeys(this._update);\n  if (isOverwriting) {\n    castedDoc = new this.model(this._update, null, true);\n  } else {\n    castedDoc = castDoc(this, options.overwrite);\n\n    if (castedDoc instanceof Error) {\n      callback(castedDoc);\n      return this;\n    }\n\n    if (castedDoc == null || Object.keys(castedDoc).length === 0) {\n      callback(null, 0);\n      return this;\n    }\n\n    castedDoc = setDefaultsOnInsert(this._conditions, this.model.schema,\n      castedDoc, options);\n  }\n\n  if (this.options.runValidators) {\n    if (isOverwriting) {\n      doValidate = function(callback) {\n        castedDoc.validate(callback);\n      };\n    } else {\n      doValidate = updateValidators(this, schema, castedDoc, options);\n    }\n    var _callback = function(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (castedDoc.toBSON) {\n        castedDoc = castedDoc.toBSON();\n      }\n      _this._collection[op](castedQuery, castedDoc, options, callback);\n    };\n    try {\n      doValidate(_callback);\n    } catch (err) {\n      process.nextTick(function() {\n        callback(err);\n      });\n    }\n    return this;\n  }\n\n  if (castedDoc.toBSON) {\n    castedDoc = castedDoc.toBSON();\n  }\n\n  this._collection[op](castedQuery, castedDoc, options, callback);\n  return this;\n}\n\n/*!\n * Internal thunk for .update()\n *\n * @param {Function} callback\n * @see Model.update #model_Model.update\n * @api private\n */\nQuery.prototype._execUpdate = function(callback) {\n  return _updateThunk.call(this, 'update', callback);\n};\n\n/*!\n * Internal thunk for .updateMany()\n *\n * @param {Function} callback\n * @see Model.update #model_Model.update\n * @api private\n */\nQuery.prototype._updateMany = function(callback) {\n  return _updateThunk.call(this, 'updateMany', callback);\n};\n\n/*!\n * Internal thunk for .updateOne()\n *\n * @param {Function} callback\n * @see Model.update #model_Model.update\n * @api private\n */\nQuery.prototype._updateOne = function(callback) {\n  return _updateThunk.call(this, 'updateOne', callback);\n};\n\n/*!\n * Internal thunk for .replaceOne()\n *\n * @param {Function} callback\n * @see Model.replaceOne #model_Model.replaceOne\n * @api private\n */\nQuery.prototype._replaceOne = function(callback) {\n  return _updateThunk.call(this, 'replaceOne', callback);\n};\n\n/**\n * Declare and/or execute this query as an update() operation.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * This function triggers the following middleware.\n *\n * - `update()`\n *\n * ####Example\n *\n *     Model.where({ _id: id }).update({ title: 'words' })\n *\n *     // becomes\n *\n *     Model.where({ _id: id }).update({ $set: { title: 'words' }})\n *\n * ####Valid options:\n *\n *  - `safe` (boolean) safe mode (defaults to value set in schema (true))\n *  - `upsert` (boolean) whether to create the doc if it doesn't match (false)\n *  - `multi` (boolean) whether multiple documents should be updated (false)\n *  - `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\n *  - `setDefaultsOnInsert`: if this and `upsert` are true, mongoose will apply the [defaults](http://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created. This option only works on MongoDB >= 2.4 because it relies on [MongoDB's `$setOnInsert` operator](https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/).\n *  - `strict` (boolean) overrides the `strict` option for this update\n *  - `overwrite` (boolean) disables update-only mode, allowing you to overwrite the doc (false)\n *  - `context` (string) if set to 'query' and `runValidators` is on, `this` will refer to the query in custom validator functions that update validation runs. Does nothing if `runValidators` is false.\n *\n * ####Note\n *\n * Passing an empty object `{}` as the doc will result in a no-op unless the `overwrite` option is passed. Without the `overwrite` option set, the update operation will be ignored and the callback executed without sending the command to MongoDB so as to prevent accidently overwritting documents in the collection.\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback, we must first call update() and then execute it by using the `exec()` method.\n *\n *     var q = Model.where({ _id: id });\n *     q.update({ $set: { name: 'bob' }}).update(); // not executed\n *\n *     q.update({ $set: { name: 'bob' }}).exec(); // executed\n *\n *     // keys that are not $atomic ops become $set.\n *     // this executes the same command as the previous example.\n *     q.update({ name: 'bob' }).exec();\n *\n *     // overwriting with empty docs\n *     var q = Model.where({ _id: id }).setOptions({ overwrite: true })\n *     q.update({ }, callback); // executes\n *\n *     // multi update with overwrite to empty doc\n *     var q = Model.where({ _id: id });\n *     q.setOptions({ multi: true, overwrite: true })\n *     q.update({ });\n *     q.update(callback); // executed\n *\n *     // multi updates\n *     Model.where()\n *          .update({ name: /^match/ }, { $set: { arr: [] }}, { multi: true }, callback)\n *\n *     // more multi updates\n *     Model.where()\n *          .setOptions({ multi: true })\n *          .update({ $set: { arr: [] }}, callback)\n *\n *     // single update by default\n *     Model.where({ email: 'address@example.com' })\n *          .update({ $inc: { counter: 1 }}, callback)\n *\n * API summary\n *\n *     update(criteria, doc, options, cb) // executes\n *     update(criteria, doc, options)\n *     update(criteria, doc, cb) // executes\n *     update(criteria, doc)\n *     update(doc, cb) // executes\n *     update(doc)\n *     update(cb) // executes\n *     update(true) // executes\n *     update()\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Function} [callback] optional, params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @api public\n */\n\nQuery.prototype.update = function(conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  return _update(this, 'update', conditions, doc, options, callback);\n};\n\n/**\n * Declare and/or execute this query as an updateMany() operation. Same as\n * `update()`, except MongoDB will update _all_ documents that match\n * `criteria` (as opposed to just the first one) regardless of the value of\n * the `multi` option.\n *\n * **Note** updateMany will _not_ fire update middleware. Use `pre('updateMany')`\n * and `post('updateMany')` instead.\n *\n * This function triggers the following middleware.\n *\n * - `updateMany()`\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Function} [callback] optional params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @api public\n */\n\nQuery.prototype.updateMany = function(conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  return _update(this, 'updateMany', conditions, doc, options, callback);\n};\n\n/**\n * Declare and/or execute this query as an updateOne() operation. Same as\n * `update()`, except MongoDB will update _only_ the first document that\n * matches `criteria` regardless of the value of the `multi` option.\n *\n * **Note** updateOne will _not_ fire update middleware. Use `pre('updateOne')`\n * and `post('updateOne')` instead.\n *\n * This function triggers the following middleware.\n *\n * - `updateOne()`\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\n * @param {Function} [callback] params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @api public\n */\n\nQuery.prototype.updateOne = function(conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  return _update(this, 'updateOne', conditions, doc, options, callback);\n};\n\n/**\n * Declare and/or execute this query as a replaceOne() operation. Same as\n * `update()`, except MongoDB will replace the existing document and will\n * not accept any atomic operators (`$set`, etc.)\n *\n * **Note** replaceOne will _not_ fire update middleware. Use `pre('replaceOne')`\n * and `post('replaceOne')` instead.\n *\n * This function triggers the following middleware.\n *\n * - `replaceOne()`\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback] optional params are (error, writeOpResult)\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\n * @api public\n */\n\nQuery.prototype.replaceOne = function(conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  this.setOptions({ overwrite: true });\n  return _update(this, 'replaceOne', conditions, doc, options, callback);\n};\n\n/*!\n * Internal helper for update, updateMany, updateOne, replaceOne\n */\n\nfunction _update(query, op, filter, doc, options, callback) {\n  // make sure we don't send in the whole Document to merge()\n  query.op = op;\n  filter = utils.toObject(filter);\n  doc = doc || {};\n\n  var oldCb = callback;\n  if (oldCb) {\n    if (typeof oldCb === 'function') {\n      callback = function(error, result) {\n        oldCb(error, result ? result.result : {ok: 0, n: 0, nModified: 0});\n      };\n    } else {\n      throw new Error('Invalid callback() argument.');\n    }\n  }\n\n  // strict is an option used in the update checking, make sure it gets set\n  if (options) {\n    if ('strict' in options) {\n      query._mongooseOptions.strict = options.strict;\n    }\n  }\n\n  if (!(filter instanceof Query) &&\n      filter != null &&\n      filter.toString() !== '[object Object]') {\n    query.error(new ObjectParameterError(filter, 'filter', op));\n  } else {\n    query.merge(filter);\n  }\n\n  if (utils.isObject(options)) {\n    query.setOptions(options);\n  }\n\n  query._mergeUpdate(doc);\n\n  // Hooks\n  if (callback) {\n    if (op === 'update') {\n      query._execUpdate(callback);\n      return query;\n    }\n    query['_' + op](callback);\n    return query;\n  }\n\n  return Query.base[op].call(query, filter, doc, options, callback);\n}\n\n/**\n * Executes the query\n *\n * ####Examples:\n *\n *     var promise = query.exec();\n *     var promise = query.exec('update');\n *\n *     query.exec(callback);\n *     query.exec('find', callback);\n *\n * @param {String|Function} [operation]\n * @param {Function} [callback] optional params depend on the function being called\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.exec = function exec(op, callback) {\n  var _this = this;\n\n  if (typeof op === 'function') {\n    callback = op;\n    op = null;\n  } else if (typeof op === 'string') {\n    this.op = op;\n  }\n\n  if (callback != null) {\n    callback = this.model.$wrapCallback(callback);\n  }\n\n  return utils.promiseOrCallback(callback, (cb) => {\n    if (!_this.op) {\n      cb();\n      return;\n    }\n\n    this[this.op].call(this, (error, res) => {\n      if (error) {\n        cb(error);\n        return;\n      }\n      cb(null, res);\n    });\n  });\n};\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n *\n * @param {Function} [resolve]\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.then = function(resolve, reject) {\n  return this.exec().then(resolve, reject);\n};\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n * Like `.then()`, but only takes a rejection handler.\n *\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.catch = function(reject) {\n  return this.exec().then(null, reject);\n};\n\n/*!\n * Casts obj for an update command.\n *\n * @param {Object} obj\n * @return {Object} obj after casting its values\n * @api private\n */\n\nQuery.prototype._castUpdate = function _castUpdate(obj, overwrite) {\n  var strict;\n  if ('strict' in this._mongooseOptions) {\n    strict = this._mongooseOptions.strict;\n  } else if (this.schema && this.schema.options) {\n    strict = this.schema.options.strict;\n  } else {\n    strict = true;\n  }\n\n  var omitUndefined = false;\n  if ('omitUndefined' in this._mongooseOptions) {\n    omitUndefined = this._mongooseOptions.omitUndefined;\n  }\n\n  return castUpdate(this.schema, obj, {\n    overwrite: overwrite,\n    strict: strict,\n    omitUndefined\n  }, this);\n};\n\n/*!\n * castQuery\n * @api private\n */\n\nfunction castQuery(query) {\n  try {\n    return query.cast(query.model);\n  } catch (err) {\n    return err;\n  }\n}\n\n/*!\n * castDoc\n * @api private\n */\n\nfunction castDoc(query, overwrite) {\n  try {\n    return query._castUpdate(query._update, overwrite);\n  } catch (err) {\n    return err;\n  }\n}\n\n/**\n * Specifies paths which should be populated with other documents.\n *\n * ####Example:\n *\n *     Kitten.findOne().populate('owner').exec(function (err, kitten) {\n *       console.log(kitten.owner.name) // Max\n *     })\n *\n *     Kitten.find().populate({\n *         path: 'owner'\n *       , select: 'name'\n *       , match: { color: 'black' }\n *       , options: { sort: { name: -1 }}\n *     }).exec(function (err, kittens) {\n *       console.log(kittens[0].owner.name) // Zoopa\n *     })\n *\n *     // alternatively\n *     Kitten.find().populate('owner', 'name', null, {sort: { name: -1 }}).exec(function (err, kittens) {\n *       console.log(kittens[0].owner.name) // Zoopa\n *     })\n *\n * Paths are populated after the query executes and a response is received. A separate query is then executed for each path specified for population. After a response for each query has also been returned, the results are passed to the callback.\n *\n * @param {Object|String} path either the path to populate or an object specifying all parameters\n * @param {Object|String} [select] Field selection for the population query\n * @param {Model} [model] The model you wish to use for population. If not specified, populate will look up the model by the name in the Schema's `ref` field.\n * @param {Object} [match] Conditions for the population query\n * @param {Object} [options] Options for the population query (sort, etc)\n * @see population ./populate.html\n * @see Query#select #query_Query-select\n * @see Model.populate #model_Model.populate\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.populate = function() {\n  if (arguments.length === 0) {\n    return this;\n  }\n\n  var i;\n\n  var res = utils.populate.apply(null, arguments);\n\n  // Propagate readPreference from parent query, unless one already specified\n  if (this.options && this.options.readPreference != null) {\n    for (i = 0; i < res.length; ++i) {\n      if (!res[i].options || res[i].options.readPreference == null) {\n        res[i].options = res[i].options || {};\n        res[i].options.readPreference = this.options.readPreference;\n      }\n    }\n  }\n\n  var opts = this._mongooseOptions;\n\n  if (!utils.isObject(opts.populate)) {\n    opts.populate = {};\n  }\n\n  var pop = opts.populate;\n\n  for (i = 0; i < res.length; ++i) {\n    var path = res[i].path;\n    if (pop[path] && pop[path].populate && res[i].populate) {\n      res[i].populate = pop[path].populate.concat(res[i].populate);\n    }\n    pop[res[i].path] = res[i];\n  }\n\n  return this;\n};\n\n/**\n * Casts this query to the schema of `model`\n *\n * ####Note\n *\n * If `obj` is present, it is cast instead of this query.\n *\n * @param {Model} model\n * @param {Object} [obj]\n * @return {Object}\n * @api public\n */\n\nQuery.prototype.cast = function(model, obj) {\n  obj || (obj = this._conditions);\n\n  try {\n    return cast(model.schema, obj, {\n      upsert: this.options && this.options.upsert,\n      strict: (this.options && 'strict' in this.options) ?\n        this.options.strict :\n        (model.schema.options && model.schema.options.strict),\n      strictQuery: (this.options && this.options.strictQuery) ||\n        (model.schema.options && model.schema.options.strictQuery)\n    }, this);\n  } catch (err) {\n    // CastError, assign model\n    if (typeof err.setModel === 'function') {\n      err.setModel(model);\n    }\n    throw err;\n  }\n};\n\n/**\n * Casts selected field arguments for field selection with mongo 2.2\n *\n *     query.select({ ids: { $elemMatch: { $in: [hexString] }})\n *\n * @param {Object} fields\n * @see https://github.com/Automattic/mongoose/issues/1091\n * @see http://docs.mongodb.org/manual/reference/projection/elemMatch/\n * @api private\n */\n\nQuery.prototype._castFields = function _castFields(fields) {\n  var selected,\n      elemMatchKeys,\n      keys,\n      key,\n      out,\n      i;\n\n  if (fields) {\n    keys = Object.keys(fields);\n    elemMatchKeys = [];\n    i = keys.length;\n\n    // collect $elemMatch args\n    while (i--) {\n      key = keys[i];\n      if (fields[key].$elemMatch) {\n        selected || (selected = {});\n        selected[key] = fields[key];\n        elemMatchKeys.push(key);\n      }\n    }\n  }\n\n  if (selected) {\n    // they passed $elemMatch, cast em\n    try {\n      out = this.cast(this.model, selected);\n    } catch (err) {\n      return err;\n    }\n\n    // apply the casted field args\n    i = elemMatchKeys.length;\n    while (i--) {\n      key = elemMatchKeys[i];\n      fields[key] = out[key];\n    }\n  }\n\n  return fields;\n};\n\n/**\n * Applies schematype selected options to this query.\n * @api private\n */\n\nQuery.prototype._applyPaths = function applyPaths() {\n  this._fields = this._fields || {};\n  helpers.applyPaths(this._fields, this.model.schema);\n  selectPopulatedFields(this);\n};\n\n/**\n * Returns a wrapper around a [mongodb driver cursor](http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html).\n * A QueryCursor exposes a Streams3 interface, as well as a `.next()` function.\n *\n * The `.cursor()` function triggers pre find hooks, but **not** post find hooks.\n *\n * ####Example\n *\n *     // There are 2 ways to use a cursor. First, as a stream:\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       on('data', function(doc) { console.log(doc); }).\n *       on('end', function() { console.log('Done!'); });\n *\n *     // Or you can use `.next()` to manually get the next doc in the stream.\n *     // `.next()` returns a promise, so you can use promises or callbacks.\n *     var cursor = Thing.find({ name: /^hello/ }).cursor();\n *     cursor.next(function(error, doc) {\n *       console.log(doc);\n *     });\n *\n *     // Because `.next()` returns a promise, you can use co\n *     // to easily iterate through all documents without loading them\n *     // all into memory.\n *     co(function*() {\n *       const cursor = Thing.find({ name: /^hello/ }).cursor();\n *       for (let doc = yield cursor.next(); doc != null; doc = yield cursor.next()) {\n *         console.log(doc);\n *       }\n *     });\n *\n * ####Valid options\n *\n *   - `transform`: optional function which accepts a mongoose document. The return value of the function will be emitted on `data` and returned by `.next()`.\n *\n * @return {QueryCursor}\n * @param {Object} [options]\n * @see QueryCursor\n * @api public\n */\n\nQuery.prototype.cursor = function cursor(opts) {\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n  this.setOptions({ fields: this._fieldsForExec() });\n  if (opts) {\n    this.setOptions(opts);\n  }\n\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    return (new QueryCursor(this, this.options))._markError(err);\n  }\n\n  return new QueryCursor(this, this.options);\n};\n\n// the rest of these are basically to support older Mongoose syntax with mquery\n\n/**\n * _DEPRECATED_ Alias of `maxScan`\n *\n * @deprecated\n * @see maxScan #query_Query-maxScan\n * @method maxscan\n * @memberOf Query\n */\n\nQuery.prototype.maxscan = Query.base.maxScan;\n\n/**\n * Sets the tailable option (for use with capped collections).\n *\n * ####Example\n *\n *     query.tailable() // true\n *     query.tailable(true)\n *     query.tailable(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Boolean} bool defaults to true\n * @param {Object} [opts] options to set\n * @param {Number} [opts.numberOfRetries] if cursor is exhausted, retry this many times before giving up\n * @param {Number} [opts.tailableRetryInterval] if cursor is exhausted, wait this many milliseconds before retrying\n * @see tailable http://docs.mongodb.org/manual/tutorial/create-tailable-cursor/\n * @api public\n */\n\nQuery.prototype.tailable = function(val, opts) {\n  // we need to support the tailable({ awaitdata : true }) as well as the\n  // tailable(true, {awaitdata :true}) syntax that mquery does not support\n  if (val && val.constructor.name === 'Object') {\n    opts = val;\n    val = true;\n  }\n\n  if (val === undefined) {\n    val = true;\n  }\n\n  if (opts && typeof opts === 'object') {\n    for (var key in opts) {\n      if (key === 'awaitdata') {\n        // For backwards compatibility\n        this.options[key] = !!opts[key];\n      } else {\n        this.options[key] = opts[key];\n      }\n    }\n  }\n\n  return Query.base.tailable.call(this, val);\n};\n\n/**\n * Declares an intersects query for `geometry()`.\n *\n * ####Example\n *\n *     query.where('path').intersects().geometry({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n *     query.where('path').intersects({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n * ####NOTE:\n *\n * **MUST** be used after `where()`.\n *\n * ####NOTE:\n *\n * In Mongoose 3.7, `intersects` changed from a getter to a function. If you need the old syntax, use [this](https://github.com/ebensing/mongoose-within).\n *\n * @method intersects\n * @memberOf Query\n * @param {Object} [arg]\n * @return {Query} this\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @see geoIntersects http://docs.mongodb.org/manual/reference/operator/geoIntersects/\n * @api public\n */\n\n/**\n * Specifies a `$geometry` condition\n *\n * ####Example\n *\n *     var polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\n *     query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })\n *\n *     // or\n *     var polyB = [[ 0, 0 ], [ 1, 1 ]]\n *     query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })\n *\n *     // or\n *     var polyC = [ 0, 0 ]\n *     query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })\n *\n *     // or\n *     query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })\n *\n * The argument is assigned to the most recent path passed to `where()`.\n *\n * ####NOTE:\n *\n * `geometry()` **must** come after either `intersects()` or `within()`.\n *\n * The `object` argument must contain `type` and `coordinates` properties.\n * - type {String}\n * - coordinates {Array}\n *\n * @method geometry\n * @memberOf Query\n * @param {Object} object Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.\n * @return {Query} this\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @see http://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * Specifies a `$near` or `$nearSphere` condition\n *\n * These operators return documents sorted by distance.\n *\n * ####Example\n *\n *     query.where('loc').near({ center: [10, 10] });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5 });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });\n *     query.near('loc', { center: [10, 10], maxDistance: 5 });\n *\n * @method near\n * @memberOf Query\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see $near http://docs.mongodb.org/manual/reference/operator/near/\n * @see $nearSphere http://docs.mongodb.org/manual/reference/operator/nearSphere/\n * @see $maxDistance http://docs.mongodb.org/manual/reference/operator/maxDistance/\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/*!\n * Overwriting mquery is needed to support a couple different near() forms found in older\n * versions of mongoose\n * near([1,1])\n * near(1,1)\n * near(field, [1,2])\n * near(field, 1, 2)\n * In addition to all of the normal forms supported by mquery\n */\n\nQuery.prototype.near = function() {\n  var params = [];\n  var sphere = this._mongooseOptions.nearSphere;\n\n  // TODO refactor\n\n  if (arguments.length === 1) {\n    if (Array.isArray(arguments[0])) {\n      params.push({center: arguments[0], spherical: sphere});\n    } else if (typeof arguments[0] === 'string') {\n      // just passing a path\n      params.push(arguments[0]);\n    } else if (utils.isObject(arguments[0])) {\n      if (typeof arguments[0].spherical !== 'boolean') {\n        arguments[0].spherical = sphere;\n      }\n      params.push(arguments[0]);\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else if (arguments.length === 2) {\n    if (typeof arguments[0] === 'number' && typeof arguments[1] === 'number') {\n      params.push({center: [arguments[0], arguments[1]], spherical: sphere});\n    } else if (typeof arguments[0] === 'string' && Array.isArray(arguments[1])) {\n      params.push(arguments[0]);\n      params.push({center: arguments[1], spherical: sphere});\n    } else if (typeof arguments[0] === 'string' && utils.isObject(arguments[1])) {\n      params.push(arguments[0]);\n      if (typeof arguments[1].spherical !== 'boolean') {\n        arguments[1].spherical = sphere;\n      }\n      params.push(arguments[1]);\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else if (arguments.length === 3) {\n    if (typeof arguments[0] === 'string' && typeof arguments[1] === 'number'\n        && typeof arguments[2] === 'number') {\n      params.push(arguments[0]);\n      params.push({center: [arguments[1], arguments[2]], spherical: sphere});\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else {\n    throw new TypeError('invalid argument');\n  }\n\n  return Query.base.near.apply(this, params);\n};\n\n/**\n * _DEPRECATED_ Specifies a `$nearSphere` condition\n *\n * ####Example\n *\n *     query.where('loc').nearSphere({ center: [10, 10], maxDistance: 5 });\n *\n * **Deprecated.** Use `query.near()` instead with the `spherical` option set to `true`.\n *\n * ####Example\n *\n *     query.where('loc').near({ center: [10, 10], spherical: true });\n *\n * @deprecated\n * @see near() #query_Query-near\n * @see $near http://docs.mongodb.org/manual/reference/operator/near/\n * @see $nearSphere http://docs.mongodb.org/manual/reference/operator/nearSphere/\n * @see $maxDistance http://docs.mongodb.org/manual/reference/operator/maxDistance/\n */\n\nQuery.prototype.nearSphere = function() {\n  this._mongooseOptions.nearSphere = true;\n  this.near.apply(this, arguments);\n  return this;\n};\n\n/**\n * Specifies a $polygon condition\n *\n * ####Example\n *\n *     query.where('loc').within().polygon([10,20], [13, 25], [7,15])\n *     query.polygon('loc', [10,20], [13, 25], [7,15])\n *\n * @method polygon\n * @memberOf Query\n * @param {String|Array} [path]\n * @param {Array|Object} [coordinatePairs...]\n * @return {Query} this\n * @see $polygon http://docs.mongodb.org/manual/reference/operator/polygon/\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * Specifies a $box condition\n *\n * ####Example\n *\n *     var lowerLeft = [40.73083, -73.99756]\n *     var upperRight= [40.741404,  -73.988135]\n *\n *     query.where('loc').within().box(lowerLeft, upperRight)\n *     query.box({ ll : lowerLeft, ur : upperRight })\n *\n * @method box\n * @memberOf Query\n * @see $box http://docs.mongodb.org/manual/reference/operator/box/\n * @see within() Query#within #query_Query-within\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @param {Object} val\n * @param [Array] Upper Right Coords\n * @return {Query} this\n * @api public\n */\n\n/*!\n * this is needed to support the mongoose syntax of:\n * box(field, { ll : [x,y], ur : [x2,y2] })\n * box({ ll : [x,y], ur : [x2,y2] })\n */\n\nQuery.prototype.box = function(ll, ur) {\n  if (!Array.isArray(ll) && utils.isObject(ll)) {\n    ur = ll.ur;\n    ll = ll.ll;\n  }\n  return Query.base.box.call(this, ll, ur);\n};\n\n/**\n * Specifies a $center or $centerSphere condition.\n *\n * ####Example\n *\n *     var area = { center: [50, 50], radius: 10, unique: true }\n *     query.where('loc').within().circle(area)\n *     // alternatively\n *     query.circle('loc', area);\n *\n *     // spherical calculations\n *     var area = { center: [50, 50], radius: 10, unique: true, spherical: true }\n *     query.where('loc').within().circle(area)\n *     // alternatively\n *     query.circle('loc', area);\n *\n * New in 3.7.0\n *\n * @method circle\n * @memberOf Query\n * @param {String} [path]\n * @param {Object} area\n * @return {Query} this\n * @see $center http://docs.mongodb.org/manual/reference/operator/center/\n * @see $centerSphere http://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @see $geoWithin http://docs.mongodb.org/manual/reference/operator/geoWithin/\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * _DEPRECATED_ Alias for [circle](#query_Query-circle)\n *\n * **Deprecated.** Use [circle](#query_Query-circle) instead.\n *\n * @deprecated\n * @method center\n * @memberOf Query\n * @api public\n */\n\nQuery.prototype.center = Query.base.circle;\n\n/**\n * _DEPRECATED_ Specifies a $centerSphere condition\n *\n * **Deprecated.** Use [circle](#query_Query-circle) instead.\n *\n * ####Example\n *\n *     var area = { center: [50, 50], radius: 10 };\n *     query.where('loc').within().centerSphere(area);\n *\n * @deprecated\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see $centerSphere http://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @api public\n */\n\nQuery.prototype.centerSphere = function() {\n  if (arguments[0] && arguments[0].constructor.name === 'Object') {\n    arguments[0].spherical = true;\n  }\n\n  if (arguments[1] && arguments[1].constructor.name === 'Object') {\n    arguments[1].spherical = true;\n  }\n\n  Query.base.circle.apply(this, arguments);\n};\n\n/**\n * Determines if field selection has been made.\n *\n * @method selected\n * @memberOf Query\n * @return {Boolean}\n * @api public\n */\n\n/**\n * Determines if inclusive field selection has been made.\n *\n *     query.selectedInclusively() // false\n *     query.select('name')\n *     query.selectedInclusively() // true\n *\n * @method selectedInclusively\n * @memberOf Query\n * @return {Boolean}\n * @api public\n */\n\nQuery.prototype.selectedInclusively = function selectedInclusively() {\n  return isInclusive(this._fields);\n};\n\n/**\n * Determines if exclusive field selection has been made.\n *\n *     query.selectedExclusively() // false\n *     query.select('-name')\n *     query.selectedExclusively() // true\n *     query.selectedInclusively() // false\n *\n * @method selectedExclusively\n * @memberOf Query\n * @return {Boolean}\n * @api public\n */\n\nQuery.prototype.selectedExclusively = function selectedExclusively() {\n  if (!this._fields) {\n    return false;\n  }\n\n  var keys = Object.keys(this._fields);\n  if (keys.length === 0) {\n    return false;\n  }\n\n  for (var i = 0; i < keys.length; ++i) {\n    var key = keys[i];\n    if (key === '_id') {\n      continue;\n    }\n    if (this._fields[key] === 0 || this._fields[key] === false) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/*!\n * Export\n */\n\nmodule.exports = Query;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/query.js\n// module id = 98\n// module chunks = 0","/*!\n * Module dependencies.\n */\n\nvar $exists = require('./operators/exists');\nvar $type = require('./operators/type');\nvar SchemaType = require('../schematype');\nvar CastError = SchemaType.CastError;\nvar Types = {\n  Array: SchemaArray,\n  Boolean: require('./boolean'),\n  Date: require('./date'),\n  Number: require('./number'),\n  String: require('./string'),\n  ObjectId: require('./objectid'),\n  Buffer: require('./buffer')\n};\nvar Mixed = require('./mixed');\nvar cast = require('../cast');\nvar get = require('lodash.get');\nvar util = require('util');\nvar utils = require('../utils');\nvar castToNumber = require('./operators/helpers').castToNumber;\nvar geospatial = require('./operators/geospatial');\nvar getDiscriminatorByValue = require('../queryhelpers').getDiscriminatorByValue;\n\nvar MongooseArray;\nvar EmbeddedDoc;\n\n/**\n * Array SchemaType constructor\n *\n * @param {String} key\n * @param {SchemaType} cast\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaArray(key, cast, options, schemaOptions) {\n  // lazy load\n  EmbeddedDoc || (EmbeddedDoc = require('../types').Embedded);\n\n  var typeKey = 'type';\n  if (schemaOptions && schemaOptions.typeKey) {\n    typeKey = schemaOptions.typeKey;\n  }\n\n  if (cast) {\n    var castOptions = {};\n\n    if (utils.getFunctionName(cast.constructor) === 'Object') {\n      if (cast[typeKey]) {\n        // support { type: Woot }\n        castOptions = utils.clone(cast); // do not alter user arguments\n        delete castOptions[typeKey];\n        cast = cast[typeKey];\n      } else {\n        cast = Mixed;\n      }\n    }\n\n    // support { type: 'String' }\n    var name = typeof cast === 'string'\n      ? cast\n      : utils.getFunctionName(cast);\n\n    var caster = name in Types\n      ? Types[name]\n      : cast;\n\n    this.casterConstructor = caster;\n    if (typeof caster === 'function' && !caster.$isArraySubdocument) {\n      this.caster = new caster(null, castOptions);\n    } else {\n      this.caster = caster;\n    }\n\n    if (!(this.caster instanceof EmbeddedDoc)) {\n      this.caster.path = key;\n    }\n  }\n\n  this.$isMongooseArray = true;\n\n  SchemaType.call(this, key, options, 'Array');\n\n  var defaultArr;\n  var fn;\n\n  if (this.defaultValue != null) {\n    defaultArr = this.defaultValue;\n    fn = typeof defaultArr === 'function';\n  }\n\n  if (!('defaultValue' in this) || this.defaultValue !== void 0) {\n    var defaultFn = function() {\n      var arr = [];\n      if (fn) {\n        arr = defaultArr();\n      } else if (defaultArr != null) {\n        arr = arr.concat(defaultArr);\n      }\n      // Leave it up to `cast()` to convert the array\n      return arr;\n    };\n    defaultFn.$runBeforeSetters = true;\n    this.default(defaultFn);\n  }\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaArray.schemaName = 'Array';\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaArray.prototype = Object.create(SchemaType.prototype);\nSchemaArray.prototype.constructor = SchemaArray;\n\n/**\n * Adds an enum validator if this is an array of strings. Equivalent to\n * `SchemaString.prototype.enum()`\n *\n * @param {String|Object} [args...] enumeration values\n * @return {SchemaType} this\n */\n\nSchemaArray.prototype.enum = function() {\n  const instance = get(this, 'caster.instance');\n  if (instance !== 'String') {\n    throw new Error('`enum` can only be set on an array of strings, not ' + instance);\n  }\n  this.caster.enum.apply(this.caster, arguments);\n  return this;\n};\n\n/**\n * Check if the given value satisfies a required validator. The given value\n * must be not null nor undefined, and have a positive length.\n *\n * @param {Any} value\n * @return {Boolean}\n * @api public\n */\n\nSchemaArray.prototype.checkRequired = function(value) {\n  return Array.isArray(value);\n};\n\n/**\n * Overrides the getters application for the population special-case\n *\n * @param {Object} value\n * @param {Object} scope\n * @api private\n */\n\nSchemaArray.prototype.applyGetters = function(value, scope) {\n  if (this.caster.options && this.caster.options.ref) {\n    // means the object id was populated\n    return value;\n  }\n\n  return SchemaType.prototype.applyGetters.call(this, value, scope);\n};\n\n/**\n * Casts values for set().\n *\n * @param {Object} value\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init whether this is an initialization cast\n * @api private\n */\n\nSchemaArray.prototype.cast = function(value, doc, init) {\n  // lazy load\n  MongooseArray || (MongooseArray = require('../types').Array);\n\n  if (Array.isArray(value)) {\n    if (!value.length && doc) {\n      var indexes = doc.schema.indexedPaths();\n\n      for (var i = 0, l = indexes.length; i < l; ++i) {\n        var pathIndex = indexes[i][0][this.path];\n        if (pathIndex === '2dsphere' || pathIndex === '2d') {\n          return;\n        }\n      }\n    }\n\n    if (!(value && value.isMongooseArray)) {\n      value = new MongooseArray(value, this.path, doc);\n    } else if (value && value.isMongooseArray) {\n      // We need to create a new array, otherwise change tracking will\n      // update the old doc (gh-4449)\n      value = new MongooseArray(value, this.path, doc);\n    }\n\n    if (this.caster) {\n      try {\n        for (i = 0, l = value.length; i < l; i++) {\n          value[i] = this.caster.cast(value[i], doc, init);\n        }\n      } catch (e) {\n        // rethrow\n        throw new CastError('[' + e.kind + ']', util.inspect(value), this.path, e);\n      }\n    }\n\n    return value;\n  }\n  // gh-2442: if we're loading this from the db and its not an array, mark\n  // the whole array as modified.\n  if (!!doc && !!init) {\n    doc.markModified(this.path);\n  }\n  return this.cast([value], doc, init);\n};\n\n/**\n * Casts values for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaArray.prototype.castForQuery = function($conditional, value) {\n  var handler,\n      val;\n\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with Array.');\n    }\n\n    val = handler.call(this, value);\n  } else {\n    val = $conditional;\n    var Constructor = this.casterConstructor;\n\n    if (val &&\n        Constructor.discriminators &&\n        Constructor.schema &&\n        Constructor.schema.options &&\n        Constructor.schema.options.discriminatorKey) {\n      if (typeof val[Constructor.schema.options.discriminatorKey] === 'string' &&\n          Constructor.discriminators[val[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[val[Constructor.schema.options.discriminatorKey]];\n      } else {\n        var constructorByValue = getDiscriminatorByValue(Constructor, val[Constructor.schema.options.discriminatorKey]);\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n\n    var proto = this.casterConstructor.prototype;\n    var method = proto && (proto.castForQuery || proto.cast);\n    if (!method && Constructor.castForQuery) {\n      method = Constructor.castForQuery;\n    }\n    var caster = this.caster;\n\n    if (Array.isArray(val)) {\n      val = val.map(function(v) {\n        if (utils.isObject(v) && v.$elemMatch) {\n          return v;\n        }\n        if (method) {\n          v = method.call(caster, v);\n          return v;\n        }\n        if (v != null) {\n          v = new Constructor(v);\n          return v;\n        }\n        return v;\n      });\n    } else if (method) {\n      val = method.call(caster, val);\n    } else if (val != null) {\n      val = new Constructor(val);\n    }\n  }\n\n  return val;\n};\n\nfunction cast$all(val) {\n  if (!Array.isArray(val)) {\n    val = [val];\n  }\n\n  val = val.map(function(v) {\n    if (utils.isObject(v)) {\n      var o = {};\n      o[this.path] = v;\n      return cast(this.casterConstructor.schema, o)[this.path];\n    }\n    return v;\n  }, this);\n\n  return this.castForQuery(val);\n}\n\nfunction cast$elemMatch(val) {\n  var keys = Object.keys(val);\n  var numKeys = keys.length;\n  var key;\n  var value;\n  for (var i = 0; i < numKeys; ++i) {\n    key = keys[i];\n    value = val[key];\n    if (key.indexOf('$') === 0 && value) {\n      val[key] = this.castForQuery(key, value);\n    }\n  }\n\n  return cast(this.casterConstructor.schema, val);\n}\n\nvar handle = SchemaArray.prototype.$conditionalHandlers = {};\n\nhandle.$all = cast$all;\nhandle.$options = String;\nhandle.$elemMatch = cast$elemMatch;\nhandle.$geoIntersects = geospatial.cast$geoIntersects;\nhandle.$or = handle.$and = function(val) {\n  if (!Array.isArray(val)) {\n    throw new TypeError('conditional $or/$and require array');\n  }\n\n  var ret = [];\n  for (var i = 0; i < val.length; ++i) {\n    ret.push(cast(this.casterConstructor.schema, val[i]));\n  }\n\n  return ret;\n};\n\nhandle.$near =\nhandle.$nearSphere = geospatial.cast$near;\n\nhandle.$within =\nhandle.$geoWithin = geospatial.cast$within;\n\nhandle.$size =\nhandle.$minDistance =\nhandle.$maxDistance = castToNumber;\n\nhandle.$exists = $exists;\nhandle.$type = $type;\n\nhandle.$eq =\nhandle.$gt =\nhandle.$gte =\nhandle.$in =\nhandle.$lt =\nhandle.$lte =\nhandle.$ne =\nhandle.$nin =\nhandle.$regex = SchemaArray.prototype.castForQuery;\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaArray;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/schema/array.js\n// module id = 99\n// module chunks = 0","/*!\n * Module requirements.\n */\n\nvar SchemaType = require('../schematype');\nvar CastError = SchemaType.CastError;\nvar handleBitwiseOperator = require('./operators/bitwise');\nvar MongooseError = require('../error');\nvar utils = require('../utils');\nvar Document;\n\n/**\n * Number SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaNumber(key, options) {\n  SchemaType.call(this, key, options, 'Number');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaNumber.schemaName = 'Number';\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaNumber.prototype = Object.create(SchemaType.prototype);\nSchemaNumber.prototype.constructor = SchemaNumber;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaNumber.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n  return typeof value === 'number' || value instanceof Number;\n};\n\n/**\n * Sets a minimum number validator.\n *\n * ####Example:\n *\n *     var s = new Schema({ n: { type: Number, min: 10 })\n *     var M = db.model('M', s)\n *     var m = new M({ n: 9 })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.n = 10;\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MIN} token which will be replaced with the invalid value\n *     var min = [10, 'The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).'];\n *     var schema = new Schema({ n: { type: Number, min: min })\n *     var M = mongoose.model('Measurement', schema);\n *     var s= new M({ n: 4 });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) is beneath the limit (10).\n *     })\n *\n * @param {Number} value minimum number\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaNumber.prototype.min = function(value, message) {\n  if (this.minValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.minValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    var msg = message || MongooseError.messages.Number.min;\n    msg = msg.replace(/{MIN}/, value);\n    this.validators.push({\n      validator: this.minValidator = function(v) {\n        return v == null || v >= value;\n      },\n      message: msg,\n      type: 'min',\n      min: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a maximum number validator.\n *\n * ####Example:\n *\n *     var s = new Schema({ n: { type: Number, max: 10 })\n *     var M = db.model('M', s)\n *     var m = new M({ n: 11 })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.n = 10;\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAX} token which will be replaced with the invalid value\n *     var max = [10, 'The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).'];\n *     var schema = new Schema({ n: { type: Number, max: max })\n *     var M = mongoose.model('Measurement', schema);\n *     var s= new M({ n: 4 });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) exceeds the limit (10).\n *     })\n *\n * @param {Number} maximum number\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaNumber.prototype.max = function(value, message) {\n  if (this.maxValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.maxValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    var msg = message || MongooseError.messages.Number.max;\n    msg = msg.replace(/{MAX}/, value);\n    this.validators.push({\n      validator: this.maxValidator = function(v) {\n        return v == null || v <= value;\n      },\n      message: msg,\n      type: 'max',\n      max: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Casts to number\n *\n * @param {Object} value value to cast\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init\n * @api private\n */\n\nSchemaNumber.prototype.cast = function(value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n\n    if (value === null || value === undefined) {\n      return value;\n    }\n\n    // lazy load\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    }\n\n    // setting a populated path\n    if (typeof value === 'number') {\n      return value;\n    } else if (Buffer.isBuffer(value) || !utils.isObject(value)) {\n      throw new CastError('number', value, this.path);\n    }\n\n    // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n    var path = doc.$__fullPath(this.path);\n    var owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    var pop = owner.populated(path, true);\n    var ret = new pop.options.model(value);\n    ret.$__.wasPopulated = true;\n    return ret;\n  }\n\n  var val = value && typeof value._id !== 'undefined' ?\n    value._id : // documents\n    value;\n\n  if (!isNaN(val)) {\n    if (val === null) {\n      return val;\n    }\n    if (val === '') {\n      return null;\n    }\n    if (typeof val === 'string' || typeof val === 'boolean') {\n      val = Number(val);\n    }\n    if (val instanceof Number) {\n      return val;\n    }\n    if (typeof val === 'number') {\n      return val;\n    }\n    if (val.toString && !Array.isArray(val) && val.toString() == Number(val)) {\n      return new Number(val);\n    }\n  }\n\n  throw new CastError('number', value, this.path);\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nfunction handleArray(val) {\n  var _this = this;\n  if (!Array.isArray(val)) {\n    return [this.cast(val)];\n  }\n  return val.map(function(m) {\n    return _this.cast(m);\n  });\n}\n\nSchemaNumber.prototype.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\n      $bitsAllClear: handleBitwiseOperator,\n      $bitsAnyClear: handleBitwiseOperator,\n      $bitsAllSet: handleBitwiseOperator,\n      $bitsAnySet: handleBitwiseOperator,\n      $gt: handleSingle,\n      $gte: handleSingle,\n      $lt: handleSingle,\n      $lte: handleSingle,\n      $mod: handleArray\n    });\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaNumber.prototype.castForQuery = function($conditional, val) {\n  var handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with Number.');\n    }\n    return handler.call(this, val);\n  }\n  val = this._castForQuery($conditional);\n  return val;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaNumber;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/schema/number.js\n// module id = 100\n// module chunks = 0","/* eslint no-empty: 1 */\n\n/*!\n * Module dependencies.\n */\n\nvar SchemaType = require('../schematype'),\n    CastError = SchemaType.CastError,\n    oid = require('../types/objectid'),\n    utils = require('../utils'),\n    Document;\n\n/**\n * ObjectId SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction ObjectId(key, options) {\n  var isKeyHexStr = typeof key === 'string' && key.length === 24 && /^[a-f0-9]+$/i.test(key);\n  var suppressWarning = options && options.suppressWarning;\n  if ((isKeyHexStr || typeof key === 'undefined') && !suppressWarning) {\n    console.warn('mongoose: To create a new ObjectId please try ' +\n      '`Mongoose.Types.ObjectId` instead of using ' +\n      '`Mongoose.Schema.ObjectId`. Set the `suppressWarning` option if ' +\n      'you\\'re trying to create a hex char path in your schema.');\n    console.trace();\n  }\n  SchemaType.call(this, key, options, 'ObjectID');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nObjectId.schemaName = 'ObjectId';\n\n/*!\n * Inherits from SchemaType.\n */\nObjectId.prototype = Object.create(SchemaType.prototype);\nObjectId.prototype.constructor = ObjectId;\n\n/**\n * Adds an auto-generated ObjectId default if turnOn is true.\n * @param {Boolean} turnOn auto generated ObjectId defaults\n * @api public\n * @return {SchemaType} this\n */\n\nObjectId.prototype.auto = function(turnOn) {\n  if (turnOn) {\n    this.default(defaultId);\n    this.set(resetId);\n  }\n\n  return this;\n};\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nObjectId.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n  return value instanceof oid;\n};\n\n/**\n * Casts to ObjectId\n *\n * @param {Object} value\n * @param {Object} doc\n * @param {Boolean} init whether this is an initialization cast\n * @api private\n */\n\nObjectId.prototype.cast = function(value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n\n    if (value === null || value === undefined) {\n      return value;\n    }\n\n    // lazy load\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    }\n\n    // setting a populated path\n    if (value instanceof oid) {\n      return value;\n    } else if ((value.constructor.name || '').toLowerCase() === 'objectid') {\n      return new oid(value.toHexString());\n    } else if (Buffer.isBuffer(value) || !utils.isObject(value)) {\n      throw new CastError('ObjectId', value, this.path);\n    }\n\n    // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n    var path = doc.$__fullPath(this.path);\n    var owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    var pop = owner.populated(path, true);\n    var ret = value;\n    if (!doc.$__.populated ||\n        !doc.$__.populated[path] ||\n        !doc.$__.populated[path].options ||\n        !doc.$__.populated[path].options.options ||\n        !doc.$__.populated[path].options.options.lean) {\n      ret = new pop.options.model(value);\n      ret.$__.wasPopulated = true;\n    }\n\n    return ret;\n  }\n\n  if (value === null || value === undefined) {\n    return value;\n  }\n\n  if (value instanceof oid) {\n    return value;\n  }\n\n  if (value._id) {\n    if (value._id instanceof oid) {\n      return value._id;\n    }\n    if (value._id.toString instanceof Function) {\n      try {\n        return new oid(value._id.toString());\n      } catch (e) {\n      }\n    }\n  }\n\n  if (value.toString instanceof Function) {\n    try {\n      return new oid(value.toString());\n    } catch (err) {\n      throw new CastError('ObjectId', value, this.path);\n    }\n  }\n\n  throw new CastError('ObjectId', value, this.path);\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nObjectId.prototype.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\n      $gt: handleSingle,\n      $gte: handleSingle,\n      $lt: handleSingle,\n      $lte: handleSingle\n    });\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [val]\n * @api private\n */\n\nObjectId.prototype.castForQuery = function($conditional, val) {\n  var handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with ObjectId.');\n    }\n    return handler.call(this, val);\n  }\n  return this._castForQuery($conditional);\n};\n\n/*!\n * ignore\n */\n\nfunction defaultId() {\n  return new oid();\n}\n\ndefaultId.$runBeforeSetters = true;\n\nfunction resetId(v) {\n  Document || (Document = require('./../document'));\n\n  if (this instanceof Document) {\n    if (v === void 0) {\n      var _v = new oid;\n      this.$__._id = _v;\n      return _v;\n    }\n\n    this.$__._id = v;\n  }\n\n  return v;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = ObjectId;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/schema/objectid.js\n// module id = 101\n// module chunks = 0","'use strict';\n\n/*!\n * ignore\n */\n\nmodule.exports = function(val) {\n  if (typeof val !== 'boolean') {\n    throw new Error('$exists parameter must be a boolean!');\n  }\n\n  return val;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/schema/operators/exists.js\n// module id = 102\n// module chunks = 0","'use strict';\n\nvar Document;\nvar utils = require('../../utils');\n\n/*!\n * exports\n */\n\nexports.compile = compile;\nexports.defineKey = defineKey;\n\n/*!\n * Compiles schemas.\n */\n\nfunction compile(tree, proto, prefix, options) {\n  Document = Document || require('../../document');\n  var keys = Object.keys(tree);\n  var i = keys.length;\n  var len = keys.length;\n  var limb;\n  var key;\n\n  for (i = 0; i < len; ++i) {\n    key = keys[i];\n    limb = tree[key];\n\n    defineKey(key,\n      ((utils.getFunctionName(limb.constructor) === 'Object'\n        && Object.keys(limb).length)\n        && (!limb[options.typeKey] || (options.typeKey === 'type' && limb.type.type))\n        ? limb\n        : null)\n      , proto\n      , prefix\n      , keys\n      , options);\n  }\n}\n\n/*!\n * Defines the accessor named prop on the incoming prototype.\n */\n\nfunction defineKey(prop, subprops, prototype, prefix, keys, options) {\n  Document = Document || require('../../document');\n  var path = (prefix ? prefix + '.' : '') + prop;\n  prefix = prefix || '';\n\n  if (subprops) {\n    Object.defineProperty(prototype, prop, {\n      enumerable: true,\n      configurable: true,\n      get: function() {\n        var _this = this;\n        if (!this.$__.getters) {\n          this.$__.getters = {};\n        }\n\n        if (!this.$__.getters[path]) {\n          var nested = Object.create(Document.prototype, getOwnPropertyDescriptors(this));\n\n          // save scope for nested getters/setters\n          if (!prefix) {\n            nested.$__.scope = this;\n          }\n          nested.$__.nestedPath = path;\n\n          Object.defineProperty(nested, 'schema', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: prototype.schema\n          });\n\n          Object.defineProperty(nested, 'toObject', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: function() {\n              return utils.clone(_this.get(path));\n            }\n          });\n\n          Object.defineProperty(nested, 'toJSON', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: function() {\n              return _this.get(path);\n            }\n          });\n\n          Object.defineProperty(nested, '$__isNested', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: true\n          });\n\n          compile(subprops, nested, path, options);\n          this.$__.getters[path] = nested;\n        }\n\n        return this.$__.getters[path];\n      },\n      set: function(v) {\n        if (v instanceof Document) {\n          v = v.toObject({ transform: false });\n        }\n        var doc = this.$__.scope || this;\n        return doc.$set(path, v);\n      }\n    });\n  } else {\n    Object.defineProperty(prototype, prop, {\n      enumerable: true,\n      configurable: true,\n      get: function() {\n        return this.get.call(this.$__.scope || this, path);\n      },\n      set: function(v) {\n        return this.$set.call(this.$__.scope || this, path, v);\n      }\n    });\n  }\n}\n\n// gets descriptors for all properties of `object`\n// makes all properties non-enumerable to match previous behavior to #2211\nfunction getOwnPropertyDescriptors(object) {\n  var result = {};\n\n  Object.getOwnPropertyNames(object).forEach(function(key) {\n    result[key] = Object.getOwnPropertyDescriptor(object, key);\n    // Assume these are schema paths, ignore them re: #5470\n    if (result[key].get) {\n      delete result[key];\n      return;\n    }\n    result[key].enumerable = ['isNew', '$__', 'errors', '_doc'].indexOf(key) === -1;\n  });\n\n  return result;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/services/document/compile.js\n// module id = 103\n// module chunks = 0","'use strict';\n\nvar defineKey = require('../document/compile').defineKey;\nvar utils = require('../../utils');\n\nvar CUSTOMIZABLE_DISCRIMINATOR_OPTIONS = {\n  toJSON: true,\n  toObject: true,\n  _id: true,\n  id: true\n};\n\n/*!\n * ignore\n */\n\nmodule.exports = function discriminator(model, name, schema, tiedValue) {\n  if (!(schema && schema.instanceOfSchema)) {\n    throw new Error('You must pass a valid discriminator Schema');\n  }\n\n  if (model.base && model.base.options.applyPluginsToDiscriminators) {\n    model.base._applyPlugins(schema);\n  }\n\n  if (model.schema.discriminatorMapping &&\n      !model.schema.discriminatorMapping.isRoot) {\n    throw new Error('Discriminator \"' + name +\n        '\" can only be a discriminator of the root model');\n  }\n\n  var key = model.schema.options.discriminatorKey;\n\n  var baseSchemaAddition = {};\n  baseSchemaAddition[key] = {\n    default: void 0,\n    select: true,\n    $skipDiscriminatorCheck: true\n  };\n  baseSchemaAddition[key][model.schema.options.typeKey] = String;\n  model.schema.add(baseSchemaAddition);\n  defineKey(key, null, model.prototype, null, [key], model.schema.options);\n\n  if (schema.path(key) && schema.path(key).options.$skipDiscriminatorCheck !== true) {\n    throw new Error('Discriminator \"' + name +\n        '\" cannot have field with name \"' + key + '\"');\n  }\n\n  var value = name;\n  if (typeof tiedValue == 'string' && tiedValue.length) {\n    value = tiedValue;\n  }\n\n  function merge(schema, baseSchema) {\n    if (baseSchema.paths._id &&\n        baseSchema.paths._id.options &&\n        !baseSchema.paths._id.options.auto) {\n      var originalSchema = schema;\n      utils.merge(schema, originalSchema);\n      delete schema.paths._id;\n      delete schema.tree._id;\n    }\n\n    // Find conflicting paths: if something is a path in the base schema\n    // and a nested path in the child schema, overwrite the base schema path.\n    // See gh-6076\n    var baseSchemaPaths = Object.keys(baseSchema.paths);\n    var conflictingPaths = [];\n    for (i = 0; i < baseSchemaPaths.length; ++i) {\n      if (schema.nested[baseSchemaPaths[i]]) {\n        conflictingPaths.push(baseSchemaPaths[i]);\n      }\n    }\n\n    utils.merge(schema, baseSchema, {\n      omit: { discriminators: true },\n      omitNested: conflictingPaths.reduce((cur, path) => {\n        cur['tree.' + path] = true;\n        return cur;\n      }, {})\n    });\n\n    // Clean up conflicting paths _after_ merging re: gh-6076\n    for (i = 0; i < conflictingPaths.length; ++i) {\n      delete schema.paths[conflictingPaths[i]];\n    }\n\n    var obj = {};\n    obj[key] = {\n      default: value,\n      select: true,\n      set: function(newName) {\n        if (newName === value) {\n          return value;\n        }\n        throw new Error('Can\\'t set discriminator key \"' + key + '\"');\n      },\n      $skipDiscriminatorCheck: true\n    };\n    obj[key][schema.options.typeKey] = String;\n    schema.add(obj);\n    schema.discriminatorMapping = {key: key, value: value, isRoot: false};\n\n    if (baseSchema.options.collection) {\n      schema.options.collection = baseSchema.options.collection;\n    }\n\n    var toJSON = schema.options.toJSON;\n    var toObject = schema.options.toObject;\n    var _id = schema.options._id;\n    var id = schema.options.id;\n\n    var keys = Object.keys(schema.options);\n    schema.options.discriminatorKey = baseSchema.options.discriminatorKey;\n\n    for (var i = 0; i < keys.length; ++i) {\n      var _key = keys[i];\n      if (!CUSTOMIZABLE_DISCRIMINATOR_OPTIONS[_key]) {\n        if (!utils.deepEqual(schema.options[_key], baseSchema.options[_key])) {\n          throw new Error('Can\\'t customize discriminator option ' + _key +\n              ' (can only modify ' +\n              Object.keys(CUSTOMIZABLE_DISCRIMINATOR_OPTIONS).join(', ') +\n              ')');\n        }\n      }\n    }\n\n    schema.options = utils.clone(baseSchema.options);\n    if (toJSON) schema.options.toJSON = toJSON;\n    if (toObject) schema.options.toObject = toObject;\n    if (typeof _id !== 'undefined') {\n      schema.options._id = _id;\n    }\n    schema.options.id = id;\n    schema.s.hooks = model.schema.s.hooks.merge(schema.s.hooks);\n\n    schema.plugins = Array.prototype.slice(baseSchema.plugins);\n    schema.callQueue = baseSchema.callQueue.concat(schema.callQueue);\n    schema._requiredpaths = undefined; // reset just in case Schema#requiredPaths() was called on either schema\n  }\n\n  // merges base schema into new discriminator schema and sets new type field.\n  merge(schema, model.schema);\n\n  if (!model.discriminators) {\n    model.discriminators = {};\n  }\n\n  if (!model.schema.discriminatorMapping) {\n    model.schema.discriminatorMapping = {key: key, value: null, isRoot: true};\n    model.schema.discriminators = {};\n  }\n\n  model.schema.discriminators[name] = schema;\n\n  if (model.discriminators[name]) {\n    throw new Error('Discriminator with name \"' + name + '\" already exists');\n  }\n\n  return schema;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/services/model/discriminator.js\n// module id = 104\n// module chunks = 0","/*!\n * Module dependencies.\n */\n\nconst EmbeddedDocument = require('./embedded');\nconst Document = require('../document');\nconst ObjectId = require('./objectid');\nconst cleanModifiedSubpaths = require('../services/document/cleanModifiedSubpaths');\nconst internalToObjectOptions = require('../options').internalToObjectOptions;\nconst utils = require('../utils');\n\nconst isMongooseObject = utils.isMongooseObject;\n\n/**\n * Mongoose Array constructor.\n *\n * ####NOTE:\n *\n * _Values always have to be passed to the constructor to initialize, otherwise `MongooseArray#push` will mark the array as modified._\n *\n * @param {Array} values\n * @param {String} path\n * @param {Document} doc parent document\n * @api private\n * @inherits Array\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseArray(values, path, doc) {\n  var arr = [].concat(values);\n\n  var keysMA = Object.keys(MongooseArray.mixin);\n  var numKeys = keysMA.length;\n  for (var i = 0; i < numKeys; ++i) {\n    arr[keysMA[i]] = MongooseArray.mixin[keysMA[i]];\n  }\n\n  arr._path = path;\n  arr.isMongooseArray = true;\n  arr.validators = [];\n  arr._atomics = {};\n  arr._schema = void 0;\n\n  // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n  if (doc && doc instanceof Document) {\n    arr._parent = doc;\n    arr._schema = doc.schema.path(path);\n  }\n\n  return arr;\n}\n\nMongooseArray.mixin = {\n  /*!\n   * ignore\n   */\n  toBSON: function() {\n    return this.toObject(internalToObjectOptions);\n  },\n\n  /**\n   * Stores a queue of atomic operations to perform\n   *\n   * @property _atomics\n   * @api private\n   */\n\n  _atomics: undefined,\n\n  /**\n   * Parent owner document\n   *\n   * @property _parent\n   * @api private\n   * @receiver MongooseArray\n   */\n\n  _parent: undefined,\n\n  /**\n   * Casts a member based on this arrays schema.\n   *\n   * @param {any} value\n   * @return value the casted value\n   * @method _cast\n   * @api private\n   * @receiver MongooseArray\n   */\n\n  _cast: function(value) {\n    var populated = false;\n    var Model;\n\n    if (this._parent) {\n      populated = this._parent.populated(this._path, true);\n    }\n\n    if (populated && value !== null && value !== undefined) {\n      // cast to the populated Models schema\n      Model = populated.options.model || populated.options.Model;\n\n      // only objects are permitted so we can safely assume that\n      // non-objects are to be interpreted as _id\n      if (Buffer.isBuffer(value) ||\n          value instanceof ObjectId || !utils.isObject(value)) {\n        value = {_id: value};\n      }\n\n      // gh-2399\n      // we should cast model only when it's not a discriminator\n      var isDisc = value.schema && value.schema.discriminatorMapping &&\n          value.schema.discriminatorMapping.key !== undefined;\n      if (!isDisc) {\n        value = new Model(value);\n      }\n      return this._schema.caster.applySetters(value, this._parent, true);\n    }\n\n    return this._schema.caster.applySetters(value, this._parent, false);\n  },\n\n  /**\n   * Marks this array as modified.\n   *\n   * If it bubbles up from an embedded document change, then it takes the following arguments (otherwise, takes 0 arguments)\n   *\n   * @param {EmbeddedDocument} embeddedDoc the embedded doc that invoked this method on the Array\n   * @param {String} embeddedPath the path which changed in the embeddedDoc\n   * @method _markModified\n   * @api private\n   * @receiver MongooseArray\n   */\n\n  _markModified: function(elem, embeddedPath) {\n    var parent = this._parent,\n        dirtyPath;\n\n    if (parent) {\n      dirtyPath = this._path;\n\n      if (arguments.length) {\n        if (embeddedPath != null) {\n          // an embedded doc bubbled up the change\n          dirtyPath = dirtyPath + '.' + this.indexOf(elem) + '.' + embeddedPath;\n        } else {\n          // directly set an index\n          dirtyPath = dirtyPath + '.' + elem;\n        }\n      }\n\n      parent.markModified(dirtyPath, arguments.length > 0 ? elem : parent);\n    }\n\n    return this;\n  },\n\n  /**\n   * Register an atomic operation with the parent.\n   *\n   * @param {Array} op operation\n   * @param {any} val\n   * @method _registerAtomic\n   * @api private\n   * @receiver MongooseArray\n   */\n\n  _registerAtomic: function(op, val) {\n    if (op === '$set') {\n      // $set takes precedence over all other ops.\n      // mark entire array modified.\n      this._atomics = {$set: val};\n      return this;\n    }\n\n    var atomics = this._atomics;\n\n    // reset pop/shift after save\n    if (op === '$pop' && !('$pop' in atomics)) {\n      var _this = this;\n      this._parent.once('save', function() {\n        _this._popped = _this._shifted = null;\n      });\n    }\n\n    // check for impossible $atomic combos (Mongo denies more than one\n    // $atomic op on a single path\n    if (this._atomics.$set ||\n        Object.keys(atomics).length && !(op in atomics)) {\n      // a different op was previously registered.\n      // save the entire thing.\n      this._atomics = {$set: this};\n      return this;\n    }\n\n    var selector;\n\n    if (op === '$pullAll' || op === '$addToSet') {\n      atomics[op] || (atomics[op] = []);\n      atomics[op] = atomics[op].concat(val);\n    } else if (op === '$pullDocs') {\n      var pullOp = atomics['$pull'] || (atomics['$pull'] = {});\n      if (val[0] instanceof EmbeddedDocument) {\n        selector = pullOp['$or'] || (pullOp['$or'] = []);\n        Array.prototype.push.apply(selector, val.map(function(v) {\n          return v.toObject({transform: false, virtuals: false});\n        }));\n      } else {\n        selector = pullOp['_id'] || (pullOp['_id'] = {$in: []});\n        selector['$in'] = selector['$in'].concat(val);\n      }\n    } else if (op === '$push') {\n      atomics.$push = atomics.$push || { $each: [] };\n      atomics.$push.$each = atomics.$push.$each.concat(val);\n    } else {\n      atomics[op] = val;\n    }\n\n    return this;\n  },\n\n  /**\n   * Depopulates stored atomic operation values as necessary for direct insertion to MongoDB.\n   *\n   * If no atomics exist, we return all array values after conversion.\n   *\n   * @return {Array}\n   * @method $__getAtomics\n   * @memberOf MongooseArray\n   * @api private\n   */\n\n  $__getAtomics: function() {\n    var ret = [];\n    var keys = Object.keys(this._atomics);\n    var i = keys.length;\n\n    const opts = Object.assign({}, internalToObjectOptions, { _isNested: true });\n\n    if (i === 0) {\n      ret[0] = ['$set', this.toObject(opts)];\n      return ret;\n    }\n\n    while (i--) {\n      var op = keys[i];\n      var val = this._atomics[op];\n\n      // the atomic values which are arrays are not MongooseArrays. we\n      // need to convert their elements as if they were MongooseArrays\n      // to handle populated arrays versus DocumentArrays properly.\n      if (isMongooseObject(val)) {\n        val = val.toObject(opts);\n      } else if (Array.isArray(val)) {\n        val = this.toObject.call(val, opts);\n      } else if (val != null && Array.isArray(val.$each)) {\n        val.$each = this.toObject.call(val.$each, opts);\n      } else if (val.valueOf) {\n        val = val.valueOf();\n      }\n\n      if (op === '$addToSet') {\n        val = {$each: val};\n      }\n\n      ret.push([op, val]);\n    }\n\n    return ret;\n  },\n\n  /**\n   * Returns the number of pending atomic operations to send to the db for this array.\n   *\n   * @api private\n   * @return {Number}\n   * @method hasAtomics\n   * @receiver MongooseArray\n   */\n\n  hasAtomics: function hasAtomics() {\n    if (!(this._atomics && this._atomics.constructor.name === 'Object')) {\n      return 0;\n    }\n\n    return Object.keys(this._atomics).length;\n  },\n\n  /**\n   * Internal helper for .map()\n   *\n   * @api private\n   * @return {Number}\n   * @method _mapCast\n   * @receiver MongooseArray\n   */\n  _mapCast: function(val, index) {\n    return this._cast(val, this.length + index);\n  },\n\n  /**\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method push\n   * @receiver MongooseArray\n   */\n\n  push: function() {\n    _checkManualPopulation(this, arguments);\n    var values = [].map.call(arguments, this._mapCast, this);\n    values = this._schema.applySetters(values, this._parent, undefined,\n      undefined, { skipDocumentArrayCast: true });\n    var ret = [].push.apply(this, values);\n\n    this._registerAtomic('$push', values);\n    this._markModified();\n    return ret;\n  },\n\n  /**\n   * Pushes items to the array non-atomically.\n   *\n   * ####NOTE:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @param {any} [args...]\n   * @api public\n   * @method nonAtomicPush\n   * @receiver MongooseArray\n   */\n\n  nonAtomicPush: function() {\n    var values = [].map.call(arguments, this._mapCast, this);\n    var ret = [].push.apply(this, values);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  },\n\n  /**\n   * Pops the array atomically at most one time per document `save()`.\n   *\n   * #### NOTE:\n   *\n   * _Calling this mulitple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      var popped = doc.array.$pop();\n   *      console.log(popped); // 3\n   *      console.log(doc.array); // [1,2]\n   *\n   *      // no affect\n   *      popped = doc.array.$pop();\n   *      console.log(doc.array); // [1,2]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $pop works again\n   *        popped = doc.array.$pop();\n   *        console.log(popped); // 2\n   *        console.log(doc.array); // [1]\n   *      })\n   *\n   * @api public\n   * @method $pop\n   * @memberOf MongooseArray\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\n   * @method $pop\n   * @receiver MongooseArray\n   */\n\n  $pop: function() {\n    this._registerAtomic('$pop', 1);\n    this._markModified();\n\n    // only allow popping once\n    if (this._popped) {\n      return;\n    }\n    this._popped = true;\n\n    return [].pop.call(this);\n  },\n\n  /**\n   * Wraps [`Array#pop`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/pop) with proper change tracking.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified which will pass the entire thing to $set potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @see MongooseArray#$pop #types_array_MongooseArray-%24pop\n   * @api public\n   * @method pop\n   * @receiver MongooseArray\n   */\n\n  pop: function() {\n    var ret = [].pop.call(this);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  },\n\n  /**\n   * Atomically shifts the array at most one time per document `save()`.\n   *\n   * ####NOTE:\n   *\n   * _Calling this mulitple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      var shifted = doc.array.$shift();\n   *      console.log(shifted); // 1\n   *      console.log(doc.array); // [2,3]\n   *\n   *      // no affect\n   *      shifted = doc.array.$shift();\n   *      console.log(doc.array); // [2,3]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $shift works again\n   *        shifted = doc.array.$shift();\n   *        console.log(shifted ); // 2\n   *        console.log(doc.array); // [3]\n   *      })\n   *\n   * @api public\n   * @memberOf MongooseArray\n   * @method $shift\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\n   */\n\n  $shift: function $shift() {\n    this._registerAtomic('$pop', -1);\n    this._markModified();\n\n    // only allow shifting once\n    if (this._shifted) {\n      return;\n    }\n    this._shifted = true;\n\n    return [].shift.call(this);\n  },\n\n  /**\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * ####Example:\n   *\n   *     doc.array = [2,3];\n   *     var res = doc.array.shift();\n   *     console.log(res) // 2\n   *     console.log(doc.array) // [3]\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method shift\n   * @receiver MongooseArray\n   */\n\n  shift: function() {\n    var ret = [].shift.call(this);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  },\n\n  /**\n   * Pulls items from the array atomically. Equality is determined by casting\n   * the provided value to an embedded document and comparing using\n   * [the `Document.equals()` function.](./api.html#document_Document-equals)\n   *\n   * ####Examples:\n   *\n   *     doc.array.pull(ObjectId)\n   *     doc.array.pull({ _id: 'someId' })\n   *     doc.array.pull(36)\n   *     doc.array.pull('tag 1', 'tag 2')\n   *\n   * To remove a document from a subdocument array we may pass an object with a matching `_id`.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull({ _id: 4815162342 }) // removed\n   *\n   * Or we may passing the _id directly and let mongoose take care of it.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull(4815162342); // works\n   *\n   * The first pull call will result in a atomic operation on the database, if pull is called repeatedly without saving the document, a $set operation is used on the complete array instead, overwriting possible changes that happened on the database in the meantime.\n   *\n   * @param {any} [args...]\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\n   * @api public\n   * @method pull\n   * @receiver MongooseArray\n   */\n\n  pull: function() {\n    var values = [].map.call(arguments, this._cast, this),\n        cur = this._parent.get(this._path),\n        i = cur.length,\n        mem;\n\n    while (i--) {\n      mem = cur[i];\n      if (mem instanceof Document) {\n        var some = values.some(function(v) {\n          return mem.equals(v);\n        });\n        if (some) {\n          [].splice.call(cur, i, 1);\n        }\n      } else if (~cur.indexOf.call(values, mem)) {\n        [].splice.call(cur, i, 1);\n      }\n    }\n\n    if (values[0] instanceof EmbeddedDocument) {\n      this._registerAtomic('$pullDocs', values.map(function(v) {\n        return v._id || v;\n      }));\n    } else {\n      this._registerAtomic('$pullAll', values);\n    }\n\n    this._markModified();\n\n    // Might have modified child paths and then pulled, like\n    // `doc.children[1].name = 'test';` followed by\n    // `doc.children.remove(doc.children[0]);`. In this case we fall back\n    // to a `$set` on the whole array. See #3511\n    if (cleanModifiedSubpaths(this._parent, this._path) > 0) {\n      this._registerAtomic('$set', this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method splice\n   * @receiver MongooseArray\n   */\n\n  splice: function splice() {\n    var ret;\n    var vals;\n    var i;\n\n    _checkManualPopulation(this, Array.prototype.slice.call(arguments, 2));\n\n    if (arguments.length) {\n      vals = [];\n      for (i = 0; i < arguments.length; ++i) {\n        vals[i] = i < 2\n          ? arguments[i]\n          : this._cast(arguments[i], arguments[0] + (i - 2));\n      }\n      ret = [].splice.apply(this, vals);\n      this._registerAtomic('$set', this);\n      this._markModified();\n    }\n\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#unshift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method unshift\n   * @receiver MongooseArray\n   */\n\n  unshift: function() {\n    _checkManualPopulation(this, arguments);\n\n    var values = [].map.call(arguments, this._cast, this);\n    values = this._schema.applySetters(values, this._parent);\n    [].unshift.apply(this, values);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return this.length;\n  },\n\n  /**\n   * Wraps [`Array#sort`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort) with proper change tracking.\n   *\n   * ####NOTE:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method sort\n   * @receiver MongooseArray\n   */\n\n  sort: function() {\n    var ret = [].sort.apply(this, arguments);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  },\n\n  /**\n   * Adds values to the array if not already present.\n   *\n   * ####Example:\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *     var added = doc.array.addToSet(4,5);\n   *     console.log(doc.array) // [2,3,4,5]\n   *     console.log(added)     // [5]\n   *\n   * @param {any} [args...]\n   * @return {Array} the values that were added\n   * @receiver MongooseArray\n   * @api public\n   * @method addToSet\n   */\n\n  addToSet: function addToSet() {\n    _checkManualPopulation(this, arguments);\n\n    var values = [].map.call(arguments, this._mapCast, this);\n    values = this._schema.applySetters(values, this._parent);\n    var added = [];\n    var type = '';\n    if (values[0] instanceof EmbeddedDocument) {\n      type = 'doc';\n    } else if (values[0] instanceof Date) {\n      type = 'date';\n    }\n\n    values.forEach(function(v) {\n      var found;\n      switch (type) {\n        case 'doc':\n          found = this.some(function(doc) {\n            return doc.equals(v);\n          });\n          break;\n        case 'date':\n          var val = +v;\n          found = this.some(function(d) {\n            return +d === val;\n          });\n          break;\n        default:\n          found = ~this.indexOf(v);\n      }\n\n      if (!found) {\n        [].push.call(this, v);\n        this._registerAtomic('$addToSet', v);\n        this._markModified();\n        [].push.call(added, v);\n      }\n    }, this);\n\n    return added;\n  },\n\n  /**\n   * Sets the casted `val` at index `i` and marks the array modified.\n   *\n   * ####Example:\n   *\n   *     // given documents based on the following\n   *     var Doc = mongoose.model('Doc', new Schema({ array: [Number] }));\n   *\n   *     var doc = new Doc({ array: [2,3,4] })\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *\n   *     doc.array.set(1,\"5\");\n   *     console.log(doc.array); // [2,5,4] // properly cast to number\n   *     doc.save() // the change is saved\n   *\n   *     // VS not using array#set\n   *     doc.array[1] = \"5\";\n   *     console.log(doc.array); // [2,\"5\",4] // no casting\n   *     doc.save() // change is not saved\n   *\n   * @return {Array} this\n   * @api public\n   * @method set\n   * @receiver MongooseArray\n   */\n\n  set: function set(i, val) {\n    var value = this._cast(val, i);\n    this[i] = value;\n    this._markModified(i);\n    return this;\n  },\n\n  /**\n   * Returns a native js Array.\n   *\n   * @param {Object} options\n   * @return {Array}\n   * @api public\n   * @method toObject\n   * @receiver MongooseArray\n   */\n\n  toObject: function(options) {\n    if (options && options.depopulate) {\n      options = utils.clone(options);\n      options._isNested = true;\n      return this.map(function(doc) {\n        return doc instanceof Document\n          ? doc.toObject(options)\n          : doc;\n      });\n    }\n\n    return this.slice();\n  },\n\n  /**\n   * Helper for console.log\n   *\n   * @api public\n   * @method inspect\n   * @receiver MongooseArray\n   */\n\n  inspect: function() {\n    return JSON.stringify(this);\n  },\n\n  /**\n   * Return the index of `obj` or `-1` if not found.\n   *\n   * @param {Object} obj the item to look for\n   * @return {Number}\n   * @api public\n   * @method indexOf\n   * @receiver MongooseArray\n   */\n\n  indexOf: function indexOf(obj) {\n    if (obj instanceof ObjectId) {\n      obj = obj.toString();\n    }\n    for (var i = 0, len = this.length; i < len; ++i) {\n      if (obj == this[i]) {\n        return i;\n      }\n    }\n    return -1;\n  }\n};\n\n/**\n * Alias of [pull](#types_array_MongooseArray-pull)\n *\n * @see MongooseArray#pull #types_array_MongooseArray-pull\n * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\n * @api public\n * @memberOf MongooseArray\n * @method remove\n */\n\nMongooseArray.mixin.remove = MongooseArray.mixin.pull;\n\n/*!\n * ignore\n */\n\nfunction _isAllSubdocs(docs, ref) {\n  if (!ref) {\n    return false;\n  }\n  for (var i = 0; i < docs.length; ++i) {\n    var arg = docs[i];\n    if (arg == null) {\n      return false;\n    }\n    var model = arg.constructor;\n    if (!(arg instanceof Document) ||\n      (model.modelName !== ref && model.baseModelName !== ref)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/*!\n * ignore\n */\n\nfunction _checkManualPopulation(arr, docs) {\n  var ref = arr._schema.caster.options && arr._schema.caster.options.ref;\n  if (arr.length === 0 &&\n      docs.length > 0) {\n    if (_isAllSubdocs(docs, ref)) {\n      arr._parent.populated(arr._path, [], { model: docs[0].constructor });\n    }\n  }\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = MongooseArray;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/types/array.js\n// module id = 105\n// module chunks = 0","/**\n * ObjectId type constructor\n *\n * ####Example\n *\n *     var id = new mongoose.Types.ObjectId;\n *\n * @constructor ObjectId\n */\n\nmodule.exports = require('../drivers').Decimal128;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/types/decimal128.js\n// module id = 106\n// module chunks = 0","\n/**\n * VirtualType constructor\n *\n * This is what mongoose uses to define virtual attributes via `Schema.prototype.virtual`.\n *\n * ####Example:\n *\n *     var fullname = schema.virtual('fullname');\n *     fullname instanceof mongoose.VirtualType // true\n *\n * @parma {Object} options\n * @api public\n */\n\nfunction VirtualType(options, name) {\n  this.path = name;\n  this.getters = [];\n  this.setters = [];\n  this.options = options || {};\n}\n\n/**\n * Defines a getter.\n *\n * ####Example:\n *\n *     var virtual = schema.virtual('fullname');\n *     virtual.get(function () {\n *       return this.name.first + ' ' + this.name.last;\n *     });\n *\n * @param {Function} fn\n * @return {VirtualType} this\n * @api public\n */\n\nVirtualType.prototype.get = function(fn) {\n  this.getters.push(fn);\n  return this;\n};\n\n/**\n * Defines a setter.\n *\n * ####Example:\n *\n *     var virtual = schema.virtual('fullname');\n *     virtual.set(function (v) {\n *       var parts = v.split(' ');\n *       this.name.first = parts[0];\n *       this.name.last = parts[1];\n *     });\n *\n * @param {Function} fn\n * @return {VirtualType} this\n * @api public\n */\n\nVirtualType.prototype.set = function(fn) {\n  this.setters.push(fn);\n  return this;\n};\n\n/**\n * Applies getters to `value` using optional `scope`.\n *\n * @param {Object} value\n * @param {Object} scope\n * @return {any} the value after applying all getters\n * @api public\n */\n\nVirtualType.prototype.applyGetters = function(value, scope) {\n  var v = value;\n  for (var l = this.getters.length - 1; l >= 0; l--) {\n    v = this.getters[l].call(scope, v, this);\n  }\n  return v;\n};\n\n/**\n * Applies setters to `value` using optional `scope`.\n *\n * @param {Object} value\n * @param {Object} scope\n * @return {any} the value after applying all setters\n * @api public\n */\n\nVirtualType.prototype.applySetters = function(value, scope) {\n  var v = value;\n  for (var l = this.setters.length - 1; l >= 0; l--) {\n    v = this.setters[l].call(scope, v, this);\n  }\n  return v;\n};\n\n/*!\n * exports\n */\n\nmodule.exports = VirtualType;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/virtualtype.js\n// module id = 107\n// module chunks = 0","'use strict';\n\n/**\n * Dependencies\n */\n\nvar slice = require('sliced')\nvar assert = require('assert')\nvar util = require('util')\nvar utils = require('./utils')\nvar debug = require('debug')('mquery');\n\n/**\n * Query constructor used for building queries.\n *\n * ####Example:\n *\n *     var query = new Query({ name: 'mquery' });\n *     query.setOptions({ collection: moduleCollection })\n *     query.where('age').gte(21).exec(callback);\n *\n * @param {Object} [criteria]\n * @param {Object} [options]\n * @api public\n */\n\nfunction Query (criteria, options) {\n  if (!(this instanceof Query))\n    return new Query(criteria, options);\n\n  var proto = this.constructor.prototype;\n\n  this.op = proto.op || undefined;\n\n  this.options = {};\n  this.setOptions(proto.options);\n\n  this._conditions = proto._conditions\n    ? utils.clone(proto._conditions)\n    : {};\n\n  this._fields = proto._fields\n    ? utils.clone(proto._fields)\n    : undefined;\n\n  this._update = proto._update\n    ? utils.clone(proto._update)\n    : undefined;\n\n  this._path = proto._path || undefined;\n  this._distinct = proto._distinct || undefined;\n  this._collection = proto._collection || undefined;\n  this._traceFunction = proto._traceFunction || undefined;\n\n  if (options) {\n    this.setOptions(options);\n  }\n\n  if (criteria) {\n    if (criteria.find && criteria.remove && criteria.update) {\n      // quack quack!\n      this.collection(criteria);\n    } else {\n      this.find(criteria);\n    }\n  }\n}\n\n/**\n * This is a parameter that the user can set which determines if mquery\n * uses $within or $geoWithin for queries. It defaults to true which\n * means $geoWithin will be used. If using MongoDB < 2.4 you should\n * set this to false.\n *\n * @api public\n * @property use$geoWithin\n */\n\nvar $withinCmd = '$geoWithin';\nObject.defineProperty(Query, 'use$geoWithin', {\n    get: function ( ) { return $withinCmd == '$geoWithin' }\n  , set: function (v) {\n      if (true === v) {\n        // mongodb >= 2.4\n        $withinCmd = '$geoWithin';\n      } else {\n        $withinCmd = '$within';\n      }\n    }\n});\n\n/**\n * Converts this query to a constructor function with all arguments and options retained.\n *\n * ####Example\n *\n *     // Create a query that will read documents with a \"video\" category from\n *     // `aCollection` on the primary node in the replica-set unless it is down,\n *     // in which case we'll read from a secondary node.\n *     var query = mquery({ category: 'video' })\n *     query.setOptions({ collection: aCollection, read: 'primaryPreferred' });\n *\n *     // create a constructor based off these settings\n *     var Video = query.toConstructor();\n *\n *     // Video is now a subclass of mquery() and works the same way but with the\n *     // default query parameters and options set.\n *\n *     // run a query with the previous settings but filter for movies with names\n *     // that start with \"Life\".\n *     Video().where({ name: /^Life/ }).exec(cb);\n *\n * @return {Query} new Query\n * @api public\n */\n\nQuery.prototype.toConstructor = function toConstructor () {\n  function CustomQuery (criteria, options) {\n    if (!(this instanceof CustomQuery))\n      return new CustomQuery(criteria, options);\n    Query.call(this, criteria, options);\n  }\n\n  utils.inherits(CustomQuery, Query);\n\n  // set inherited defaults\n  var p = CustomQuery.prototype;\n\n  p.options = {};\n  p.setOptions(this.options);\n\n  p.op = this.op;\n  p._conditions = utils.clone(this._conditions);\n  p._fields = utils.clone(this._fields);\n  p._update = utils.clone(this._update);\n  p._path = this._path;\n  p._distinct = this._distinct;\n  p._collection = this._collection;\n  p._traceFunction = this._traceFunction;\n\n  return CustomQuery;\n}\n\n/**\n * Sets query options.\n *\n * ####Options:\n *\n * - [tailable](http://www.mongodb.org/display/DOCS/Tailable+Cursors) *\n * - [sort](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsort(\\)%7D%7D) *\n * - [limit](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D) *\n * - [skip](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D) *\n * - [maxScan](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24maxScan) *\n * - [maxTime](http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS) *\n * - [batchSize](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D) *\n * - [comment](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment) *\n * - [snapshot](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D) *\n * - [hint](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint) *\n * - [slaveOk](http://docs.mongodb.org/manual/applications/replication/#read-preference) *\n * - [safe](http://www.mongodb.org/display/DOCS/getLastError+Command)\n * - collection the collection to query against\n *\n * _* denotes a query helper method is also available_\n *\n * @param {Object} options\n * @api public\n */\n\nQuery.prototype.setOptions = function (options) {\n  if (!(options && utils.isObject(options)))\n    return this;\n\n  // set arbitrary options\n  var methods = utils.keys(options)\n    , method\n\n  for (var i = 0; i < methods.length; ++i) {\n    method = methods[i];\n\n    // use methods if exist (safer option manipulation)\n    if ('function' == typeof this[method]) {\n      var args = utils.isArray(options[method])\n        ? options[method]\n        : [options[method]];\n      this[method].apply(this, args)\n    } else {\n      this.options[method] = options[method];\n    }\n  }\n\n  return this;\n}\n\n/**\n * Sets this Querys collection.\n *\n * @param {Collection} coll\n * @return {Query} this\n */\n\nQuery.prototype.collection = function collection (coll) {\n  this._collection = new Query.Collection(coll);\n\n  return this;\n}\n\n/**\n * Specifies a `$where` condition\n *\n * Use `$where` when you need to select documents using a JavaScript expression.\n *\n * ####Example\n *\n *     query.$where('this.comments.length > 10 || this.name.length > 5')\n *\n *     query.$where(function () {\n *       return this.comments.length > 10 || this.name.length > 5;\n *     })\n *\n * @param {String|Function} js javascript string or function\n * @return {Query} this\n * @memberOf Query\n * @method $where\n * @api public\n */\n\nQuery.prototype.$where = function (js) {\n  this._conditions.$where = js;\n  return this;\n}\n\n/**\n * Specifies a `path` for use with chaining.\n *\n * ####Example\n *\n *     // instead of writing:\n *     User.find({age: {$gte: 21, $lte: 65}}, callback);\n *\n *     // we can instead write:\n *     User.where('age').gte(21).lte(65);\n *\n *     // passing query conditions is permitted\n *     User.find().where({ name: 'vonderful' })\n *\n *     // chaining\n *     User\n *     .where('age').gte(21).lte(65)\n *     .where('name', /^vonderful/i)\n *     .where('friends').slice(10)\n *     .exec(callback)\n *\n * @param {String} [path]\n * @param {Object} [val]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.where = function () {\n  if (!arguments.length) return this;\n  if (!this.op) this.op = 'find';\n\n  var type = typeof arguments[0];\n\n  if ('string' == type) {\n    this._path = arguments[0];\n\n    if (2 === arguments.length) {\n      this._conditions[this._path] = arguments[1];\n    }\n\n    return this;\n  }\n\n  if ('object' == type && !Array.isArray(arguments[0])) {\n    return this.merge(arguments[0]);\n  }\n\n  throw new TypeError('path must be a string or object');\n}\n\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n *\n * ####Example\n *\n *     User.where('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.equals = function equals (val) {\n  this._ensurePath('equals');\n  var path = this._path;\n  this._conditions[path] = val;\n  return this;\n}\n\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n * This is alias of `equals`\n *\n * ####Example\n *\n *     User.where('age').eq(49);\n *\n *     // is the same as\n *\n *     User.shere('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.eq = function eq (val) {\n  this._ensurePath('eq');\n  var path = this._path;\n  this._conditions[path] = val;\n  return this;\n}\n\n/**\n * Specifies arguments for an `$or` condition.\n *\n * ####Example\n *\n *     query.or([{ color: 'red' }, { status: 'emergency' }])\n *\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.or = function or (array) {\n  var or = this._conditions.$or || (this._conditions.$or = []);\n  if (!utils.isArray(array)) array = [array];\n  or.push.apply(or, array);\n  return this;\n}\n\n/**\n * Specifies arguments for a `$nor` condition.\n *\n * ####Example\n *\n *     query.nor([{ color: 'green' }, { status: 'ok' }])\n *\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.nor = function nor (array) {\n  var nor = this._conditions.$nor || (this._conditions.$nor = []);\n  if (!utils.isArray(array)) array = [array];\n  nor.push.apply(nor, array);\n  return this;\n}\n\n/**\n * Specifies arguments for a `$and` condition.\n *\n * ####Example\n *\n *     query.and([{ color: 'green' }, { status: 'ok' }])\n *\n * @see $and http://docs.mongodb.org/manual/reference/operator/and/\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.and = function and (array) {\n  var and = this._conditions.$and || (this._conditions.$and = []);\n  if (!Array.isArray(array)) array = [array];\n  and.push.apply(and, array);\n  return this;\n}\n\n/**\n * Specifies a $gt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * ####Example\n *\n *     Thing.find().where('age').gt(21)\n *\n *     // or\n *     Thing.find().gt('age', 21)\n *\n * @method gt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $gte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method gte\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $lt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $lte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lte\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $ne query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method ne\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $in query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method in\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $nin query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method nin\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $all query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method all\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $size query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method size\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $regex query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method regex\n * @memberOf Query\n * @param {String} [path]\n * @param {String|RegExp} val\n * @api public\n */\n\n/**\n * Specifies a $maxDistance query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method maxDistance\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/*!\n * gt, gte, lt, lte, ne, in, nin, all, regex, size, maxDistance\n *\n *     Thing.where('type').nin(array)\n */\n\n'gt gte lt lte ne in nin all regex size maxDistance minDistance'.split(' ').forEach(function ($conditional) {\n  Query.prototype[$conditional] = function () {\n    var path, val;\n\n    if (1 === arguments.length) {\n      this._ensurePath($conditional);\n      val = arguments[0];\n      path = this._path;\n    } else {\n      val = arguments[1];\n      path = arguments[0];\n    }\n\n    var conds = this._conditions[path] === null || typeof this._conditions[path] === 'object' ?\n      this._conditions[path] :\n      (this._conditions[path] = {});\n    conds['$' + $conditional] = val;\n    return this;\n  };\n})\n\n/**\n * Specifies a `$mod` condition\n *\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.mod = function () {\n  var val, path;\n\n  if (1 === arguments.length) {\n    this._ensurePath('mod')\n    val = arguments[0];\n    path = this._path;\n  } else if (2 === arguments.length && !utils.isArray(arguments[1])) {\n    this._ensurePath('mod')\n    val = slice(arguments);\n    path = this._path;\n  } else if (3 === arguments.length) {\n    val = slice(arguments, 1);\n    path = arguments[0];\n  } else {\n    val = arguments[1];\n    path = arguments[0];\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$mod = val;\n  return this;\n}\n\n/**\n * Specifies an `$exists` condition\n *\n * ####Example\n *\n *     // { name: { $exists: true }}\n *     Thing.where('name').exists()\n *     Thing.where('name').exists(true)\n *     Thing.find().exists('name')\n *\n *     // { name: { $exists: false }}\n *     Thing.where('name').exists(false);\n *     Thing.find().exists('name', false);\n *\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.exists = function () {\n  var path, val;\n\n  if (0 === arguments.length) {\n    this._ensurePath('exists');\n    path = this._path;\n    val = true;\n  } else if (1 === arguments.length) {\n    if ('boolean' === typeof arguments[0]) {\n      this._ensurePath('exists');\n      path = this._path;\n      val = arguments[0];\n    } else {\n      path = arguments[0];\n      val = true;\n    }\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$exists = val;\n  return this;\n}\n\n/**\n * Specifies an `$elemMatch` condition\n *\n * ####Example\n *\n *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n *\n *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n *\n *     query.elemMatch('comment', function (elem) {\n *       elem.where('author').equals('autobot');\n *       elem.where('votes').gte(5);\n *     })\n *\n *     query.where('comment').elemMatch(function (elem) {\n *       elem.where({ author: 'autobot' });\n *       elem.where('votes').gte(5);\n *     })\n *\n * @param {String|Object|Function} path\n * @param {Object|Function} criteria\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.elemMatch = function () {\n  if (null == arguments[0])\n    throw new TypeError(\"Invalid argument\");\n\n  var fn, path, criteria;\n\n  if ('function' === typeof arguments[0]) {\n    this._ensurePath('elemMatch');\n    path = this._path;\n    fn = arguments[0];\n  } else if (utils.isObject(arguments[0])) {\n    this._ensurePath('elemMatch');\n    path = this._path;\n    criteria = arguments[0];\n  } else if ('function' === typeof arguments[1]) {\n    path = arguments[0];\n    fn = arguments[1];\n  } else if (arguments[1] && utils.isObject(arguments[1])) {\n    path = arguments[0];\n    criteria = arguments[1];\n  } else {\n    throw new TypeError(\"Invalid argument\");\n  }\n\n  if (fn) {\n    criteria = new Query;\n    fn(criteria);\n    criteria = criteria._conditions;\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$elemMatch = criteria;\n  return this;\n}\n\n// Spatial queries\n\n/**\n * Sugar for geo-spatial queries.\n *\n * ####Example\n *\n *     query.within().box()\n *     query.within().circle()\n *     query.within().geometry()\n *\n *     query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });\n *     query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\n *     query.where('loc').within({ polygon: [[],[],[],[]] });\n *\n *     query.where('loc').within([], [], []) // polygon\n *     query.where('loc').within([], []) // box\n *     query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry\n *\n * ####NOTE:\n *\n * Must be used after `where()`.\n *\n * @memberOf Query\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.within = function within () {\n  // opinionated, must be used after where\n  this._ensurePath('within');\n  this._geoComparison = $withinCmd;\n\n  if (0 === arguments.length) {\n    return this;\n  }\n\n  if (2 === arguments.length) {\n    return this.box.apply(this, arguments);\n  } else if (2 < arguments.length) {\n    return this.polygon.apply(this, arguments);\n  }\n\n  var area = arguments[0];\n\n  if (!area)\n    throw new TypeError('Invalid argument');\n\n  if (area.center)\n    return this.circle(area);\n\n  if (area.box)\n    return this.box.apply(this, area.box);\n\n  if (area.polygon)\n    return this.polygon.apply(this, area.polygon);\n\n  if (area.type && area.coordinates)\n    return this.geometry(area);\n\n  throw new TypeError('Invalid argument');\n}\n\n/**\n * Specifies a $box condition\n *\n * ####Example\n *\n *     var lowerLeft = [40.73083, -73.99756]\n *     var upperRight= [40.741404,  -73.988135]\n *\n *     query.where('loc').within().box(lowerLeft, upperRight)\n *     query.box('loc', lowerLeft, upperRight )\n *\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see Query#within #query_Query-within\n * @param {String} path\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.box = function () {\n  var path, box;\n\n  if (3 === arguments.length) {\n    // box('loc', [], [])\n    path = arguments[0];\n    box = [arguments[1], arguments[2]];\n  } else if (2 === arguments.length) {\n    // box([], [])\n    this._ensurePath('box');\n    path = this._path;\n    box = [arguments[0], arguments[1]];\n  } else {\n    throw new TypeError(\"Invalid argument\");\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison || $withinCmd] = { '$box': box  };\n  return this;\n}\n\n/**\n * Specifies a $polygon condition\n *\n * ####Example\n *\n *     query.where('loc').within().polygon([10,20], [13, 25], [7,15])\n *     query.polygon('loc', [10,20], [13, 25], [7,15])\n *\n * @param {String|Array} [path]\n * @param {Array|Object} [val]\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\nQuery.prototype.polygon = function () {\n  var val, path;\n\n  if ('string' == typeof arguments[0]) {\n    // polygon('loc', [],[],[])\n    path = arguments[0];\n    val = slice(arguments, 1);\n  } else {\n    // polygon([],[],[])\n    this._ensurePath('polygon');\n    path = this._path;\n    val = slice(arguments);\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison || $withinCmd] = { '$polygon': val };\n  return this;\n}\n\n/**\n * Specifies a $center or $centerSphere condition.\n *\n * ####Example\n *\n *     var area = { center: [50, 50], radius: 10, unique: true }\n *     query.where('loc').within().circle(area)\n *     query.center('loc', area);\n *\n *     // for spherical calculations\n *     var area = { center: [50, 50], radius: 10, unique: true, spherical: true }\n *     query.where('loc').within().circle(area)\n *     query.center('loc', area);\n *\n * @param {String} [path]\n * @param {Object} area\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\nQuery.prototype.circle = function () {\n  var path, val;\n\n  if (1 === arguments.length) {\n    this._ensurePath('circle');\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  } else {\n    throw new TypeError(\"Invalid argument\");\n  }\n\n  if (!('radius' in val && val.center))\n    throw new Error('center and radius are required');\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n\n  var type = val.spherical\n    ? '$centerSphere'\n    : '$center';\n\n  var wKey = this._geoComparison || $withinCmd;\n  conds[wKey] = {};\n  conds[wKey][type] = [val.center, val.radius];\n\n  if ('unique' in val)\n    conds[wKey].$uniqueDocs = !! val.unique;\n\n  return this;\n}\n\n/**\n * Specifies a `$near` or `$nearSphere` condition\n *\n * These operators return documents sorted by distance.\n *\n * ####Example\n *\n *     query.where('loc').near({ center: [10, 10] });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5 });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });\n *     query.near('loc', { center: [10, 10], maxDistance: 5 });\n *     query.near({ center: { type: 'Point', coordinates: [..] }})\n *     query.near().geometry({ type: 'Point', coordinates: [..] })\n *\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\nQuery.prototype.near = function near () {\n  var path, val;\n\n  this._geoComparison = '$near';\n\n  if (0 === arguments.length) {\n    return this;\n  } else if (1 === arguments.length) {\n    this._ensurePath('near');\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  } else {\n    throw new TypeError(\"Invalid argument\");\n  }\n\n  if (!val.center) {\n    throw new Error('center is required');\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n\n  var type = val.spherical\n    ? '$nearSphere'\n    : '$near';\n\n  // center could be a GeoJSON object or an Array\n  if (Array.isArray(val.center)) {\n    conds[type] = val.center;\n\n    var radius = 'maxDistance' in val\n      ? val.maxDistance\n      : null;\n\n    if (null != radius) {\n      conds.$maxDistance = radius;\n    }\n    if (null != val.minDistance) {\n      conds.$minDistance = val.minDistance;\n    }\n  } else {\n    // GeoJSON?\n    if (val.center.type != 'Point' || !Array.isArray(val.center.coordinates)) {\n      throw new Error(util.format(\"Invalid GeoJSON specified for %s\", type));\n    }\n    conds[type] = { $geometry : val.center };\n\n    // MongoDB 2.6 insists on maxDistance being in $near / $nearSphere\n    if ('maxDistance' in val) {\n      conds[type]['$maxDistance'] = val.maxDistance;\n    }\n    if ('minDistance' in val) {\n      conds[type]['$minDistance'] = val.minDistance;\n    }\n  }\n\n  return this;\n}\n\n/**\n * Declares an intersects query for `geometry()`.\n *\n * ####Example\n *\n *     query.where('path').intersects().geometry({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n *     query.where('path').intersects({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n * @param {Object} [arg]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.intersects = function intersects () {\n  // opinionated, must be used after where\n  this._ensurePath('intersects');\n\n  this._geoComparison = '$geoIntersects';\n\n  if (0 === arguments.length) {\n    return this;\n  }\n\n  var area = arguments[0];\n\n  if (null != area && area.type && area.coordinates)\n    return this.geometry(area);\n\n  throw new TypeError('Invalid argument');\n}\n\n/**\n * Specifies a `$geometry` condition\n *\n * ####Example\n *\n *     var polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\n *     query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })\n *\n *     // or\n *     var polyB = [[ 0, 0 ], [ 1, 1 ]]\n *     query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })\n *\n *     // or\n *     var polyC = [ 0, 0 ]\n *     query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })\n *\n *     // or\n *     query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })\n *\n * ####NOTE:\n *\n * `geometry()` **must** come after either `intersects()` or `within()`.\n *\n * The `object` argument must contain `type` and `coordinates` properties.\n * - type {String}\n * - coordinates {Array}\n *\n * The most recent path passed to `where()` is used.\n *\n * @param {Object} object Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.\n * @return {Query} this\n * @see http://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @api public\n */\n\nQuery.prototype.geometry = function geometry () {\n  if (!('$within' == this._geoComparison ||\n        '$geoWithin' == this._geoComparison ||\n        '$near' == this._geoComparison ||\n        '$geoIntersects' == this._geoComparison)) {\n    throw new Error('geometry() must come after `within()`, `intersects()`, or `near()');\n  }\n\n  var val, path;\n\n  if (1 === arguments.length) {\n    this._ensurePath('geometry');\n    path = this._path;\n    val = arguments[0];\n  } else {\n    throw new TypeError(\"Invalid argument\");\n  }\n\n  if (!(val.type && Array.isArray(val.coordinates))) {\n    throw new TypeError('Invalid argument');\n  }\n\n  var conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison] = { $geometry: val };\n\n  return this;\n}\n\n// end spatial\n\n/**\n * Specifies which document fields to include or exclude\n *\n * ####String syntax\n *\n * When passing a string, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included.\n *\n * ####Example\n *\n *     // include a and b, exclude c\n *     query.select('a b -c');\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     query.select({a: 1, b: 1, c: 0});\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|String} arg\n * @return {Query} this\n * @see SchemaType\n * @api public\n */\n\nQuery.prototype.select = function select () {\n  var arg = arguments[0];\n  if (!arg) return this;\n\n  if (arguments.length !== 1) {\n    throw new Error(\"Invalid select: select only takes 1 argument\");\n  }\n\n  this._validate('select');\n\n  var fields = this._fields || (this._fields = {});\n  var type = typeof arg;\n\n  if (('string' == type || utils.isArgumentsObject(arg)) &&\n    'number' == typeof arg.length || Array.isArray(arg)) {\n    if ('string' == type)\n      arg = arg.split(/\\s+/);\n\n    for (var i = 0, len = arg.length; i < len; ++i) {\n      var field = arg[i];\n      if (!field) continue;\n      var include = '-' == field[0] ? 0 : 1;\n      if (include === 0) field = field.substring(1);\n      fields[field] = include;\n    }\n\n    return this;\n  }\n\n  if (utils.isObject(arg)) {\n    var keys = utils.keys(arg);\n    for (var i = 0; i < keys.length; ++i) {\n      fields[keys[i]] = arg[keys[i]];\n    }\n    return this;\n  }\n\n  throw new TypeError('Invalid select() argument. Must be string or object.');\n}\n\n/**\n * Specifies a $slice condition for a `path`\n *\n * ####Example\n *\n *     query.slice('comments', 5)\n *     query.slice('comments', -5)\n *     query.slice('comments', [10, 5])\n *     query.where('comments').slice(5)\n *     query.where('comments').slice([-10, 5])\n *\n * @param {String} [path]\n * @param {Number} val number/range of elements to slice\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields#RetrievingaSubsetofFields-RetrievingaSubrangeofArrayElements\n * @api public\n */\n\nQuery.prototype.slice = function () {\n  if (0 === arguments.length)\n    return this;\n\n  this._validate('slice');\n\n  var path, val;\n\n  if (1 === arguments.length) {\n    var arg = arguments[0];\n    if (typeof arg === 'object' && !Array.isArray(arg)) {\n      var keys = Object.keys(arg);\n      var numKeys = keys.length;\n      for (var i = 0; i < numKeys; ++i) {\n        this.slice(keys[i], arg[keys[i]]);\n      }\n      return this;\n    }\n    this._ensurePath('slice');\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    if ('number' === typeof arguments[0]) {\n      this._ensurePath('slice');\n      path = this._path;\n      val = slice(arguments);\n    } else {\n      path = arguments[0];\n      val = arguments[1];\n    }\n  } else if (3 === arguments.length) {\n    path = arguments[0];\n    val = slice(arguments, 1);\n  }\n\n  var myFields = this._fields || (this._fields = {});\n  myFields[path] = { '$slice': val };\n  return this;\n}\n\n/**\n * Sets the sort order\n *\n * If an object is passed, values allowed are 'asc', 'desc', 'ascending', 'descending', 1, and -1.\n *\n * If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.\n *\n * ####Example\n *\n *     // these are equivalent\n *     query.sort({ field: 'asc', test: -1 });\n *     query.sort('field -test');\n *     query.sort([['field', 1], ['test', -1]]);\n *\n * ####Note\n *\n *  - The array syntax `.sort([['field', 1], ['test', -1]])` can only be used with [mongodb driver >= 2.0.46](https://github.com/mongodb/node-mongodb-native/blob/2.1/HISTORY.md#2046-2015-10-15).\n *  - Cannot be used with `distinct()`\n *\n * @param {Object|String|Array} arg\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.sort = function (arg) {\n  if (!arg) return this;\n  var len;\n\n  this._validate('sort');\n\n  var type = typeof arg;\n\n  // .sort([['field', 1], ['test', -1]])\n  if (Array.isArray(arg)) {\n    len = arg.length;\n    for (var i = 0; i < arg.length; ++i) {\n      if (!Array.isArray(arg[i])) {\n        throw new Error('Invalid sort() argument, must be array of arrays');\n      }\n      _pushArr(this.options, arg[i][0], arg[i][1]);\n    }\n    return this;\n  }\n\n  // .sort('field -test')\n  if (1 === arguments.length && 'string' == type) {\n    arg = arg.split(/\\s+/);\n    len = arg.length;\n    for (var i = 0; i < len; ++i) {\n      var field = arg[i];\n      if (!field) continue;\n      var ascend = '-' == field[0] ? -1 : 1;\n      if (ascend === -1) field = field.substring(1);\n      push(this.options, field, ascend);\n    }\n\n    return this;\n  }\n\n  // .sort({ field: 1, test: -1 })\n  if (utils.isObject(arg)) {\n    var keys = utils.keys(arg);\n    for (var i = 0; i < keys.length; ++i) {\n      var field = keys[i];\n      push(this.options, field, arg[field]);\n    }\n\n    return this;\n  }\n\n  if (typeof Map !== 'undefined' && arg instanceof Map) {\n    _pushMap(this.options, arg);\n    return this;\n  }\n\n  throw new TypeError('Invalid sort() argument. Must be a string, object, or array.');\n}\n\n/*!\n * @ignore\n */\n\nfunction push (opts, field, value) {\n  if (Array.isArray(opts.sort)) {\n    throw new TypeError(\"Can't mix sort syntaxes. Use either array or object:\" +\n      \"\\n- `.sort([['field', 1], ['test', -1]])`\" +\n      \"\\n- `.sort({ field: 1, test: -1 })`\");\n  }\n\n  if (value && value.$meta) {\n    var s = opts.sort || (opts.sort = {});\n    s[field] = { $meta : value.$meta };\n    return;\n  }\n\n  var val = String(value || 1).toLowerCase();\n  if (!/^(?:ascending|asc|descending|desc|1|-1)$/.test(val)) {\n    if (utils.isArray(value)) value = '['+value+']';\n    throw new TypeError('Invalid sort value: {' + field + ': ' + value + ' }');\n  }\n  // store `sort` in a sane format\n  var s = opts.sort || (opts.sort = {});\n  var valueStr = value.toString()\n                  .replace(\"asc\", \"1\")\n                  .replace(\"ascending\", \"1\")\n                  .replace(\"desc\", \"-1\")\n                  .replace(\"descending\", \"-1\");\n  s[field] = parseInt(valueStr, 10);\n}\n\nfunction _pushArr (opts, field, value) {\n  opts.sort = opts.sort || [];\n  if (!Array.isArray(opts.sort)) {\n    throw new TypeError(\"Can't mix sort syntaxes. Use either array or object:\" +\n      \"\\n- `.sort([['field', 1], ['test', -1]])`\" +\n      \"\\n- `.sort({ field: 1, test: -1 })`\");\n  }\n  var valueStr = value.toString()\n    .replace(\"asc\", \"1\")\n    .replace(\"ascending\", \"1\")\n    .replace(\"desc\", \"-1\")\n    .replace(\"descending\", \"-1\");\n  opts.sort.push([field, value]);\n}\n\nfunction _pushMap (opts, map) {\n  opts.sort = opts.sort || new Map();\n  if (!(opts.sort instanceof Map)) {\n    throw new TypeError(\"Can't mix sort syntaxes. Use either array or \" +\n      \"object or map consistently\");\n  }\n  map.forEach(function(value, key) {\n    var valueStr = value.toString()\n      .replace(\"asc\", \"1\")\n      .replace(\"ascending\", \"1\")\n      .replace(\"desc\", \"-1\")\n      .replace(\"descending\", \"-1\");\n    opts.sort.set(key, valueStr);\n  });\n}\n\n/**\n * Specifies the limit option.\n *\n * ####Example\n *\n *     query.limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method limit\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D\n * @api public\n */\n/**\n * Specifies the skip option.\n *\n * ####Example\n *\n *     query.skip(100).limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method skip\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D\n * @api public\n */\n/**\n * Specifies the maxScan option.\n *\n * ####Example\n *\n *     query.maxScan(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method maxScan\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24maxScan\n * @api public\n */\n/**\n * Specifies the batchSize option.\n *\n * ####Example\n *\n *     query.batchSize(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method batchSize\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D\n * @api public\n */\n/**\n * Specifies the `comment` option.\n *\n * ####Example\n *\n *     query.comment('login query')\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method comment\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment\n * @api public\n */\n\n/*!\n * limit, skip, maxScan, batchSize, comment\n *\n * Sets these associated options.\n *\n *     query.comment('feed query');\n */\n\n;['limit', 'skip', 'maxScan', 'batchSize', 'comment'].forEach(function (method) {\n  Query.prototype[method] = function (v) {\n    this._validate(method);\n    this.options[method] = v;\n    return this;\n  };\n})\n\n/**\n * Specifies the maxTimeMS option.\n *\n * ####Example\n *\n *     query.maxTime(100)\n *\n * @method maxTime\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS\n * @api public\n */\n\nQuery.prototype.maxTime = function (v) {\n  this._validate('maxTime');\n  this.options.maxTimeMS = v;\n  return this;\n};\n\n/**\n * Specifies this query as a `snapshot` query.\n *\n * ####Example\n *\n *     mquery().snapshot() // true\n *     mquery().snapshot(true)\n *     mquery().snapshot(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.snapshot = function () {\n  this._validate('snapshot');\n\n  this.options.snapshot = arguments.length\n    ? !! arguments[0]\n    : true\n\n  return this;\n}\n\n/**\n * Sets query hints.\n *\n * ####Example\n *\n *     query.hint({ indexA: 1, indexB: -1});\n *     query.hint('indexA_1_indexB_1');\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|string} val a hint object or the index name\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint\n * @api public\n */\n\nQuery.prototype.hint = function () {\n  if (0 === arguments.length) return this;\n\n  this._validate('hint');\n\n  var arg = arguments[0];\n  if (utils.isObject(arg)) {\n    var hint = this.options.hint || (this.options.hint = {});\n\n    // must keep object keys in order so don't use Object.keys()\n    for (var k in arg) {\n      hint[k] = arg[k];\n    }\n\n    return this;\n  }\n  if (typeof arg === 'string') {\n    this.options.hint = arg;\n    return this;\n  }\n\n  throw new TypeError('Invalid hint. ' + arg);\n}\n\n/**\n * Sets the slaveOk option. _Deprecated_ in MongoDB 2.2 in favor of read preferences.\n *\n * ####Example:\n *\n *     query.slaveOk() // true\n *     query.slaveOk(true)\n *     query.slaveOk(false)\n *\n * @deprecated use read() preferences instead if on mongodb >= 2.2\n * @param {Boolean} v defaults to true\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see read()\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.slaveOk = function (v) {\n  this.options.slaveOk = arguments.length ? !!v : true;\n  return this;\n}\n\n/**\n * Sets the readPreference option for the query.\n *\n * ####Example:\n *\n *     new Query().read('primary')\n *     new Query().read('p')  // same as primary\n *\n *     new Query().read('primaryPreferred')\n *     new Query().read('pp') // same as primaryPreferred\n *\n *     new Query().read('secondary')\n *     new Query().read('s')  // same as secondary\n *\n *     new Query().read('secondaryPreferred')\n *     new Query().read('sp') // same as secondaryPreferred\n *\n *     new Query().read('nearest')\n *     new Query().read('n')  // same as nearest\n *\n *     // you can also use mongodb.ReadPreference class to also specify tags\n *     new Query().read(mongodb.ReadPreference('secondary', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }]))\n *\n * ####Preferences:\n *\n *     primary - (default)  Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\n *     secondary            Read from secondary if available, otherwise error.\n *     primaryPreferred     Read from primary if available, otherwise a secondary.\n *     secondaryPreferred   Read from a secondary if available, otherwise read from the primary.\n *     nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.\n *\n * Aliases\n *\n *     p   primary\n *     pp  primaryPreferred\n *     s   secondary\n *     sp  secondaryPreferred\n *     n   nearest\n *\n * Read more about how to use read preferences [here](http://docs.mongodb.org/manual/applications/replication/#read-preference) and [here](http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).\n *\n * @param {String|ReadPreference} pref one of the listed preference options or their aliases\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.read = function (pref) {\n  if (arguments.length > 1 && !Query.prototype.read.deprecationWarningIssued) {\n    console.error(\"Deprecation warning: 'tags' argument is not supported anymore in Query.read() method. Please use mongodb.ReadPreference object instead.\");\n    Query.prototype.read.deprecationWarningIssued = true;\n  }\n  this.options.readPreference = utils.readPref(pref);\n  return this;\n}\n\n/**\n * Sets tailable option.\n *\n * ####Example\n *\n *     query.tailable() <== true\n *     query.tailable(true)\n *     query.tailable(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Boolean} v defaults to true\n * @see mongodb http://www.mongodb.org/display/DOCS/Tailable+Cursors\n * @api public\n */\n\nQuery.prototype.tailable = function () {\n  this._validate('tailable');\n\n  this.options.tailable = arguments.length\n    ? !! arguments[0]\n    : true;\n\n  return this;\n}\n\n/**\n * Merges another Query or conditions object into this one.\n *\n * When a Query is passed, conditions, field selection and options are merged.\n *\n * @param {Query|Object} source\n * @return {Query} this\n */\n\nQuery.prototype.merge = function (source) {\n  if (!source)\n    return this;\n\n  if (!Query.canMerge(source))\n    throw new TypeError('Invalid argument. Expected instanceof mquery or plain object');\n\n  if (source instanceof Query) {\n    // if source has a feature, apply it to ourselves\n\n    if (source._conditions) {\n      utils.merge(this._conditions, source._conditions);\n    }\n\n    if (source._fields) {\n      this._fields || (this._fields = {});\n      utils.merge(this._fields, source._fields);\n    }\n\n    if (source.options) {\n      this.options || (this.options = {});\n      utils.merge(this.options, source.options);\n    }\n\n    if (source._update) {\n      this._update || (this._update = {});\n      utils.mergeClone(this._update, source._update);\n    }\n\n    if (source._distinct) {\n      this._distinct = source._distinct;\n    }\n\n    return this;\n  }\n\n  // plain object\n  utils.merge(this._conditions, source);\n\n  return this;\n}\n\n/**\n * Finds documents.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     query.find()\n *     query.find(callback)\n *     query.find({ name: 'Burning Lights' }, callback)\n *\n * @param {Object} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.find = function (criteria, callback) {\n  this.op = 'find';\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (!callback) return this;\n\n  var self = this\n    , conds = this._conditions\n    , options = this._optionsForExec()\n\n  options.fields = this._fieldsForExec()\n\n  debug('find', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('find', callback, {\n    conditions: conds\n  , options: options\n  });\n\n  this._collection.find(conds, options, utils.tick(callback));\n  return this;\n}\n\n/**\n * Returns the query cursor\n *\n * ####Examples\n *\n *     query.find().cursor();\n *     query.cursor({ name: 'Burning Lights' });\n *\n * @param {Object} [criteria] mongodb selector\n * @return {Object} cursor\n * @api public\n */\n\nQuery.prototype.cursor = function cursor (criteria) {\n  if (this.op) {\n    if (this.op !== 'find') {\n      throw new TypeError(\".cursor only support .find method\");\n    }\n  } else {\n    this.find(criteria);\n  }\n\n  var conds = this._conditions\n    , options = this._optionsForExec()\n\n  options.fields = this._fieldsForExec()\n\n  debug('findCursor', this._collection.collectionName, conds, options);\n  return this._collection.findCursor(conds, options);\n}\n\n/**\n * Executes the query as a findOne() operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     query.findOne().where('name', /^Burning/);\n *\n *     query.findOne({ name: /^Burning/ })\n *\n *     query.findOne({ name: /^Burning/ }, callback); // executes\n *\n *     query.findOne(function (err, doc) {\n *       if (err) return handleError(err);\n *       if (doc) {\n *         // doc may be null if no document matched\n *\n *       }\n *     });\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOne = function (criteria, callback) {\n  this.op = 'findOne';\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (!callback) return this;\n\n  var self = this\n    , conds = this._conditions\n    , options = this._optionsForExec()\n\n  options.fields = this._fieldsForExec();\n\n  debug('findOne', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('findOne', callback, {\n    conditions: conds\n  , options: options\n  });\n\n  this._collection.findOne(conds, options, utils.tick(callback));\n\n  return this;\n}\n\n/**\n * Exectues the query as a count() operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     query.count().where('color', 'black').exec(callback);\n *\n *     query.count({ color: 'black' }).count(callback)\n *\n *     query.count({ color: 'black' }, callback)\n *\n *     query.where('color', 'black').count(function (err, count) {\n *       if (err) return handleError(err);\n *       console.log('there are %d kittens', count);\n *     })\n *\n * @param {Object} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Count\n * @api public\n */\n\nQuery.prototype.count = function (criteria, callback) {\n  this.op = 'count';\n  this._validate();\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (!callback) return this;\n\n  var conds = this._conditions\n    , options = this._optionsForExec()\n\n  debug('count', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('count', callback, {\n    conditions: conds\n  , options: options\n  });\n\n  this._collection.count(conds, options, utils.tick(callback));\n  return this;\n}\n\n/**\n * Declares or executes a distinct() operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     distinct(criteria, field, fn)\n *     distinct(criteria, field)\n *     distinct(field, fn)\n *     distinct(field)\n *     distinct(fn)\n *     distinct()\n *\n * @param {Object|Query} [criteria]\n * @param {String} [field]\n * @param {Function} [callback]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Distinct\n * @api public\n */\n\nQuery.prototype.distinct = function (criteria, field, callback) {\n  this.op = 'distinct';\n  this._validate();\n\n  if (!callback) {\n    switch (typeof field) {\n      case 'function':\n        callback = field;\n        if ('string' == typeof criteria) {\n          field = criteria;\n          criteria = undefined;\n        }\n        break;\n      case 'undefined':\n      case 'string':\n        break;\n      default:\n        throw new TypeError('Invalid `field` argument. Must be string or function')\n        break;\n    }\n\n    switch (typeof criteria) {\n      case 'function':\n        callback = criteria;\n        criteria = field = undefined;\n        break;\n      case 'string':\n        field = criteria;\n        criteria = undefined;\n        break;\n    }\n  }\n\n  if ('string' == typeof field) {\n    this._distinct = field;\n  }\n\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  if (!callback) {\n    return this;\n  }\n\n  if (!this._distinct) {\n    throw new Error('No value for `distinct` has been declared');\n  }\n\n  var conds = this._conditions\n    , options = this._optionsForExec()\n\n  debug('distinct', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('distinct', callback, {\n    conditions: conds\n  , options: options\n  });\n\n  this._collection.distinct(this._distinct, conds, options, utils.tick(callback));\n\n  return this;\n}\n\n/**\n * Declare and/or execute this query as an update() operation. By default,\n * `update()` only modifies the _first_ document that matches `criteria`.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * ####Example\n *\n *     mquery({ _id: id }).update({ title: 'words' }, ...)\n *\n * becomes\n *\n *     collection.update({ _id: id }, { $set: { title: 'words' }}, ...)\n *\n * ####Note\n *\n * Passing an empty object `{}` as the doc will result in a no-op unless the `overwrite` option is passed. Without the `overwrite` option set, the update operation will be ignored and the callback executed without sending the command to MongoDB so as to prevent accidently overwritting documents in the collection.\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback (which would be an unsafe write), we must first call update() and then execute it by using the `exec()` method.\n *\n *     var q = mquery(collection).where({ _id: id });\n *     q.update({ $set: { name: 'bob' }}).update(); // not executed\n *\n *     var q = mquery(collection).where({ _id: id });\n *     q.update({ $set: { name: 'bob' }}).exec(); // executed as unsafe\n *\n *     // keys that are not $atomic ops become $set.\n *     // this executes the same command as the previous example.\n *     q.update({ name: 'bob' }).where({ _id: id }).exec();\n *\n *     var q = mquery(collection).update(); // not executed\n *\n *     // overwriting with empty docs\n *     var q.where({ _id: id }).setOptions({ overwrite: true })\n *     q.update({ }, callback); // executes\n *\n *     // multi update with overwrite to empty doc\n *     var q = mquery(collection).where({ _id: id });\n *     q.setOptions({ multi: true, overwrite: true })\n *     q.update({ });\n *     q.update(callback); // executed\n *\n *     // multi updates\n *     mquery()\n *       .collection(coll)\n *       .update({ name: /^match/ }, { $set: { arr: [] }}, { multi: true }, callback)\n *     // more multi updates\n *     mquery({ })\n *       .collection(coll)\n *       .setOptions({ multi: true })\n *       .update({ $set: { arr: [] }}, callback)\n *\n *     // single update by default\n *     mquery({ email: 'address@example.com' })\n *      .collection(coll)\n *      .update({ $inc: { counter: 1 }}, callback)\n *\n *     // summary\n *     update(criteria, doc, opts, cb) // executes\n *     update(criteria, doc, opts)\n *     update(criteria, doc, cb) // executes\n *     update(criteria, doc)\n *     update(doc, cb) // executes\n *     update(doc)\n *     update(cb) // executes\n *     update(true) // executes (unsafe write)\n *     update()\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.update = function update (criteria, doc, options, callback) {\n  var force;\n\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      break;\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n  }\n\n  return _update(this, 'update', criteria, doc, options, force, callback);\n}\n\n/**\n * Declare and/or execute this query as an `updateMany()` operation. Identical\n * to `update()` except `updateMany()` will update _all_ documents that match\n * `criteria`, rather than just the first one.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * ####Example\n *\n *     // Update every document whose `title` contains 'test'\n *     mquery().updateMany({ title: /test/ }, { year: 2017 })\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.updateMany = function updateMany (criteria, doc, options, callback) {\n  var force;\n\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      break;\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n  }\n\n  return _update(this, 'updateMany', criteria, doc, options, force, callback);\n}\n\n/**\n * Declare and/or execute this query as an `updateOne()` operation. Identical\n * to `update()` except `updateOne()` will _always_ update just one document,\n * regardless of the `multi` option.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * ####Example\n *\n *     // Update the first document whose `title` contains 'test'\n *     mquery().updateMany({ title: /test/ }, { year: 2017 })\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.updateOne = function updateOne (criteria, doc, options, callback) {\n  var force;\n\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      break;\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n  }\n\n  return _update(this, 'updateOne', criteria, doc, options, force, callback);\n}\n\n/**\n * Declare and/or execute this query as an `replaceOne()` operation. Similar\n * to `updateOne()`, except `replaceOne()` is not allowed to use atomic\n * modifiers (`$set`, `$push`, etc.). Calling `replaceOne()` will always\n * replace the existing doc.\n *\n * ####Example\n *\n *     // Replace the document with `_id` 1 with `{ _id: 1, year: 2017 }`\n *     mquery().replaceOne({ _id: 1 }, { year: 2017 })\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.replaceOne = function replaceOne (criteria, doc, options, callback) {\n  var force;\n\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      break;\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n  }\n\n  this.setOptions({ overwrite: true });\n  return _update(this, 'replaceOne', criteria, doc, options, force, callback);\n}\n\n\n/*!\n * Internal helper for update, updateMany, updateOne\n */\n\nfunction _update (query, op, criteria, doc, options, force, callback) {\n  query.op = op;\n\n  if (Query.canMerge(criteria)) {\n    query.merge(criteria);\n  }\n\n  if (doc) {\n    query._mergeUpdate(doc);\n  }\n\n  if (utils.isObject(options)) {\n    // { overwrite: true }\n    query.setOptions(options);\n  }\n\n  // we are done if we don't have callback and they are\n  // not forcing an unsafe write.\n  if (!(force || callback)) {\n    return query;\n  }\n\n  if (!query._update ||\n      !query.options.overwrite && 0 === utils.keys(query._update).length) {\n    callback && utils.soon(callback.bind(null, null, 0));\n    return query;\n  }\n\n  options = query._optionsForExec();\n  if (!callback) options.safe = false;\n\n  var criteria = query._conditions;\n  doc = query._updateForExec();\n\n  debug('update', query._collection.collectionName, criteria, doc, options);\n  callback = query._wrapCallback(op, callback, {\n    conditions: criteria\n  , doc: doc\n  , options: options\n  });\n\n  query._collection[op](criteria, doc, options, utils.tick(callback));\n\n  return query;\n}\n\n/**\n * Declare and/or execute this query as a remove() operation.\n *\n * ####Example\n *\n *     mquery(collection).remove({ artist: 'Anne Murray' }, callback)\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback (which would be an unsafe write), we must first call remove() and then execute it by using the `exec()` method.\n *\n *     // not executed\n *     var query = mquery(collection).remove({ name: 'Anne Murray' })\n *\n *     // executed\n *     mquery(collection).remove({ name: 'Anne Murray' }, callback)\n *     mquery(collection).remove({ name: 'Anne Murray' }).remove(callback)\n *\n *     // executed without a callback (unsafe write)\n *     query.exec()\n *\n *     // summary\n *     query.remove(conds, fn); // executes\n *     query.remove(conds)\n *     query.remove(fn) // executes\n *     query.remove()\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.remove = function (criteria, callback) {\n  this.op = 'remove';\n  var force;\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  } else if (true === criteria) {\n    force = criteria;\n    criteria = undefined;\n  }\n\n  if (!(force || callback))\n    return this;\n\n  var options = this._optionsForExec()\n  if (!callback) options.safe = false;\n\n  var conds = this._conditions;\n\n  debug('remove', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('remove', callback, {\n    conditions: conds\n  , options: options\n  });\n\n  this._collection.remove(conds, options, utils.tick(callback));\n\n  return this;\n}\n\n/**\n * Declare and/or execute this query as a `deleteOne()` operation. Behaves like\n * `remove()`, except for ignores the `justOne` option and always deletes at\n * most one document.\n *\n * ####Example\n *\n *     mquery(collection).deleteOne({ artist: 'Anne Murray' }, callback)\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.deleteOne = function (criteria, callback) {\n  this.op = 'deleteOne';\n  var force;\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  } else if (true === criteria) {\n    force = criteria;\n    criteria = undefined;\n  }\n\n  if (!(force || callback))\n    return this;\n\n  var options = this._optionsForExec()\n  if (!callback) options.safe = false;\n  delete options.justOne;\n\n  var conds = this._conditions;\n\n  debug('deleteOne', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('deleteOne', callback, {\n    conditions: conds\n  , options: options\n  });\n\n  this._collection.deleteOne(conds, options, utils.tick(callback));\n\n  return this;\n}\n\n/**\n * Declare and/or execute this query as a `deleteMany()` operation. Behaves like\n * `remove()`, except for ignores the `justOne` option and always deletes\n * _every_ document that matches `criteria`.\n *\n * ####Example\n *\n *     mquery(collection).deleteMany({ artist: 'Anne Murray' }, callback)\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.deleteMany = function (criteria, callback) {\n  this.op = 'deleteMany';\n  var force;\n\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  } else if (true === criteria) {\n    force = criteria;\n    criteria = undefined;\n  }\n\n  if (!(force || callback))\n    return this;\n\n  var options = this._optionsForExec()\n  if (!callback) options.safe = false;\n  delete options.justOne;\n\n  var conds = this._conditions;\n\n  debug('deleteOne', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('deleteOne', callback, {\n    conditions: conds\n  , options: options\n  });\n\n  this._collection.deleteMany(conds, options, utils.tick(callback));\n\n  return this;\n}\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) update command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any) to the callback. The query executes immediately if `callback` is passed.\n *\n * ####Available options\n *\n * - `new`: bool - true to return the modified document rather than the original. defaults to true\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n *\n * ####Examples\n *\n *     query.findOneAndUpdate(conditions, update, options, callback) // executes\n *     query.findOneAndUpdate(conditions, update, options)  // returns Query\n *     query.findOneAndUpdate(conditions, update, callback) // executes\n *     query.findOneAndUpdate(conditions, update)           // returns Query\n *     query.findOneAndUpdate(update, callback)             // returns Query\n *     query.findOneAndUpdate(update)                       // returns Query\n *     query.findOneAndUpdate(callback)                     // executes\n *     query.findOneAndUpdate()                             // returns Query\n *\n * @param {Object|Query} [query]\n * @param {Object} [doc]\n * @param {Object} [options]\n * @param {Function} [callback]\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOneAndUpdate = function (criteria, doc, options, callback) {\n  this.op = 'findOneAndUpdate';\n  this._validate();\n\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      options = undefined;\n      break;\n    case 1:\n      if ('function' == typeof criteria) {\n        callback = criteria;\n        criteria = options = doc = undefined;\n      } else {\n        doc = criteria;\n        criteria = options = undefined;\n      }\n  }\n\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  // apply doc\n  if (doc) {\n    this._mergeUpdate(doc);\n  }\n\n  options && this.setOptions(options);\n\n  if (!callback) return this;\n  return this._findAndModify('update', callback);\n}\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) remove command.\n *\n * Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if `callback` is passed.\n *\n * ####Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n *\n * ####Examples\n *\n *     A.where().findOneAndRemove(conditions, options, callback) // executes\n *     A.where().findOneAndRemove(conditions, options)  // return Query\n *     A.where().findOneAndRemove(conditions, callback) // executes\n *     A.where().findOneAndRemove(conditions) // returns Query\n *     A.where().findOneAndRemove(callback)   // executes\n *     A.where().findOneAndRemove()           // returns Query\n *\n * @param {Object} [conditions]\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nQuery.prototype.findOneAndRemove = function (conditions, options, callback) {\n  this.op = 'findOneAndRemove';\n  this._validate();\n\n  if ('function' == typeof options) {\n    callback = options;\n    options = undefined;\n  } else if ('function' == typeof conditions) {\n    callback = conditions;\n    conditions = undefined;\n  }\n\n  // apply conditions\n  if (Query.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  // apply options\n  options && this.setOptions(options);\n\n  if (!callback) return this;\n\n  return this._findAndModify('remove', callback);\n}\n\n/**\n * _findAndModify\n *\n * @param {String} type - either \"remove\" or \"update\"\n * @param {Function} callback\n * @api private\n */\n\nQuery.prototype._findAndModify = function (type, callback) {\n  assert.equal('function', typeof callback);\n\n  var opts = this._optionsForExec()\n    , self = this\n    , fields\n    , sort\n    , doc\n\n  if ('remove' == type) {\n    opts.remove = true;\n  } else {\n    if (!('new' in opts)) opts.new = true;\n    if (!('upsert' in opts)) opts.upsert = false;\n\n    doc = this._updateForExec()\n    if (!doc) {\n      if (opts.upsert) {\n        // still need to do the upsert to empty doc\n        doc = { $set: {} };\n      } else {\n        return this.findOne(callback);\n      }\n    }\n  }\n\n  var fields = this._fieldsForExec();\n  if (fields) {\n    opts.fields = fields;\n  }\n\n  var conds = this._conditions;\n\n  debug('findAndModify', this._collection.collectionName, conds, doc, opts);\n  callback = this._wrapCallback('findAndModify', callback, {\n    conditions: conds\n  , doc: doc\n  , options: opts\n  });\n\n  this._collection\n  .findAndModify(conds, doc, opts, utils.tick(callback));\n\n  return this;\n}\n\n/**\n * Wrap callback to add tracing\n *\n * @param {Function} callback\n * @param {Object} [queryInfo]\n * @api private\n */\nQuery.prototype._wrapCallback = function (method, callback, queryInfo) {\n  var traceFunction = this._traceFunction || Query.traceFunction;\n\n  if (traceFunction) {\n    queryInfo.collectionName = this._collection.collectionName;\n\n    var traceCallback = traceFunction &&\n      traceFunction.call(null, method, queryInfo, this);\n\n    var startTime = new Date().getTime();\n\n    return function wrapperCallback (err, result) {\n      if (traceCallback) {\n        var millis = new Date().getTime() - startTime;\n        traceCallback.call(null, err, result, millis);\n      }\n\n      if (callback) {\n        callback.apply(null, arguments);\n      }\n    };\n  }\n\n  return callback;\n}\n\n/**\n * Add trace function that gets called when the query is executed.\n * The function will be called with (method, queryInfo, query) and\n * should return a callback function which will be called\n * with (err, result, millis) when the query is complete.\n *\n * queryInfo is an object containing: {\n *   collectionName: <name of the collection>,\n *   conditions: <query criteria>,\n *   options: <comment, fields, readPreference, etc>,\n *   doc: [document to update, if applicable]\n * }\n *\n * NOTE: Does not trace stream queries.\n *\n * @param {Function} traceFunction\n * @return {Query} this\n * @api public\n */\nQuery.prototype.setTraceFunction = function (traceFunction) {\n  this._traceFunction = traceFunction;\n  return this;\n}\n\n/**\n * Executes the query\n *\n * ####Examples\n *\n *     query.exec();\n *     query.exec(callback);\n *     query.exec('update');\n *     query.exec('find', callback);\n *\n * @param {String|Function} [operation]\n * @param {Function} [callback]\n * @api public\n */\n\nQuery.prototype.exec = function exec (op, callback) {\n  switch (typeof op) {\n    case 'function':\n      callback = op;\n      op = null;\n      break;\n    case 'string':\n      this.op = op;\n      break;\n  }\n\n  assert.ok(this.op, \"Missing query type: (find, update, etc)\");\n\n  if ('update' == this.op || 'remove' == this.op) {\n    callback || (callback = true);\n  }\n\n  var self = this;\n\n  if ('function' == typeof callback) {\n    this[this.op](callback);\n  } else {\n    return new Query.Promise(function(success, error) {\n      self[self.op](function(err, val) {\n        if (err) error(err);\n        else success(val);\n        self = success = error = null;\n      });\n    });\n  }\n}\n\n/**\n * Returns a thunk which when called runs this.exec()\n *\n * The thunk receives a callback function which will be\n * passed to `this.exec()`\n *\n * @return {Function}\n * @api public\n */\n\nQuery.prototype.thunk = function() {\n  var self = this;\n  return function(cb) {\n    self.exec(cb);\n  }\n}\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n *\n * @param {Function} [resolve]\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.then = function(resolve, reject) {\n  var self = this;\n  var promise = new Query.Promise(function(success, error) {\n    self.exec(function(err, val) {\n      if (err) error(err);\n      else success(val);\n      self = success = error = null;\n    });\n  });\n  return promise.then(resolve, reject);\n}\n\n/**\n * Returns a stream for the given find query.\n *\n * @throws Error if operation is not a find\n * @returns {Stream} Node 0.8 style\n */\n\nQuery.prototype.stream = function(streamOptions) {\n  if ('find' != this.op)\n    throw new Error('stream() is only available for find');\n\n  var conds = this._conditions;\n\n  var options = this._optionsForExec()\n  options.fields = this._fieldsForExec()\n\n  debug('stream', this._collection.collectionName, conds, options, streamOptions);\n\n  return this._collection.findStream(conds, options, streamOptions);\n}\n\n/**\n * Determines if field selection has been made.\n *\n * @return {Boolean}\n * @api public\n */\n\nQuery.prototype.selected = function selected () {\n  return !! (this._fields && Object.keys(this._fields).length > 0);\n}\n\n/**\n * Determines if inclusive field selection has been made.\n *\n *     query.selectedInclusively() // false\n *     query.select('name')\n *     query.selectedInclusively() // true\n *     query.selectedExlusively() // false\n *\n * @returns {Boolean}\n */\n\nQuery.prototype.selectedInclusively = function selectedInclusively () {\n  if (!this._fields) return false;\n\n  var keys = Object.keys(this._fields);\n  if (0 === keys.length) return false;\n\n  for (var i = 0; i < keys.length; ++i) {\n    var key = keys[i];\n    if (0 === this._fields[key]) return false;\n    if (this._fields[key] &&\n        typeof this._fields[key] === 'object' &&\n        this._fields[key].$meta) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Determines if exclusive field selection has been made.\n *\n *     query.selectedExlusively() // false\n *     query.select('-name')\n *     query.selectedExlusively() // true\n *     query.selectedInclusively() // false\n *\n * @returns {Boolean}\n */\n\nQuery.prototype.selectedExclusively = function selectedExclusively () {\n  if (!this._fields) return false;\n\n  var keys = Object.keys(this._fields);\n  if (0 === keys.length) return false;\n\n  for (var i = 0; i < keys.length; ++i) {\n    var key = keys[i];\n    if (0 === this._fields[key]) return true;\n  }\n\n  return false;\n}\n\n/**\n * Merges `doc` with the current update object.\n *\n * @param {Object} doc\n */\n\nQuery.prototype._mergeUpdate = function (doc) {\n  if (!this._update) this._update = {};\n  if (doc instanceof Query) {\n    if (doc._update) {\n      utils.mergeClone(this._update, doc._update);\n    }\n  } else {\n    utils.mergeClone(this._update, doc);\n  }\n}\n\n/**\n * Returns default options.\n *\n * @return {Object}\n * @api private\n */\n\nQuery.prototype._optionsForExec = function () {\n  var options = utils.clone(this.options);\n  return options;\n}\n\n/**\n * Returns fields selection for this query.\n *\n * @return {Object}\n * @api private\n */\n\nQuery.prototype._fieldsForExec = function () {\n  return utils.clone(this._fields);\n}\n\n/**\n * Return an update document with corrected $set operations.\n *\n * @api private\n */\n\nQuery.prototype._updateForExec = function () {\n  var update = utils.clone(this._update)\n    , ops = utils.keys(update)\n    , i = ops.length\n    , ret = {}\n    , hasKeys\n    , val\n\n  while (i--) {\n    var op = ops[i];\n\n    if (this.options.overwrite) {\n      ret[op] = update[op];\n      continue;\n    }\n\n    if ('$' !== op[0]) {\n      // fix up $set sugar\n      if (!ret.$set) {\n        if (update.$set) {\n          ret.$set = update.$set;\n        } else {\n          ret.$set = {};\n        }\n      }\n      ret.$set[op] = update[op];\n      ops.splice(i, 1);\n      if (!~ops.indexOf('$set')) ops.push('$set');\n    } else if ('$set' === op) {\n      if (!ret.$set) {\n        ret[op] = update[op];\n      }\n    } else {\n      ret[op] = update[op];\n    }\n  }\n\n  this._compiledUpdate = ret;\n  return ret;\n}\n\n/**\n * Make sure _path is set.\n *\n * @parmam {String} method\n */\n\nQuery.prototype._ensurePath = function (method) {\n  if (!this._path) {\n    var msg = method + '() must be used after where() '\n                     + 'when called with these arguments'\n    throw new Error(msg);\n  }\n}\n\n/*!\n * Permissions\n */\n\nQuery.permissions = require('./permissions');\n\nQuery._isPermitted = function (a, b) {\n  var denied = Query.permissions[b];\n  if (!denied) return true;\n  return true !== denied[a];\n}\n\nQuery.prototype._validate = function (action) {\n  var fail;\n  var validator;\n\n  if (undefined === action) {\n\n    validator = Query.permissions[this.op];\n    if ('function' != typeof validator) return true;\n\n    fail = validator(this);\n\n  } else if (!Query._isPermitted(action, this.op)) {\n    fail = action;\n  }\n\n  if (fail) {\n    throw new Error(fail + ' cannot be used with ' + this.op);\n  }\n}\n\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n *\n * @param {Object} conds\n * @return {Boolean}\n */\n\nQuery.canMerge = function (conds) {\n  return conds instanceof Query || utils.isObject(conds);\n}\n\n/**\n * Set a trace function that will get called whenever a\n * query is executed.\n *\n * See `setTraceFunction()` for details.\n *\n * @param {Object} conds\n * @return {Boolean}\n */\nQuery.setGlobalTraceFunction = function (traceFunction) {\n  Query.traceFunction = traceFunction;\n}\n\n/*!\n * Exports.\n */\n\nQuery.utils = utils;\nQuery.env = require('./env')\nQuery.Collection = require('./collection');\nQuery.BaseCollection = require('./collection/collection');\nQuery.Promise = require('bluebird');\nmodule.exports = exports = Query;\n\n// TODO\n// test utils\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mquery@3.0.0@mquery/lib/mquery.js\n// module id = 108\n// module chunks = 0","function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 109;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_require_optional@1.0.1@require_optional\n// module id = 109\n// module chunks = 0","\n/**\n * An Array.prototype.slice.call(arguments) alternative\n *\n * @param {Object} args something with a length\n * @param {Number} slice\n * @param {Number} sliceEnd\n * @api public\n */\n\nmodule.exports = function (args, slice, sliceEnd) {\n  var ret = [];\n  var len = args.length;\n\n  if (0 === len) return ret;\n\n  var start = slice < 0\n    ? Math.max(0, slice + len)\n    : slice || 0;\n\n  if (sliceEnd !== undefined) {\n    len = sliceEnd < 0\n      ? sliceEnd + len\n      : sliceEnd\n  }\n\n  while (len-- > start) {\n    ret[len - start] = args[len];\n  }\n\n  return ret;\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_sliced@1.0.1@sliced/index.js\n// module id = 110\n// module chunks = 0","'use strict';\n\nvar inherits = require('util').inherits,\n  EventEmitter = require('events').EventEmitter,\n  net = require('net'),\n  tls = require('tls'),\n  crypto = require('crypto'),\n  f = require('util').format,\n  debugOptions = require('./utils').debugOptions,\n  parseHeader = require('../wireprotocol/shared').parseHeader,\n  decompress = require('../wireprotocol/compression').decompress,\n  Response = require('./commands').Response,\n  MongoNetworkError = require('../error').MongoNetworkError,\n  Logger = require('./logger'),\n  OP_COMPRESSED = require('../wireprotocol/shared').opcodes.OP_COMPRESSED,\n  MESSAGE_HEADER_SIZE = require('../wireprotocol/shared').MESSAGE_HEADER_SIZE;\n\nvar _id = 0;\nvar debugFields = [\n  'host',\n  'port',\n  'size',\n  'keepAlive',\n  'keepAliveInitialDelay',\n  'noDelay',\n  'connectionTimeout',\n  'socketTimeout',\n  'singleBufferSerializtion',\n  'ssl',\n  'ca',\n  'crl',\n  'cert',\n  'rejectUnauthorized',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'checkServerIdentity'\n];\n\nvar connectionAccountingSpy = undefined;\nvar connectionAccounting = false;\nvar connections = {};\n\n/**\n * Creates a new Connection instance\n * @class\n * @param {string} options.host The server host\n * @param {number} options.port The server port\n * @param {number} [options.family=null] IP version for DNS lookup, passed down to Node's [`dns.lookup()` function](https://nodejs.org/api/dns.html#dns_dns_lookup_hostname_options_callback). If set to `6`, will only look for ipv6 addresses.\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=300000] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=30000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=360000] TCP Socket timeout setting\n * @param {boolean} [options.singleBufferSerializtion=true] Serialize into single buffer, trade of peak memory for serialization speed\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @fires Connection#connect\n * @fires Connection#close\n * @fires Connection#error\n * @fires Connection#timeout\n * @fires Connection#parseError\n * @return {Connection} A cursor instance\n */\nvar Connection = function(messageHandler, options) {\n  // Add event listener\n  EventEmitter.call(this);\n  // Set empty if no options passed\n  this.options = options || {};\n  // Identification information\n  this.id = _id++;\n  // Logger instance\n  this.logger = Logger('Connection', options);\n  // No bson parser passed in\n  if (!options.bson) throw new Error('must pass in valid bson parser');\n  // Get bson parser\n  this.bson = options.bson;\n  // Grouping tag used for debugging purposes\n  this.tag = options.tag;\n  // Message handler\n  this.messageHandler = messageHandler;\n\n  // Max BSON message size\n  this.maxBsonMessageSize = options.maxBsonMessageSize || 1024 * 1024 * 16 * 4;\n  // Debug information\n  if (this.logger.isDebug())\n    this.logger.debug(\n      f(\n        'creating connection %s with options [%s]',\n        this.id,\n        JSON.stringify(debugOptions(debugFields, options))\n      )\n    );\n\n  // Default options\n  this.port = options.port || 27017;\n  this.host = options.host || 'localhost';\n  this.family = typeof options.family === 'number' ? options.family : void 0;\n  this.keepAlive = typeof options.keepAlive === 'boolean' ? options.keepAlive : true;\n  this.keepAliveInitialDelay =\n    typeof options.keepAliveInitialDelay === 'number' ? options.keepAliveInitialDelay : 300000;\n  this.noDelay = typeof options.noDelay === 'boolean' ? options.noDelay : true;\n  this.connectionTimeout =\n    typeof options.connectionTimeout === 'number' ? options.connectionTimeout : 30000;\n  this.socketTimeout = typeof options.socketTimeout === 'number' ? options.socketTimeout : 360000;\n\n  // Is the keepAliveInitialDelay > socketTimeout set it to half of socketTimeout\n  if (this.keepAliveInitialDelay > this.socketTimeout) {\n    this.keepAliveInitialDelay = Math.round(this.socketTimeout / 2);\n  }\n\n  // If connection was destroyed\n  this.destroyed = false;\n\n  // Check if we have a domain socket\n  this.domainSocket = this.host.indexOf('/') !== -1;\n\n  // Serialize commands using function\n  this.singleBufferSerializtion =\n    typeof options.singleBufferSerializtion === 'boolean' ? options.singleBufferSerializtion : true;\n  this.serializationFunction = this.singleBufferSerializtion ? 'toBinUnified' : 'toBin';\n\n  // SSL options\n  this.ca = options.ca || null;\n  this.crl = options.crl || null;\n  this.cert = options.cert || null;\n  this.key = options.key || null;\n  this.passphrase = options.passphrase || null;\n  this.ciphers = options.ciphers || null;\n  this.ecdhCurve = options.ecdhCurve || null;\n  this.ssl = typeof options.ssl === 'boolean' ? options.ssl : false;\n  this.rejectUnauthorized =\n    typeof options.rejectUnauthorized === 'boolean' ? options.rejectUnauthorized : true;\n  this.checkServerIdentity =\n    typeof options.checkServerIdentity === 'boolean' ||\n    typeof options.checkServerIdentity === 'function'\n      ? options.checkServerIdentity\n      : true;\n\n  // If ssl not enabled\n  if (!this.ssl) this.rejectUnauthorized = false;\n\n  // Response options\n  this.responseOptions = {\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false\n  };\n\n  // Flushing\n  this.flushing = false;\n  this.queue = [];\n\n  // Internal state\n  this.connection = null;\n  this.writeStream = null;\n\n  // Create hash method\n  var hash = crypto.createHash('sha1');\n  hash.update(f('%s:%s', this.host, this.port));\n\n  // Create a hash name\n  this.hashedName = hash.digest('hex');\n\n  // All operations in flight on the connection\n  this.workItems = [];\n};\n\ninherits(Connection, EventEmitter);\n\nConnection.prototype.setSocketTimeout = function(value) {\n  if (this.connection) {\n    this.connection.setTimeout(value);\n  }\n};\n\nConnection.prototype.resetSocketTimeout = function() {\n  if (this.connection) {\n    this.connection.setTimeout(this.socketTimeout);\n  }\n};\n\nConnection.enableConnectionAccounting = function(spy) {\n  if (spy) {\n    connectionAccountingSpy = spy;\n  }\n\n  connectionAccounting = true;\n  connections = {};\n};\n\nConnection.disableConnectionAccounting = function() {\n  connectionAccounting = false;\n  connectionAccountingSpy = undefined;\n};\n\nConnection.connections = function() {\n  return connections;\n};\n\nfunction deleteConnection(id) {\n  // console.log(\"=== deleted connection \" + id + \" :: \" + (connections[id] ? connections[id].port : ''))\n  delete connections[id];\n\n  if (connectionAccountingSpy) {\n    connectionAccountingSpy.deleteConnection(id);\n  }\n}\n\nfunction addConnection(id, connection) {\n  // console.log(\"=== added connection \" + id + \" :: \" + connection.port)\n  connections[id] = connection;\n\n  if (connectionAccountingSpy) {\n    connectionAccountingSpy.addConnection(id, connection);\n  }\n}\n\n//\n// Connection handlers\nvar errorHandler = function(self) {\n  return function(err) {\n    if (connectionAccounting) deleteConnection(self.id);\n    // Debug information\n    if (self.logger.isDebug())\n      self.logger.debug(\n        f(\n          'connection %s for [%s:%s] errored out with [%s]',\n          self.id,\n          self.host,\n          self.port,\n          JSON.stringify(err)\n        )\n      );\n    // Emit the error\n    if (self.listeners('error').length > 0) self.emit('error', new MongoNetworkError(err), self);\n  };\n};\n\nvar timeoutHandler = function(self) {\n  return function() {\n    if (connectionAccounting) deleteConnection(self.id);\n    // Debug information\n    if (self.logger.isDebug())\n      self.logger.debug(f('connection %s for [%s:%s] timed out', self.id, self.host, self.port));\n    // Emit timeout error\n    self.emit(\n      'timeout',\n      new MongoNetworkError(f('connection %s to %s:%s timed out', self.id, self.host, self.port)),\n      self\n    );\n  };\n};\n\nvar closeHandler = function(self) {\n  return function(hadError) {\n    if (connectionAccounting) deleteConnection(self.id);\n    // Debug information\n    if (self.logger.isDebug())\n      self.logger.debug(f('connection %s with for [%s:%s] closed', self.id, self.host, self.port));\n\n    // Emit close event\n    if (!hadError) {\n      self.emit(\n        'close',\n        new MongoNetworkError(f('connection %s to %s:%s closed', self.id, self.host, self.port)),\n        self\n      );\n    }\n  };\n};\n\n// Handle a message once it is recieved\nvar emitMessageHandler = function(self, message) {\n  var msgHeader = parseHeader(message);\n  if (msgHeader.opCode === OP_COMPRESSED) {\n    msgHeader.fromCompressed = true;\n    var index = MESSAGE_HEADER_SIZE;\n    msgHeader.opCode = message.readInt32LE(index);\n    index += 4;\n    msgHeader.length = message.readInt32LE(index);\n    index += 4;\n    var compressorID = message[index];\n    index++;\n    decompress(compressorID, message.slice(index), function(err, decompressedMsgBody) {\n      if (err) {\n        throw err;\n      }\n      if (decompressedMsgBody.length !== msgHeader.length) {\n        throw new Error(\n          'Decompressing a compressed message from the server failed. The message is corrupt.'\n        );\n      }\n      self.messageHandler(\n        new Response(self.bson, message, msgHeader, decompressedMsgBody, self.responseOptions),\n        self\n      );\n    });\n  } else {\n    self.messageHandler(\n      new Response(\n        self.bson,\n        message,\n        msgHeader,\n        message.slice(MESSAGE_HEADER_SIZE),\n        self.responseOptions\n      ),\n      self\n    );\n  }\n};\n\nvar dataHandler = function(self) {\n  return function(data) {\n    // Parse until we are done with the data\n    while (data.length > 0) {\n      // If we still have bytes to read on the current message\n      if (self.bytesRead > 0 && self.sizeOfMessage > 0) {\n        // Calculate the amount of remaining bytes\n        var remainingBytesToRead = self.sizeOfMessage - self.bytesRead;\n        // Check if the current chunk contains the rest of the message\n        if (remainingBytesToRead > data.length) {\n          // Copy the new data into the exiting buffer (should have been allocated when we know the message size)\n          data.copy(self.buffer, self.bytesRead);\n          // Adjust the number of bytes read so it point to the correct index in the buffer\n          self.bytesRead = self.bytesRead + data.length;\n\n          // Reset state of buffer\n          data = new Buffer(0);\n        } else {\n          // Copy the missing part of the data into our current buffer\n          data.copy(self.buffer, self.bytesRead, 0, remainingBytesToRead);\n          // Slice the overflow into a new buffer that we will then re-parse\n          data = data.slice(remainingBytesToRead);\n\n          // Emit current complete message\n          try {\n            var emitBuffer = self.buffer;\n            // Reset state of buffer\n            self.buffer = null;\n            self.sizeOfMessage = 0;\n            self.bytesRead = 0;\n            self.stubBuffer = null;\n\n            emitMessageHandler(self, emitBuffer);\n          } catch (err) {\n            var errorObject = {\n              err: 'socketHandler',\n              trace: err,\n              bin: self.buffer,\n              parseState: {\n                sizeOfMessage: self.sizeOfMessage,\n                bytesRead: self.bytesRead,\n                stubBuffer: self.stubBuffer\n              }\n            };\n            // We got a parse Error fire it off then keep going\n            self.emit('parseError', errorObject, self);\n          }\n        }\n      } else {\n        // Stub buffer is kept in case we don't get enough bytes to determine the\n        // size of the message (< 4 bytes)\n        if (self.stubBuffer != null && self.stubBuffer.length > 0) {\n          // If we have enough bytes to determine the message size let's do it\n          if (self.stubBuffer.length + data.length > 4) {\n            // Prepad the data\n            var newData = new Buffer(self.stubBuffer.length + data.length);\n            self.stubBuffer.copy(newData, 0);\n            data.copy(newData, self.stubBuffer.length);\n            // Reassign for parsing\n            data = newData;\n\n            // Reset state of buffer\n            self.buffer = null;\n            self.sizeOfMessage = 0;\n            self.bytesRead = 0;\n            self.stubBuffer = null;\n          } else {\n            // Add the the bytes to the stub buffer\n            var newStubBuffer = new Buffer(self.stubBuffer.length + data.length);\n            // Copy existing stub buffer\n            self.stubBuffer.copy(newStubBuffer, 0);\n            // Copy missing part of the data\n            data.copy(newStubBuffer, self.stubBuffer.length);\n            // Exit parsing loop\n            data = new Buffer(0);\n          }\n        } else {\n          if (data.length > 4) {\n            // Retrieve the message size\n            // var sizeOfMessage = data.readUInt32LE(0);\n            var sizeOfMessage = data[0] | (data[1] << 8) | (data[2] << 16) | (data[3] << 24);\n            // If we have a negative sizeOfMessage emit error and return\n            if (sizeOfMessage < 0 || sizeOfMessage > self.maxBsonMessageSize) {\n              errorObject = {\n                err: 'socketHandler',\n                trace: '',\n                bin: self.buffer,\n                parseState: {\n                  sizeOfMessage: sizeOfMessage,\n                  bytesRead: self.bytesRead,\n                  stubBuffer: self.stubBuffer\n                }\n              };\n              // We got a parse Error fire it off then keep going\n              self.emit('parseError', errorObject, self);\n              return;\n            }\n\n            // Ensure that the size of message is larger than 0 and less than the max allowed\n            if (\n              sizeOfMessage > 4 &&\n              sizeOfMessage < self.maxBsonMessageSize &&\n              sizeOfMessage > data.length\n            ) {\n              self.buffer = new Buffer(sizeOfMessage);\n              // Copy all the data into the buffer\n              data.copy(self.buffer, 0);\n              // Update bytes read\n              self.bytesRead = data.length;\n              // Update sizeOfMessage\n              self.sizeOfMessage = sizeOfMessage;\n              // Ensure stub buffer is null\n              self.stubBuffer = null;\n              // Exit parsing loop\n              data = new Buffer(0);\n            } else if (\n              sizeOfMessage > 4 &&\n              sizeOfMessage < self.maxBsonMessageSize &&\n              sizeOfMessage === data.length\n            ) {\n              try {\n                emitBuffer = data;\n                // Reset state of buffer\n                self.buffer = null;\n                self.sizeOfMessage = 0;\n                self.bytesRead = 0;\n                self.stubBuffer = null;\n                // Exit parsing loop\n                data = new Buffer(0);\n                // Emit the message\n                emitMessageHandler(self, emitBuffer);\n              } catch (err) {\n                self.emit('parseError', err, self);\n              }\n            } else if (sizeOfMessage <= 4 || sizeOfMessage > self.maxBsonMessageSize) {\n              errorObject = {\n                err: 'socketHandler',\n                trace: null,\n                bin: data,\n                parseState: {\n                  sizeOfMessage: sizeOfMessage,\n                  bytesRead: 0,\n                  buffer: null,\n                  stubBuffer: null\n                }\n              };\n              // We got a parse Error fire it off then keep going\n              self.emit('parseError', errorObject, self);\n\n              // Clear out the state of the parser\n              self.buffer = null;\n              self.sizeOfMessage = 0;\n              self.bytesRead = 0;\n              self.stubBuffer = null;\n              // Exit parsing loop\n              data = new Buffer(0);\n            } else {\n              emitBuffer = data.slice(0, sizeOfMessage);\n              // Reset state of buffer\n              self.buffer = null;\n              self.sizeOfMessage = 0;\n              self.bytesRead = 0;\n              self.stubBuffer = null;\n              // Copy rest of message\n              data = data.slice(sizeOfMessage);\n              // Emit the message\n              emitMessageHandler(self, emitBuffer);\n            }\n          } else {\n            // Create a buffer that contains the space for the non-complete message\n            self.stubBuffer = new Buffer(data.length);\n            // Copy the data to the stub buffer\n            data.copy(self.stubBuffer, 0);\n            // Exit parsing loop\n            data = new Buffer(0);\n          }\n        }\n      }\n    }\n  };\n};\n\n// List of socket level valid ssl options\nvar legalSslSocketOptions = [\n  'pfx',\n  'key',\n  'passphrase',\n  'cert',\n  'ca',\n  'ciphers',\n  'NPNProtocols',\n  'ALPNProtocols',\n  'servername',\n  'ecdhCurve',\n  'secureProtocol',\n  'secureContext',\n  'session',\n  'minDHSize'\n];\n\nfunction merge(options1, options2) {\n  // Merge in any allowed ssl options\n  for (var name in options2) {\n    if (options2[name] != null && legalSslSocketOptions.indexOf(name) !== -1) {\n      options1[name] = options2[name];\n    }\n  }\n}\n\nfunction makeSSLConnection(self, _options) {\n  let sslOptions = {\n    socket: self.connection,\n    rejectUnauthorized: self.rejectUnauthorized\n  };\n\n  // Merge in options\n  merge(sslOptions, self.options);\n  merge(sslOptions, _options);\n\n  // Set options for ssl\n  if (self.ca) sslOptions.ca = self.ca;\n  if (self.crl) sslOptions.crl = self.crl;\n  if (self.cert) sslOptions.cert = self.cert;\n  if (self.key) sslOptions.key = self.key;\n  if (self.passphrase) sslOptions.passphrase = self.passphrase;\n\n  // Override checkServerIdentity behavior\n  if (self.checkServerIdentity === false) {\n    // Skip the identiy check by retuning undefined as per node documents\n    // https://nodejs.org/api/tls.html#tls_tls_connect_options_callback\n    sslOptions.checkServerIdentity = function() {\n      return undefined;\n    };\n  } else if (typeof self.checkServerIdentity === 'function') {\n    sslOptions.checkServerIdentity = self.checkServerIdentity;\n  }\n\n  // Set default sni servername to be the same as host\n  if (sslOptions.servername == null) {\n    sslOptions.servername = self.host;\n  }\n\n  // Attempt SSL connection\n  const connection = tls.connect(self.port, self.host, sslOptions, function() {\n    // Error on auth or skip\n    if (connection.authorizationError && self.rejectUnauthorized) {\n      return self.emit('error', connection.authorizationError, self, { ssl: true });\n    }\n\n    // Set socket timeout instead of connection timeout\n    connection.setTimeout(self.socketTimeout);\n    // We are done emit connect\n    self.emit('connect', self);\n  });\n\n  // Set the options for the connection\n  connection.setKeepAlive(self.keepAlive, self.keepAliveInitialDelay);\n  connection.setTimeout(self.connectionTimeout);\n  connection.setNoDelay(self.noDelay);\n\n  return connection;\n}\n\nfunction makeUnsecureConnection(self, family) {\n  // Create new connection instance\n  let connection_options;\n  if (self.domainSocket) {\n    connection_options = { path: self.host };\n  } else {\n    connection_options = { port: self.port, host: self.host };\n    connection_options.family = family;\n  }\n\n  const connection = net.createConnection(connection_options);\n\n  // Set the options for the connection\n  connection.setKeepAlive(self.keepAlive, self.keepAliveInitialDelay);\n  connection.setTimeout(self.connectionTimeout);\n  connection.setNoDelay(self.noDelay);\n\n  connection.once('connect', function() {\n    // Set socket timeout instead of connection timeout\n    connection.setTimeout(self.socketTimeout);\n    // Emit connect event\n    self.emit('connect', self);\n  });\n\n  return connection;\n}\n\nfunction doConnect(self, family, _options, _errorHandler) {\n  self.connection = self.ssl\n    ? makeSSLConnection(self, _options)\n    : makeUnsecureConnection(self, family);\n\n  // Add handlers for events\n  self.connection.once('error', _errorHandler);\n  self.connection.once('timeout', timeoutHandler(self));\n  self.connection.once('close', closeHandler(self));\n  self.connection.on('data', dataHandler(self));\n}\n\n/**\n * Connect\n * @method\n */\nConnection.prototype.connect = function(_options) {\n  _options = _options || {};\n  // Set the connections\n  if (connectionAccounting) addConnection(this.id, this);\n  // Check if we are overriding the promoteLongs\n  if (typeof _options.promoteLongs === 'boolean') {\n    this.responseOptions.promoteLongs = _options.promoteLongs;\n    this.responseOptions.promoteValues = _options.promoteValues;\n    this.responseOptions.promoteBuffers = _options.promoteBuffers;\n  }\n\n  const _errorHandler = errorHandler(this);\n\n  if (this.family !== void 0) {\n    return doConnect(this, this.family, _options, _errorHandler);\n  }\n\n  return doConnect(this, 6, _options, err => {\n    if (this.logger.isDebug()) {\n      this.logger.debug(\n        f(\n          'connection %s for [%s:%s] errored out with [%s]',\n          this.id,\n          this.host,\n          this.port,\n          JSON.stringify(err)\n        )\n      );\n    }\n\n    // clean up existing event handlers\n    this.connection.removeAllListeners('error');\n    this.connection.removeAllListeners('timeout');\n    this.connection.removeAllListeners('close');\n    this.connection.removeAllListeners('data');\n    this.connection = undefined;\n\n    return doConnect(this, 4, _options, _errorHandler);\n  });\n};\n\n/**\n * Unref this connection\n * @method\n * @return {boolean}\n */\nConnection.prototype.unref = function() {\n  if (this.connection) this.connection.unref();\n  else {\n    var self = this;\n    this.once('connect', function() {\n      self.connection.unref();\n    });\n  }\n};\n\n/**\n * Destroy connection\n * @method\n */\nConnection.prototype.destroy = function() {\n  // Set the connections\n  if (connectionAccounting) deleteConnection(this.id);\n  if (this.connection) {\n    // Catch posssible exception thrown by node 0.10.x\n    try {\n      this.connection.end();\n    } catch (err) {} // eslint-disable-line\n    // Destroy connection\n    this.connection.destroy();\n  }\n\n  this.destroyed = true;\n};\n\n/**\n * Write to connection\n * @method\n * @param {Command} command Command to write out need to implement toBin and toBinUnified\n */\nConnection.prototype.write = function(buffer) {\n  var i;\n  // Debug Log\n  if (this.logger.isDebug()) {\n    if (!Array.isArray(buffer)) {\n      this.logger.debug(\n        f('writing buffer [%s] to %s:%s', buffer.toString('hex'), this.host, this.port)\n      );\n    } else {\n      for (i = 0; i < buffer.length; i++)\n        this.logger.debug(\n          f('writing buffer [%s] to %s:%s', buffer[i].toString('hex'), this.host, this.port)\n        );\n    }\n  }\n\n  // Double check that the connection is not destroyed\n  if (this.connection.destroyed === false) {\n    // Write out the command\n    if (!Array.isArray(buffer)) {\n      this.connection.write(buffer, 'binary');\n      return true;\n    }\n\n    // Iterate over all buffers and write them in order to the socket\n    for (i = 0; i < buffer.length; i++) this.connection.write(buffer[i], 'binary');\n    return true;\n  }\n\n  // Connection is destroyed return write failed\n  return false;\n};\n\n/**\n * Return id of connection as a string\n * @method\n * @return {string}\n */\nConnection.prototype.toString = function() {\n  return '' + this.id;\n};\n\n/**\n * Return json object of connection\n * @method\n * @return {object}\n */\nConnection.prototype.toJSON = function() {\n  return { id: this.id, host: this.host, port: this.port };\n};\n\n/**\n * Is the connection connected\n * @method\n * @return {boolean}\n */\nConnection.prototype.isConnected = function() {\n  if (this.destroyed) return false;\n  return !this.connection.destroyed && this.connection.writable;\n};\n\n/**\n * A server connect event, used to verify that the connection is up and running\n *\n * @event Connection#connect\n * @type {Connection}\n */\n\n/**\n * The server connection closed, all pool connections closed\n *\n * @event Connection#close\n * @type {Connection}\n */\n\n/**\n * The server connection caused an error, all pool connections closed\n *\n * @event Connection#error\n * @type {Connection}\n */\n\n/**\n * The server connection timed out, all pool connections closed\n *\n * @event Connection#timeout\n * @type {Connection}\n */\n\n/**\n * The driver experienced an invalid message, all pool connections closed\n *\n * @event Connection#parseError\n * @type {Connection}\n */\n\nmodule.exports = Connection;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/connection/connection.js\n// module id = 111\n// module chunks = 0","'use strict';\n\nvar toError = require('./utils').toError,\n  Define = require('./metadata'),\n  shallowClone = require('./utils').shallowClone,\n  executeOperation = require('./utils').executeOperation;\n\n/**\n * @fileOverview The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @example\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n *\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Use the admin database for the operation\n *   const adminDb = client.db(dbName).admin();\n *\n *   // List all the available databases\n *   adminDb.listDatabases(function(err, dbs) {\n *     test.equal(null, err);\n *     test.ok(dbs.databases.length > 0);\n *     client.close();\n *   });\n * });\n */\n\n/**\n * Create a new Admin instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @return {Admin} a collection instance.\n */\nvar Admin = function(db, topology, promiseLibrary) {\n  if (!(this instanceof Admin)) return new Admin(db, topology);\n\n  // Internal state\n  this.s = {\n    db: db,\n    topology: topology,\n    promiseLibrary: promiseLibrary\n  };\n};\n\nvar define = (Admin.define = new Define('Admin', Admin, false));\n\n/**\n * The callback format for results\n * @callback Admin~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object} result The result object if the command was executed successfully.\n */\n\n/**\n * Execute a command\n * @method\n * @param {object} command The command hash\n * @param {object} [options=null] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {number} [options.maxTimeMS=null] Number of milliseconds to wait before aborting the query.\n * @param {Admin~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nAdmin.prototype.command = function(command, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  options = args.length ? args.shift() : {};\n\n  return executeOperation(this.s.db.s.topology, this.s.db.executeDbAdminCommand.bind(this.s.db), [\n    command,\n    options,\n    callback\n  ]);\n};\n\ndefine.classMethod('command', { callback: true, promise: true });\n\n/**\n * Retrieve the server information for the current\n * instance of the db client\n *\n * @param {Object} [options] optional parameters for this operation\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Admin~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nAdmin.prototype.buildInfo = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const cmd = { buildinfo: 1 };\n  return executeOperation(this.s.db.s.topology, this.s.db.executeDbAdminCommand.bind(this.s.db), [\n    cmd,\n    options,\n    callback\n  ]);\n};\n\ndefine.classMethod('buildInfo', { callback: true, promise: true });\n\n/**\n * Retrieve the server information for the current\n * instance of the db client\n *\n * @param {Object} [options] optional parameters for this operation\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Admin~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nAdmin.prototype.serverInfo = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const cmd = { buildinfo: 1 };\n  return executeOperation(this.s.db.s.topology, this.s.db.executeDbAdminCommand.bind(this.s.db), [\n    cmd,\n    options,\n    callback\n  ]);\n};\n\ndefine.classMethod('serverInfo', { callback: true, promise: true });\n\n/**\n * Retrieve this db's server status.\n *\n * @param {Object} [options] optional parameters for this operation\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Admin~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nAdmin.prototype.serverStatus = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeOperation(this.s.db.s.topology, serverStatus, [this, options, callback]);\n};\n\nvar serverStatus = function(self, options, callback) {\n  self.s.db.executeDbAdminCommand({ serverStatus: 1 }, options, function(err, doc) {\n    if (err == null && doc.ok === 1) {\n      callback(null, doc);\n    } else {\n      if (err) return callback(err, false);\n      return callback(toError(doc), false);\n    }\n  });\n};\n\ndefine.classMethod('serverStatus', { callback: true, promise: true });\n\n/**\n * Ping the MongoDB server and retrieve results\n *\n * @param {Object} [options] optional parameters for this operation\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Admin~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nAdmin.prototype.ping = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  const cmd = { ping: 1 };\n  return executeOperation(this.s.db.s.topology, this.s.db.executeDbAdminCommand.bind(this.s.db), [\n    cmd,\n    options,\n    callback\n  ]);\n};\n\ndefine.classMethod('ping', { callback: true, promise: true });\n\n// Get write concern\nvar writeConcern = function(options, db) {\n  options = shallowClone(options);\n\n  // If options already contain write concerns return it\n  if (options.w || options.wtimeout || options.j || options.fsync) {\n    return options;\n  }\n\n  // Set db write concern if available\n  if (db.writeConcern) {\n    if (options.w) options.w = db.writeConcern.w;\n    if (options.wtimeout) options.wtimeout = db.writeConcern.wtimeout;\n    if (options.j) options.j = db.writeConcern.j;\n    if (options.fsync) options.fsync = db.writeConcern.fsync;\n  }\n\n  // Return modified options\n  return options;\n};\n\n/**\n * Add a user to the database.\n * @method\n * @param {string} username The username.\n * @param {string} password The password.\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.fsync=false] Specify a file sync write concern.\n * @param {object} [options.customData=null] Custom data associated with the user (only Mongodb 2.6 or higher)\n * @param {object[]} [options.roles=null] Roles associated with the created user (only Mongodb 2.6 or higher)\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Admin~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nAdmin.prototype.addUser = function(username, password, options, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n\n  options = args.length ? args.shift() : {};\n  options = options || {};\n  // Get the options\n  options = writeConcern(options, self.s.db);\n  // Set the db name to admin\n  options.dbName = 'admin';\n\n  return executeOperation(this.s.db.s.topology, this.s.db.addUser.bind(this.s.db), [\n    username,\n    password,\n    options,\n    callback\n  ]);\n};\n\ndefine.classMethod('addUser', { callback: true, promise: true });\n\n/**\n * Remove a user from a database\n * @method\n * @param {string} username The username.\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.fsync=false] Specify a file sync write concern.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Admin~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nAdmin.prototype.removeUser = function(username, options, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n\n  options = args.length ? args.shift() : {};\n  options = options || {};\n  // Get the options\n  options = writeConcern(options, self.s.db);\n  // Set the db name\n  options.dbName = 'admin';\n\n  return executeOperation(this.s.db.s.topology, this.s.db.removeUser.bind(this.s.db), [\n    username,\n    options,\n    callback\n  ]);\n};\n\ndefine.classMethod('removeUser', { callback: true, promise: true });\n\n/**\n * Validate an existing collection\n *\n * @param {string} collectionName The name of the collection to validate.\n * @param {object} [options=null] Optional settings.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Admin~resultCallback} [callback] The command result callback.\n * @return {Promise} returns Promise if no callback passed\n */\nAdmin.prototype.validateCollection = function(collectionName, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeOperation(this.s.db.s.topology, validateCollection, [\n    this,\n    collectionName,\n    options,\n    callback\n  ]);\n};\n\nvar validateCollection = function(self, collectionName, options, callback) {\n  var command = { validate: collectionName };\n  var keys = Object.keys(options);\n\n  // Decorate command with extra options\n  for (var i = 0; i < keys.length; i++) {\n    if (options.hasOwnProperty(keys[i]) && keys[i] !== 'session') {\n      command[keys[i]] = options[keys[i]];\n    }\n  }\n\n  self.s.db.command(command, options, function(err, doc) {\n    if (err != null) return callback(err, null);\n\n    if (doc.ok === 0) return callback(new Error('Error with validate command'), null);\n    if (doc.result != null && doc.result.constructor !== String)\n      return callback(new Error('Error with validation data'), null);\n    if (doc.result != null && doc.result.match(/exception|corrupt/) != null)\n      return callback(new Error('Error: invalid collection ' + collectionName), null);\n    if (doc.valid != null && !doc.valid)\n      return callback(new Error('Error: invalid collection ' + collectionName), null);\n\n    return callback(null, doc);\n  });\n};\n\ndefine.classMethod('validateCollection', { callback: true, promise: true });\n\n/**\n * List the available databases\n *\n * @param {object} [options=null] Optional settings.\n * @param {boolean} [options.nameOnly=false] Whether the command should return only db names, or names and size info.\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Admin~resultCallback} [callback] The command result callback.\n * @return {Promise} returns Promise if no callback passed\n */\nAdmin.prototype.listDatabases = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  var cmd = { listDatabases: 1 };\n  if (options.nameOnly) cmd.nameOnly = Number(cmd.nameOnly);\n  return executeOperation(this.s.db.s.topology, this.s.db.executeDbAdminCommand.bind(this.s.db), [\n    cmd,\n    options,\n    callback\n  ]);\n};\n\ndefine.classMethod('listDatabases', { callback: true, promise: true });\n\n/**\n * Get ReplicaSet status\n *\n * @param {Object} [options] optional parameters for this operation\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {Admin~resultCallback} [callback] The command result callback.\n * @return {Promise} returns Promise if no callback passed\n */\nAdmin.prototype.replSetGetStatus = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeOperation(this.s.db.s.topology, replSetGetStatus, [this, options, callback]);\n};\n\nvar replSetGetStatus = function(self, options, callback) {\n  self.s.db.executeDbAdminCommand({ replSetGetStatus: 1 }, options, function(err, doc) {\n    if (err == null && doc.ok === 1) return callback(null, doc);\n    if (err) return callback(err, false);\n    callback(toError(doc), false);\n  });\n};\n\ndefine.classMethod('replSetGetStatus', { callback: true, promise: true });\n\nmodule.exports = Admin;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/admin.js\n// module id = 112\n// module chunks = 0","'use strict';\n\nvar Binary = require('mongodb-core').BSON.Binary,\n  ObjectID = require('mongodb-core').BSON.ObjectID;\n\n/**\n * Class for representing a single chunk in GridFS.\n *\n * @class\n *\n * @param file {GridStore} The {@link GridStore} object holding this chunk.\n * @param mongoObject {object} The mongo object representation of this chunk.\n *\n * @throws Error when the type of data field for {@link mongoObject} is not\n *     supported. Currently supported types for data field are instances of\n *     {@link String}, {@link Array}, {@link Binary} and {@link Binary}\n *     from the bson module\n *\n * @see Chunk#buildMongoObject\n */\nvar Chunk = function(file, mongoObject, writeConcern) {\n  if (!(this instanceof Chunk)) return new Chunk(file, mongoObject);\n\n  this.file = file;\n  var mongoObjectFinal = mongoObject == null ? {} : mongoObject;\n  this.writeConcern = writeConcern || { w: 1 };\n  this.objectId = mongoObjectFinal._id == null ? new ObjectID() : mongoObjectFinal._id;\n  this.chunkNumber = mongoObjectFinal.n == null ? 0 : mongoObjectFinal.n;\n  this.data = new Binary();\n\n  if (typeof mongoObjectFinal.data === 'string') {\n    var buffer = new Buffer(mongoObjectFinal.data.length);\n    buffer.write(mongoObjectFinal.data, 0, mongoObjectFinal.data.length, 'binary');\n    this.data = new Binary(buffer);\n  } else if (Array.isArray(mongoObjectFinal.data)) {\n    buffer = new Buffer(mongoObjectFinal.data.length);\n    var data = mongoObjectFinal.data.join('');\n    buffer.write(data, 0, data.length, 'binary');\n    this.data = new Binary(buffer);\n  } else if (mongoObjectFinal.data && mongoObjectFinal.data._bsontype === 'Binary') {\n    this.data = mongoObjectFinal.data;\n  } else if (!Buffer.isBuffer(mongoObjectFinal.data) && !(mongoObjectFinal.data == null)) {\n    throw Error('Illegal chunk format');\n  }\n\n  // Update position\n  this.internalPosition = 0;\n};\n\n/**\n * Writes a data to this object and advance the read/write head.\n *\n * @param data {string} the data to write\n * @param callback {function(*, GridStore)} This will be called after executing\n *     this method. The first parameter will contain null and the second one\n *     will contain a reference to this object.\n */\nChunk.prototype.write = function(data, callback) {\n  this.data.write(data, this.internalPosition, data.length, 'binary');\n  this.internalPosition = this.data.length();\n  if (callback != null) return callback(null, this);\n  return this;\n};\n\n/**\n * Reads data and advances the read/write head.\n *\n * @param length {number} The length of data to read.\n *\n * @return {string} The data read if the given length will not exceed the end of\n *     the chunk. Returns an empty String otherwise.\n */\nChunk.prototype.read = function(length) {\n  // Default to full read if no index defined\n  length = length == null || length === 0 ? this.length() : length;\n\n  if (this.length() - this.internalPosition + 1 >= length) {\n    var data = this.data.read(this.internalPosition, length);\n    this.internalPosition = this.internalPosition + length;\n    return data;\n  } else {\n    return '';\n  }\n};\n\nChunk.prototype.readSlice = function(length) {\n  if (this.length() - this.internalPosition >= length) {\n    var data = null;\n    if (this.data.buffer != null) {\n      //Pure BSON\n      data = this.data.buffer.slice(this.internalPosition, this.internalPosition + length);\n    } else {\n      //Native BSON\n      data = new Buffer(length);\n      length = this.data.readInto(data, this.internalPosition);\n    }\n    this.internalPosition = this.internalPosition + length;\n    return data;\n  } else {\n    return null;\n  }\n};\n\n/**\n * Checks if the read/write head is at the end.\n *\n * @return {boolean} Whether the read/write head has reached the end of this\n *     chunk.\n */\nChunk.prototype.eof = function() {\n  return this.internalPosition === this.length() ? true : false;\n};\n\n/**\n * Reads one character from the data of this chunk and advances the read/write\n * head.\n *\n * @return {string} a single character data read if the the read/write head is\n *     not at the end of the chunk. Returns an empty String otherwise.\n */\nChunk.prototype.getc = function() {\n  return this.read(1);\n};\n\n/**\n * Clears the contents of the data in this chunk and resets the read/write head\n * to the initial position.\n */\nChunk.prototype.rewind = function() {\n  this.internalPosition = 0;\n  this.data = new Binary();\n};\n\n/**\n * Saves this chunk to the database. Also overwrites existing entries having the\n * same id as this chunk.\n *\n * @param callback {function(*, GridStore)} This will be called after executing\n *     this method. The first parameter will contain null and the second one\n *     will contain a reference to this object.\n */\nChunk.prototype.save = function(options, callback) {\n  var self = this;\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  self.file.chunkCollection(function(err, collection) {\n    if (err) return callback(err);\n\n    // Merge the options\n    var writeOptions = { upsert: true };\n    for (var name in options) writeOptions[name] = options[name];\n    for (name in self.writeConcern) writeOptions[name] = self.writeConcern[name];\n\n    if (self.data.length() > 0) {\n      self.buildMongoObject(function(mongoObject) {\n        var options = { forceServerObjectId: true };\n        for (var name in self.writeConcern) {\n          options[name] = self.writeConcern[name];\n        }\n\n        collection.replaceOne({ _id: self.objectId }, mongoObject, writeOptions, function(err) {\n          callback(err, self);\n        });\n      });\n    } else {\n      callback(null, self);\n    }\n    // });\n  });\n};\n\n/**\n * Creates a mongoDB object representation of this chunk.\n *\n * @param callback {function(Object)} This will be called after executing this\n *     method. The object will be passed to the first parameter and will have\n *     the structure:\n *\n *        <pre><code>\n *        {\n *          '_id' : , // {number} id for this chunk\n *          'files_id' : , // {number} foreign key to the file collection\n *          'n' : , // {number} chunk number\n *          'data' : , // {bson#Binary} the chunk data itself\n *        }\n *        </code></pre>\n *\n * @see <a href=\"http://www.mongodb.org/display/DOCS/GridFS+Specification#GridFSSpecification-{{chunks}}\">MongoDB GridFS Chunk Object Structure</a>\n */\nChunk.prototype.buildMongoObject = function(callback) {\n  var mongoObject = {\n    files_id: this.file.fileId,\n    n: this.chunkNumber,\n    data: this.data\n  };\n  // If we are saving using a specific ObjectId\n  if (this.objectId != null) mongoObject._id = this.objectId;\n\n  callback(mongoObject);\n};\n\n/**\n * @return {number} the length of the data\n */\nChunk.prototype.length = function() {\n  return this.data.length();\n};\n\n/**\n * The position of the read/write head\n * @name position\n * @lends Chunk#\n * @field\n */\nObject.defineProperty(Chunk.prototype, 'position', {\n  enumerable: true,\n  get: function() {\n    return this.internalPosition;\n  },\n  set: function(value) {\n    this.internalPosition = value;\n  }\n});\n\n/**\n * The default chunk size\n * @constant\n */\nChunk.DEFAULT_CHUNK_SIZE = 1024 * 255;\n\nmodule.exports = Chunk;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/gridfs/chunk.js\n// module id = 113\n// module chunks = 0","'use strict';\n\n/**\n * @fileOverview GridFS is a tool for MongoDB to store files to the database.\n * Because of the restrictions of the object size the database can hold, a\n * facility to split a file into several chunks is needed. The {@link GridStore}\n * class offers a simplified api to interact with files while managing the\n * chunks of split files behind the scenes. More information about GridFS can be\n * found <a href=\"http://www.mongodb.org/display/DOCS/GridFS\">here</a>.\n *\n * @example\n * const MongoClient = require('mongodb').MongoClient;\n * const GridStore = require('mongodb').GridStore;\n * const ObjectID = require('mongodb').ObjectID;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   const db = client.db(dbName);\n *   const gridStore = new GridStore(db, null, \"w\");\n *   gridStore.open(function(err, gridStore) {\n *     gridStore.write(\"hello world!\", function(err, gridStore) {\n *       gridStore.close(function(err, result) {\n *         // Let's read the file using object Id\n *         GridStore.read(db, result._id, function(err, data) {\n *           test.equal('hello world!', data);\n *           client.close();\n *           test.done();\n *         });\n *       });\n *     });\n *   });\n * });\n */\nvar Chunk = require('./chunk'),\n  ObjectID = require('mongodb-core').BSON.ObjectID,\n  ReadPreference = require('mongodb-core').ReadPreference,\n  Buffer = require('buffer').Buffer,\n  Collection = require('../collection'),\n  fs = require('fs'),\n  f = require('util').format,\n  util = require('util'),\n  Define = require('../metadata'),\n  MongoError = require('mongodb-core').MongoError,\n  inherits = util.inherits,\n  Duplex = require('stream').Duplex,\n  shallowClone = require('../utils').shallowClone,\n  executeOperation = require('../utils').executeOperation;\n\nvar REFERENCE_BY_FILENAME = 0,\n  REFERENCE_BY_ID = 1;\n\n/**\n * Namespace provided by the mongodb-core and node.js\n * @external Duplex\n */\n\n/**\n * Create a new GridStore instance\n *\n * Modes\n *  - **\"r\"** - read only. This is the default mode.\n *  - **\"w\"** - write in truncate mode. Existing data will be overwriten.\n *\n * @class\n * @param {Db} db A database instance to interact with.\n * @param {object} [id] optional unique id for this file\n * @param {string} [filename] optional filename for this file, no unique constrain on the field\n * @param {string} mode set the mode for this file.\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.fsync=false] Specify a file sync write concern.\n * @param {string} [options.root=null] Root collection to use. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.\n * @param {string} [options.content_type=null] MIME type of the file. Defaults to **{GridStore.DEFAULT_CONTENT_TYPE}**.\n * @param {number} [options.chunk_size=261120] Size for the chunk. Defaults to **{Chunk.DEFAULT_CHUNK_SIZE}**.\n * @param {object} [options.metadata=null] Arbitrary data the user wants to store.\n * @param {object} [options.promiseLibrary=null] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @property {number} chunkSize Get the gridstore chunk size.\n * @property {number} md5 The md5 checksum for this file.\n * @property {number} chunkNumber The current chunk number the gridstore has materialized into memory\n * @return {GridStore} a GridStore instance.\n * @deprecated Use GridFSBucket API instead\n */\nvar GridStore = function GridStore(db, id, filename, mode, options) {\n  if (!(this instanceof GridStore)) return new GridStore(db, id, filename, mode, options);\n  this.db = db;\n\n  // Handle options\n  if (typeof options === 'undefined') options = {};\n  // Handle mode\n  if (typeof mode === 'undefined') {\n    mode = filename;\n    filename = undefined;\n  } else if (typeof mode === 'object') {\n    options = mode;\n    mode = filename;\n    filename = undefined;\n  }\n\n  if (id && id._bsontype === 'ObjectID') {\n    this.referenceBy = REFERENCE_BY_ID;\n    this.fileId = id;\n    this.filename = filename;\n  } else if (typeof filename === 'undefined') {\n    this.referenceBy = REFERENCE_BY_FILENAME;\n    this.filename = id;\n    if (mode.indexOf('w') != null) {\n      this.fileId = new ObjectID();\n    }\n  } else {\n    this.referenceBy = REFERENCE_BY_ID;\n    this.fileId = id;\n    this.filename = filename;\n  }\n\n  // Set up the rest\n  this.mode = mode == null ? 'r' : mode;\n  this.options = options || {};\n\n  // Opened\n  this.isOpen = false;\n\n  // Set the root if overridden\n  this.root =\n    this.options['root'] == null ? GridStore.DEFAULT_ROOT_COLLECTION : this.options['root'];\n  this.position = 0;\n  this.readPreference =\n    this.options.readPreference || db.options.readPreference || ReadPreference.primary;\n  this.writeConcern = _getWriteConcern(db, this.options);\n  // Set default chunk size\n  this.internalChunkSize =\n    this.options['chunkSize'] == null ? Chunk.DEFAULT_CHUNK_SIZE : this.options['chunkSize'];\n\n  // Get the promiseLibrary\n  var promiseLibrary = this.options.promiseLibrary || Promise;\n\n  // Set the promiseLibrary\n  this.promiseLibrary = promiseLibrary;\n\n  Object.defineProperty(this, 'chunkSize', {\n    enumerable: true,\n    get: function() {\n      return this.internalChunkSize;\n    },\n    set: function(value) {\n      if (!(this.mode[0] === 'w' && this.position === 0 && this.uploadDate == null)) {\n        this.internalChunkSize = this.internalChunkSize;\n      } else {\n        this.internalChunkSize = value;\n      }\n    }\n  });\n\n  Object.defineProperty(this, 'md5', {\n    enumerable: true,\n    get: function() {\n      return this.internalMd5;\n    }\n  });\n\n  Object.defineProperty(this, 'chunkNumber', {\n    enumerable: true,\n    get: function() {\n      return this.currentChunk && this.currentChunk.chunkNumber\n        ? this.currentChunk.chunkNumber\n        : null;\n    }\n  });\n};\n\nvar define = (GridStore.define = new Define('Gridstore', GridStore, true));\n\n/**\n * The callback format for the Gridstore.open method\n * @callback GridStore~openCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {GridStore} gridStore The GridStore instance if the open method was successful.\n */\n\n/**\n * Opens the file from the database and initialize this object. Also creates a\n * new one if file does not exist.\n *\n * @method\n * @param {object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~openCallback} [callback] this will be called after executing this method\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.open = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  if (this.mode !== 'w' && this.mode !== 'w+' && this.mode !== 'r') {\n    throw MongoError.create({ message: 'Illegal mode ' + this.mode, driver: true });\n  }\n\n  return executeOperation(this.db.s.topology, open, [this, options, callback], {\n    skipSessions: true\n  });\n};\n\nvar open = function(self, options, callback) {\n  // Get the write concern\n  var writeConcern = _getWriteConcern(self.db, self.options);\n\n  // If we are writing we need to ensure we have the right indexes for md5's\n  if (self.mode === 'w' || self.mode === 'w+') {\n    // Get files collection\n    var collection = self.collection();\n    // Put index on filename\n    collection.ensureIndex([['filename', 1]], writeConcern, function() {\n      // Get chunk collection\n      var chunkCollection = self.chunkCollection();\n      // Make an unique index for compatibility with mongo-cxx-driver:legacy\n      var chunkIndexOptions = shallowClone(writeConcern);\n      chunkIndexOptions.unique = true;\n      // Ensure index on chunk collection\n      chunkCollection.ensureIndex([['files_id', 1], ['n', 1]], chunkIndexOptions, function() {\n        // Open the connection\n        _open(self, writeConcern, function(err, r) {\n          if (err) return callback(err);\n          self.isOpen = true;\n          callback(err, r);\n        });\n      });\n    });\n  } else {\n    // Open the gridstore\n    _open(self, writeConcern, function(err, r) {\n      if (err) return callback(err);\n      self.isOpen = true;\n      callback(err, r);\n    });\n  }\n};\n\n// Push the definition for open\ndefine.classMethod('open', { callback: true, promise: true });\n\n/**\n * Verify if the file is at EOF.\n *\n * @method\n * @return {boolean} true if the read/write head is at the end of this file.\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.eof = function() {\n  return this.position === this.length ? true : false;\n};\n\ndefine.classMethod('eof', { callback: false, promise: false, returns: [Boolean] });\n\n/**\n * The callback result format.\n * @callback GridStore~resultCallback\n * @param {object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object} result The result from the callback.\n */\n\n/**\n * Retrieves a single character from this file.\n *\n * @method\n * @param {GridStore~resultCallback} [callback] this gets called after this method is executed. Passes null to the first parameter and the character read to the second or null to the second if the read/write head is at the end of the file.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.getc = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeOperation(this.db.s.topology, getc, [this, options, callback], {\n    skipSessions: true\n  });\n};\n\nvar getc = function(self, options, callback) {\n  if (self.eof()) {\n    callback(null, null);\n  } else if (self.currentChunk.eof()) {\n    nthChunk(self, self.currentChunk.chunkNumber + 1, function(err, chunk) {\n      self.currentChunk = chunk;\n      self.position = self.position + 1;\n      callback(err, self.currentChunk.getc());\n    });\n  } else {\n    self.position = self.position + 1;\n    callback(null, self.currentChunk.getc());\n  }\n};\n\ndefine.classMethod('getc', { callback: true, promise: true });\n\n/**\n * Writes a string to the file with a newline character appended at the end if\n * the given string does not have one.\n *\n * @method\n * @param {string} string the string to write.\n * @param {object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~resultCallback} [callback] this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.puts = function(string, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  var finalString = string.match(/\\n$/) == null ? string + '\\n' : string;\n  return executeOperation(\n    this.db.s.topology,\n    this.write.bind(this),\n    [finalString, options, callback],\n    { skipSessions: true }\n  );\n};\n\ndefine.classMethod('puts', { callback: true, promise: true });\n\n/**\n * Return a modified Readable stream including a possible transform method.\n *\n * @method\n * @return {GridStoreStream}\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.stream = function() {\n  return new GridStoreStream(this);\n};\n\ndefine.classMethod('stream', { callback: false, promise: false, returns: [GridStoreStream] });\n\n/**\n * Writes some data. This method will work properly only if initialized with mode \"w\" or \"w+\".\n *\n * @method\n * @param {(string|Buffer)} data the data to write.\n * @param {boolean} [close] closes this file after writing if set to true.\n * @param {object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~resultCallback} [callback] this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.write = function write(data, close, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeOperation(\n    this.db.s.topology,\n    _writeNormal,\n    [this, data, close, options, callback],\n    { skipSessions: true }\n  );\n};\n\ndefine.classMethod('write', { callback: true, promise: true });\n\n/**\n * Handles the destroy part of a stream\n *\n * @method\n * @result {null}\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.destroy = function destroy() {\n  // close and do not emit any more events. queued data is not sent.\n  if (!this.writable) return;\n  this.readable = false;\n  if (this.writable) {\n    this.writable = false;\n    this._q.length = 0;\n    this.emit('close');\n  }\n};\n\ndefine.classMethod('destroy', { callback: false, promise: false });\n\n/**\n * Stores a file from the file system to the GridFS database.\n *\n * @method\n * @param {(string|Buffer|FileHandle)} file the file to store.\n * @param {object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~resultCallback} [callback] this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.writeFile = function(file, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeOperation(this.db.s.topology, writeFile, [this, file, options, callback], {\n    skipSessions: true\n  });\n};\n\nvar writeFile = function(self, file, options, callback) {\n  if (typeof file === 'string') {\n    fs.open(file, 'r', function(err, fd) {\n      if (err) return callback(err);\n      self.writeFile(fd, callback);\n    });\n    return;\n  }\n\n  self.open(function(err, self) {\n    if (err) return callback(err, self);\n\n    fs.fstat(file, function(err, stats) {\n      if (err) return callback(err, self);\n\n      var offset = 0;\n      var index = 0;\n\n      // Write a chunk\n      var writeChunk = function() {\n        // Allocate the buffer\n        var _buffer = new Buffer(self.chunkSize);\n        // Read the file\n        fs.read(file, _buffer, 0, _buffer.length, offset, function(err, bytesRead, data) {\n          if (err) return callback(err, self);\n\n          offset = offset + bytesRead;\n\n          // Create a new chunk for the data\n          var chunk = new Chunk(self, { n: index++ }, self.writeConcern);\n          chunk.write(data.slice(0, bytesRead), function(err, chunk) {\n            if (err) return callback(err, self);\n\n            chunk.save({}, function(err) {\n              if (err) return callback(err, self);\n\n              self.position = self.position + bytesRead;\n\n              // Point to current chunk\n              self.currentChunk = chunk;\n\n              if (offset >= stats.size) {\n                fs.close(file, function(err) {\n                  if (err) return callback(err);\n\n                  self.close(function(err) {\n                    if (err) return callback(err, self);\n                    return callback(null, self);\n                  });\n                });\n              } else {\n                return process.nextTick(writeChunk);\n              }\n            });\n          });\n        });\n      };\n\n      // Process the first write\n      process.nextTick(writeChunk);\n    });\n  });\n};\n\ndefine.classMethod('writeFile', { callback: true, promise: true });\n\n/**\n * Saves this file to the database. This will overwrite the old entry if it\n * already exists. This will work properly only if mode was initialized to\n * \"w\" or \"w+\".\n *\n * @method\n * @param {object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~resultCallback} [callback] this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.close = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeOperation(this.db.s.topology, close, [this, options, callback], {\n    skipSessions: true\n  });\n};\n\nvar close = function(self, options, callback) {\n  if (self.mode[0] === 'w') {\n    // Set up options\n    options = Object.assign({}, self.writeConcern, options);\n\n    if (self.currentChunk != null && self.currentChunk.position > 0) {\n      self.currentChunk.save({}, function(err) {\n        if (err && typeof callback === 'function') return callback(err);\n\n        self.collection(function(err, files) {\n          if (err && typeof callback === 'function') return callback(err);\n\n          // Build the mongo object\n          if (self.uploadDate != null) {\n            buildMongoObject(self, function(err, mongoObject) {\n              if (err) {\n                if (typeof callback === 'function') return callback(err);\n                else throw err;\n              }\n\n              files.save(mongoObject, options, function(err) {\n                if (typeof callback === 'function') callback(err, mongoObject);\n              });\n            });\n          } else {\n            self.uploadDate = new Date();\n            buildMongoObject(self, function(err, mongoObject) {\n              if (err) {\n                if (typeof callback === 'function') return callback(err);\n                else throw err;\n              }\n\n              files.save(mongoObject, options, function(err) {\n                if (typeof callback === 'function') callback(err, mongoObject);\n              });\n            });\n          }\n        });\n      });\n    } else {\n      self.collection(function(err, files) {\n        if (err && typeof callback === 'function') return callback(err);\n\n        self.uploadDate = new Date();\n        buildMongoObject(self, function(err, mongoObject) {\n          if (err) {\n            if (typeof callback === 'function') return callback(err);\n            else throw err;\n          }\n\n          files.save(mongoObject, options, function(err) {\n            if (typeof callback === 'function') callback(err, mongoObject);\n          });\n        });\n      });\n    }\n  } else if (self.mode[0] === 'r') {\n    if (typeof callback === 'function') callback(null, null);\n  } else {\n    if (typeof callback === 'function')\n      callback(MongoError.create({ message: f('Illegal mode %s', self.mode), driver: true }));\n  }\n};\n\ndefine.classMethod('close', { callback: true, promise: true });\n\n/**\n * The collection callback format.\n * @callback GridStore~collectionCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Collection} collection The collection from the command execution.\n */\n\n/**\n * Retrieve this file's chunks collection.\n *\n * @method\n * @param {GridStore~collectionCallback} callback the command callback.\n * @return {Collection}\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.chunkCollection = function(callback) {\n  if (typeof callback === 'function') return this.db.collection(this.root + '.chunks', callback);\n  return this.db.collection(this.root + '.chunks');\n};\n\ndefine.classMethod('chunkCollection', { callback: true, promise: false, returns: [Collection] });\n\n/**\n * Deletes all the chunks of this file in the database.\n *\n * @method\n * @param {object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~resultCallback} [callback] the command callback.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.unlink = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeOperation(this.db.s.topology, unlink, [this, options, callback], {\n    skipSessions: true\n  });\n};\n\nvar unlink = function(self, options, callback) {\n  deleteChunks(self, function(err) {\n    if (err !== null) {\n      err.message = 'at deleteChunks: ' + err.message;\n      return callback(err);\n    }\n\n    self.collection(function(err, collection) {\n      if (err !== null) {\n        err.message = 'at collection: ' + err.message;\n        return callback(err);\n      }\n\n      collection.remove({ _id: self.fileId }, self.writeConcern, function(err) {\n        callback(err, self);\n      });\n    });\n  });\n};\n\ndefine.classMethod('unlink', { callback: true, promise: true });\n\n/**\n * Retrieves the file collection associated with this object.\n *\n * @method\n * @param {GridStore~collectionCallback} callback the command callback.\n * @return {Collection}\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.collection = function(callback) {\n  if (typeof callback === 'function') this.db.collection(this.root + '.files', callback);\n  return this.db.collection(this.root + '.files');\n};\n\ndefine.classMethod('collection', { callback: true, promise: false, returns: [Collection] });\n\n/**\n * The readlines callback format.\n * @callback GridStore~readlinesCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {string[]} strings The array of strings returned.\n */\n\n/**\n * Read the entire file as a list of strings splitting by the provided separator.\n *\n * @method\n * @param {string} [separator] The character to be recognized as the newline separator.\n * @param {object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~readlinesCallback} [callback] the command callback.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.readlines = function(separator, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  separator = args.length ? args.shift() : '\\n';\n  separator = separator || '\\n';\n  options = args.length ? args.shift() : {};\n\n  return executeOperation(this.db.s.topology, readlines, [this, separator, options, callback], {\n    skipSessions: true\n  });\n};\n\nvar readlines = function(self, separator, options, callback) {\n  self.read(function(err, data) {\n    if (err) return callback(err);\n\n    var items = data.toString().split(separator);\n    items = items.length > 0 ? items.splice(0, items.length - 1) : [];\n    for (var i = 0; i < items.length; i++) {\n      items[i] = items[i] + separator;\n    }\n\n    callback(null, items);\n  });\n};\n\ndefine.classMethod('readlines', { callback: true, promise: true });\n\n/**\n * Deletes all the chunks of this file in the database if mode was set to \"w\" or\n * \"w+\" and resets the read/write head to the initial position.\n *\n * @method\n * @param {object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~resultCallback} [callback] this will be called after executing this method. The first parameter will contain null and the second one will contain a reference to this object.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.rewind = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  return executeOperation(this.db.s.topology, rewind, [this, options, callback], {\n    skipSessions: true\n  });\n};\n\nvar rewind = function(self, options, callback) {\n  if (self.currentChunk.chunkNumber !== 0) {\n    if (self.mode[0] === 'w') {\n      deleteChunks(self, function(err) {\n        if (err) return callback(err);\n        self.currentChunk = new Chunk(self, { n: 0 }, self.writeConcern);\n        self.position = 0;\n        callback(null, self);\n      });\n    } else {\n      self.currentChunk(0, function(err, chunk) {\n        if (err) return callback(err);\n        self.currentChunk = chunk;\n        self.currentChunk.rewind();\n        self.position = 0;\n        callback(null, self);\n      });\n    }\n  } else {\n    self.currentChunk.rewind();\n    self.position = 0;\n    callback(null, self);\n  }\n};\n\ndefine.classMethod('rewind', { callback: true, promise: true });\n\n/**\n * The read callback format.\n * @callback GridStore~readCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Buffer} data The data read from the GridStore object\n */\n\n/**\n * Retrieves the contents of this file and advances the read/write head. Works with Buffers only.\n *\n * There are 3 signatures for this method:\n *\n * (callback)\n * (length, callback)\n * (length, buffer, callback)\n *\n * @method\n * @param {number} [length] the number of characters to read. Reads all the characters from the read/write head to the EOF if not specified.\n * @param {(string|Buffer)} [buffer] a string to hold temporary data. This is used for storing the string data read so far when recursively calling this method.\n * @param {object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~readCallback} [callback] the command callback.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.read = function(length, buffer, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  length = args.length ? args.shift() : null;\n  buffer = args.length ? args.shift() : null;\n  options = args.length ? args.shift() : {};\n\n  return executeOperation(this.db.s.topology, read, [this, length, buffer, options, callback], {\n    skipSessions: true\n  });\n};\n\nvar read = function(self, length, buffer, options, callback) {\n  // The data is a c-terminated string and thus the length - 1\n  var finalLength = length == null ? self.length - self.position : length;\n  var finalBuffer = buffer == null ? new Buffer(finalLength) : buffer;\n  // Add a index to buffer to keep track of writing position or apply current index\n  finalBuffer._index = buffer != null && buffer._index != null ? buffer._index : 0;\n\n  if (self.currentChunk.length() - self.currentChunk.position + finalBuffer._index >= finalLength) {\n    var slice = self.currentChunk.readSlice(finalLength - finalBuffer._index);\n    // Copy content to final buffer\n    slice.copy(finalBuffer, finalBuffer._index);\n    // Update internal position\n    self.position = self.position + finalBuffer.length;\n    // Check if we don't have a file at all\n    if (finalLength === 0 && finalBuffer.length === 0)\n      return callback(MongoError.create({ message: 'File does not exist', driver: true }), null);\n    // Else return data\n    return callback(null, finalBuffer);\n  }\n\n  // Read the next chunk\n  slice = self.currentChunk.readSlice(self.currentChunk.length() - self.currentChunk.position);\n  // Copy content to final buffer\n  slice.copy(finalBuffer, finalBuffer._index);\n  // Update index position\n  finalBuffer._index += slice.length;\n\n  // Load next chunk and read more\n  nthChunk(self, self.currentChunk.chunkNumber + 1, function(err, chunk) {\n    if (err) return callback(err);\n\n    if (chunk.length() > 0) {\n      self.currentChunk = chunk;\n      self.read(length, finalBuffer, callback);\n    } else {\n      if (finalBuffer._index > 0) {\n        callback(null, finalBuffer);\n      } else {\n        callback(\n          MongoError.create({\n            message: 'no chunks found for file, possibly corrupt',\n            driver: true\n          }),\n          null\n        );\n      }\n    }\n  });\n};\n\ndefine.classMethod('read', { callback: true, promise: true });\n\n/**\n * The tell callback format.\n * @callback GridStore~tellCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {number} position The current read position in the GridStore.\n */\n\n/**\n * Retrieves the position of the read/write head of this file.\n *\n * @method\n * @param {number} [length] the number of characters to read. Reads all the characters from the read/write head to the EOF if not specified.\n * @param {(string|Buffer)} [buffer] a string to hold temporary data. This is used for storing the string data read so far when recursively calling this method.\n * @param {object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~tellCallback} [callback] the command callback.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.tell = function(callback) {\n  var self = this;\n  // We provided a callback leg\n  if (typeof callback === 'function') return callback(null, this.position);\n  // Return promise\n  return new self.promiseLibrary(function(resolve) {\n    resolve(self.position);\n  });\n};\n\ndefine.classMethod('tell', { callback: true, promise: true });\n\n/**\n * The tell callback format.\n * @callback GridStore~gridStoreCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {GridStore} gridStore The gridStore.\n */\n\n/**\n * Moves the read/write head to a new location.\n *\n * There are 3 signatures for this method\n *\n * Seek Location Modes\n *  - **GridStore.IO_SEEK_SET**, **(default)** set the position from the start of the file.\n *  - **GridStore.IO_SEEK_CUR**, set the position from the current position in the file.\n *  - **GridStore.IO_SEEK_END**, set the position from the end of the file.\n *\n * @method\n * @param {number} [position] the position to seek to\n * @param {number} [seekLocation] seek mode. Use one of the Seek Location modes.\n * @param {object} [options] Optional settings\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~gridStoreCallback} [callback] the command callback.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.prototype.seek = function(position, seekLocation, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  seekLocation = args.length ? args.shift() : null;\n  options = args.length ? args.shift() : {};\n\n  return executeOperation(\n    this.db.s.topology,\n    seek,\n    [this, position, seekLocation, options, callback],\n    { skipSessions: true }\n  );\n};\n\nvar seek = function(self, position, seekLocation, options, callback) {\n  // Seek only supports read mode\n  if (self.mode !== 'r') {\n    return callback(\n      MongoError.create({ message: 'seek is only supported for mode r', driver: true })\n    );\n  }\n\n  var seekLocationFinal = seekLocation == null ? GridStore.IO_SEEK_SET : seekLocation;\n  var finalPosition = position;\n  var targetPosition = 0;\n\n  // Calculate the position\n  if (seekLocationFinal === GridStore.IO_SEEK_CUR) {\n    targetPosition = self.position + finalPosition;\n  } else if (seekLocationFinal === GridStore.IO_SEEK_END) {\n    targetPosition = self.length + finalPosition;\n  } else {\n    targetPosition = finalPosition;\n  }\n\n  // Get the chunk\n  var newChunkNumber = Math.floor(targetPosition / self.chunkSize);\n  var seekChunk = function() {\n    nthChunk(self, newChunkNumber, function(err, chunk) {\n      if (err) return callback(err, null);\n      if (chunk == null) return callback(new Error('no chunk found'));\n\n      // Set the current chunk\n      self.currentChunk = chunk;\n      self.position = targetPosition;\n      self.currentChunk.position = self.position % self.chunkSize;\n      callback(err, self);\n    });\n  };\n\n  seekChunk();\n};\n\ndefine.classMethod('seek', { callback: true, promise: true });\n\n/**\n * @ignore\n */\nvar _open = function(self, options, callback) {\n  var collection = self.collection();\n  // Create the query\n  var query =\n    self.referenceBy === REFERENCE_BY_ID ? { _id: self.fileId } : { filename: self.filename };\n  query = null == self.fileId && self.filename == null ? null : query;\n  options.readPreference = self.readPreference;\n\n  // Fetch the chunks\n  if (query != null) {\n    collection.findOne(query, options, function(err, doc) {\n      if (err) {\n        return error(err);\n      }\n\n      // Check if the collection for the files exists otherwise prepare the new one\n      if (doc != null) {\n        self.fileId = doc._id;\n        // Prefer a new filename over the existing one if this is a write\n        self.filename =\n          self.mode === 'r' || self.filename === undefined ? doc.filename : self.filename;\n        self.contentType = doc.contentType;\n        self.internalChunkSize = doc.chunkSize;\n        self.uploadDate = doc.uploadDate;\n        self.aliases = doc.aliases;\n        self.length = doc.length;\n        self.metadata = doc.metadata;\n        self.internalMd5 = doc.md5;\n      } else if (self.mode !== 'r') {\n        self.fileId = self.fileId == null ? new ObjectID() : self.fileId;\n        self.contentType = GridStore.DEFAULT_CONTENT_TYPE;\n        self.internalChunkSize =\n          self.internalChunkSize == null ? Chunk.DEFAULT_CHUNK_SIZE : self.internalChunkSize;\n        self.length = 0;\n      } else {\n        self.length = 0;\n        var txtId = self.fileId._bsontype === 'ObjectID' ? self.fileId.toHexString() : self.fileId;\n        return error(\n          MongoError.create({\n            message: f(\n              'file with id %s not opened for writing',\n              self.referenceBy === REFERENCE_BY_ID ? txtId : self.filename\n            ),\n            driver: true\n          }),\n          self\n        );\n      }\n\n      // Process the mode of the object\n      if (self.mode === 'r') {\n        nthChunk(self, 0, options, function(err, chunk) {\n          if (err) return error(err);\n          self.currentChunk = chunk;\n          self.position = 0;\n          callback(null, self);\n        });\n      } else if (self.mode === 'w' && doc) {\n        // Delete any existing chunks\n        deleteChunks(self, options, function(err) {\n          if (err) return error(err);\n          self.currentChunk = new Chunk(self, { n: 0 }, self.writeConcern);\n          self.contentType =\n            self.options['content_type'] == null ? self.contentType : self.options['content_type'];\n          self.internalChunkSize =\n            self.options['chunk_size'] == null\n              ? self.internalChunkSize\n              : self.options['chunk_size'];\n          self.metadata =\n            self.options['metadata'] == null ? self.metadata : self.options['metadata'];\n          self.aliases = self.options['aliases'] == null ? self.aliases : self.options['aliases'];\n          self.position = 0;\n          callback(null, self);\n        });\n      } else if (self.mode === 'w') {\n        self.currentChunk = new Chunk(self, { n: 0 }, self.writeConcern);\n        self.contentType =\n          self.options['content_type'] == null ? self.contentType : self.options['content_type'];\n        self.internalChunkSize =\n          self.options['chunk_size'] == null ? self.internalChunkSize : self.options['chunk_size'];\n        self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];\n        self.aliases = self.options['aliases'] == null ? self.aliases : self.options['aliases'];\n        self.position = 0;\n        callback(null, self);\n      } else if (self.mode === 'w+') {\n        nthChunk(self, lastChunkNumber(self), options, function(err, chunk) {\n          if (err) return error(err);\n          // Set the current chunk\n          self.currentChunk = chunk == null ? new Chunk(self, { n: 0 }, self.writeConcern) : chunk;\n          self.currentChunk.position = self.currentChunk.data.length();\n          self.metadata =\n            self.options['metadata'] == null ? self.metadata : self.options['metadata'];\n          self.aliases = self.options['aliases'] == null ? self.aliases : self.options['aliases'];\n          self.position = self.length;\n          callback(null, self);\n        });\n      }\n    });\n  } else {\n    // Write only mode\n    self.fileId = null == self.fileId ? new ObjectID() : self.fileId;\n    self.contentType = GridStore.DEFAULT_CONTENT_TYPE;\n    self.internalChunkSize =\n      self.internalChunkSize == null ? Chunk.DEFAULT_CHUNK_SIZE : self.internalChunkSize;\n    self.length = 0;\n\n    // No file exists set up write mode\n    if (self.mode === 'w') {\n      // Delete any existing chunks\n      deleteChunks(self, options, function(err) {\n        if (err) return error(err);\n        self.currentChunk = new Chunk(self, { n: 0 }, self.writeConcern);\n        self.contentType =\n          self.options['content_type'] == null ? self.contentType : self.options['content_type'];\n        self.internalChunkSize =\n          self.options['chunk_size'] == null ? self.internalChunkSize : self.options['chunk_size'];\n        self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];\n        self.aliases = self.options['aliases'] == null ? self.aliases : self.options['aliases'];\n        self.position = 0;\n        callback(null, self);\n      });\n    } else if (self.mode === 'w+') {\n      nthChunk(self, lastChunkNumber(self), options, function(err, chunk) {\n        if (err) return error(err);\n        // Set the current chunk\n        self.currentChunk = chunk == null ? new Chunk(self, { n: 0 }, self.writeConcern) : chunk;\n        self.currentChunk.position = self.currentChunk.data.length();\n        self.metadata = self.options['metadata'] == null ? self.metadata : self.options['metadata'];\n        self.aliases = self.options['aliases'] == null ? self.aliases : self.options['aliases'];\n        self.position = self.length;\n        callback(null, self);\n      });\n    }\n  }\n\n  // only pass error to callback once\n  function error(err) {\n    if (error.err) return;\n    callback((error.err = err));\n  }\n};\n\n/**\n * @ignore\n */\nvar writeBuffer = function(self, buffer, close, callback) {\n  if (typeof close === 'function') {\n    callback = close;\n    close = null;\n  }\n  var finalClose = typeof close === 'boolean' ? close : false;\n\n  if (self.mode !== 'w') {\n    callback(\n      MongoError.create({\n        message: f(\n          'file with id %s not opened for writing',\n          self.referenceBy === REFERENCE_BY_ID ? self.referenceBy : self.filename\n        ),\n        driver: true\n      }),\n      null\n    );\n  } else {\n    if (self.currentChunk.position + buffer.length >= self.chunkSize) {\n      // Write out the current Chunk and then keep writing until we have less data left than a chunkSize left\n      // to a new chunk (recursively)\n      var previousChunkNumber = self.currentChunk.chunkNumber;\n      var leftOverDataSize = self.chunkSize - self.currentChunk.position;\n      var firstChunkData = buffer.slice(0, leftOverDataSize);\n      var leftOverData = buffer.slice(leftOverDataSize);\n      // A list of chunks to write out\n      var chunksToWrite = [self.currentChunk.write(firstChunkData)];\n      // If we have more data left than the chunk size let's keep writing new chunks\n      while (leftOverData.length >= self.chunkSize) {\n        // Create a new chunk and write to it\n        var newChunk = new Chunk(self, { n: previousChunkNumber + 1 }, self.writeConcern);\n        firstChunkData = leftOverData.slice(0, self.chunkSize);\n        leftOverData = leftOverData.slice(self.chunkSize);\n        // Update chunk number\n        previousChunkNumber = previousChunkNumber + 1;\n        // Write data\n        newChunk.write(firstChunkData);\n        // Push chunk to save list\n        chunksToWrite.push(newChunk);\n      }\n\n      // Set current chunk with remaining data\n      self.currentChunk = new Chunk(self, { n: previousChunkNumber + 1 }, self.writeConcern);\n      // If we have left over data write it\n      if (leftOverData.length > 0) self.currentChunk.write(leftOverData);\n\n      // Update the position for the gridstore\n      self.position = self.position + buffer.length;\n      // Total number of chunks to write\n      var numberOfChunksToWrite = chunksToWrite.length;\n\n      for (var i = 0; i < chunksToWrite.length; i++) {\n        chunksToWrite[i].save({}, function(err) {\n          if (err) return callback(err);\n\n          numberOfChunksToWrite = numberOfChunksToWrite - 1;\n\n          if (numberOfChunksToWrite <= 0) {\n            // We care closing the file before returning\n            if (finalClose) {\n              return self.close(function(err) {\n                callback(err, self);\n              });\n            }\n\n            // Return normally\n            return callback(null, self);\n          }\n        });\n      }\n    } else {\n      // Update the position for the gridstore\n      self.position = self.position + buffer.length;\n      // We have less data than the chunk size just write it and callback\n      self.currentChunk.write(buffer);\n      // We care closing the file before returning\n      if (finalClose) {\n        return self.close(function(err) {\n          callback(err, self);\n        });\n      }\n      // Return normally\n      return callback(null, self);\n    }\n  }\n};\n\n/**\n * Creates a mongoDB object representation of this object.\n *\n *        <pre><code>\n *        {\n *          '_id' : , // {number} id for this file\n *          'filename' : , // {string} name for this file\n *          'contentType' : , // {string} mime type for this file\n *          'length' : , // {number} size of this file?\n *          'chunksize' : , // {number} chunk size used by this file\n *          'uploadDate' : , // {Date}\n *          'aliases' : , // {array of string}\n *          'metadata' : , // {string}\n *        }\n *        </code></pre>\n *\n * @ignore\n */\nvar buildMongoObject = function(self, callback) {\n  // Calcuate the length\n  var mongoObject = {\n    _id: self.fileId,\n    filename: self.filename,\n    contentType: self.contentType,\n    length: self.position ? self.position : 0,\n    chunkSize: self.chunkSize,\n    uploadDate: self.uploadDate,\n    aliases: self.aliases,\n    metadata: self.metadata\n  };\n\n  var md5Command = { filemd5: self.fileId, root: self.root };\n  self.db.command(md5Command, function(err, results) {\n    if (err) return callback(err);\n\n    mongoObject.md5 = results.md5;\n    callback(null, mongoObject);\n  });\n};\n\n/**\n * Gets the nth chunk of this file.\n * @ignore\n */\nvar nthChunk = function(self, chunkNumber, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || self.writeConcern;\n  options.readPreference = self.readPreference;\n  // Get the nth chunk\n  self\n    .chunkCollection()\n    .findOne({ files_id: self.fileId, n: chunkNumber }, options, function(err, chunk) {\n      if (err) return callback(err);\n\n      var finalChunk = chunk == null ? {} : chunk;\n      callback(null, new Chunk(self, finalChunk, self.writeConcern));\n    });\n};\n\n/**\n * @ignore\n */\nvar lastChunkNumber = function(self) {\n  return Math.floor((self.length ? self.length - 1 : 0) / self.chunkSize);\n};\n\n/**\n * Deletes all the chunks of this file in the database.\n *\n * @ignore\n */\nvar deleteChunks = function(self, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || self.writeConcern;\n\n  if (self.fileId != null) {\n    self.chunkCollection().remove({ files_id: self.fileId }, options, function(err) {\n      if (err) return callback(err, false);\n      callback(null, true);\n    });\n  } else {\n    callback(null, true);\n  }\n};\n\n/**\n * The collection to be used for holding the files and chunks collection.\n *\n * @classconstant DEFAULT_ROOT_COLLECTION\n */\nGridStore.DEFAULT_ROOT_COLLECTION = 'fs';\n\n/**\n * Default file mime type\n *\n * @classconstant DEFAULT_CONTENT_TYPE\n */\nGridStore.DEFAULT_CONTENT_TYPE = 'binary/octet-stream';\n\n/**\n * Seek mode where the given length is absolute.\n *\n * @classconstant IO_SEEK_SET\n */\nGridStore.IO_SEEK_SET = 0;\n\n/**\n * Seek mode where the given length is an offset to the current read/write head.\n *\n * @classconstant IO_SEEK_CUR\n */\nGridStore.IO_SEEK_CUR = 1;\n\n/**\n * Seek mode where the given length is an offset to the end of the file.\n *\n * @classconstant IO_SEEK_END\n */\nGridStore.IO_SEEK_END = 2;\n\n/**\n * Checks if a file exists in the database.\n *\n * @method\n * @static\n * @param {Db} db the database to query.\n * @param {string} name The name of the file to look for.\n * @param {string} [rootCollection] The root collection that holds the files and chunks collection. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.\n * @param {object} [options=null] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {object} [options.promiseLibrary=null] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~resultCallback} [callback] result from exists.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.exist = function(db, fileIdObject, rootCollection, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  rootCollection = args.length ? args.shift() : null;\n  options = args.length ? args.shift() : {};\n  options = options || {};\n\n  return executeOperation(\n    db.s.topology,\n    exists,\n    [db, fileIdObject, rootCollection, options, callback],\n    { skipSessions: true }\n  );\n};\n\nvar exists = function(db, fileIdObject, rootCollection, options, callback) {\n  // Establish read preference\n  var readPreference = options.readPreference || ReadPreference.PRIMARY;\n  // Fetch collection\n  var rootCollectionFinal =\n    rootCollection != null ? rootCollection : GridStore.DEFAULT_ROOT_COLLECTION;\n  db.collection(rootCollectionFinal + '.files', function(err, collection) {\n    if (err) return callback(err);\n\n    // Build query\n    var query =\n      typeof fileIdObject === 'string' ||\n      Object.prototype.toString.call(fileIdObject) === '[object RegExp]'\n        ? { filename: fileIdObject }\n        : { _id: fileIdObject }; // Attempt to locate file\n\n    // We have a specific query\n    if (\n      fileIdObject != null &&\n      typeof fileIdObject === 'object' &&\n      Object.prototype.toString.call(fileIdObject) !== '[object RegExp]'\n    ) {\n      query = fileIdObject;\n    }\n\n    // Check if the entry exists\n    collection.findOne(query, { readPreference: readPreference }, function(err, item) {\n      if (err) return callback(err);\n      callback(null, item == null ? false : true);\n    });\n  });\n};\n\ndefine.staticMethod('exist', { callback: true, promise: true });\n\n/**\n * Gets the list of files stored in the GridFS.\n *\n * @method\n * @static\n * @param {Db} db the database to query.\n * @param {string} [rootCollection] The root collection that holds the files and chunks collection. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.\n * @param {object} [options=null] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {object} [options.promiseLibrary=null] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~resultCallback} [callback] result from exists.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.list = function(db, rootCollection, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  rootCollection = args.length ? args.shift() : null;\n  options = args.length ? args.shift() : {};\n  options = options || {};\n\n  return executeOperation(db.s.topology, list, [db, rootCollection, options, callback], {\n    skipSessions: true\n  });\n};\n\nvar list = function(db, rootCollection, options, callback) {\n  // Ensure we have correct values\n  if (rootCollection != null && typeof rootCollection === 'object') {\n    options = rootCollection;\n    rootCollection = null;\n  }\n\n  // Establish read preference\n  var readPreference = options.readPreference || ReadPreference.primary;\n  // Check if we are returning by id not filename\n  var byId = options['id'] != null ? options['id'] : false;\n  // Fetch item\n  var rootCollectionFinal =\n    rootCollection != null ? rootCollection : GridStore.DEFAULT_ROOT_COLLECTION;\n  var items = [];\n  db.collection(rootCollectionFinal + '.files', function(err, collection) {\n    if (err) return callback(err);\n\n    collection.find({}, { readPreference: readPreference }, function(err, cursor) {\n      if (err) return callback(err);\n\n      cursor.each(function(err, item) {\n        if (item != null) {\n          items.push(byId ? item._id : item.filename);\n        } else {\n          callback(err, items);\n        }\n      });\n    });\n  });\n};\n\ndefine.staticMethod('list', { callback: true, promise: true });\n\n/**\n * Reads the contents of a file.\n *\n * This method has the following signatures\n *\n * (db, name, callback)\n * (db, name, length, callback)\n * (db, name, length, offset, callback)\n * (db, name, length, offset, options, callback)\n *\n * @method\n * @static\n * @param {Db} db the database to query.\n * @param {string} name The name of the file.\n * @param {number} [length] The size of data to read.\n * @param {number} [offset] The offset from the head of the file of which to start reading from.\n * @param {object} [options=null] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {object} [options.promiseLibrary=null] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~readCallback} [callback] the command callback.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.read = function(db, name, length, offset, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  length = args.length ? args.shift() : null;\n  offset = args.length ? args.shift() : null;\n  options = args.length ? args.shift() : null;\n  options = options || {};\n\n  return executeOperation(\n    db.s.topology,\n    readStatic,\n    [db, name, length, offset, options, callback],\n    { skipSessions: true }\n  );\n};\n\nvar readStatic = function(db, name, length, offset, options, callback) {\n  new GridStore(db, name, 'r', options).open(function(err, gridStore) {\n    if (err) return callback(err);\n    // Make sure we are not reading out of bounds\n    if (offset && offset >= gridStore.length)\n      return callback('offset larger than size of file', null);\n    if (length && length > gridStore.length)\n      return callback('length is larger than the size of the file', null);\n    if (offset && length && offset + length > gridStore.length)\n      return callback('offset and length is larger than the size of the file', null);\n\n    if (offset != null) {\n      gridStore.seek(offset, function(err, gridStore) {\n        if (err) return callback(err);\n        gridStore.read(length, callback);\n      });\n    } else {\n      gridStore.read(length, callback);\n    }\n  });\n};\n\ndefine.staticMethod('read', { callback: true, promise: true });\n\n/**\n * Read the entire file as a list of strings splitting by the provided separator.\n *\n * @method\n * @static\n * @param {Db} db the database to query.\n * @param {(String|object)} name the name of the file.\n * @param {string} [separator] The character to be recognized as the newline separator.\n * @param {object} [options=null] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {object} [options.promiseLibrary=null] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~readlinesCallback} [callback] the command callback.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.readlines = function(db, name, separator, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  separator = args.length ? args.shift() : null;\n  options = args.length ? args.shift() : null;\n  options = options || {};\n\n  return executeOperation(\n    db.s.topology,\n    readlinesStatic,\n    [db, name, separator, options, callback],\n    { skipSessions: true }\n  );\n};\n\nvar readlinesStatic = function(db, name, separator, options, callback) {\n  var finalSeperator = separator == null ? '\\n' : separator;\n  new GridStore(db, name, 'r', options).open(function(err, gridStore) {\n    if (err) return callback(err);\n    gridStore.readlines(finalSeperator, callback);\n  });\n};\n\ndefine.staticMethod('readlines', { callback: true, promise: true });\n\n/**\n * Deletes the chunks and metadata information of a file from GridFS.\n *\n * @method\n * @static\n * @param {Db} db The database to query.\n * @param {(string|array)} names The name/names of the files to delete.\n * @param {object} [options=null] Optional settings.\n * @param {object} [options.promiseLibrary=null] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @param {GridStore~resultCallback} [callback] the command callback.\n * @return {Promise} returns Promise if no callback passed\n * @deprecated Use GridFSBucket API instead\n */\nGridStore.unlink = function(db, names, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  options = args.length ? args.shift() : {};\n  options = options || {};\n\n  return executeOperation(db.s.topology, unlinkStatic, [this, db, names, options, callback], {\n    skipSessions: true\n  });\n};\n\nvar unlinkStatic = function(self, db, names, options, callback) {\n  // Get the write concern\n  var writeConcern = _getWriteConcern(db, options);\n\n  // List of names\n  if (names.constructor === Array) {\n    var tc = 0;\n    for (var i = 0; i < names.length; i++) {\n      ++tc;\n      GridStore.unlink(db, names[i], options, function() {\n        if (--tc === 0) {\n          callback(null, self);\n        }\n      });\n    }\n  } else {\n    new GridStore(db, names, 'w', options).open(function(err, gridStore) {\n      if (err) return callback(err);\n      deleteChunks(gridStore, function(err) {\n        if (err) return callback(err);\n        gridStore.collection(function(err, collection) {\n          if (err) return callback(err);\n          collection.remove({ _id: gridStore.fileId }, writeConcern, function(err) {\n            callback(err, self);\n          });\n        });\n      });\n    });\n  }\n};\n\ndefine.staticMethod('unlink', { callback: true, promise: true });\n\n/**\n *  @ignore\n */\nvar _writeNormal = function(self, data, close, options, callback) {\n  // If we have a buffer write it using the writeBuffer method\n  if (Buffer.isBuffer(data)) {\n    return writeBuffer(self, data, close, callback);\n  } else {\n    return writeBuffer(self, new Buffer(data, 'binary'), close, callback);\n  }\n};\n\n/**\n * @ignore\n */\nvar _setWriteConcernHash = function(options) {\n  var finalOptions = {};\n  if (options.w != null) finalOptions.w = options.w;\n  if (options.journal === true) finalOptions.j = options.journal;\n  if (options.j === true) finalOptions.j = options.j;\n  if (options.fsync === true) finalOptions.fsync = options.fsync;\n  if (options.wtimeout != null) finalOptions.wtimeout = options.wtimeout;\n  return finalOptions;\n};\n\n/**\n * @ignore\n */\nvar _getWriteConcern = function(self, options) {\n  // Final options\n  var finalOptions = { w: 1 };\n  options = options || {};\n\n  // Local options verification\n  if (\n    options.w != null ||\n    typeof options.j === 'boolean' ||\n    typeof options.journal === 'boolean' ||\n    typeof options.fsync === 'boolean'\n  ) {\n    finalOptions = _setWriteConcernHash(options);\n  } else if (options.safe != null && typeof options.safe === 'object') {\n    finalOptions = _setWriteConcernHash(options.safe);\n  } else if (typeof options.safe === 'boolean') {\n    finalOptions = { w: options.safe ? 1 : 0 };\n  } else if (\n    self.options.w != null ||\n    typeof self.options.j === 'boolean' ||\n    typeof self.options.journal === 'boolean' ||\n    typeof self.options.fsync === 'boolean'\n  ) {\n    finalOptions = _setWriteConcernHash(self.options);\n  } else if (\n    self.safe &&\n    (self.safe.w != null ||\n      typeof self.safe.j === 'boolean' ||\n      typeof self.safe.journal === 'boolean' ||\n      typeof self.safe.fsync === 'boolean')\n  ) {\n    finalOptions = _setWriteConcernHash(self.safe);\n  } else if (typeof self.safe === 'boolean') {\n    finalOptions = { w: self.safe ? 1 : 0 };\n  }\n\n  // Ensure we don't have an invalid combination of write concerns\n  if (\n    finalOptions.w < 1 &&\n    (finalOptions.journal === true || finalOptions.j === true || finalOptions.fsync === true)\n  )\n    throw MongoError.create({\n      message: 'No acknowledgement using w < 1 cannot be combined with journal:true or fsync:true',\n      driver: true\n    });\n\n  // Return the options\n  return finalOptions;\n};\n\n/**\n * Create a new GridStoreStream instance (INTERNAL TYPE, do not instantiate directly)\n *\n * @class\n * @extends external:Duplex\n * @return {GridStoreStream} a GridStoreStream instance.\n * @deprecated Use GridFSBucket API instead\n */\nvar GridStoreStream = function(gs) {\n  // Initialize the duplex stream\n  Duplex.call(this);\n\n  // Get the gridstore\n  this.gs = gs;\n\n  // End called\n  this.endCalled = false;\n\n  // If we have a seek\n  this.totalBytesToRead = this.gs.length - this.gs.position;\n  this.seekPosition = this.gs.position;\n};\n\n//\n// Inherit duplex\ninherits(GridStoreStream, Duplex);\n\nGridStoreStream.prototype._pipe = GridStoreStream.prototype.pipe;\n\n// Set up override\nGridStoreStream.prototype.pipe = function(destination) {\n  var self = this;\n\n  // Only open gridstore if not already open\n  if (!self.gs.isOpen) {\n    self.gs.open(function(err) {\n      if (err) return self.emit('error', err);\n      self.totalBytesToRead = self.gs.length - self.gs.position;\n      self._pipe.apply(self, [destination]);\n    });\n  } else {\n    self.totalBytesToRead = self.gs.length - self.gs.position;\n    self._pipe.apply(self, [destination]);\n  }\n\n  return destination;\n};\n\n// Called by stream\nGridStoreStream.prototype._read = function() {\n  var self = this;\n\n  var read = function() {\n    // Read data\n    self.gs.read(length, function(err, buffer) {\n      if (err && !self.endCalled) return self.emit('error', err);\n\n      // Stream is closed\n      if (self.endCalled || buffer == null) return self.push(null);\n      // Remove bytes read\n      if (buffer.length <= self.totalBytesToRead) {\n        self.totalBytesToRead = self.totalBytesToRead - buffer.length;\n        self.push(buffer);\n      } else if (buffer.length > self.totalBytesToRead) {\n        self.totalBytesToRead = self.totalBytesToRead - buffer._index;\n        self.push(buffer.slice(0, buffer._index));\n      }\n\n      // Finished reading\n      if (self.totalBytesToRead <= 0) {\n        self.endCalled = true;\n      }\n    });\n  };\n\n  // Set read length\n  var length =\n    self.gs.length < self.gs.chunkSize ? self.gs.length - self.seekPosition : self.gs.chunkSize;\n  if (!self.gs.isOpen) {\n    self.gs.open(function(err) {\n      self.totalBytesToRead = self.gs.length - self.gs.position;\n      if (err) return self.emit('error', err);\n      read();\n    });\n  } else {\n    read();\n  }\n};\n\nGridStoreStream.prototype.destroy = function() {\n  this.pause();\n  this.endCalled = true;\n  this.gs.close();\n  this.emit('end');\n};\n\nGridStoreStream.prototype.write = function(chunk) {\n  var self = this;\n  if (self.endCalled)\n    return self.emit(\n      'error',\n      MongoError.create({ message: 'attempting to write to stream after end called', driver: true })\n    );\n  // Do we have to open the gridstore\n  if (!self.gs.isOpen) {\n    self.gs.open(function() {\n      self.gs.isOpen = true;\n      self.gs.write(chunk, function() {\n        process.nextTick(function() {\n          self.emit('drain');\n        });\n      });\n    });\n    return false;\n  } else {\n    self.gs.write(chunk, function() {\n      self.emit('drain');\n    });\n    return true;\n  }\n};\n\nGridStoreStream.prototype.end = function(chunk, encoding, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  chunk = args.length ? args.shift() : null;\n  encoding = args.length ? args.shift() : null;\n  self.endCalled = true;\n\n  if (chunk) {\n    self.gs.write(chunk, function() {\n      self.gs.close(function() {\n        if (typeof callback === 'function') callback();\n        self.emit('end');\n      });\n    });\n  }\n\n  self.gs.close(function() {\n    if (typeof callback === 'function') callback();\n    self.emit('end');\n  });\n};\n\n/**\n * The read() method pulls some data out of the internal buffer and returns it. If there is no data available, then it will return null.\n * @function external:Duplex#read\n * @param {number} size Optional argument to specify how much data to read.\n * @return {(String | Buffer | null)}\n */\n\n/**\n * Call this function to cause the stream to return strings of the specified encoding instead of Buffer objects.\n * @function external:Duplex#setEncoding\n * @param {string} encoding The encoding to use.\n * @return {null}\n */\n\n/**\n * This method will cause the readable stream to resume emitting data events.\n * @function external:Duplex#resume\n * @return {null}\n */\n\n/**\n * This method will cause a stream in flowing-mode to stop emitting data events. Any data that becomes available will remain in the internal buffer.\n * @function external:Duplex#pause\n * @return {null}\n */\n\n/**\n * This method pulls all the data out of a readable stream, and writes it to the supplied destination, automatically managing the flow so that the destination is not overwhelmed by a fast readable stream.\n * @function external:Duplex#pipe\n * @param {Writable} destination The destination for writing data\n * @param {object} [options] Pipe options\n * @return {null}\n */\n\n/**\n * This method will remove the hooks set up for a previous pipe() call.\n * @function external:Duplex#unpipe\n * @param {Writable} [destination] The destination for writing data\n * @return {null}\n */\n\n/**\n * This is useful in certain cases where a stream is being consumed by a parser, which needs to \"un-consume\" some data that it has optimistically pulled out of the source, so that the stream can be passed on to some other party.\n * @function external:Duplex#unshift\n * @param {(Buffer|string)} chunk Chunk of data to unshift onto the read queue.\n * @return {null}\n */\n\n/**\n * Versions of Node prior to v0.10 had streams that did not implement the entire Streams API as it is today. (See \"Compatibility\" below for more information.)\n * @function external:Duplex#wrap\n * @param {Stream} stream An \"old style\" readable stream.\n * @return {null}\n */\n\n/**\n * This method writes some data to the underlying system, and calls the supplied callback once the data has been fully handled.\n * @function external:Duplex#write\n * @param {(string|Buffer)} chunk The data to write\n * @param {string} encoding The encoding, if chunk is a String\n * @param {function} callback Callback for when this chunk of data is flushed\n * @return {boolean}\n */\n\n/**\n * Call this method when no more data will be written to the stream. If supplied, the callback is attached as a listener on the finish event.\n * @function external:Duplex#end\n * @param {(string|Buffer)} chunk The data to write\n * @param {string} encoding The encoding, if chunk is a String\n * @param {function} callback Callback for when this chunk of data is flushed\n * @return {null}\n */\n\n/**\n * GridStoreStream stream data event, fired for each document in the cursor.\n *\n * @event GridStoreStream#data\n * @type {object}\n */\n\n/**\n * GridStoreStream stream end event\n *\n * @event GridStoreStream#end\n * @type {null}\n */\n\n/**\n * GridStoreStream stream close event\n *\n * @event GridStoreStream#close\n * @type {null}\n */\n\n/**\n * GridStoreStream stream readable event\n *\n * @event GridStoreStream#readable\n * @type {null}\n */\n\n/**\n * GridStoreStream stream drain event\n *\n * @event GridStoreStream#drain\n * @type {null}\n */\n\n/**\n * GridStoreStream stream finish event\n *\n * @event GridStoreStream#finish\n * @type {null}\n */\n\n/**\n * GridStoreStream stream pipe event\n *\n * @event GridStoreStream#pipe\n * @type {null}\n */\n\n/**\n * GridStoreStream stream unpipe event\n *\n * @event GridStoreStream#unpipe\n * @type {null}\n */\n\n/**\n * GridStoreStream stream error event\n *\n * @event GridStoreStream#error\n * @type {null}\n */\n\n/**\n * @ignore\n */\nmodule.exports = GridStore;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/gridfs/grid_store.js\n// module id = 114\n// module chunks = 0","'use strict';\n\nvar parse = require('./url_parser'),\n  Server = require('./topologies/server'),\n  Mongos = require('./topologies/mongos'),\n  ReplSet = require('./topologies/replset'),\n  EventEmitter = require('events').EventEmitter,\n  inherits = require('util').inherits,\n  Define = require('./metadata'),\n  ReadPreference = require('mongodb-core').ReadPreference,\n  Logger = require('mongodb-core').Logger,\n  MongoError = require('mongodb-core').MongoError,\n  handleCallback = require('./utils').handleCallback,\n  Db = require('./db'),\n  f = require('util').format,\n  shallowClone = require('./utils').shallowClone,\n  authenticate = require('./authenticate'),\n  ServerSessionPool = require('mongodb-core').Sessions.ServerSessionPool,\n  executeOperation = require('./utils').executeOperation;\n\n/**\n * @fileOverview The **MongoClient** class is a class that allows for making Connections to MongoDB.\n *\n * @example\n * // Connect using a MongoClient instance\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * const mongoClient = new MongoClient(url);\n * mongoClient.connect(function(err, client) {\n *   const db = client.db(dbName);\n *   client.close();\n * });\n *\n * @example\n * // Connect using the MongoClient.connect static method\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   const db = client.db(dbName);\n *   client.close();\n * });\n */\nvar validOptionNames = [\n  'poolSize',\n  'ssl',\n  'sslValidate',\n  'sslCA',\n  'sslCert',\n  'sslKey',\n  'sslPass',\n  'sslCRL',\n  'autoReconnect',\n  'noDelay',\n  'keepAlive',\n  'keepAliveInitialDelay',\n  'connectTimeoutMS',\n  'family',\n  'socketTimeoutMS',\n  'reconnectTries',\n  'reconnectInterval',\n  'ha',\n  'haInterval',\n  'replicaSet',\n  'secondaryAcceptableLatencyMS',\n  'acceptableLatencyMS',\n  'connectWithNoPrimary',\n  'authSource',\n  'w',\n  'wtimeout',\n  'j',\n  'forceServerObjectId',\n  'serializeFunctions',\n  'ignoreUndefined',\n  'raw',\n  'bufferMaxEntries',\n  'readPreference',\n  'pkFactory',\n  'promiseLibrary',\n  'readConcern',\n  'maxStalenessSeconds',\n  'loggerLevel',\n  'logger',\n  'promoteValues',\n  'promoteBuffers',\n  'promoteLongs',\n  'domainsEnabled',\n  'checkServerIdentity',\n  'validateOptions',\n  'appname',\n  'auth',\n  'user',\n  'password',\n  'authMechanism',\n  'compression',\n  'fsync',\n  'readPreferenceTags',\n  'numberOfRetries',\n  'auto_reconnect',\n  'minSize'\n];\n\nvar ignoreOptionNames = ['native_parser'];\nvar legacyOptionNames = ['server', 'replset', 'replSet', 'mongos', 'db'];\n\nfunction validOptions(options) {\n  var _validOptions = validOptionNames.concat(legacyOptionNames);\n\n  for (var name in options) {\n    if (ignoreOptionNames.indexOf(name) !== -1) {\n      continue;\n    }\n\n    if (_validOptions.indexOf(name) === -1 && options.validateOptions) {\n      return new MongoError(f('option %s is not supported', name));\n    } else if (_validOptions.indexOf(name) === -1) {\n      console.warn(f('the options [%s] is not supported', name));\n    }\n\n    if (legacyOptionNames.indexOf(name) !== -1) {\n      console.warn(\n        f(\n          'the server/replset/mongos options are deprecated, ' +\n            'all their options are supported at the top level of the options object [%s]',\n          validOptionNames\n        )\n      );\n    }\n  }\n}\n\n/**\n * Creates a new MongoClient instance\n * @class\n * @param {string} url The connection URI string\n * @param {object} [options] Optional settings\n * @param {number} [options.poolSize=5] The maximum size of the individual server pool\n * @param {boolean} [options.ssl=false] Enable SSL connection.\n * @param {boolean} [options.sslValidate=true] Validate mongod server certificate against Certificate Authority\n * @param {buffer} [options.sslCA=undefined] SSL Certificate store binary buffer\n * @param {buffer} [options.sslCert=undefined] SSL Certificate binary buffer\n * @param {buffer} [options.sslKey=undefined] SSL Key file binary buffer\n * @param {string} [options.sslPass=undefined] SSL Certificate pass phrase\n * @param {buffer} [options.sslCRL=undefined] SSL Certificate revocation list binary buffer\n * @param {boolean} [options.autoReconnect=true] Enable autoReconnect for single server instances\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=30000] The number of milliseconds to wait before initiating keepAlive on the TCP socket\n * @param {number} [options.connectTimeoutMS=30000] TCP Connection timeout setting\n * @param {number} [options.family=null] Version of IP stack. Can be 4, 6 or null (default).\n * If null, will attempt to connect with IPv6, and will fall back to IPv4 on failure\n * @param {number} [options.socketTimeoutMS=360000] TCP Socket timeout setting\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @param {boolean} [options.ha=true] Control if high availability monitoring runs for Replicaset or Mongos proxies\n * @param {number} [options.haInterval=10000] The High availability period for replicaset inquiry\n * @param {string} [options.replicaSet=undefined] The Replicaset set name\n * @param {number} [options.secondaryAcceptableLatencyMS=15] Cutoff latency point in MS for Replicaset member selection\n * @param {number} [options.acceptableLatencyMS=15] Cutoff latency point in MS for Mongos proxies selection\n * @param {boolean} [options.connectWithNoPrimary=false] Sets if the driver should connect even if no primary is available\n * @param {string} [options.authSource=undefined] Define the database to authenticate against\n * @param {(number|string)} [options.w=null] The write concern\n * @param {number} [options.wtimeout=null] The write concern timeout\n * @param {boolean} [options.j=false] Specify a journal write concern\n * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers\n * @param {number} [options.bufferMaxEntries=-1] Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST)\n * @param {object} [options.pkFactory=null] A primary key factory object for generation of custom _id keys\n * @param {object} [options.promiseLibrary=null] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {object} [options.readConcern=null] Specify a read concern for the collection (only MongoDB 3.2 or higher supported)\n * @param {string} [options.readConcern.level='local'] Specify a read concern level for the collection operations, one of [local|majority]. (only MongoDB 3.2 or higher supported)\n * @param {number} [options.maxStalenessSeconds=undefined] The max staleness to secondary reads (values under 10 seconds cannot be guaranteed)\n * @param {string} [options.loggerLevel=undefined] The logging level (error/warn/info/debug)\n * @param {object} [options.logger=undefined] Custom logger object\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers\n * @param {boolean} [options.promoteLongs=true] Promotes long values to number if they fit inside the 53 bits resolution\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function\n * @param {object} [options.validateOptions=false] Validate MongoClient passed in options for correctness\n * @param {string} [options.appname=undefined] The name of the application that created this MongoClient instance. MongoDB 3.4 and newer will print this value in the server log upon establishing each connection. It is also recorded in the slow query log and profile collections\n * @param {string} [options.auth.user=undefined] The username for auth\n * @param {string} [options.auth.password=undefined] The password for auth\n * @param {string} [options.authMechanism=undefined] Mechanism for authentication: MDEFAULT, GSSAPI, PLAIN, MONGODB-X509, SCRAM-SHA-1 or MONGODB-CR\n * @param {object} [options.compression=null] Type of compression to use: snappy or zlib\n * @param {boolean} [options.fsync=false] Specify a file sync write concern\n * @param {array} [options.readPreferenceTags=null] Read preference tags\n * @param {number} [options.numberOfRetries=5] The number of retries for a tailable cursor\n * @param {boolean} [options.auto_reconnect=true] Enable auto reconnecting for single server instances\n * @param {MongoClient~connectCallback} [callback] The command result callback\n * @return {MongoClient} a MongoClient instance\n */\nfunction MongoClient(url, options) {\n  if (!(this instanceof MongoClient)) return new MongoClient();\n\n  // Set up event emitter\n  EventEmitter.call(this);\n\n  // The internal state\n  this.s = {\n    url: url,\n    options: options || {},\n    promiseLibrary: null,\n    dbCache: {},\n    sessions: []\n  };\n\n  // Get the promiseLibrary\n  var promiseLibrary = this.s.options.promiseLibrary || Promise;\n\n  // Add the promise to the internal state\n  this.s.promiseLibrary = promiseLibrary;\n}\n\n/**\n * @ignore\n */\ninherits(MongoClient, EventEmitter);\n\nvar define = (MongoClient.define = new Define('MongoClient', MongoClient, false));\n\n/**\n * The callback format for results\n * @callback MongoClient~connectCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {MongoClient} client The connected client.\n */\n\n/**\n * Connect to MongoDB using a url as documented at\n *\n *  docs.mongodb.org/manual/reference/connection-string/\n *\n * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver\n *\n * @method\n * @param {MongoClient~connectCallback} [callback] The command result callback\n * @return {Promise<MongoClient>} returns Promise if no callback passed\n */\nMongoClient.prototype.connect = function(callback) {\n  // Validate options object\n  var err = validOptions(this.s.options);\n\n  if (typeof callback === 'string') {\n    throw new TypeError('`connect` only accepts a callback');\n  }\n\n  return executeOperation(this, connectOp, [this, err, callback], {\n    skipSessions: true\n  });\n};\n\nconst connectOp = (self, err, callback) => {\n  // Did we have a validation error\n  if (err) return callback(err);\n  // Fallback to callback based connect\n  connect(self, self.s.url, self.s.options, function(err) {\n    if (err) return callback(err);\n    callback(null, self);\n  });\n};\n\ndefine.classMethod('close', { callback: true, promise: true, returns: [MongoClient] });\n\n/**\n * Logout user from server, fire off on all connections and remove all auth info\n * @method\n * @param {object} [options=null] Optional settings.\n * @param {string} [options.dbName=null] Logout against different database than current.\n * @param {Db~resultCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nMongoClient.prototype.logout = function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // Establish the correct database name\n  var dbName = this.s.options.authSource ? this.s.options.authSource : this.s.options.dbName;\n\n  return executeOperation(this, logout, [this, dbName, callback], {\n    skipSessions: true\n  });\n};\n\nconst logout = (self, dbName, callback) => {\n  self.topology.logout(dbName, function(err) {\n    if (err) return callback(err);\n    callback(null, true);\n  });\n};\n\ndefine.classMethod('logout', { callback: true, promise: true });\n\n/**\n * Close the db and its underlying connections\n * @method\n * @param {boolean} force Force close, emitting no events\n * @param {Db~noResultCallback} [callback] The result callback\n * @return {Promise} returns Promise if no callback passed\n */\nMongoClient.prototype.close = function(force, callback) {\n  var self = this;\n  if (typeof force === 'function') (callback = force), (force = false);\n  // Close the topologu connection\n  this.topology.close(force);\n\n  // Emit close event\n  self.emit('close', self);\n\n  // Fire close event on any cached db instances\n  for (var name in this.s.dbCache) {\n    this.s.dbCache[name].emit('close');\n  }\n\n  // Remove listeners after emit\n  self.removeAllListeners('close');\n\n  // Callback after next event loop tick\n  if (typeof callback === 'function')\n    return process.nextTick(function() {\n      handleCallback(callback, null);\n    });\n\n  // Return dummy promise\n  return new this.s.promiseLibrary(function(resolve) {\n    resolve();\n  });\n};\n\ndefine.classMethod('close', { callback: true, promise: true });\n\n/**\n * Create a new Db instance sharing the current socket connections. Be aware that the new db instances are\n * related in a parent-child relationship to the original instance so that events are correctly emitted on child\n * db instances. Child db instances are cached so performing db('db1') twice will return the same instance.\n * You can control these behaviors with the options noListener and returnNonCachedInstance.\n *\n * @method\n * @param {string} dbName The name of the database we want to use.\n * @param {object} [options=null] Optional settings.\n * @param {boolean} [options.noListener=false] Do not make the db an event listener to the original connection.\n * @param {boolean} [options.returnNonCachedInstance=false] Control if you want to return a cached instance or have a new one created\n * @return {Db}\n */\nMongoClient.prototype.db = function(dbName, options) {\n  options = options || {};\n\n  // Default to db from connection string if not provided\n  if (!dbName) {\n    dbName = this.s.options.dbName;\n  }\n\n  // Copy the options and add out internal override of the not shared flag\n  var finalOptions = Object.assign({}, this.s.options, options);\n\n  // Do we have the db in the cache already\n  if (this.s.dbCache[dbName] && finalOptions.returnNonCachedInstance !== true) {\n    return this.s.dbCache[dbName];\n  }\n\n  // Add promiseLibrary\n  finalOptions.promiseLibrary = this.s.promiseLibrary;\n\n  // If no topology throw an error message\n  if (!this.topology) {\n    throw new MongoError('MongoClient must be connected before calling MongoClient.prototype.db');\n  }\n\n  // Return the db object\n  var db = new Db(dbName, this.topology, finalOptions);\n\n  // Add the db to the cache\n  this.s.dbCache[dbName] = db;\n  // Return the database\n  return db;\n};\n\n/**\n * Check if MongoClient is connected\n *\n * @method\n * @param {string} name The name of the database we want to use.\n * @param {object} [options=null] Optional settings.\n * @param {boolean} [options.noListener=false] Do not make the db an event listener to the original connection.\n * @param {boolean} [options.returnNonCachedInstance=false] Control if you want to return a cached instance or have a new one created\n * @return {boolean}\n */\nMongoClient.prototype.isConnected = function(options) {\n  options = options || {};\n\n  if (!this.topology) return false;\n  return this.topology.isConnected(options);\n};\n\n/**\n * Connect to MongoDB using a url as documented at\n *\n *  docs.mongodb.org/manual/reference/connection-string/\n *\n * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver\n *\n * @method\n * @static\n * @param {string} url The connection URI string\n * @param {object} [options] Optional settings\n * @param {number} [options.poolSize=5] The maximum size of the individual server pool\n * @param {boolean} [options.ssl=false] Enable SSL connection.\n * @param {boolean} [options.sslValidate=true] Validate mongod server certificate against Certificate Authority\n * @param {buffer} [options.sslCA=undefined] SSL Certificate store binary buffer\n * @param {buffer} [options.sslCert=undefined] SSL Certificate binary buffer\n * @param {buffer} [options.sslKey=undefined] SSL Key file binary buffer\n * @param {string} [options.sslPass=undefined] SSL Certificate pass phrase\n * @param {buffer} [options.sslCRL=undefined] SSL Certificate revocation list binary buffer\n * @param {boolean} [options.autoReconnect=true] Enable autoReconnect for single server instances\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {boolean} [options.keepAliveInitialDelay=30000] The number of milliseconds to wait before initiating keepAlive on the TCP socket\n * @param {number} [options.connectTimeoutMS=30000] TCP Connection timeout setting\n * @param {number} [options.family=null] Version of IP stack. Can be 4, 6 or null (default).\n * If null, will attempt to connect with IPv6, and will fall back to IPv4 on failure\n * @param {number} [options.socketTimeoutMS=360000] TCP Socket timeout setting\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @param {boolean} [options.ha=true] Control if high availability monitoring runs for Replicaset or Mongos proxies\n * @param {number} [options.haInterval=10000] The High availability period for replicaset inquiry\n * @param {string} [options.replicaSet=undefined] The Replicaset set name\n * @param {number} [options.secondaryAcceptableLatencyMS=15] Cutoff latency point in MS for Replicaset member selection\n * @param {number} [options.acceptableLatencyMS=15] Cutoff latency point in MS for Mongos proxies selection\n * @param {boolean} [options.connectWithNoPrimary=false] Sets if the driver should connect even if no primary is available\n * @param {string} [options.authSource=undefined] Define the database to authenticate against\n * @param {(number|string)} [options.w=null] The write concern\n * @param {number} [options.wtimeout=null] The write concern timeout\n * @param {boolean} [options.j=false] Specify a journal write concern\n * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers\n * @param {number} [options.bufferMaxEntries=-1] Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST)\n * @param {object} [options.pkFactory=null] A primary key factory object for generation of custom _id keys\n * @param {object} [options.promiseLibrary=null] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {object} [options.readConcern=null] Specify a read concern for the collection (only MongoDB 3.2 or higher supported)\n * @param {string} [options.readConcern.level='local'] Specify a read concern level for the collection operations, one of [local|majority]. (only MongoDB 3.2 or higher supported)\n * @param {number} [options.maxStalenessSeconds=undefined] The max staleness to secondary reads (values under 10 seconds cannot be guaranteed)\n * @param {string} [options.loggerLevel=undefined] The logging level (error/warn/info/debug)\n * @param {object} [options.logger=undefined] Custom logger object\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers\n * @param {boolean} [options.promoteLongs=true] Promotes long values to number if they fit inside the 53 bits resolution\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function\n * @param {object} [options.validateOptions=false] Validate MongoClient passed in options for correctness\n * @param {string} [options.appname=undefined] The name of the application that created this MongoClient instance. MongoDB 3.4 and newer will print this value in the server log upon establishing each connection. It is also recorded in the slow query log and profile collections\n * @param {string} [options.auth.user=undefined] The username for auth\n * @param {string} [options.auth.password=undefined] The password for auth\n * @param {string} [options.authMechanism=undefined] Mechanism for authentication: MDEFAULT, GSSAPI, PLAIN, MONGODB-X509, SCRAM-SHA-1 or MONGODB-CR\n * @param {object} [options.compression=null] Type of compression to use: snappy or zlib\n * @param {boolean} [options.fsync=false] Specify a file sync write concern\n * @param {array} [options.readPreferenceTags=null] Read preference tags\n * @param {number} [options.numberOfRetries=5] The number of retries for a tailable cursor\n * @param {boolean} [options.auto_reconnect=true] Enable auto reconnecting for single server instances\n * @param {MongoClient~connectCallback} [callback] The command result callback\n * @return {Promise<MongoClient>} returns Promise if no callback passed\n */\nMongoClient.connect = function(url, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  options = args.length ? args.shift() : null;\n  options = options || {};\n\n  // Create client\n  var mongoClient = new MongoClient(url, options);\n  // Execute the connect method\n  return mongoClient.connect(callback);\n};\n\ndefine.staticMethod('connect', { callback: true, promise: true });\n\n/**\n * Starts a new session on the server\n *\n * @param {object} [options] optional settings for a driver session\n * @return {ClientSession} the newly established session\n */\nMongoClient.prototype.startSession = function(options) {\n  options = options || {};\n  if (!this.topology) {\n    throw new MongoError('Must connect to a server before calling this method');\n  }\n\n  if (!this.topology.hasSessionSupport()) {\n    throw new MongoError('Current topology does not support sessions');\n  }\n\n  return this.topology.startSession(options);\n};\n\nvar mergeOptions = function(target, source, flatten) {\n  for (var name in source) {\n    if (source[name] && typeof source[name] === 'object' && flatten) {\n      target = mergeOptions(target, source[name], flatten);\n    } else {\n      target[name] = source[name];\n    }\n  }\n\n  return target;\n};\n\nvar createUnifiedOptions = function(finalOptions, options) {\n  var childOptions = [\n    'mongos',\n    'server',\n    'db',\n    'replset',\n    'db_options',\n    'server_options',\n    'rs_options',\n    'mongos_options'\n  ];\n  var noMerge = ['readconcern', 'compression'];\n\n  for (var name in options) {\n    if (noMerge.indexOf(name.toLowerCase()) !== -1) {\n      finalOptions[name] = options[name];\n    } else if (childOptions.indexOf(name.toLowerCase()) !== -1) {\n      finalOptions = mergeOptions(finalOptions, options[name], false);\n    } else {\n      if (\n        options[name] &&\n        typeof options[name] === 'object' &&\n        !Buffer.isBuffer(options[name]) &&\n        !Array.isArray(options[name])\n      ) {\n        finalOptions = mergeOptions(finalOptions, options[name], true);\n      } else {\n        finalOptions[name] = options[name];\n      }\n    }\n  }\n\n  return finalOptions;\n};\n\nfunction translateOptions(options) {\n  // If we have a readPreference passed in by the db options\n  if (typeof options.readPreference === 'string' || typeof options.read_preference === 'string') {\n    options.readPreference = new ReadPreference(options.readPreference || options.read_preference);\n  }\n\n  // Do we have readPreference tags, add them\n  if (options.readPreference && (options.readPreferenceTags || options.read_preference_tags)) {\n    options.readPreference.tags = options.readPreferenceTags || options.read_preference_tags;\n  }\n\n  // Do we have maxStalenessSeconds\n  if (options.maxStalenessSeconds) {\n    options.readPreference.maxStalenessSeconds = options.maxStalenessSeconds;\n  }\n\n  // Set the socket and connection timeouts\n  if (options.socketTimeoutMS == null) options.socketTimeoutMS = 360000;\n  if (options.connectTimeoutMS == null) options.connectTimeoutMS = 30000;\n\n  // Create server instances\n  return options.servers.map(function(serverObj) {\n    return serverObj.domain_socket\n      ? new Server(serverObj.domain_socket, 27017, options)\n      : new Server(serverObj.host, serverObj.port, options);\n  });\n}\n\nvar events = [\n  'timeout',\n  'close',\n  'serverOpening',\n  'serverDescriptionChanged',\n  'serverHeartbeatStarted',\n  'serverHeartbeatSucceeded',\n  'serverHeartbeatFailed',\n  'serverClosed',\n  'topologyOpening',\n  'topologyClosed',\n  'topologyDescriptionChanged',\n  'joined',\n  'left',\n  'ping',\n  'ha',\n  'all',\n  'fullsetup'\n];\n\n//\n// Collect all events in order from SDAM\n//\nfunction collectEvents(self, topology) {\n  var collectedEvents = [];\n\n  if (self instanceof MongoClient) {\n    events.forEach(function(event) {\n      topology.on(event, function(object1, object2) {\n        collectedEvents.push({\n          event: event,\n          object1: object1,\n          object2: object2\n        });\n      });\n    });\n  }\n\n  return collectedEvents;\n}\n\n//\n// Clear out all event\n//\nfunction clearAllEvents(topology) {\n  events.forEach(function(event) {\n    topology.removeAllListeners(event);\n  });\n}\n\n//\n// Replay any events due to single server connection switching to Mongos\n//\nfunction replayEvents(self, events) {\n  for (var i = 0; i < events.length; i++) {\n    self.emit(events[i].event, events[i].object1, events[i].object2);\n  }\n}\n\nfunction relayEvents(self, topology) {\n  var events = [\n    'serverOpening',\n    'serverDescriptionChanged',\n    'serverHeartbeatStarted',\n    'serverHeartbeatSucceeded',\n    'serverHeartbeatFailed',\n    'serverClosed',\n    'topologyOpening',\n    'topologyClosed',\n    'topologyDescriptionChanged',\n    'joined',\n    'left',\n    'ping',\n    'ha'\n  ];\n  events.forEach(function(event) {\n    topology.on(event, function(object1, object2) {\n      self.emit(event, object1, object2);\n    });\n  });\n}\n\nfunction assignTopology(client, topology) {\n  client.topology = topology;\n  topology.s.sessionPool = new ServerSessionPool(topology.s.coreTopology);\n}\n\nfunction createServer(self, options, callback) {\n  // Pass in the promise library\n  options.promiseLibrary = self.s.promiseLibrary;\n\n  // Set default options\n  var servers = translateOptions(options);\n\n  // Propagate the events to the client\n  var collectedEvents = collectEvents(self, servers[0]);\n\n  // Connect to topology\n  servers[0].connect(function(err, topology) {\n    if (err) return callback(err);\n    // Clear out all the collected event listeners\n    clearAllEvents(servers[0]);\n    // Relay all the events\n    relayEvents(self, servers[0]);\n    // Add listeners\n    addListeners(self, servers[0]);\n    // Check if we are really speaking to a mongos\n    var ismaster = topology.lastIsMaster();\n\n    // Set the topology\n    assignTopology(self, topology);\n\n    // Do we actually have a mongos\n    if (ismaster && ismaster.msg === 'isdbgrid') {\n      // Destroy the current connection\n      topology.close();\n      // Create mongos connection instead\n      return createMongos(self, options, callback);\n    }\n\n    // Fire all the events\n    replayEvents(self, collectedEvents);\n    // Otherwise callback\n    callback(err, topology);\n  });\n}\n\nfunction createReplicaset(self, options, callback) {\n  // Pass in the promise library\n  options.promiseLibrary = self.s.promiseLibrary;\n\n  // Set default options\n  var servers = translateOptions(options);\n\n  // Create the topology\n  var topology = new ReplSet(servers, options);\n\n  // Add listeners\n  addListeners(self, topology);\n\n  // Propagate the events to the client\n  relayEvents(self, topology);\n\n  // Open the connection\n  topology.connect(options, function(err, topology) {\n    if (err) return callback(err);\n\n    assignTopology(self, topology);\n    callback(null, topology);\n  });\n}\n\nfunction createMongos(self, options, callback) {\n  // Pass in the promise library\n  options.promiseLibrary = self.s.promiseLibrary;\n\n  // Set default options\n  var servers = translateOptions(options);\n\n  // Create the topology\n  var topology = new Mongos(servers, options);\n\n  // Add listeners\n  addListeners(self, topology);\n\n  // Propagate the events to the client\n  relayEvents(self, topology);\n\n  // Open the connection\n  topology.connect(options, function(err, topology) {\n    if (err) return callback(err);\n\n    assignTopology(self, topology);\n    callback(null, topology);\n  });\n}\n\nfunction createListener(self, event) {\n  return function(v1, v2) {\n    if (event === 'open' || event === 'fullsetup' || event === 'all' || event === 'reconnect') {\n      return self.emit(event, self);\n    }\n\n    self.emit(event, v1, v2);\n  };\n}\n\nfunction addListeners(self, topology) {\n  topology.on('authenticated', createListener(self, 'authenticated'));\n  topology.on('error', createListener(self, 'error'));\n  topology.on('timeout', createListener(self, 'timeout'));\n  topology.on('close', createListener(self, 'close'));\n  topology.on('parseError', createListener(self, 'parseError'));\n  topology.once('open', createListener(self, 'open'));\n  topology.once('fullsetup', createListener(self, 'fullsetup'));\n  topology.once('all', createListener(self, 'all'));\n  topology.on('reconnect', createListener(self, 'reconnect'));\n}\n\nfunction connectHandler(client, options, callback) {\n  return function(err, topology) {\n    if (err) {\n      return process.nextTick(function() {\n        try {\n          callback(err, null);\n        } catch (err) {\n          if (topology) topology.close();\n          throw err;\n        }\n      });\n    }\n\n    // No authentication just reconnect\n    if (!options.auth) {\n      return process.nextTick(function() {\n        try {\n          callback(err, topology);\n        } catch (err) {\n          if (topology) topology.close();\n          throw err;\n        }\n      });\n    }\n\n    // Authenticate\n    authenticate(client, options.user, options.password, options, function(err, success) {\n      if (success) {\n        process.nextTick(function() {\n          try {\n            callback(null, topology);\n          } catch (err) {\n            if (topology) topology.close();\n            throw err;\n          }\n        });\n      } else {\n        if (topology) topology.close();\n        process.nextTick(function() {\n          try {\n            callback(err ? err : new Error('Could not authenticate user ' + options.auth[0]), null);\n          } catch (err) {\n            if (topology) topology.close();\n            throw err;\n          }\n        });\n      }\n    });\n  };\n}\n\n/*\n * Connect using MongoClient\n */\nvar connect = function(self, url, options, callback) {\n  options = options || {};\n  options = shallowClone(options);\n\n  // If callback is null throw an exception\n  if (callback == null) {\n    throw new Error('no callback function provided');\n  }\n\n  // Get a logger for MongoClient\n  var logger = Logger('MongoClient', options);\n\n  // Did we pass in a Server/ReplSet/Mongos\n  if (url instanceof Server || url instanceof ReplSet || url instanceof Mongos) {\n    // Set the topology\n    assignTopology(self, url);\n\n    // Add listeners\n    addListeners(self, url);\n    // Connect\n    return url.connect(\n      options,\n      connectHandler(self, options, function(err, topology) {\n        if (err) return connectCallback(err, topology);\n        if (options.user || options.password || options.authMechanism) {\n          return authenticate(self, options.user, options.password, options, function(err) {\n            if (err) return connectCallback(err, topology);\n            connectCallback(err, topology);\n          });\n        }\n\n        connectCallback(err, topology);\n      })\n    );\n  }\n\n  parse(url, options, function(err, object) {\n    // Do not attempt to connect if parsing error\n    if (err) return callback(err);\n\n    // Parse the string\n    var _finalOptions = createUnifiedOptions({}, object);\n    _finalOptions = mergeOptions(_finalOptions, object, false);\n    _finalOptions = createUnifiedOptions(_finalOptions, options);\n\n    // Check if we have connection and socket timeout set\n    if (_finalOptions.socketTimeoutMS == null) _finalOptions.socketTimeoutMS = 360000;\n    if (_finalOptions.connectTimeoutMS == null) _finalOptions.connectTimeoutMS = 30000;\n\n    if (_finalOptions.db_options && _finalOptions.db_options.auth) {\n      delete _finalOptions.db_options.auth;\n    }\n\n    // Store the merged options object\n    self.s.options = _finalOptions;\n\n    // Failure modes\n    if (object.servers.length === 0) {\n      return callback(new Error('connection string must contain at least one seed host'));\n    }\n\n    // Do we have a replicaset then skip discovery and go straight to connectivity\n    if (_finalOptions.replicaSet || _finalOptions.rs_name) {\n      return createReplicaset(\n        self,\n        _finalOptions,\n        connectHandler(self, _finalOptions, connectCallback)\n      );\n    } else if (object.servers.length > 1) {\n      return createMongos(\n        self,\n        _finalOptions,\n        connectHandler(self, _finalOptions, connectCallback)\n      );\n    } else {\n      return createServer(\n        self,\n        _finalOptions,\n        connectHandler(self, _finalOptions, connectCallback)\n      );\n    }\n  });\n\n  function connectCallback(err, topology) {\n    if (err && err.message === 'no mongos proxies found in seed list') {\n      if (logger.isWarn()) {\n        logger.warn(\n          f(\n            'seed list contains no mongos proxies, replicaset connections requires the parameter replicaSet to be supplied in the URI or options object, mongodb://server:port/db?replicaSet=name'\n          )\n        );\n      }\n\n      // Return a more specific error message for MongoClient.connect\n      return callback(\n        new MongoError(\n          'seed list contains no mongos proxies, replicaset connections requires the parameter replicaSet to be supplied in the URI or options object, mongodb://server:port/db?replicaSet=name'\n        )\n      );\n    }\n\n    // Return the error and db instance\n    callback(err, topology);\n  }\n};\n\nmodule.exports = MongoClient;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/mongo_client.js\n// module id = 115\n// module chunks = 0","'use strict';\n\nvar ServerCapabilities = require('./topology_base').ServerCapabilities,\n  TopologyBase = require('./topology_base').TopologyBase,\n  MongoError = require('mongodb-core').MongoError,\n  CMongos = require('mongodb-core').Mongos,\n  Cursor = require('../cursor'),\n  AggregationCursor = require('../aggregation_cursor'),\n  CommandCursor = require('../command_cursor'),\n  Define = require('../metadata'),\n  Server = require('./server'),\n  Store = require('./topology_base').Store,\n  MAX_JS_INT = require('../utils').MAX_JS_INT,\n  translateOptions = require('../utils').translateOptions,\n  filterOptions = require('../utils').filterOptions,\n  mergeOptions = require('../utils').mergeOptions;\n\n/**\n * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is\n * used to construct connections.\n *\n * **Mongos Should not be used, use MongoClient.connect**\n */\n\n// Allowed parameters\nvar legalOptionNames = [\n  'ha',\n  'haInterval',\n  'acceptableLatencyMS',\n  'poolSize',\n  'ssl',\n  'checkServerIdentity',\n  'sslValidate',\n  'sslCA',\n  'sslCRL',\n  'sslCert',\n  'ciphers',\n  'ecdhCurve',\n  'sslKey',\n  'sslPass',\n  'socketOptions',\n  'bufferMaxEntries',\n  'store',\n  'auto_reconnect',\n  'autoReconnect',\n  'emitError',\n  'keepAlive',\n  'keepAliveInitialDelay',\n  'noDelay',\n  'connectTimeoutMS',\n  'socketTimeoutMS',\n  'loggerLevel',\n  'logger',\n  'reconnectTries',\n  'appname',\n  'domainsEnabled',\n  'servername',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'promiseLibrary'\n];\n\n/**\n * Creates a new Mongos instance\n * @class\n * @deprecated\n * @param {Server[]} servers A seedlist of servers participating in the replicaset.\n * @param {object} [options=null] Optional settings.\n * @param {booelan} [options.ha=true] Turn on high availability monitoring.\n * @param {number} [options.haInterval=5000] Time between each replicaset status check.\n * @param {number} [options.poolSize=5] Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n * @param {number} [options.acceptableLatencyMS=15] Cutoff latency point in MS for MongoS proxy selection\n * @param {boolean} [options.ssl=false] Use ssl connection (needs to have a mongod server with ssl support)\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {object} [options.sslValidate=true] Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCA=null] Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCRL=null] Array of revocation certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {string} [options.ciphers=null] Passed directly through to tls.createSecureContext. See https://nodejs.org/dist/latest-v9.x/docs/api/tls.html#tls_tls_createsecurecontext_options for more info.\n * @param {string} [options.ecdhCurve=null] Passed directly through to tls.createSecureContext. See https://nodejs.org/dist/latest-v9.x/docs/api/tls.html#tls_tls_createsecurecontext_options for more info.\n * @param {(Buffer|string)} [options.sslCert=null] String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslKey=null] String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslPass=null] String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {object} [options.socketOptions=null] Socket options\n * @param {boolean} [options.socketOptions.noDelay=true] TCP Socket NoDelay option.\n * @param {boolean} [options.socketOptions.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.socketOptions.keepAliveInitialDelay=30000] The number of milliseconds to wait before initiating keepAlive on the TCP socket\n * @param {number} [options.socketOptions.connectTimeoutMS=0] TCP Connection timeout setting\n * @param {number} [options.socketOptions.socketTimeoutMS=0] TCP Socket timeout setting\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @fires Mongos#connect\n * @fires Mongos#ha\n * @fires Mongos#joined\n * @fires Mongos#left\n * @fires Mongos#fullsetup\n * @fires Mongos#open\n * @fires Mongos#close\n * @fires Mongos#error\n * @fires Mongos#timeout\n * @fires Mongos#parseError\n * @property {string} parserType the parser type used (c++ or js).\n * @return {Mongos} a Mongos instance.\n */\nclass Mongos extends TopologyBase {\n  constructor(servers, options) {\n    super();\n\n    options = options || {};\n    var self = this;\n\n    // Filter the options\n    options = filterOptions(options, legalOptionNames);\n\n    // Ensure all the instances are Server\n    for (var i = 0; i < servers.length; i++) {\n      if (!(servers[i] instanceof Server)) {\n        throw MongoError.create({\n          message: 'all seed list instances must be of the Server type',\n          driver: true\n        });\n      }\n    }\n\n    // Stored options\n    var storeOptions = {\n      force: false,\n      bufferMaxEntries:\n        typeof options.bufferMaxEntries === 'number' ? options.bufferMaxEntries : MAX_JS_INT\n    };\n\n    // Shared global store\n    var store = options.store || new Store(self, storeOptions);\n\n    // Build seed list\n    var seedlist = servers.map(function(x) {\n      return { host: x.host, port: x.port };\n    });\n\n    // Get the reconnect option\n    var reconnect = typeof options.auto_reconnect === 'boolean' ? options.auto_reconnect : true;\n    reconnect = typeof options.autoReconnect === 'boolean' ? options.autoReconnect : reconnect;\n\n    // Clone options\n    var clonedOptions = mergeOptions(\n      {},\n      {\n        disconnectHandler: store,\n        cursorFactory: Cursor,\n        reconnect: reconnect,\n        emitError: typeof options.emitError === 'boolean' ? options.emitError : true,\n        size: typeof options.poolSize === 'number' ? options.poolSize : 5\n      }\n    );\n\n    // Translate any SSL options and other connectivity options\n    clonedOptions = translateOptions(clonedOptions, options);\n\n    // Socket options\n    var socketOptions =\n      options.socketOptions && Object.keys(options.socketOptions).length > 0\n        ? options.socketOptions\n        : options;\n\n    // Translate all the options to the mongodb-core ones\n    clonedOptions = translateOptions(clonedOptions, socketOptions);\n\n    // Build default client information\n    clonedOptions.clientInfo = this.clientInfo;\n    // Do we have an application specific string\n    if (options.appname) {\n      clonedOptions.clientInfo.application = { name: options.appname };\n    }\n\n    // Internal state\n    this.s = {\n      // Create the Mongos\n      coreTopology: new CMongos(seedlist, clonedOptions),\n      // Server capabilities\n      sCapabilities: null,\n      // Debug turned on\n      debug: clonedOptions.debug,\n      // Store option defaults\n      storeOptions: storeOptions,\n      // Cloned options\n      clonedOptions: clonedOptions,\n      // Actual store of callbacks\n      store: store,\n      // Options\n      options: options,\n      // Server Session Pool\n      sessionPool: null,\n      // Active client sessions\n      sessions: [],\n      // Promise library\n      promiseLibrary: options.promiseLibrary || Promise\n    };\n  }\n\n  // Connect\n  connect(_options, callback) {\n    var self = this;\n    if ('function' === typeof _options) (callback = _options), (_options = {});\n    if (_options == null) _options = {};\n    if (!('function' === typeof callback)) callback = null;\n    _options = Object.assign({}, this.s.clonedOptions, _options);\n    self.s.options = _options;\n\n    // Update bufferMaxEntries\n    self.s.storeOptions.bufferMaxEntries =\n      typeof _options.bufferMaxEntries === 'number' ? _options.bufferMaxEntries : -1;\n\n    // Error handler\n    var connectErrorHandler = function() {\n      return function(err) {\n        // Remove all event handlers\n        var events = ['timeout', 'error', 'close'];\n        events.forEach(function(e) {\n          self.removeListener(e, connectErrorHandler);\n        });\n\n        self.s.coreTopology.removeListener('connect', connectErrorHandler);\n        // Force close the topology\n        self.close(true);\n\n        // Try to callback\n        try {\n          callback(err);\n        } catch (err) {\n          process.nextTick(function() {\n            throw err;\n          });\n        }\n      };\n    };\n\n    // Actual handler\n    var errorHandler = function(event) {\n      return function(err) {\n        if (event !== 'error') {\n          self.emit(event, err);\n        }\n      };\n    };\n\n    // Error handler\n    var reconnectHandler = function() {\n      self.emit('reconnect');\n      self.s.store.execute();\n    };\n\n    // relay the event\n    var relay = function(event) {\n      return function(t, server) {\n        self.emit(event, t, server);\n      };\n    };\n\n    // Connect handler\n    var connectHandler = function() {\n      // Clear out all the current handlers left over\n      var events = ['timeout', 'error', 'close', 'fullsetup'];\n      events.forEach(function(e) {\n        self.s.coreTopology.removeAllListeners(e);\n      });\n\n      // Set up listeners\n      self.s.coreTopology.once('timeout', errorHandler('timeout'));\n      self.s.coreTopology.once('error', errorHandler('error'));\n      self.s.coreTopology.once('close', errorHandler('close'));\n\n      // Set up serverConfig listeners\n      self.s.coreTopology.on('fullsetup', function() {\n        self.emit('fullsetup', self);\n      });\n\n      // Emit open event\n      self.emit('open', null, self);\n\n      // Return correctly\n      try {\n        callback(null, self);\n      } catch (err) {\n        process.nextTick(function() {\n          throw err;\n        });\n      }\n    };\n\n    // Clear out all the current handlers left over\n    var events = [\n      'timeout',\n      'error',\n      'close',\n      'serverOpening',\n      'serverDescriptionChanged',\n      'serverHeartbeatStarted',\n      'serverHeartbeatSucceeded',\n      'serverHeartbeatFailed',\n      'serverClosed',\n      'topologyOpening',\n      'topologyClosed',\n      'topologyDescriptionChanged'\n    ];\n    events.forEach(function(e) {\n      self.s.coreTopology.removeAllListeners(e);\n    });\n\n    // Set up SDAM listeners\n    self.s.coreTopology.on('serverDescriptionChanged', relay('serverDescriptionChanged'));\n    self.s.coreTopology.on('serverHeartbeatStarted', relay('serverHeartbeatStarted'));\n    self.s.coreTopology.on('serverHeartbeatSucceeded', relay('serverHeartbeatSucceeded'));\n    self.s.coreTopology.on('serverHeartbeatFailed', relay('serverHeartbeatFailed'));\n    self.s.coreTopology.on('serverOpening', relay('serverOpening'));\n    self.s.coreTopology.on('serverClosed', relay('serverClosed'));\n    self.s.coreTopology.on('topologyOpening', relay('topologyOpening'));\n    self.s.coreTopology.on('topologyClosed', relay('topologyClosed'));\n    self.s.coreTopology.on('topologyDescriptionChanged', relay('topologyDescriptionChanged'));\n\n    // Set up listeners\n    self.s.coreTopology.once('timeout', connectErrorHandler('timeout'));\n    self.s.coreTopology.once('error', connectErrorHandler('error'));\n    self.s.coreTopology.once('close', connectErrorHandler('close'));\n    self.s.coreTopology.once('connect', connectHandler);\n    // Join and leave events\n    self.s.coreTopology.on('joined', relay('joined'));\n    self.s.coreTopology.on('left', relay('left'));\n\n    // Reconnect server\n    self.s.coreTopology.on('reconnect', reconnectHandler);\n\n    // Start connection\n    self.s.coreTopology.connect(_options);\n  }\n}\n\nObject.defineProperty(Mongos.prototype, 'haInterval', {\n  enumerable: true,\n  get: function() {\n    return this.s.coreTopology.s.haInterval;\n  }\n});\n\nconst define = (Mongos.define = new Define('Mongos', Mongos, false));\ndefine.classMethod('capabilities', {\n  callback: false,\n  promise: false,\n  returns: [ServerCapabilities]\n});\n\ndefine.classMethod('command', { callback: true, promise: false });\ndefine.classMethod('insert', { callback: true, promise: false });\ndefine.classMethod('update', { callback: true, promise: false });\ndefine.classMethod('remove', { callback: true, promise: false });\ndefine.classMethod('isConnected', { callback: false, promise: false, returns: [Boolean] });\ndefine.classMethod('isDestroyed', { callback: false, promise: false, returns: [Boolean] });\ndefine.classMethod('cursor', {\n  callback: false,\n  promise: false,\n  returns: [Cursor, AggregationCursor, CommandCursor]\n});\n\ndefine.classMethod('close', { callback: false, promise: false });\ndefine.classMethod('auth', { callback: true, promise: false });\ndefine.classMethod('logout', { callback: true, promise: false });\ndefine.classMethod('connections', { callback: false, promise: false, returns: [Array] });\n\n/**\n * A mongos connect event, used to verify that the connection is up and running\n *\n * @event Mongos#connect\n * @type {Mongos}\n */\n\n/**\n * The mongos high availability event\n *\n * @event Mongos#ha\n * @type {function}\n * @param {string} type The stage in the high availability event (start|end)\n * @param {boolean} data.norepeat This is a repeating high availability process or a single execution only\n * @param {number} data.id The id for this high availability request\n * @param {object} data.state An object containing the information about the current replicaset\n */\n\n/**\n * A server member left the mongos set\n *\n * @event Mongos#left\n * @type {function}\n * @param {string} type The type of member that left (primary|secondary|arbiter)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the mongos set\n *\n * @event Mongos#joined\n * @type {function}\n * @param {string} type The type of member that joined (primary|secondary|arbiter)\n * @param {Server} server The server object that joined\n */\n\n/**\n * Mongos fullsetup event, emitted when all proxies in the topology have been connected to.\n *\n * @event Mongos#fullsetup\n * @type {Mongos}\n */\n\n/**\n * Mongos open event, emitted when mongos can start processing commands.\n *\n * @event Mongos#open\n * @type {Mongos}\n */\n\n/**\n * Mongos close event\n *\n * @event Mongos#close\n * @type {object}\n */\n\n/**\n * Mongos error event, emitted if there is an error listener.\n *\n * @event Mongos#error\n * @type {MongoError}\n */\n\n/**\n * Mongos timeout event\n *\n * @event Mongos#timeout\n * @type {object}\n */\n\n/**\n * Mongos parseError event\n *\n * @event Mongos#parseError\n * @type {object}\n */\n\nmodule.exports = Mongos;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/topologies/mongos.js\n// module id = 116\n// module chunks = 0","'use strict';\n\nvar Server = require('./server'),\n  Cursor = require('../cursor'),\n  AggregationCursor = require('../aggregation_cursor'),\n  CommandCursor = require('../command_cursor'),\n  MongoError = require('mongodb-core').MongoError,\n  ServerCapabilities = require('./topology_base').ServerCapabilities,\n  TopologyBase = require('./topology_base').TopologyBase,\n  Store = require('./topology_base').Store,\n  Define = require('../metadata'),\n  CReplSet = require('mongodb-core').ReplSet,\n  MAX_JS_INT = require('../utils').MAX_JS_INT,\n  translateOptions = require('../utils').translateOptions,\n  filterOptions = require('../utils').filterOptions,\n  mergeOptions = require('../utils').mergeOptions;\n\n/**\n * @fileOverview The **ReplSet** class is a class that represents a Replicaset topology and is\n * used to construct connections.\n *\n * **ReplSet Should not be used, use MongoClient.connect**\n */\n\n// Allowed parameters\nvar legalOptionNames = [\n  'ha',\n  'haInterval',\n  'replicaSet',\n  'rs_name',\n  'secondaryAcceptableLatencyMS',\n  'connectWithNoPrimary',\n  'poolSize',\n  'ssl',\n  'checkServerIdentity',\n  'sslValidate',\n  'sslCA',\n  'sslCert',\n  'ciphers',\n  'ecdhCurve',\n  'sslCRL',\n  'sslKey',\n  'sslPass',\n  'socketOptions',\n  'bufferMaxEntries',\n  'store',\n  'auto_reconnect',\n  'autoReconnect',\n  'emitError',\n  'keepAlive',\n  'keepAliveInitialDelay',\n  'noDelay',\n  'connectTimeoutMS',\n  'socketTimeoutMS',\n  'strategy',\n  'debug',\n  'family',\n  'loggerLevel',\n  'logger',\n  'reconnectTries',\n  'appname',\n  'domainsEnabled',\n  'servername',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'maxStalenessSeconds',\n  'promiseLibrary',\n  'minSize'\n];\n\n/**\n * Creates a new ReplSet instance\n * @class\n * @deprecated\n * @param {Server[]} servers A seedlist of servers participating in the replicaset.\n * @param {object} [options=null] Optional settings.\n * @param {boolean} [options.ha=true] Turn on high availability monitoring.\n * @param {number} [options.haInterval=10000] Time between each replicaset status check.\n * @param {string} [options.replicaSet] The name of the replicaset to connect to.\n * @param {number} [options.secondaryAcceptableLatencyMS=15] Sets the range of servers to pick when using NEAREST (lowest ping ms + the latency fence, ex: range of 1 to (1 + 15) ms)\n * @param {boolean} [options.connectWithNoPrimary=false] Sets if the driver should connect even if no primary is available\n * @param {number} [options.poolSize=5] Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n * @param {boolean} [options.ssl=false] Use ssl connection (needs to have a mongod server with ssl support)\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {object} [options.sslValidate=true] Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCA=null] Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCRL=null] Array of revocation certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslCert=null] String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher.\n * @param {string} [options.ciphers=null] Passed directly through to tls.createSecureContext. See https://nodejs.org/dist/latest-v9.x/docs/api/tls.html#tls_tls_createsecurecontext_options for more info.\n * @param {string} [options.ecdhCurve=null] Passed directly through to tls.createSecureContext. See https://nodejs.org/dist/latest-v9.x/docs/api/tls.html#tls_tls_createsecurecontext_options for more info.\n * @param {(Buffer|string)} [options.sslKey=null] String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslPass=null] String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {object} [options.socketOptions=null] Socket options\n * @param {boolean} [options.socketOptions.noDelay=true] TCP Socket NoDelay option.\n * @param {boolean} [options.socketOptions.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.socketOptions.keepAliveInitialDelay=30000] The number of milliseconds to wait before initiating keepAlive on the TCP socket\n * @param {number} [options.socketOptions.connectTimeoutMS=10000] TCP Connection timeout setting\n * @param {number} [options.socketOptions.socketTimeoutMS=0] TCP Socket timeout setting\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @param {number} [options.maxStalenessSeconds=undefined] The max staleness to secondary reads (values under 10 seconds cannot be guaranteed);\n * @fires ReplSet#connect\n * @fires ReplSet#ha\n * @fires ReplSet#joined\n * @fires ReplSet#left\n * @fires ReplSet#fullsetup\n * @fires ReplSet#open\n * @fires ReplSet#close\n * @fires ReplSet#error\n * @fires ReplSet#timeout\n * @fires ReplSet#parseError\n * @property {string} parserType the parser type used (c++ or js).\n * @return {ReplSet} a ReplSet instance.\n */\nclass ReplSet extends TopologyBase {\n  constructor(servers, options) {\n    super();\n\n    options = options || {};\n    var self = this;\n\n    // Filter the options\n    options = filterOptions(options, legalOptionNames);\n\n    // Ensure all the instances are Server\n    for (var i = 0; i < servers.length; i++) {\n      if (!(servers[i] instanceof Server)) {\n        throw MongoError.create({\n          message: 'all seed list instances must be of the Server type',\n          driver: true\n        });\n      }\n    }\n\n    // Stored options\n    var storeOptions = {\n      force: false,\n      bufferMaxEntries:\n        typeof options.bufferMaxEntries === 'number' ? options.bufferMaxEntries : MAX_JS_INT\n    };\n\n    // Shared global store\n    var store = options.store || new Store(self, storeOptions);\n\n    // Build seed list\n    var seedlist = servers.map(function(x) {\n      return { host: x.host, port: x.port };\n    });\n\n    // Clone options\n    var clonedOptions = mergeOptions(\n      {},\n      {\n        disconnectHandler: store,\n        cursorFactory: Cursor,\n        reconnect: false,\n        emitError: typeof options.emitError === 'boolean' ? options.emitError : true,\n        size: typeof options.poolSize === 'number' ? options.poolSize : 5\n      }\n    );\n\n    // Translate any SSL options and other connectivity options\n    clonedOptions = translateOptions(clonedOptions, options);\n\n    // Socket options\n    var socketOptions =\n      options.socketOptions && Object.keys(options.socketOptions).length > 0\n        ? options.socketOptions\n        : options;\n\n    // Translate all the options to the mongodb-core ones\n    clonedOptions = translateOptions(clonedOptions, socketOptions);\n\n    // Build default client information\n    clonedOptions.clientInfo = this.clientInfo;\n    // Do we have an application specific string\n    if (options.appname) {\n      clonedOptions.clientInfo.application = { name: options.appname };\n    }\n\n    // Create the ReplSet\n    var coreTopology = new CReplSet(seedlist, clonedOptions);\n\n    // Listen to reconnect event\n    coreTopology.on('reconnect', function() {\n      self.emit('reconnect');\n      store.execute();\n    });\n\n    // Internal state\n    this.s = {\n      // Replicaset\n      coreTopology: coreTopology,\n      // Server capabilities\n      sCapabilities: null,\n      // Debug tag\n      tag: options.tag,\n      // Store options\n      storeOptions: storeOptions,\n      // Cloned options\n      clonedOptions: clonedOptions,\n      // Store\n      store: store,\n      // Options\n      options: options,\n      // Server Session Pool\n      sessionPool: null,\n      // Active client sessions\n      sessions: [],\n      // Promise library\n      promiseLibrary: options.promiseLibrary || Promise\n    };\n\n    // Debug\n    if (clonedOptions.debug) {\n      // Last ismaster\n      Object.defineProperty(this, 'replset', {\n        enumerable: true,\n        get: function() {\n          return coreTopology;\n        }\n      });\n    }\n  }\n\n  // Connect method\n  connect(_options, callback) {\n    var self = this;\n    if ('function' === typeof _options) (callback = _options), (_options = {});\n    if (_options == null) _options = {};\n    if (!('function' === typeof callback)) callback = null;\n    _options = Object.assign({}, this.s.clonedOptions, _options);\n    self.s.options = _options;\n\n    // Update bufferMaxEntries\n    self.s.storeOptions.bufferMaxEntries =\n      typeof _options.bufferMaxEntries === 'number' ? _options.bufferMaxEntries : -1;\n\n    // Actual handler\n    var errorHandler = function(event) {\n      return function(err) {\n        if (event !== 'error') {\n          self.emit(event, err);\n        }\n      };\n    };\n\n    // Clear out all the current handlers left over\n    var events = [\n      'timeout',\n      'error',\n      'close',\n      'serverOpening',\n      'serverDescriptionChanged',\n      'serverHeartbeatStarted',\n      'serverHeartbeatSucceeded',\n      'serverHeartbeatFailed',\n      'serverClosed',\n      'topologyOpening',\n      'topologyClosed',\n      'topologyDescriptionChanged',\n      'joined',\n      'left',\n      'ping',\n      'ha'\n    ];\n    events.forEach(function(e) {\n      self.s.coreTopology.removeAllListeners(e);\n    });\n\n    // relay the event\n    var relay = function(event) {\n      return function(t, server) {\n        self.emit(event, t, server);\n      };\n    };\n\n    // Replset events relay\n    var replsetRelay = function(event) {\n      return function(t, server) {\n        self.emit(event, t, server.lastIsMaster(), server);\n      };\n    };\n\n    // Relay ha\n    var relayHa = function(t, state) {\n      self.emit('ha', t, state);\n\n      if (t === 'start') {\n        self.emit('ha_connect', t, state);\n      } else if (t === 'end') {\n        self.emit('ha_ismaster', t, state);\n      }\n    };\n\n    // Set up serverConfig listeners\n    self.s.coreTopology.on('joined', replsetRelay('joined'));\n    self.s.coreTopology.on('left', relay('left'));\n    self.s.coreTopology.on('ping', relay('ping'));\n    self.s.coreTopology.on('ha', relayHa);\n\n    // Set up SDAM listeners\n    self.s.coreTopology.on('serverDescriptionChanged', relay('serverDescriptionChanged'));\n    self.s.coreTopology.on('serverHeartbeatStarted', relay('serverHeartbeatStarted'));\n    self.s.coreTopology.on('serverHeartbeatSucceeded', relay('serverHeartbeatSucceeded'));\n    self.s.coreTopology.on('serverHeartbeatFailed', relay('serverHeartbeatFailed'));\n    self.s.coreTopology.on('serverOpening', relay('serverOpening'));\n    self.s.coreTopology.on('serverClosed', relay('serverClosed'));\n    self.s.coreTopology.on('topologyOpening', relay('topologyOpening'));\n    self.s.coreTopology.on('topologyClosed', relay('topologyClosed'));\n    self.s.coreTopology.on('topologyDescriptionChanged', relay('topologyDescriptionChanged'));\n\n    self.s.coreTopology.on('fullsetup', function() {\n      self.emit('fullsetup', self, self);\n    });\n\n    self.s.coreTopology.on('all', function() {\n      self.emit('all', null, self);\n    });\n\n    // Connect handler\n    var connectHandler = function() {\n      // Set up listeners\n      self.s.coreTopology.once('timeout', errorHandler('timeout'));\n      self.s.coreTopology.once('error', errorHandler('error'));\n      self.s.coreTopology.once('close', errorHandler('close'));\n\n      // Emit open event\n      self.emit('open', null, self);\n\n      // Return correctly\n      try {\n        callback(null, self);\n      } catch (err) {\n        process.nextTick(function() {\n          throw err;\n        });\n      }\n    };\n\n    // Error handler\n    var connectErrorHandler = function() {\n      return function(err) {\n        ['timeout', 'error', 'close'].forEach(function(e) {\n          self.s.coreTopology.removeListener(e, connectErrorHandler);\n        });\n\n        self.s.coreTopology.removeListener('connect', connectErrorHandler);\n        // Destroy the replset\n        self.s.coreTopology.destroy();\n\n        // Try to callback\n        try {\n          callback(err);\n        } catch (err) {\n          if (!self.s.coreTopology.isConnected())\n            process.nextTick(function() {\n              throw err;\n            });\n        }\n      };\n    };\n\n    // Set up listeners\n    self.s.coreTopology.once('timeout', connectErrorHandler('timeout'));\n    self.s.coreTopology.once('error', connectErrorHandler('error'));\n    self.s.coreTopology.once('close', connectErrorHandler('close'));\n    self.s.coreTopology.once('connect', connectHandler);\n\n    // Start connection\n    self.s.coreTopology.connect(_options);\n  }\n\n  close(forceClosed) {\n    super.close(forceClosed);\n\n    ['timeout', 'error', 'close', 'joined', 'left'].forEach(e => this.removeAllListeners(e));\n  }\n}\n\nObject.defineProperty(ReplSet.prototype, 'haInterval', {\n  enumerable: true,\n  get: function() {\n    return this.s.coreTopology.s.haInterval;\n  }\n});\n\nconst define = (ReplSet.define = new Define('ReplSet', ReplSet, false));\ndefine.classMethod('capabilities', {\n  callback: false,\n  promise: false,\n  returns: [ServerCapabilities]\n});\n\ndefine.classMethod('command', { callback: true, promise: false });\ndefine.classMethod('insert', { callback: true, promise: false });\ndefine.classMethod('update', { callback: true, promise: false });\ndefine.classMethod('remove', { callback: true, promise: false });\ndefine.classMethod('isConnected', { callback: false, promise: false, returns: [Boolean] });\ndefine.classMethod('cursor', {\n  callback: false,\n  promise: false,\n  returns: [Cursor, AggregationCursor, CommandCursor]\n});\n\ndefine.classMethod('close', { callback: false, promise: false });\ndefine.classMethod('auth', { callback: true, promise: false });\ndefine.classMethod('logout', { callback: true, promise: false });\ndefine.classMethod('connections', { callback: false, promise: false, returns: [Array] });\n\n/**\n * A replset connect event, used to verify that the connection is up and running\n *\n * @event ReplSet#connect\n * @type {ReplSet}\n */\n\n/**\n * The replset high availability event\n *\n * @event ReplSet#ha\n * @type {function}\n * @param {string} type The stage in the high availability event (start|end)\n * @param {boolean} data.norepeat This is a repeating high availability process or a single execution only\n * @param {number} data.id The id for this high availability request\n * @param {object} data.state An object containing the information about the current replicaset\n */\n\n/**\n * A server member left the replicaset\n *\n * @event ReplSet#left\n * @type {function}\n * @param {string} type The type of member that left (primary|secondary|arbiter)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the replicaset\n *\n * @event ReplSet#joined\n * @type {function}\n * @param {string} type The type of member that joined (primary|secondary|arbiter)\n * @param {Server} server The server object that joined\n */\n\n/**\n * ReplSet open event, emitted when replicaset can start processing commands.\n *\n * @event ReplSet#open\n * @type {Replset}\n */\n\n/**\n * ReplSet fullsetup event, emitted when all servers in the topology have been connected to.\n *\n * @event ReplSet#fullsetup\n * @type {Replset}\n */\n\n/**\n * ReplSet close event\n *\n * @event ReplSet#close\n * @type {object}\n */\n\n/**\n * ReplSet error event, emitted if there is an error listener.\n *\n * @event ReplSet#error\n * @type {MongoError}\n */\n\n/**\n * ReplSet timeout event\n *\n * @event ReplSet#timeout\n * @type {object}\n */\n\n/**\n * ReplSet parseError event\n *\n * @event ReplSet#parseError\n * @type {object}\n */\n\nmodule.exports = ReplSet;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/topologies/replset.js\n// module id = 117\n// module chunks = 0","'use strict';\n\nconst ReadPreference = require('mongodb-core').ReadPreference,\n  parser = require('url'),\n  f = require('util').format,\n  Logger = require('mongodb-core').Logger,\n  dns = require('dns');\n\nmodule.exports = function(url, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  let result;\n  try {\n    result = parser.parse(url, true);\n  } catch (e) {\n    return callback(new Error('URL malformed, cannot be parsed'));\n  }\n\n  if (result.protocol !== 'mongodb:' && result.protocol !== 'mongodb+srv:') {\n    return callback(new Error('Invalid schema, expected `mongodb` or `mongodb+srv`'));\n  }\n\n  if (result.protocol === 'mongodb:') {\n    return parseHandler(url, options, callback);\n  }\n\n  // Otherwise parse this as an SRV record\n  if (result.hostname.split('.').length < 3) {\n    return callback(new Error('URI does not have hostname, domain name and tld'));\n  }\n\n  result.domainLength = result.hostname.split('.').length;\n\n  if (result.pathname && result.pathname.match(',')) {\n    return callback(new Error('Invalid URI, cannot contain multiple hostnames'));\n  }\n\n  if (result.port) {\n    return callback(new Error('Ports not accepted with `mongodb+srv` URIs'));\n  }\n\n  let srvAddress = `_mongodb._tcp.${result.host}`;\n  dns.resolveSrv(srvAddress, function(err, addresses) {\n    if (err) return callback(err);\n\n    if (addresses.length === 0) {\n      return callback(new Error('No addresses found at host'));\n    }\n\n    for (let i = 0; i < addresses.length; i++) {\n      if (!matchesParentDomain(addresses[i].name, result.hostname, result.domainLength)) {\n        return callback(new Error('Server record does not share hostname with parent URI'));\n      }\n    }\n\n    let base = result.auth ? `mongodb://${result.auth}@` : `mongodb://`;\n    let connectionStrings = addresses.map(function(address, i) {\n      if (i === 0) return `${base}${address.name}:${address.port}`;\n      else return `${address.name}:${address.port}`;\n    });\n\n    let connectionString = connectionStrings.join(',') + '/';\n    let connectionStringOptions = [];\n\n    // Default to SSL true\n    if (!options.ssl && !result.search) {\n      connectionStringOptions.push('ssl=true');\n    } else if (!options.ssl && result.search && !result.search.match('ssl')) {\n      connectionStringOptions.push('ssl=true');\n    }\n\n    // Keep original uri options\n    if (result.search) {\n      connectionStringOptions.push(result.search.replace('?', ''));\n    }\n\n    dns.resolveTxt(result.host, function(err, record) {\n      if (err && err.code !== 'ENODATA') return callback(err);\n      if (err && err.code === 'ENODATA') record = null;\n\n      if (record) {\n        if (record.length > 1) {\n          return callback(new Error('Multiple text records not allowed'));\n        }\n\n        record = record[0];\n        if (record.length > 1) record = record.join('');\n        else record = record[0];\n\n        if (!record.includes('authSource') && !record.includes('replicaSet')) {\n          return callback(new Error('Text record must only set `authSource` or `replicaSet`'));\n        }\n\n        connectionStringOptions.push(record);\n      }\n\n      // Add any options to the connection string\n      if (connectionStringOptions.length) {\n        connectionString += `?${connectionStringOptions.join('&')}`;\n      }\n\n      parseHandler(connectionString, options, callback);\n    });\n  });\n};\n\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  let regex = /^.*?\\./;\n  let srv = `.${srvAddress.replace(regex, '')}`;\n  let parent = `.${parentDomain.replace(regex, '')}`;\n  if (srv.endsWith(parent)) return true;\n  else return false;\n}\n\nfunction parseHandler(address, options, callback) {\n  let result, err;\n  try {\n    result = parseConnectionString(address, options);\n  } catch (e) {\n    err = e;\n  }\n\n  return err ? callback(err, null) : callback(null, result);\n}\n\nfunction parseConnectionString(url, options) {\n  // Variables\n  let connection_part = '';\n  let auth_part = '';\n  let query_string_part = '';\n  let dbName = 'admin';\n\n  // Url parser result\n  let result = parser.parse(url, true);\n  if ((result.hostname == null || result.hostname === '') && url.indexOf('.sock') === -1) {\n    throw new Error('No hostname or hostnames provided in connection string');\n  }\n\n  if (result.port === '0') {\n    throw new Error('Invalid port (zero) with hostname');\n  }\n\n  if (!isNaN(parseInt(result.port, 10)) && parseInt(result.port, 10) > 65535) {\n    throw new Error('Invalid port (larger than 65535) with hostname');\n  }\n\n  if (\n    result.path &&\n    result.path.length > 0 &&\n    result.path[0] !== '/' &&\n    url.indexOf('.sock') === -1\n  ) {\n    throw new Error('Missing delimiting slash between hosts and options');\n  }\n\n  if (result.query) {\n    for (let name in result.query) {\n      if (name.indexOf('::') !== -1) {\n        throw new Error('Double colon in host identifier');\n      }\n\n      if (result.query[name] === '') {\n        throw new Error('Query parameter ' + name + ' is an incomplete value pair');\n      }\n    }\n  }\n\n  if (result.auth) {\n    let parts = result.auth.split(':');\n    if (url.indexOf(result.auth) !== -1 && parts.length > 2) {\n      throw new Error('Username with password containing an unescaped colon');\n    }\n\n    if (url.indexOf(result.auth) !== -1 && result.auth.indexOf('@') !== -1) {\n      throw new Error('Username containing an unescaped at-sign');\n    }\n  }\n\n  // Remove query\n  let clean = url.split('?').shift();\n\n  // Extract the list of hosts\n  let strings = clean.split(',');\n  let hosts = [];\n\n  for (let i = 0; i < strings.length; i++) {\n    let hostString = strings[i];\n\n    if (hostString.indexOf('mongodb') !== -1) {\n      if (hostString.indexOf('@') !== -1) {\n        hosts.push(hostString.split('@').pop());\n      } else {\n        hosts.push(hostString.substr('mongodb://'.length));\n      }\n    } else if (hostString.indexOf('/') !== -1) {\n      hosts.push(hostString.split('/').shift());\n    } else if (hostString.indexOf('/') === -1) {\n      hosts.push(hostString.trim());\n    }\n  }\n\n  for (let i = 0; i < hosts.length; i++) {\n    let r = parser.parse(f('mongodb://%s', hosts[i].trim()));\n    if (r.path && r.path.indexOf(':') !== -1) {\n      // Not connecting to a socket so check for an extra slash in the hostname.\n      // Using String#split as perf is better than match.\n      if (r.path.split('/').length > 1 && r.path.indexOf('::') === -1) {\n        throw new Error('Slash in host identifier');\n      } else {\n        throw new Error('Double colon in host identifier');\n      }\n    }\n  }\n\n  // If we have a ? mark cut the query elements off\n  if (url.indexOf('?') !== -1) {\n    query_string_part = url.substr(url.indexOf('?') + 1);\n    connection_part = url.substring('mongodb://'.length, url.indexOf('?'));\n  } else {\n    connection_part = url.substring('mongodb://'.length);\n  }\n\n  // Check if we have auth params\n  if (connection_part.indexOf('@') !== -1) {\n    auth_part = connection_part.split('@')[0];\n    connection_part = connection_part.split('@')[1];\n  }\n\n  // Check there is not more than one unescaped slash\n  if (connection_part.split('/').length > 2) {\n    throw new Error(\n      \"Unsupported host '\" +\n        connection_part.split('?')[0] +\n        \"', hosts must be URL encoded and contain at most one unencoded slash\"\n    );\n  }\n\n  // Check if the connection string has a db\n  if (connection_part.indexOf('.sock') !== -1) {\n    if (connection_part.indexOf('.sock/') !== -1) {\n      dbName = connection_part.split('.sock/')[1];\n      // Check if multiple database names provided, or just an illegal trailing backslash\n      if (dbName.indexOf('/') !== -1) {\n        if (dbName.split('/').length === 2 && dbName.split('/')[1].length === 0) {\n          throw new Error('Illegal trailing backslash after database name');\n        }\n        throw new Error('More than 1 database name in URL');\n      }\n      connection_part = connection_part.split(\n        '/',\n        connection_part.indexOf('.sock') + '.sock'.length\n      );\n    }\n  } else if (connection_part.indexOf('/') !== -1) {\n    // Check if multiple database names provided, or just an illegal trailing backslash\n    if (connection_part.split('/').length > 2) {\n      if (connection_part.split('/')[2].length === 0) {\n        throw new Error('Illegal trailing backslash after database name');\n      }\n      throw new Error('More than 1 database name in URL');\n    }\n    dbName = connection_part.split('/')[1];\n    connection_part = connection_part.split('/')[0];\n  }\n\n  // URI decode the host information\n  connection_part = decodeURIComponent(connection_part);\n\n  // Result object\n  let object = {};\n\n  // Pick apart the authentication part of the string\n  let authPart = auth_part || '';\n  let auth = authPart.split(':', 2);\n\n  // Decode the authentication URI components and verify integrity\n  let user = decodeURIComponent(auth[0]);\n  if (auth[0] !== encodeURIComponent(user)) {\n    throw new Error('Username contains an illegal unescaped character');\n  }\n  auth[0] = user;\n\n  if (auth[1]) {\n    let pass = decodeURIComponent(auth[1]);\n    if (auth[1] !== encodeURIComponent(pass)) {\n      throw new Error('Password contains an illegal unescaped character');\n    }\n    auth[1] = pass;\n  }\n\n  // Add auth to final object if we have 2 elements\n  if (auth.length === 2) object.auth = { user: auth[0], password: auth[1] };\n  // if user provided auth options, use that\n  if (options && options.auth != null) object.auth = options.auth;\n\n  // Variables used for temporary storage\n  let hostPart;\n  let urlOptions;\n  let servers;\n  let compression;\n  let serverOptions = { socketOptions: {} };\n  let dbOptions = { read_preference_tags: [] };\n  let replSetServersOptions = { socketOptions: {} };\n  let mongosOptions = { socketOptions: {} };\n  // Add server options to final object\n  object.server_options = serverOptions;\n  object.db_options = dbOptions;\n  object.rs_options = replSetServersOptions;\n  object.mongos_options = mongosOptions;\n\n  // Let's check if we are using a domain socket\n  if (url.match(/\\.sock/)) {\n    // Split out the socket part\n    let domainSocket = url.substring(\n      url.indexOf('mongodb://') + 'mongodb://'.length,\n      url.lastIndexOf('.sock') + '.sock'.length\n    );\n    // Clean out any auth stuff if any\n    if (domainSocket.indexOf('@') !== -1) domainSocket = domainSocket.split('@')[1];\n    domainSocket = decodeURIComponent(domainSocket);\n    servers = [{ domain_socket: domainSocket }];\n  } else {\n    // Split up the db\n    hostPart = connection_part;\n    // Deduplicate servers\n    let deduplicatedServers = {};\n\n    // Parse all server results\n    servers = hostPart\n      .split(',')\n      .map(function(h) {\n        let _host, _port, ipv6match;\n        //check if it matches [IPv6]:port, where the port number is optional\n        if ((ipv6match = /\\[([^\\]]+)\\](?::(.+))?/.exec(h))) {\n          _host = ipv6match[1];\n          _port = parseInt(ipv6match[2], 10) || 27017;\n        } else {\n          //otherwise assume it's IPv4, or plain hostname\n          let hostPort = h.split(':', 2);\n          _host = hostPort[0] || 'localhost';\n          _port = hostPort[1] != null ? parseInt(hostPort[1], 10) : 27017;\n          // Check for localhost?safe=true style case\n          if (_host.indexOf('?') !== -1) _host = _host.split(/\\?/)[0];\n        }\n\n        // No entry returned for duplicate servr\n        if (deduplicatedServers[_host + '_' + _port]) return null;\n        deduplicatedServers[_host + '_' + _port] = 1;\n\n        // Return the mapped object\n        return { host: _host, port: _port };\n      })\n      .filter(function(x) {\n        return x != null;\n      });\n  }\n\n  // Get the db name\n  object.dbName = dbName || 'admin';\n  // Split up all the options\n  urlOptions = (query_string_part || '').split(/[&;]/);\n  // Ugh, we have to figure out which options go to which constructor manually.\n  urlOptions.forEach(function(opt) {\n    if (!opt) return;\n    var splitOpt = opt.split('='),\n      name = splitOpt[0],\n      value = splitOpt[1];\n\n    // Options implementations\n    switch (name) {\n      case 'slaveOk':\n      case 'slave_ok':\n        serverOptions.slave_ok = value === 'true';\n        dbOptions.slaveOk = value === 'true';\n        break;\n      case 'maxPoolSize':\n      case 'poolSize':\n        serverOptions.poolSize = parseInt(value, 10);\n        replSetServersOptions.poolSize = parseInt(value, 10);\n        break;\n      case 'appname':\n        object.appname = decodeURIComponent(value);\n        break;\n      case 'autoReconnect':\n      case 'auto_reconnect':\n        serverOptions.auto_reconnect = value === 'true';\n        break;\n      case 'ssl':\n        if (value === 'prefer') {\n          serverOptions.ssl = value;\n          replSetServersOptions.ssl = value;\n          mongosOptions.ssl = value;\n          break;\n        }\n        serverOptions.ssl = value === 'true';\n        replSetServersOptions.ssl = value === 'true';\n        mongosOptions.ssl = value === 'true';\n        break;\n      case 'sslValidate':\n        serverOptions.sslValidate = value === 'true';\n        replSetServersOptions.sslValidate = value === 'true';\n        mongosOptions.sslValidate = value === 'true';\n        break;\n      case 'replicaSet':\n      case 'rs_name':\n        replSetServersOptions.rs_name = value;\n        break;\n      case 'reconnectWait':\n        replSetServersOptions.reconnectWait = parseInt(value, 10);\n        break;\n      case 'retries':\n        replSetServersOptions.retries = parseInt(value, 10);\n        break;\n      case 'readSecondary':\n      case 'read_secondary':\n        replSetServersOptions.read_secondary = value === 'true';\n        break;\n      case 'fsync':\n        dbOptions.fsync = value === 'true';\n        break;\n      case 'journal':\n        dbOptions.j = value === 'true';\n        break;\n      case 'safe':\n        dbOptions.safe = value === 'true';\n        break;\n      case 'nativeParser':\n      case 'native_parser':\n        dbOptions.native_parser = value === 'true';\n        break;\n      case 'readConcernLevel':\n        dbOptions.readConcern = { level: value };\n        break;\n      case 'connectTimeoutMS':\n        serverOptions.socketOptions.connectTimeoutMS = parseInt(value, 10);\n        replSetServersOptions.socketOptions.connectTimeoutMS = parseInt(value, 10);\n        mongosOptions.socketOptions.connectTimeoutMS = parseInt(value, 10);\n        break;\n      case 'socketTimeoutMS':\n        serverOptions.socketOptions.socketTimeoutMS = parseInt(value, 10);\n        replSetServersOptions.socketOptions.socketTimeoutMS = parseInt(value, 10);\n        mongosOptions.socketOptions.socketTimeoutMS = parseInt(value, 10);\n        break;\n      case 'w':\n        dbOptions.w = parseInt(value, 10);\n        if (isNaN(dbOptions.w)) dbOptions.w = value;\n        break;\n      case 'authSource':\n        dbOptions.authSource = value;\n        break;\n      case 'gssapiServiceName':\n        dbOptions.gssapiServiceName = value;\n        break;\n      case 'authMechanism':\n        if (value === 'GSSAPI') {\n          // If no password provided decode only the principal\n          if (object.auth == null) {\n            let urlDecodeAuthPart = decodeURIComponent(authPart);\n            if (urlDecodeAuthPart.indexOf('@') === -1)\n              throw new Error('GSSAPI requires a provided principal');\n            object.auth = { user: urlDecodeAuthPart, password: null };\n          } else {\n            object.auth.user = decodeURIComponent(object.auth.user);\n          }\n        } else if (value === 'MONGODB-X509') {\n          object.auth = { user: decodeURIComponent(authPart) };\n        }\n\n        // Only support GSSAPI or MONGODB-CR for now\n        if (\n          value !== 'GSSAPI' &&\n          value !== 'MONGODB-X509' &&\n          value !== 'MONGODB-CR' &&\n          value !== 'DEFAULT' &&\n          value !== 'SCRAM-SHA-1' &&\n          value !== 'PLAIN'\n        )\n          throw new Error(\n            'Only DEFAULT, GSSAPI, PLAIN, MONGODB-X509, SCRAM-SHA-1 or MONGODB-CR is supported by authMechanism'\n          );\n\n        // Authentication mechanism\n        dbOptions.authMechanism = value;\n        break;\n      case 'authMechanismProperties':\n        {\n          // Split up into key, value pairs\n          let values = value.split(',');\n          let o = {};\n          // For each value split into key, value\n          values.forEach(function(x) {\n            let v = x.split(':');\n            o[v[0]] = v[1];\n          });\n\n          // Set all authMechanismProperties\n          dbOptions.authMechanismProperties = o;\n          // Set the service name value\n          if (typeof o.SERVICE_NAME === 'string') dbOptions.gssapiServiceName = o.SERVICE_NAME;\n          if (typeof o.SERVICE_REALM === 'string') dbOptions.gssapiServiceRealm = o.SERVICE_REALM;\n          if (typeof o.CANONICALIZE_HOST_NAME === 'string')\n            dbOptions.gssapiCanonicalizeHostName =\n              o.CANONICALIZE_HOST_NAME === 'true' ? true : false;\n        }\n        break;\n      case 'wtimeoutMS':\n        dbOptions.wtimeout = parseInt(value, 10);\n        break;\n      case 'readPreference':\n        if (!ReadPreference.isValid(value))\n          throw new Error(\n            'readPreference must be either primary/primaryPreferred/secondary/secondaryPreferred/nearest'\n          );\n        dbOptions.readPreference = value;\n        break;\n      case 'maxStalenessSeconds':\n        dbOptions.maxStalenessSeconds = parseInt(value, 10);\n        break;\n      case 'readPreferenceTags':\n        {\n          // Decode the value\n          value = decodeURIComponent(value);\n          // Contains the tag object\n          let tagObject = {};\n          if (value == null || value === '') {\n            dbOptions.read_preference_tags.push(tagObject);\n            break;\n          }\n\n          // Split up the tags\n          let tags = value.split(/,/);\n          for (let i = 0; i < tags.length; i++) {\n            let parts = tags[i].trim().split(/:/);\n            tagObject[parts[0]] = parts[1];\n          }\n\n          // Set the preferences tags\n          dbOptions.read_preference_tags.push(tagObject);\n        }\n        break;\n      case 'compressors':\n        {\n          compression = serverOptions.compression || {};\n          let compressors = value.split(',');\n          if (\n            !compressors.every(function(compressor) {\n              return compressor === 'snappy' || compressor === 'zlib';\n            })\n          ) {\n            throw new Error('Compressors must be at least one of snappy or zlib');\n          }\n\n          compression.compressors = compressors;\n          serverOptions.compression = compression;\n        }\n        break;\n      case 'zlibCompressionLevel':\n        {\n          compression = serverOptions.compression || {};\n          let zlibCompressionLevel = parseInt(value, 10);\n          if (zlibCompressionLevel < -1 || zlibCompressionLevel > 9) {\n            throw new Error('zlibCompressionLevel must be an integer between -1 and 9');\n          }\n\n          compression.zlibCompressionLevel = zlibCompressionLevel;\n          serverOptions.compression = compression;\n        }\n        break;\n      case 'retryWrites':\n        dbOptions.retryWrites = value === 'true';\n        break;\n      case 'minSize':\n        dbOptions.minSize = parseInt(value, 10);\n        break;\n      default:\n        {\n          let logger = Logger('URL Parser');\n          logger.warn(`${name} is not supported as a connection string option`);\n        }\n        break;\n    }\n  });\n\n  // No tags: should be null (not [])\n  if (dbOptions.read_preference_tags.length === 0) {\n    dbOptions.read_preference_tags = null;\n  }\n\n  // Validate if there are an invalid write concern combinations\n  if (\n    (dbOptions.w === -1 || dbOptions.w === 0) &&\n    (dbOptions.journal === true || dbOptions.fsync === true || dbOptions.safe === true)\n  )\n    throw new Error('w set to -1 or 0 cannot be combined with safe/w/journal/fsync');\n\n  // If no read preference set it to primary\n  if (!dbOptions.readPreference) {\n    dbOptions.readPreference = 'primary';\n  }\n\n  // make sure that user-provided options are applied with priority\n  dbOptions = Object.assign(dbOptions, options);\n\n  // Add servers to result\n  object.servers = servers;\n\n  // Returned parsed object\n  return object;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/url_parser.js\n// module id = 118\n// module chunks = 0","var map = {\n\t\"./collection\": 121,\n\t\"./drivers/node-mongodb-native/collection\": 193\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 119;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib ^.*\\/collection$\n// module id = 119\n// module chunks = 0","/*!\n * Module dependencies\n */\n\nvar AggregationCursor = require('./cursor/AggregationCursor');\nvar Query = require('./query');\nvar util = require('util');\nvar utils = require('./utils');\nvar read = Query.prototype.read;\n\n/**\n * Aggregate constructor used for building aggregation pipelines. Do not\n * instantiate this class directly, use [Model.aggregate()](/docs/api.html#aggregate_aggregate) instead.\n *\n * ####Example:\n *\n *     const aggregate = Model.aggregate([\n *       { $project: { a: 1, b: 1 } },\n *       { $skip: 5 }\n *     ]);\n *\n *     Model.\n *       aggregate([{ $match: { age: { $gte: 21 }}}]).\n *       unwind('tags').\n *       exec(callback);\n *\n * ####Note:\n *\n * - The documents returned are plain javascript objects, not mongoose documents (since any shape of document can be returned).\n * - Mongoose does **not** cast pipeline stages. The below will **not** work unless `_id` is a string in the database\n *\n * ```javascript\n *   new Aggregate([{ $match: { _id: '00000000000000000000000a' } }]);\n *   // Do this instead to cast to an ObjectId\n *   new Aggregate([{ $match: { _id: mongoose.Types.ObjectId('00000000000000000000000a') } }]);\n * ```\n *\n * @see MongoDB http://docs.mongodb.org/manual/applications/aggregation/\n * @see driver http://mongodb.github.com/node-mongodb-native/api-generated/collection.html#aggregate\n * @param {Array} [pipeline] aggregation pipeline as an array of objects\n * @api public\n */\n\nfunction Aggregate(pipeline) {\n  this._pipeline = [];\n  this._model = undefined;\n  this.options = {};\n\n  if (arguments.length === 1 && util.isArray(pipeline)) {\n    this.append.apply(this, pipeline);\n  }\n}\n\n/**\n * Binds this aggregate to a model.\n *\n * @param {Model} model the model to which the aggregate is to be bound\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.model = function(model) {\n  this._model = model;\n  if (model.schema != null) {\n    if (this.options.readPreference == null &&\n        model.schema.options.read != null) {\n      this.options.readPreference = model.schema.options.read;\n    }\n    if (this.options.collation == null &&\n        model.schema.options.collation != null) {\n      this.options.collation = model.schema.options.collation;\n    }\n  }\n  return this;\n};\n\n/**\n * Appends new operators to this aggregate pipeline\n *\n * ####Examples:\n *\n *     aggregate.append({ $project: { field: 1 }}, { $limit: 2 });\n *\n *     // or pass an array\n *     var pipeline = [{ $match: { daw: 'Logic Audio X' }} ];\n *     aggregate.append(pipeline);\n *\n * @param {Object} ops operator(s) to append\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.append = function() {\n  var args = (arguments.length === 1 && util.isArray(arguments[0]))\n    ? arguments[0]\n    : utils.args(arguments);\n\n  if (!args.every(isOperator)) {\n    throw new Error('Arguments must be aggregate pipeline operators');\n  }\n\n  this._pipeline = this._pipeline.concat(args);\n\n  return this;\n};\n\n/**\n * Appends a new $addFields operator to this aggregate pipeline.\n * Requires MongoDB v3.4+ to work\n *\n * ####Examples:\n  *\n *     // adding new fields based on existing fields\n *     aggregate.addFields({\n *         newField: '$b.nested'\n *       , plusTen: { $add: ['$val', 10]}\n *       , sub: {\n *            name: '$a'\n *         }\n *     })\n *\n *     // etc\n *     aggregate.addFields({ salary_k: { $divide: [ \"$salary\", 1000 ] } });\n *\n * @param {Object} arg field specification\n * @see $addFields https://docs.mongodb.com/manual/reference/operator/aggregation/addFields/\n * @return {Aggregate}\n * @api public\n */\nAggregate.prototype.addFields = function(arg) {\n  var fields = {};\n  if (typeof arg === 'object' && !util.isArray(arg)) {\n    Object.keys(arg).forEach(function(field) {\n      fields[field] = arg[field];\n    });\n  } else {\n    throw new Error('Invalid addFields() argument. Must be an object');\n  }\n  return this.append({$addFields: fields});\n};\n\n/**\n * Appends a new $project operator to this aggregate pipeline.\n *\n * Mongoose query [selection syntax](#query_Query-select) is also supported.\n *\n * ####Examples:\n *\n *     // include a, include b, exclude _id\n *     aggregate.project(\"a b -_id\");\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     aggregate.project({a: 1, b: 1, _id: 0});\n *\n *     // reshaping documents\n *     aggregate.project({\n *         newField: '$b.nested'\n *       , plusTen: { $add: ['$val', 10]}\n *       , sub: {\n *            name: '$a'\n *         }\n *     })\n *\n *     // etc\n *     aggregate.project({ salary_k: { $divide: [ \"$salary\", 1000 ] } });\n *\n * @param {Object|String} arg field specification\n * @see projection http://docs.mongodb.org/manual/reference/aggregation/project/\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.project = function(arg) {\n  var fields = {};\n\n  if (typeof arg === 'object' && !util.isArray(arg)) {\n    Object.keys(arg).forEach(function(field) {\n      fields[field] = arg[field];\n    });\n  } else if (arguments.length === 1 && typeof arg === 'string') {\n    arg.split(/\\s+/).forEach(function(field) {\n      if (!field) {\n        return;\n      }\n      var include = field[0] === '-' ? 0 : 1;\n      if (include === 0) {\n        field = field.substring(1);\n      }\n      fields[field] = include;\n    });\n  } else {\n    throw new Error('Invalid project() argument. Must be string or object');\n  }\n\n  return this.append({$project: fields});\n};\n\n/**\n * Appends a new custom $group operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.group({ _id: \"$department\" });\n *\n * @see $group http://docs.mongodb.org/manual/reference/aggregation/group/\n * @method group\n * @memberOf Aggregate\n * @param {Object} arg $group operator contents\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new custom $match operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.match({ department: { $in: [ \"sales\", \"engineering\" ] } });\n *\n * @see $match http://docs.mongodb.org/manual/reference/aggregation/match/\n * @method match\n * @memberOf Aggregate\n * @param {Object} arg $match operator contents\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new $skip operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.skip(10);\n *\n * @see $skip http://docs.mongodb.org/manual/reference/aggregation/skip/\n * @method skip\n * @memberOf Aggregate\n * @param {Number} num number of records to skip before next stage\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new $limit operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.limit(10);\n *\n * @see $limit http://docs.mongodb.org/manual/reference/aggregation/limit/\n * @method limit\n * @memberOf Aggregate\n * @param {Number} num maximum number of records to pass to the next stage\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new $geoNear operator to this aggregate pipeline.\n *\n * ####NOTE:\n *\n * **MUST** be used as the first operator in the pipeline.\n *\n * ####Examples:\n *\n *     aggregate.near({\n *       near: [40.724, -73.997],\n *       distanceField: \"dist.calculated\", // required\n *       maxDistance: 0.008,\n *       query: { type: \"public\" },\n *       includeLocs: \"dist.location\",\n *       uniqueDocs: true,\n *       num: 5\n *     });\n *\n * @see $geoNear http://docs.mongodb.org/manual/reference/aggregation/geoNear/\n * @method near\n * @memberOf Aggregate\n * @param {Object} parameters\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.near = function(arg) {\n  var op = {};\n  op.$geoNear = arg;\n  return this.append(op);\n};\n\n/*!\n * define methods\n */\n\n'group match skip limit out'.split(' ').forEach(function($operator) {\n  Aggregate.prototype[$operator] = function(arg) {\n    var op = {};\n    op['$' + $operator] = arg;\n    return this.append(op);\n  };\n});\n\n/**\n * Appends new custom $unwind operator(s) to this aggregate pipeline.\n *\n * Note that the `$unwind` operator requires the path name to start with '$'.\n * Mongoose will prepend '$' if the specified field doesn't start '$'.\n *\n * ####Examples:\n *\n *     aggregate.unwind(\"tags\");\n *     aggregate.unwind(\"a\", \"b\", \"c\");\n *\n * @see $unwind http://docs.mongodb.org/manual/reference/aggregation/unwind/\n * @param {String} fields the field(s) to unwind\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.unwind = function() {\n  var args = utils.args(arguments);\n\n  var res = [];\n  for (var i = 0; i < args.length; ++i) {\n    var arg = args[i];\n    if (arg && typeof arg === 'object') {\n      res.push({ $unwind: arg });\n    } else if (typeof arg === 'string') {\n      res.push({\n        $unwind: (arg && arg.charAt(0) === '$') ? arg : '$' + arg\n      });\n    } else {\n      throw new Error('Invalid arg \"' + arg + '\" to unwind(), ' +\n        'must be string or object');\n    }\n  }\n\n  return this.append.apply(this, res);\n};\n\n/**\n * Appends a new $replaceRoot operator to this aggregate pipeline.\n *\n * Note that the `$replaceRoot` operator requires the new root to start with '$'.\n * Mongoose will prepend '$' if the specified field doesn't start '$'.\n *\n * ####Examples:\n *\n *     aggregate.replaceRoot(\"user\");\n *\n * @see $replaceRoot https://docs.mongodb.org/manual/reference/operator/aggregation/replaceRoot\n * @param {String} the field which will become the new root document\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.replaceRoot = function(newRoot) {\n  return this.append({\n    $replaceRoot: {\n      newRoot: (newRoot && newRoot.charAt(0) === '$') ? newRoot : '$' + newRoot\n    }\n  });\n};\n\n/**\n * Appends a new $count operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.count(\"userCount\");\n *\n * @see $count https://docs.mongodb.org/manual/reference/operator/aggregation/count\n * @param {String} the name of the count field\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.count = function(countName) {\n  return this.append({ $count: countName });\n};\n\n/**\n * Appends a new $sortByCount operator to this aggregate pipeline. Accepts either a string field name\n * or a pipeline object.\n *\n * Note that the `$sortByCount` operator requires the new root to start with '$'.\n * Mongoose will prepend '$' if the specified field name doesn't start with '$'.\n *\n * ####Examples:\n *\n *     aggregate.sortByCount('users');\n *     aggregate.sortByCount({ $mergeObjects: [ \"$employee\", \"$business\" ] })\n *\n * @see $sortByCount https://docs.mongodb.com/manual/reference/operator/aggregation/sortByCount/\n * @param {Object|String} arg\n * @return {Aggregate} this\n * @api public\n */\n\nAggregate.prototype.sortByCount = function(arg) {\n  if (arg && typeof arg === 'object') {\n    return this.append({ $sortByCount: arg });\n  } else if (typeof arg === 'string') {\n    return this.append({\n      $sortByCount: (arg && arg.charAt(0) === '$') ? arg : '$' + arg\n    });\n  } else {\n    throw new TypeError('Invalid arg \"' + arg + '\" to sortByCount(), ' +\n      'must be string or object');\n  }\n};\n\n/**\n * Appends new custom $lookup operator(s) to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.lookup({ from: 'users', localField: 'userId', foreignField: '_id', as: 'users' });\n *\n * @see $lookup https://docs.mongodb.org/manual/reference/operator/aggregation/lookup/#pipe._S_lookup\n * @param {Object} options to $lookup as described in the above link\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.lookup = function(options) {\n  return this.append({$lookup: options});\n};\n\n/**\n * Appends new custom $graphLookup operator(s) to this aggregate pipeline, performing a recursive search on a collection.\n *\n * Note that graphLookup can only consume at most 100MB of memory, and does not allow disk use even if `{ allowDiskUse: true }` is specified.\n *\n * #### Examples:\n *      // Suppose we have a collection of courses, where a document might look like `{ _id: 0, name: 'Calculus', prerequisite: 'Trigonometry'}` and `{ _id: 0, name: 'Trigonometry', prerequisite: 'Algebra' }`\n *      aggregate.graphLookup({ from: 'courses', startWith: '$prerequisite', connectFromField: 'prerequisite', connectToField: 'name', as: 'prerequisites', maxDepth: 3 }) // this will recursively search the 'courses' collection up to 3 prerequisites\n *\n * @see $graphLookup https://docs.mongodb.com/manual/reference/operator/aggregation/graphLookup/#pipe._S_graphLookup\n * @param {Object} options to $graphLookup as described in the above link\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.graphLookup = function(options) {\n  var cloneOptions = {};\n  if (options) {\n    if (!utils.isObject(options)) {\n      throw new TypeError('Invalid graphLookup() argument. Must be an object.');\n    }\n\n    utils.mergeClone(cloneOptions, options);\n    var startWith = cloneOptions.startWith;\n\n    if (startWith && typeof startWith === 'string') {\n      cloneOptions.startWith = cloneOptions.startWith.charAt(0) === '$' ?\n        cloneOptions.startWith :\n        '$' + cloneOptions.startWith;\n    }\n\n  }\n  return this.append({ $graphLookup: cloneOptions });\n};\n\n/**\n * Appends new custom $sample operator(s) to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.sample(3); // Add a pipeline that picks 3 random documents\n *\n * @see $sample https://docs.mongodb.org/manual/reference/operator/aggregation/sample/#pipe._S_sample\n * @param {Number} size number of random documents to pick\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.sample = function(size) {\n  return this.append({$sample: {size: size}});\n};\n\n/**\n * Appends a new $sort operator to this aggregate pipeline.\n *\n * If an object is passed, values allowed are `asc`, `desc`, `ascending`, `descending`, `1`, and `-1`.\n *\n * If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.\n *\n * ####Examples:\n *\n *     // these are equivalent\n *     aggregate.sort({ field: 'asc', test: -1 });\n *     aggregate.sort('field -test');\n *\n * @see $sort http://docs.mongodb.org/manual/reference/aggregation/sort/\n * @param {Object|String} arg\n * @return {Aggregate} this\n * @api public\n */\n\nAggregate.prototype.sort = function(arg) {\n  // TODO refactor to reuse the query builder logic\n\n  var sort = {};\n\n  if (arg.constructor.name === 'Object') {\n    var desc = ['desc', 'descending', -1];\n    Object.keys(arg).forEach(function(field) {\n      // If sorting by text score, skip coercing into 1/-1\n      if (arg[field] instanceof Object && arg[field].$meta) {\n        sort[field] = arg[field];\n        return;\n      }\n      sort[field] = desc.indexOf(arg[field]) === -1 ? 1 : -1;\n    });\n  } else if (arguments.length === 1 && typeof arg === 'string') {\n    arg.split(/\\s+/).forEach(function(field) {\n      if (!field) {\n        return;\n      }\n      var ascend = field[0] === '-' ? -1 : 1;\n      if (ascend === -1) {\n        field = field.substring(1);\n      }\n      sort[field] = ascend;\n    });\n  } else {\n    throw new TypeError('Invalid sort() argument. Must be a string or object.');\n  }\n\n  return this.append({$sort: sort});\n};\n\n/**\n * Sets the readPreference option for the aggregation query.\n *\n * ####Example:\n *\n *     Model.aggregate(..).read('primaryPreferred').exec(callback)\n *\n * @param {String} pref one of the listed preference options or their aliases\n * @param {Array} [tags] optional tags for this query\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\n */\n\nAggregate.prototype.read = function(pref, tags) {\n  if (!this.options) {\n    this.options = {};\n  }\n  read.call(this, pref, tags);\n  return this;\n};\n\n/**\n * Execute the aggregation with explain\n *\n * ####Example:\n *\n *     Model.aggregate(..).explain(callback)\n *\n * @param {Function} callback\n * @return {Promise}\n */\n\nAggregate.prototype.explain = function(callback) {\n  return utils.promiseOrCallback(callback, cb => {\n    if (!this._pipeline.length) {\n      var err = new Error('Aggregate has empty pipeline');\n      return cb(err);\n    }\n\n    prepareDiscriminatorPipeline(this);\n\n    this._model.collection.\n      aggregate(this._pipeline, this.options || {}).\n      explain(function(error, result) {\n        if (error) {\n          return cb(error);\n        }\n        cb(null, result);\n      });\n  });\n};\n\n/**\n * Sets the allowDiskUse option for the aggregation query (ignored for < 2.6.0)\n *\n * ####Example:\n *\n *     Model.aggregate(..).allowDiskUse(true).exec(callback)\n *\n * @param {Boolean} value Should tell server it can use hard drive to store data during aggregation.\n * @param {Array} [tags] optional tags for this query\n * @see mongodb http://docs.mongodb.org/manual/reference/command/aggregate/\n */\n\nAggregate.prototype.allowDiskUse = function(value) {\n  this.options.allowDiskUse = value;\n  return this;\n};\n\n/**\n * Lets you set arbitrary options, for middleware or plugins.\n *\n * ####Example:\n *\n *     var agg = Model.aggregate(..).option({ allowDiskUse: true }); // Set the `allowDiskUse` option\n *     agg.options; // `{ allowDiskUse: true }`\n *\n * @param {Object} options keys to merge into current options\n * @param [options.maxTimeMS] number limits the time this aggregation will run, see [MongoDB docs on `maxTimeMS`](https://docs.mongodb.com/manual/reference/operator/meta/maxTimeMS/)\n * @param [options.allowDiskUse] boolean if true, the MongoDB server will use the hard drive to store data during this aggregation\n * @param [options.collation] object see [`Aggregate.prototype.collation()`](./docs/api.html#aggregate_Aggregate-collation)\n * @see mongodb http://docs.mongodb.org/manual/reference/command/aggregate/\n * @return {Aggregate} this\n * @api public\n */\n\nAggregate.prototype.option = function(value) {\n  for (var key in value) {\n    this.options[key] = value[key];\n  }\n  return this;\n};\n\n/**\n * Sets the cursor option option for the aggregation query (ignored for < 2.6.0).\n * Note the different syntax below: .exec() returns a cursor object, and no callback\n * is necessary.\n *\n * ####Example:\n *\n *     var cursor = Model.aggregate(..).cursor({ batchSize: 1000 }).exec();\n *     cursor.each(function(error, doc) {\n *       // use doc\n *     });\n *\n * @param {Object} options\n * @param {Number} options.batchSize set the cursor batch size\n * @param {Boolean} [options.useMongooseAggCursor] use experimental mongoose-specific aggregation cursor (for `eachAsync()` and other query cursor semantics)\n * @see mongodb http://mongodb.github.io/node-mongodb-native/2.0/api/AggregationCursor.html\n */\n\nAggregate.prototype.cursor = function(options) {\n  if (!this.options) {\n    this.options = {};\n  }\n  this.options.cursor = options || {};\n  return this;\n};\n\n/**\n * Adds a [cursor flag](http://mongodb.github.io/node-mongodb-native/2.2/api/Cursor.html#addCursorFlag)\n *\n * ####Example:\n *\n *     Model.aggregate(..).addCursorFlag('noCursorTimeout', true).exec();\n *\n * @param {String} flag\n * @param {Boolean} value\n * @see mongodb http://mongodb.github.io/node-mongodb-native/2.2/api/Cursor.html#addCursorFlag\n */\n\nAggregate.prototype.addCursorFlag = function(flag, value) {\n  if (!this.options) {\n    this.options = {};\n  }\n  this.options[flag] = value;\n  return this;\n};\n\n/**\n * Adds a collation\n *\n * ####Example:\n *\n *     Model.aggregate(..).collation({ locale: 'en_US', strength: 1 }).exec();\n *\n * @param {Object} collation options\n * @see mongodb http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#aggregate\n */\n\nAggregate.prototype.collation = function(collation) {\n  if (!this.options) {\n    this.options = {};\n  }\n  this.options.collation = collation;\n  return this;\n};\n\n/**\n * Combines multiple aggregation pipelines.\n *\n * ####Example:\n *     Model.aggregate(...)\n *      .facet({\n *        books: [{ groupBy: '$author' }],\n *        price: [{ $bucketAuto: { groupBy: '$price', buckets: 2 } }]\n *      })\n *      .exec();\n *\n *     // Output: { books: [...], price: [{...}, {...}] }\n *\n * @param {Object} facet options\n * @return {Aggregate} this\n * @see $facet https://docs.mongodb.com/v3.4/reference/operator/aggregation/facet/\n * @api public\n */\n\nAggregate.prototype.facet = function(options) {\n  return this.append({$facet: options});\n};\n\n/**\n * Returns the current pipeline\n *\n * ####Example:\n *\n *     MyModel.aggregate().match({ test: 1 }).pipeline(); // [{ $match: { test: 1 } }]\n *\n * @return {Array}\n * @api public\n */\n\n\nAggregate.prototype.pipeline = function() {\n  return this._pipeline;\n};\n\n/**\n * Executes the aggregate pipeline on the currently bound Model.\n *\n * ####Example:\n *\n *     aggregate.exec(callback);\n *\n *     // Because a promise is returned, the `callback` is optional.\n *     var promise = aggregate.exec();\n *     promise.then(..);\n *\n * @see Promise #promise_Promise\n * @param {Function} [callback]\n * @return {Promise}\n * @api public\n */\n\nAggregate.prototype.exec = function(callback) {\n  if (!this._model) {\n    throw new Error('Aggregate not bound to any Model');\n  }\n  var model = this._model;\n  var options = utils.clone(this.options || {});\n  var pipeline = this._pipeline;\n  var collection = this._model.collection;\n\n  if (options && options.cursor) {\n    return new AggregationCursor(this);\n  }\n\n  return utils.promiseOrCallback(callback, cb => {\n    if (!pipeline.length) {\n      var err = new Error('Aggregate has empty pipeline');\n      return cb(err);\n    }\n\n    prepareDiscriminatorPipeline(this);\n\n    model.hooks.execPre('aggregate', this, error => {\n      if (error) {\n        var _opts = { error: error };\n        return model.hooks.execPost('aggregate', this, [null], _opts, error => {\n          cb(error);\n        });\n      }\n\n      collection.aggregate(pipeline, options, (error, cursor) => {\n        if (error) {\n          var _opts = { error: error };\n          return model.hooks.execPost('aggregate', this, [null], _opts, error => {\n            if (error) {\n              return cb(error);\n            }\n            return cb(null);\n          });\n        }\n        cursor.toArray((error, result) => {\n          var _opts = { error: error };\n          model.hooks.execPost('aggregate', this, [result], _opts, (error, result) => {\n            if (error) {\n              return cb(error);\n            }\n\n            cb(null, result);\n          });\n        });\n      });\n    });\n  });\n};\n\n/**\n * Provides promise for aggregate.\n *\n * ####Example:\n *\n *     Model.aggregate(..).then(successCallback, errorCallback);\n *\n * @see Promise #promise_Promise\n * @param {Function} [resolve] successCallback\n * @param {Function} [reject]  errorCallback\n * @return {Promise}\n */\nAggregate.prototype.then = function(resolve, reject) {\n  return this.exec().then(resolve, reject);\n};\n\n/*!\n * Helpers\n */\n\n/**\n * Checks whether an object is likely a pipeline operator\n *\n * @param {Object} obj object to check\n * @return {Boolean}\n * @api private\n */\n\nfunction isOperator(obj) {\n  var k;\n\n  if (typeof obj !== 'object') {\n    return false;\n  }\n\n  k = Object.keys(obj);\n\n  return k.length === 1 && k\n    .some(function(key) {\n      return key[0] === '$';\n    });\n}\n\n/*!\n * Adds the appropriate `$match` pipeline step to the top of an aggregate's\n * pipeline, should it's model is a non-root discriminator type. This is\n * analogous to the `prepareDiscriminatorCriteria` function in `lib/query.js`.\n *\n * @param {Aggregate} aggregate Aggregate to prepare\n */\n\nAggregate._prepareDiscriminatorPipeline = prepareDiscriminatorPipeline;\n\nfunction prepareDiscriminatorPipeline(aggregate) {\n  var schema = aggregate._model.schema,\n      discriminatorMapping = schema && schema.discriminatorMapping;\n\n  if (discriminatorMapping && !discriminatorMapping.isRoot) {\n    var originalPipeline = aggregate._pipeline,\n        discriminatorKey = discriminatorMapping.key,\n        discriminatorValue = discriminatorMapping.value;\n\n    // If the first pipeline stage is a match and it doesn't specify a `__t`\n    // key, add the discriminator key to it. This allows for potential\n    // aggregation query optimizations not to be disturbed by this feature.\n    if (originalPipeline[0] && originalPipeline[0].$match && !originalPipeline[0].$match[discriminatorKey]) {\n      originalPipeline[0].$match[discriminatorKey] = discriminatorValue;\n      // `originalPipeline` is a ref, so there's no need for\n      // aggregate._pipeline = originalPipeline\n    } else if (originalPipeline[0] && originalPipeline[0].$geoNear) {\n      originalPipeline[0].$geoNear.query =\n          originalPipeline[0].$geoNear.query || {};\n      originalPipeline[0].$geoNear.query[discriminatorKey] = discriminatorValue;\n    } else {\n      var match = {};\n      match[discriminatorKey] = discriminatorValue;\n      aggregate._pipeline.unshift({ $match: match });\n    }\n  }\n}\n\n/*!\n * Exports\n */\n\nmodule.exports = Aggregate;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/aggregate.js\n// module id = 120\n// module chunks = 0","'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst EventEmitter = require('events').EventEmitter;\nconst STATES = require('./connectionstate');\nconst utils = require('./utils');\n\n/**\n * Abstract Collection constructor\n *\n * This is the base class that drivers inherit from and implement.\n *\n * @param {String} name name of the collection\n * @param {Connection} conn A MongooseConnection instance\n * @param {Object} opts optional collection options\n * @api public\n */\n\nfunction Collection(name, conn, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  if (opts.capped === void 0) {\n    opts.capped = {};\n  }\n\n  opts.bufferCommands = undefined === opts.bufferCommands\n    ? true\n    : opts.bufferCommands;\n\n  if (typeof opts.capped === 'number') {\n    opts.capped = {size: opts.capped};\n  }\n\n  this.opts = opts;\n  this.name = name;\n  this.collectionName = name;\n  this.conn = conn;\n  this.queue = [];\n  this.buffer = this.opts.bufferCommands;\n  this.emitter = new EventEmitter();\n\n  if (STATES.connected === this.conn.readyState) {\n    this.onOpen();\n  }\n}\n\n/**\n * The collection name\n *\n * @api public\n * @property name\n */\n\nCollection.prototype.name;\n\n/**\n * The collection name\n *\n * @api public\n * @property collectionName\n */\n\nCollection.prototype.collectionName;\n\n/**\n * The Connection instance\n *\n * @api public\n * @property conn\n */\n\nCollection.prototype.conn;\n\n/**\n * Called when the database connects\n *\n * @api private\n */\n\nCollection.prototype.onOpen = function() {\n  this.buffer = false;\n  var _this = this;\n  utils.immediate(function() {\n    _this.doQueue();\n  });\n};\n\n/**\n * Called when the database disconnects\n *\n * @api private\n */\n\nCollection.prototype.onClose = function(force) {\n  if (this.opts.bufferCommands && !force) {\n    this.buffer = true;\n  }\n};\n\n/**\n * Queues a method for later execution when its\n * database connection opens.\n *\n * @param {String} name name of the method to queue\n * @param {Array} args arguments to pass to the method when executed\n * @api private\n */\n\nCollection.prototype.addQueue = function(name, args) {\n  this.queue.push([name, args]);\n  return this;\n};\n\n/**\n * Executes all queued methods and clears the queue.\n *\n * @api private\n */\n\nCollection.prototype.doQueue = function() {\n  for (var i = 0, l = this.queue.length; i < l; i++) {\n    if (typeof this.queue[i][0] === 'function') {\n      this.queue[i][0].apply(this, this.queue[i][1]);\n    } else {\n      this[this.queue[i][0]].apply(this, this.queue[i][1]);\n    }\n  }\n  this.queue = [];\n  var _this = this;\n  process.nextTick(function() {\n    _this.emitter.emit('queue');\n  });\n  return this;\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.ensureIndex = function() {\n  throw new Error('Collection#ensureIndex unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.createIndex = function() {\n  throw new Error('Collection#ensureIndex unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.findAndModify = function() {\n  throw new Error('Collection#findAndModify unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.findOneAndUpdate = function() {\n  throw new Error('Collection#findOneAndUpdate unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.findOneAndDelete = function() {\n  throw new Error('Collection#findOneAndDelete unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.findOne = function() {\n  throw new Error('Collection#findOne unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.find = function() {\n  throw new Error('Collection#find unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.insert = function() {\n  throw new Error('Collection#insert unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.save = function() {\n  throw new Error('Collection#save unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.update = function() {\n  throw new Error('Collection#update unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.getIndexes = function() {\n  throw new Error('Collection#getIndexes unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.mapReduce = function() {\n  throw new Error('Collection#mapReduce unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.watch = function() {\n  throw new Error('Collection#watch unimplemented by driver');\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = Collection;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/collection.js\n// module id = 121\n// module chunks = 0","'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst EventEmitter = require('events').EventEmitter;\nconst driver = global.MONGOOSE_DRIVER_PATH || './drivers/node-mongodb-native';\nconst Schema = require('./schema');\nconst Collection = require(driver + '/collection');\nconst STATES = require('./connectionstate');\nconst MongooseError = require('./error');\nconst PromiseProvider = require('./promise_provider');\nconst mongodb = require('mongodb');\nconst utils = require('./utils');\n\nconst parser = require('mongodb/lib/url_parser');\n\n/*!\n * A list of authentication mechanisms that don't require a password for authentication.\n * This is used by the authMechanismDoesNotRequirePassword method.\n *\n * @api private\n */\nvar authMechanismsWhichDontRequirePassword = [\n  'MONGODB-X509'\n];\n\n/**\n * Connection constructor\n *\n * For practical reasons, a Connection equals a Db.\n *\n * @param {Mongoose} base a mongoose instance\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `connecting`: Emitted when `connection.{open,openSet}()` is executed on this connection.\n * @event `connected`: Emitted when this connection successfully connects to the db. May be emitted _multiple_ times in `reconnected` scenarios.\n * @event `open`: Emitted after we `connected` and `onOpen` is executed on all of this connections models.\n * @event `disconnecting`: Emitted when `connection.close()` was executed.\n * @event `disconnected`: Emitted after getting disconnected from the db.\n * @event `close`: Emitted after we `disconnected` and `onClose` executed on all of this connections models.\n * @event `reconnected`: Emitted after we `connected` and subsequently `disconnected`, followed by successfully another successfull connection.\n * @event `error`: Emitted when an error occurs on this connection.\n * @event `fullsetup`: Emitted in a replica-set scenario, when primary and at least one seconaries specified in the connection string are connected.\n * @event `all`: Emitted in a replica-set scenario, when all nodes specified in the connection string are connected.\n * @api public\n */\n\nfunction Connection(base) {\n  this.base = base;\n  this.collections = {};\n  this.models = {};\n  this.config = {autoIndex: true};\n  this.replica = false;\n  this.hosts = null;\n  this.host = null;\n  this.port = null;\n  this.user = null;\n  this.pass = null;\n  this.name = null;\n  this.options = null;\n  this.otherDbs = []; // FIXME: To be replaced with relatedDbs\n  this.relatedDbs = {}; // Hashmap of other dbs that share underlying connection\n  this.states = STATES;\n  this._readyState = STATES.disconnected;\n  this._closeCalled = false;\n  this._hasOpened = false;\n}\n\n/*!\n * Inherit from EventEmitter\n */\n\nConnection.prototype.__proto__ = EventEmitter.prototype;\n\n/**\n * Connection ready state\n *\n * - 0 = disconnected\n * - 1 = connected\n * - 2 = connecting\n * - 3 = disconnecting\n *\n * Each state change emits its associated event name.\n *\n * ####Example\n *\n *     conn.on('connected', callback);\n *     conn.on('disconnected', callback);\n *\n * @property readyState\n * @memberOf Connection\n * @api public\n */\n\nObject.defineProperty(Connection.prototype, 'readyState', {\n  get: function() {\n    return this._readyState;\n  },\n  set: function(val) {\n    if (!(val in STATES)) {\n      throw new Error('Invalid connection state: ' + val);\n    }\n\n    if (this._readyState !== val) {\n      this._readyState = val;\n      // [legacy] loop over the otherDbs on this connection and change their state\n      for (var i = 0; i < this.otherDbs.length; i++) {\n        this.otherDbs[i].readyState = val;\n      }\n\n      // loop over relatedDbs on this connection and change their state\n      for (var k in this.relatedDbs) {\n        this.relatedDbs[k].readyState = val;\n      }\n\n      if (STATES.connected === val) {\n        this._hasOpened = true;\n      }\n\n      this.emit(STATES[val]);\n    }\n  }\n});\n\n/**\n * A hash of the collections associated with this connection\n *\n * @property collections\n * @memberOf Connection\n * @api public\n */\n\nConnection.prototype.collections;\n\n/**\n * The mongodb.Db instance, set when the connection is opened\n *\n * @property db\n * @memberOf Connection\n * @api public\n */\n\nConnection.prototype.db;\n\n/**\n * A hash of the global options that are associated with this connection\n *\n * @property config\n * @memberOf Connection\n * @api public\n */\n\nConnection.prototype.config;\n\n/**\n * Helper for `createCollection()`. Will explicitly create the given collection\n * with specified options. Used to create [capped collections](https://docs.mongodb.com/manual/core/capped-collections/)\n * and [views](https://docs.mongodb.com/manual/core/views/) from mongoose.\n *\n * Options are passed down without modification to the [MongoDB driver's `createCollection()` function](http://mongodb.github.io/node-mongodb-native/2.2/api/Db.html#createCollection)\n *\n * @method createCollection\n * @param {string} collection The collection to delete\n * @param {Object} [options] see [MongoDB driver docs](http://mongodb.github.io/node-mongodb-native/2.2/api/Db.html#createCollection)\n * @param {Function} [callback]\n * @return {Promise}\n * @api public\n */\n\nConnection.prototype.createCollection = _wrapConnHelper(function createCollection(collection, options, cb) {\n  if (typeof options === 'function') {\n    cb = options;\n    options = {};\n  }\n  this.db.createCollection(collection, options, cb);\n});\n\n/**\n * Helper for `dropCollection()`. Will delete the given collection, including\n * all documents and indexes.\n *\n * @method dropCollection\n * @param {string} collection The collection to delete\n * @param {Function} [callback]\n * @return {Promise}\n * @api public\n */\n\nConnection.prototype.dropCollection = _wrapConnHelper(function dropCollection(collection, cb) {\n  this.db.dropCollection(collection, cb);\n});\n\n/**\n * Helper for `dropDatabase()`. Deletes the given database, including all\n * collections, documents, and indexes.\n *\n * @method dropDatabase\n * @param {Function} [callback]\n * @return {Promise}\n * @api public\n */\n\nConnection.prototype.dropDatabase = _wrapConnHelper(function dropDatabase(cb) {\n  this.db.dropDatabase(cb);\n});\n\n/*!\n * ignore\n */\n\nfunction _wrapConnHelper(fn) {\n  return function() {\n    var cb = arguments.length > 0 ? arguments[arguments.length - 1] : null;\n    var argsWithoutCb = typeof cb === 'function' ?\n      Array.prototype.slice.call(arguments, 0, arguments.length - 1) :\n      Array.prototype.slice.call(arguments);\n    return utils.promiseOrCallback(cb, cb => {\n      if (this.readyState !== STATES.connected) {\n        this.on('open', function() {\n          fn.apply(this, argsWithoutCb.concat([function(error) {\n            cb(error);\n          }]));\n        });\n      } else {\n        fn.apply(this, argsWithoutCb.concat([function(error) {\n          cb(error);\n        }]));\n      }\n    });\n  };\n}\n\n/**\n * error\n *\n * Graceful error handling, passes error to callback\n * if available, else emits error on the connection.\n *\n * @param {Error} err\n * @param {Function} callback optional\n * @api private\n */\n\nConnection.prototype.error = function(err, callback) {\n  if (callback) {\n    callback(err);\n    return null;\n  }\n  if (this.listeners('error').length > 0) {\n    this.emit('error', err);\n  }\n  return Promise.reject(err);\n};\n\n/**\n * Called when the connection is opened\n *\n * @api private\n */\n\nConnection.prototype.onOpen = function() {\n  this.readyState = STATES.connected;\n\n  // avoid having the collection subscribe to our event emitter\n  // to prevent 0.3 warning\n  for (var i in this.collections) {\n    if (utils.object.hasOwnProperty(this.collections, i)) {\n      this.collections[i].onOpen();\n    }\n  }\n\n  this.emit('open');\n};\n\n/**\n * Opens the connection with a URI using `MongoClient.connect()`.\n *\n * @param {String} uri The URI to connect with.\n * @param {Object} [options] Passed on to http://mongodb.github.io/node-mongodb-native/2.2/api/MongoClient.html#connect\n * @param {Function} [callback]\n * @returns {Connection} this\n * @api private\n */\n\nConnection.prototype.openUri = function(uri, options, callback) {\n  this.readyState = STATES.connecting;\n  this._closeCalled = false;\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  const Promise = PromiseProvider.get();\n  const _this = this;\n\n  if (options) {\n    options = utils.clone(options);\n    const autoIndex = options.config && options.config.autoIndex != null ?\n      options.config.autoIndex :\n      options.autoIndex;\n    if (autoIndex != null) {\n      this.config.autoIndex = autoIndex !== false;\n      delete options.config;\n      delete options.autoIndex;\n    }\n\n    // Backwards compat\n    if (options.user || options.pass) {\n      options.auth = options.auth || {};\n      options.auth.user = options.user;\n      options.auth.password = options.pass;\n      this.user = options.auth.user;\n      this.pass = options.auth.password;\n    }\n    delete options.user;\n    delete options.pass;\n\n    if (options.bufferCommands != null) {\n      options.bufferMaxEntries = 0;\n      this.config.bufferCommands = options.bufferCommands;\n      delete options.bufferCommands;\n    }\n\n    if (options.useMongoClient != null) {\n      handleUseMongoClient(options);\n    }\n  } else {\n    options = {};\n  }\n\n  this._connectionOptions = options;\n  let dbName = options.dbName;\n  delete options.dbName;\n\n  const promise = new Promise((resolve, reject) => {\n    parser(uri, options, (error, parsed) => {\n      if (error) {\n        if (_this.listeners('error').length > 0) {\n          _this.emit('error', error);\n        }\n        return reject(error);\n      }\n\n      dbName = dbName || parsed.dbName;\n      this.name = dbName;\n      this.host = parsed.servers[0].host || parsed.servers[0].domain_socket;\n      this.port = parsed.servers[0].port || 27017;\n      if (parsed.auth) {\n        this.user = parsed.auth.user;\n        this.pass = parsed.auth.password;\n      }\n      if (!('promiseLibrary' in options)) {\n        options.promiseLibrary = PromiseProvider.get();\n      }\n\n      mongodb.MongoClient.connect(uri, options, function(error, client) {\n        if (error) {\n          if (_this.listeners('error').length > 0) {\n            _this.emit('error', error);\n          }\n          return reject(error);\n        }\n        const db = client.db(dbName);\n        _this.db = db;\n        _this.client = client;\n\n        if (error) {\n          _this.readyState = STATES.disconnected;\n          if (_this.listeners('error').length) {\n            _this.emit('error', error);\n          }\n          return reject(error);\n        }\n        // Backwards compat for mongoose 4.x\n        db.on('reconnect', function() {\n          _this.readyState = STATES.connected;\n          _this.emit('reconnect');\n          _this.emit('reconnected');\n        });\n        db.s.topology.on('reconnectFailed', function() {\n          _this.emit('reconnectFailed');\n        });\n        db.s.topology.on('left', function(data) {\n          _this.emit('left', data);\n        });\n        db.s.topology.on('joined', function(data) {\n          _this.emit('joined', data);\n        });\n        db.s.topology.on('fullsetup', function(data) {\n          _this.emit('fullsetup', data);\n        });\n        db.on('close', function() {\n          // Implicitly emits 'disconnected'\n          _this.readyState = STATES.disconnected;\n        });\n        db.on('timeout', function() {\n          _this.emit('timeout');\n        });\n\n        delete _this.then;\n        delete _this.catch;\n        _this.readyState = STATES.connected;\n\n        for (let i in _this.collections) {\n          if (utils.object.hasOwnProperty(_this.collections, i)) {\n            _this.collections[i].onOpen();\n          }\n        }\n\n        resolve(_this);\n        _this.emit('open');\n      });\n    });\n  });\n\n  if (callback != null) {\n    promise.then(() => callback(null, this), err => callback(err));\n  }\n\n  this.$initialConnection = promise;\n  this.then = function(resolve, reject) {\n    return promise.then(resolve, reject);\n  };\n  this.catch = function(reject) {\n    return promise.catch(reject);\n  };\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nconst handleUseMongoClient = function handleUseMongoClient(options) {\n  console.warn('WARNING: The `useMongoClient` option is no longer ' +\n    'necessary in mongoose 5.x, please remove it.');\n  const stack = new Error().stack;\n  console.warn(stack.substr(stack.indexOf('\\n') + 1));\n  delete options.useMongoClient;\n};\n\n/**\n * Closes the connection\n *\n * @param {Boolean} [force] optional\n * @param {Function} [callback] optional\n * @return {Connection} self\n * @api public\n */\n\nConnection.prototype.close = function(force, callback) {\n  if (typeof force === 'function') {\n    callback = force;\n    force = false;\n  }\n\n  this.$wasForceClosed = !!force;\n\n  return utils.promiseOrCallback(callback, cb => {\n    this._close(force, cb);\n  });\n};\n\n/**\n * Handles closing the connection\n *\n * @param {Boolean} force\n * @param {Function} callback\n * @api private\n */\nConnection.prototype._close = function(force, callback) {\n  var _this = this;\n  this._closeCalled = true;\n\n  switch (this.readyState) {\n    case 0: // disconnected\n      callback();\n      break;\n\n    case 1: // connected\n      this.readyState = STATES.disconnecting;\n      this.doClose(force, function(err) {\n        if (err) {\n          return callback(err);\n        }\n        _this.onClose(force);\n        callback(null);\n      });\n\n      break;\n    case 2: // connecting\n      this.once('open', function() {\n        _this.close(callback);\n      });\n      break;\n\n    case 3: // disconnecting\n      this.once('close', function() {\n        callback();\n      });\n      break;\n  }\n\n  return this;\n};\n\n/**\n * Called when the connection closes\n *\n * @api private\n */\n\nConnection.prototype.onClose = function(force) {\n  this.readyState = STATES.disconnected;\n\n  // avoid having the collection subscribe to our event emitter\n  // to prevent 0.3 warning\n  for (var i in this.collections) {\n    if (utils.object.hasOwnProperty(this.collections, i)) {\n      this.collections[i].onClose(force);\n    }\n  }\n\n  this.emit('close', force);\n};\n\n/**\n * Retrieves a collection, creating it if not cached.\n *\n * Not typically needed by applications. Just talk to your collection through your model.\n *\n * @param {String} name of the collection\n * @param {Object} [options] optional collection options\n * @return {Collection} collection instance\n * @api public\n */\n\nConnection.prototype.collection = function(name, options) {\n  options = options ? utils.clone(options) : {};\n  options.$wasForceClosed = this.$wasForceClosed;\n  if (!(name in this.collections)) {\n    this.collections[name] = new Collection(name, this, options);\n  }\n  return this.collections[name];\n};\n\n/**\n * Defines or retrieves a model.\n *\n *     var mongoose = require('mongoose');\n *     var db = mongoose.createConnection(..);\n *     db.model('Venue', new Schema(..));\n *     var Ticket = db.model('Ticket', new Schema(..));\n *     var Venue = db.model('Venue');\n *\n * _When no `collection` argument is passed, Mongoose produces a collection name by passing the model `name` to the [utils.toCollectionName](#utils_exports.toCollectionName) method. This method pluralizes the name. If you don't like this behavior, either pass a collection name or set your schemas collection name option._\n *\n * ####Example:\n *\n *     var schema = new Schema({ name: String }, { collection: 'actor' });\n *\n *     // or\n *\n *     schema.set('collection', 'actor');\n *\n *     // or\n *\n *     var collectionName = 'actor'\n *     var M = conn.model('Actor', schema, collectionName)\n *\n * @param {String} name the model name\n * @param {Schema} [schema] a schema. necessary when defining a model\n * @param {String} [collection] name of mongodb collection (optional) if not given it will be induced from model name\n * @see Mongoose#model #index_Mongoose-model\n * @return {Model} The compiled model\n * @api public\n */\n\nConnection.prototype.model = function(name, schema, collection) {\n  // collection name discovery\n  if (typeof schema === 'string') {\n    collection = schema;\n    schema = false;\n  }\n\n  if (utils.isObject(schema) && !schema.instanceOfSchema) {\n    schema = new Schema(schema);\n  }\n  if (schema && !schema.instanceOfSchema) {\n    throw new Error('The 2nd parameter to `mongoose.model()` should be a ' +\n      'schema or a POJO');\n  }\n\n  if (this.models[name] && !collection) {\n    // model exists but we are not subclassing with custom collection\n    if (schema && schema.instanceOfSchema && schema !== this.models[name].schema) {\n      throw new MongooseError.OverwriteModelError(name);\n    }\n    return this.models[name];\n  }\n\n  var opts = {cache: false, connection: this};\n  var model;\n\n  if (schema && schema.instanceOfSchema) {\n    // compile a model\n    model = this.base.model(name, schema, collection, opts);\n\n    // only the first model with this name is cached to allow\n    // for one-offs with custom collection names etc.\n    if (!this.models[name]) {\n      this.models[name] = model;\n    }\n\n    // Errors handled internally, so safe to ignore error\n    model.init(() => {});\n    return model;\n  }\n\n  if (this.models[name] && collection) {\n    // subclassing current model with alternate collection\n    model = this.models[name];\n    schema = model.prototype.schema;\n    var sub = model.__subclass(this, schema, collection);\n    // do not cache the sub model\n    return sub;\n  }\n\n  // lookup model in mongoose module\n  model = this.base.models[name];\n\n  if (!model) {\n    throw new MongooseError.MissingSchemaError(name);\n  }\n\n  if (this === model.prototype.db\n      && (!collection || collection === model.collection.name)) {\n    // model already uses this connection.\n\n    // only the first model with this name is cached to allow\n    // for one-offs with custom collection names etc.\n    if (!this.models[name]) {\n      this.models[name] = model;\n    }\n\n    return model;\n  }\n  this.models[name] = model.__subclass(this, schema, collection);\n  return this.models[name];\n};\n\n/**\n * Returns an array of model names created on this connection.\n * @api public\n * @return {Array}\n */\n\nConnection.prototype.modelNames = function() {\n  return Object.keys(this.models);\n};\n\n/**\n * @brief Returns if the connection requires authentication after it is opened. Generally if a\n * username and password are both provided than authentication is needed, but in some cases a\n * password is not required.\n * @api private\n * @return {Boolean} true if the connection should be authenticated after it is opened, otherwise false.\n */\nConnection.prototype.shouldAuthenticate = function() {\n  return (this.user !== null && this.user !== void 0) &&\n      ((this.pass !== null || this.pass !== void 0) || this.authMechanismDoesNotRequirePassword());\n};\n\n/**\n * @brief Returns a boolean value that specifies if the current authentication mechanism needs a\n * password to authenticate according to the auth objects passed into the open/openSet methods.\n * @api private\n * @return {Boolean} true if the authentication mechanism specified in the options object requires\n *  a password, otherwise false.\n */\nConnection.prototype.authMechanismDoesNotRequirePassword = function() {\n  if (this.options && this.options.auth) {\n    return authMechanismsWhichDontRequirePassword.indexOf(this.options.auth.authMechanism) >= 0;\n  }\n  return true;\n};\n\n/**\n * @brief Returns a boolean value that specifies if the provided objects object provides enough\n * data to authenticate with. Generally this is true if the username and password are both specified\n * but in some authentication methods, a password is not required for authentication so only a username\n * is required.\n * @param {Object} [options] the options object passed into the open/openSet methods.\n * @api private\n * @return {Boolean} true if the provided options object provides enough data to authenticate with,\n *   otherwise false.\n */\nConnection.prototype.optionsProvideAuthenticationData = function(options) {\n  return (options) &&\n      (options.user) &&\n      ((options.pass) || this.authMechanismDoesNotRequirePassword());\n};\n\n/*!\n * Module exports.\n */\n\nConnection.STATES = STATES;\nmodule.exports = Connection;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/connection.js\n// module id = 122\n// module chunks = 0","'use strict';\n\n/* eslint-env browser */\n\n/*!\n * Module dependencies.\n */\nvar Document = require('./document.js');\nvar BrowserDocument = require('./browserDocument.js');\n\nvar isBrowser = false;\n\n/**\n * Returns the Document constructor for the current context\n *\n * @api private\n */\nmodule.exports = function() {\n  if (isBrowser) {\n    return BrowserDocument;\n  }\n  return Document;\n};\n\n/*!\n * ignore\n */\nmodule.exports.setBrowser = function(flag) {\n  isBrowser = flag;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/document_provider.js\n// module id = 123\n// module chunks = 0","/*!\n * Module dependencies.\n */\n\nvar MongooseError = require('./');\n\n/**\n * Constructor for errors that happen when a parameter that's expected to be\n * an object isn't an object\n *\n * @param {Any} value\n * @param {String} paramName\n * @param {String} fnName\n * @inherits MongooseError\n * @api private\n */\n\nfunction ObjectParameterError(value, paramName, fnName) {\n  MongooseError.call(this, 'Parameter \"' + paramName + '\" to ' + fnName +\n    '() must be an object, got ' + value.toString());\n  this.name = 'ObjectParameterError';\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this);\n  } else {\n    this.stack = new Error().stack;\n  }\n}\n\n/*!\n * Inherits from MongooseError.\n */\n\nObjectParameterError.prototype = Object.create(MongooseError.prototype);\nObjectParameterError.prototype.constructor = MongooseError;\n\nmodule.exports = ObjectParameterError;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/error/objectParameter.js\n// module id = 124\n// module chunks = 0","/*!\n * Dependencies\n */\n\nvar StateMachine = require('./statemachine');\nvar ActiveRoster = StateMachine.ctor('require', 'modify', 'init', 'default', 'ignore');\n\nmodule.exports = exports = InternalCache;\n\nfunction InternalCache() {\n  this.strictMode = undefined;\n  this.selected = undefined;\n  this.shardval = undefined;\n  this.saveError = undefined;\n  this.validationError = undefined;\n  this.adhocPaths = undefined;\n  this.removing = undefined;\n  this.inserting = undefined;\n  this.version = undefined;\n  this.getters = {};\n  this._id = undefined;\n  this.populate = undefined; // what we want to populate in this doc\n  this.populated = undefined;// the _ids that have been populated\n  this.wasPopulated = false; // if this doc was the result of a population\n  this.scope = undefined;\n  this.activePaths = new ActiveRoster;\n  this.pathsToScopes = {};\n\n  // embedded docs\n  this.ownerDocument = undefined;\n  this.fullPath = undefined;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/internal.js\n// module id = 125\n// module chunks = 0","/*!\n * Module dependencies.\n */\n\nvar utils = require('../utils');\n\nvar SchemaType = require('../schematype');\nvar CastError = SchemaType.CastError;\n\nconst convertToTrue = [true, 'true', 1, '1', 'yes'];\nconst convertToFalse = [false, 'false', 0, '0', 'no'];\n\n/**\n * Boolean SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaBoolean(path, options) {\n  SchemaType.call(this, path, options, 'Boolean');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaBoolean.schemaName = 'Boolean';\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaBoolean.prototype = Object.create(SchemaType.prototype);\nSchemaBoolean.prototype.constructor = SchemaBoolean;\n\n/**\n * Check if the given value satisfies a required validator. For a boolean\n * to satisfy a required validator, it must be strictly equal to true or to\n * false.\n *\n * @param {Any} value\n * @return {Boolean}\n * @api public\n */\n\nSchemaBoolean.prototype.checkRequired = function(value) {\n  return value === true || value === false;\n};\n\n/**\n * Casts to boolean\n *\n * @param {Object} value\n * @param {Object} model - this value is optional\n * @api private\n */\n\nSchemaBoolean.prototype.cast = function(value) {\n  if (value == null) {\n    return value;\n  }\n\n  // strict mode (throws if value is not a boolean, instead of converting)\n  if (convertToTrue.indexOf(value) !== -1) {\n    return true;\n  }\n  if (convertToFalse.indexOf(value) !== -1) {\n    return false;\n  }\n  throw new CastError('boolean', value, this.path);\n};\n\nSchemaBoolean.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {});\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} val\n * @api private\n */\n\nSchemaBoolean.prototype.castForQuery = function($conditional, val) {\n  var handler;\n  if (arguments.length === 2) {\n    handler = SchemaBoolean.$conditionalHandlers[$conditional];\n\n    if (handler) {\n      return handler.call(this, val);\n    }\n\n    return this._castForQuery(val);\n  }\n\n  return this._castForQuery($conditional);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaBoolean;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/schema/boolean.js\n// module id = 126\n// module chunks = 0","/*!\n * Module dependencies.\n */\n\nvar handleBitwiseOperator = require('./operators/bitwise');\nvar utils = require('../utils');\n\nvar MongooseBuffer = require('../types/buffer');\nvar SchemaType = require('../schematype');\n\nvar Binary = MongooseBuffer.Binary;\nvar CastError = SchemaType.CastError;\nvar Document;\n\n/**\n * Buffer SchemaType constructor\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaBuffer(key, options) {\n  SchemaType.call(this, key, options, 'Buffer');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaBuffer.schemaName = 'Buffer';\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaBuffer.prototype = Object.create(SchemaType.prototype);\nSchemaBuffer.prototype.constructor = SchemaBuffer;\n\n/**\n * Check if the given value satisfies a required validator. To satisfy a\n * required validator, a buffer must not be null or undefined and have\n * non-zero length.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaBuffer.prototype.checkRequired = function(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n  return !!(value && value.length);\n};\n\n/**\n * Casts contents\n *\n * @param {Object} value\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init\n * @api private\n */\n\nSchemaBuffer.prototype.cast = function(value, doc, init) {\n  var ret;\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n\n    if (value === null || value === undefined) {\n      return value;\n    }\n\n    // lazy load\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    }\n\n    // setting a populated path\n    if (Buffer.isBuffer(value)) {\n      return value;\n    } else if (!utils.isObject(value)) {\n      throw new CastError('buffer', value, this.path);\n    }\n\n    // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n    var path = doc.$__fullPath(this.path);\n    var owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    var pop = owner.populated(path, true);\n    ret = new pop.options.model(value);\n    ret.$__.wasPopulated = true;\n    return ret;\n  }\n\n  // documents\n  if (value && value._id) {\n    value = value._id;\n  }\n\n  if (value && value.isMongooseBuffer) {\n    return value;\n  }\n\n  if (Buffer.isBuffer(value)) {\n    if (!value || !value.isMongooseBuffer) {\n      value = new MongooseBuffer(value, [this.path, doc]);\n      if (this.options.subtype != null) {\n        value._subtype = this.options.subtype;\n      }\n    }\n\n    return value;\n  } else if (value instanceof Binary) {\n    ret = new MongooseBuffer(value.value(true), [this.path, doc]);\n    if (typeof value.sub_type !== 'number') {\n      throw new CastError('buffer', value, this.path);\n    }\n    ret._subtype = value.sub_type;\n    return ret;\n  }\n\n  if (value === null) {\n    return value;\n  }\n\n  var type = typeof value;\n  if (type === 'string' || type === 'number' || Array.isArray(value)) {\n    if (type === 'number') {\n      value = [value];\n    }\n    ret = new MongooseBuffer(value, [this.path, doc]);\n    if (this.options.subtype != null) {\n      ret._subtype = this.options.subtype;\n    }\n    return ret;\n  }\n\n  throw new CastError('buffer', value, this.path);\n};\n\n/**\n * Sets the default [subtype](https://studio3t.com/whats-new/best-practices-uuid-mongodb/)\n * for this buffer. You can find a [list of allowed subtypes here](http://api.mongodb.com/python/current/api/bson/binary.html).\n *\n * ####Example:\n *\n *     var s = new Schema({ uuid: { type: Buffer, subtype: 4 });\n *     var M = db.model('M', s);\n *     var m = new M({ uuid: 'test string' });\n *     m.uuid._subtype; // 4\n *\n * @param {Number} subtype the default subtype\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaBuffer.prototype.subtype = function(subtype) {\n  this.options.subtype = subtype;\n  return this;\n};\n\n/*!\n * ignore\n */\nfunction handleSingle(val) {\n  return this.castForQuery(val);\n}\n\nSchemaBuffer.prototype.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\n      $bitsAllClear: handleBitwiseOperator,\n      $bitsAnyClear: handleBitwiseOperator,\n      $bitsAllSet: handleBitwiseOperator,\n      $bitsAnySet: handleBitwiseOperator,\n      $gt: handleSingle,\n      $gte: handleSingle,\n      $lt: handleSingle,\n      $lte: handleSingle\n    });\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaBuffer.prototype.castForQuery = function($conditional, val) {\n  var handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with Buffer.');\n    }\n    return handler.call(this, val);\n  }\n  val = $conditional;\n  var casted = this._castForQuery(val);\n  return casted ? casted.toObject({ transform: false, virtuals: false }) : casted;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/schema/buffer.js\n// module id = 127\n// module chunks = 0","/*!\n * Module requirements.\n */\n\nvar MongooseError = require('../error');\nvar utils = require('../utils');\n\nvar SchemaType = require('../schematype');\n\nvar CastError = SchemaType.CastError;\n\n/**\n * Date SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaDate(key, options) {\n  SchemaType.call(this, key, options, 'Date');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaDate.schemaName = 'Date';\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaDate.prototype = Object.create(SchemaType.prototype);\nSchemaDate.prototype.constructor = SchemaDate;\n\n/**\n * Declares a TTL index (rounded to the nearest second) for _Date_ types only.\n *\n * This sets the `expireAfterSeconds` index option available in MongoDB >= 2.1.2.\n * This index type is only compatible with Date types.\n *\n * ####Example:\n *\n *     // expire in 24 hours\n *     new Schema({ createdAt: { type: Date, expires: 60*60*24 }});\n *\n * `expires` utilizes the `ms` module from [guille](https://github.com/guille/) allowing us to use a friendlier syntax:\n *\n * ####Example:\n *\n *     // expire in 24 hours\n *     new Schema({ createdAt: { type: Date, expires: '24h' }});\n *\n *     // expire in 1.5 hours\n *     new Schema({ createdAt: { type: Date, expires: '1.5h' }});\n *\n *     // expire in 7 days\n *     var schema = new Schema({ createdAt: Date });\n *     schema.path('createdAt').expires('7d');\n *\n * @param {Number|String} when\n * @added 3.0.0\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaDate.prototype.expires = function(when) {\n  if (!this._index || this._index.constructor.name !== 'Object') {\n    this._index = {};\n  }\n\n  this._index.expires = when;\n  utils.expires(this._index);\n  return this;\n};\n\n/**\n * Check if the given value satisfies a required validator. To satisfy\n * a required validator, the given value must be an instance of `Date`.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaDate.prototype.checkRequired = function(value) {\n  return value instanceof Date;\n};\n\n/**\n * Sets a minimum date validator.\n *\n * ####Example:\n *\n *     var s = new Schema({ d: { type: Date, min: Date('1970-01-01') })\n *     var M = db.model('M', s)\n *     var m = new M({ d: Date('1969-12-31') })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.d = Date('2014-12-08');\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MIN} token which will be replaced with the invalid value\n *     var min = [Date('1970-01-01'), 'The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).'];\n *     var schema = new Schema({ d: { type: Date, min: min })\n *     var M = mongoose.model('M', schema);\n *     var s= new M({ d: Date('1969-12-31') });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `d` (1969-12-31) is before the limit (1970-01-01).\n *     })\n *\n * @param {Date} value minimum date\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaDate.prototype.min = function(value, message) {\n  if (this.minValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.minValidator;\n    }, this);\n  }\n\n  if (value) {\n    var msg = message || MongooseError.messages.Date.min;\n    msg = msg.replace(/{MIN}/, (value === Date.now ? 'Date.now()' : this.cast(value).toString()));\n    var _this = this;\n    this.validators.push({\n      validator: this.minValidator = function(val) {\n        var min = (value === Date.now ? value() : _this.cast(value));\n        return val === null || val.valueOf() >= min.valueOf();\n      },\n      message: msg,\n      type: 'min',\n      min: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a maximum date validator.\n *\n * ####Example:\n *\n *     var s = new Schema({ d: { type: Date, max: Date('2014-01-01') })\n *     var M = db.model('M', s)\n *     var m = new M({ d: Date('2014-12-08') })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.d = Date('2013-12-31');\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAX} token which will be replaced with the invalid value\n *     var max = [Date('2014-01-01'), 'The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).'];\n *     var schema = new Schema({ d: { type: Date, max: max })\n *     var M = mongoose.model('M', schema);\n *     var s= new M({ d: Date('2014-12-08') });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `d` (2014-12-08) exceeds the limit (2014-01-01).\n *     })\n *\n * @param {Date} maximum date\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaDate.prototype.max = function(value, message) {\n  if (this.maxValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.maxValidator;\n    }, this);\n  }\n\n  if (value) {\n    var msg = message || MongooseError.messages.Date.max;\n    msg = msg.replace(/{MAX}/, (value === Date.now ? 'Date.now()' : this.cast(value).toString()));\n    var _this = this;\n    this.validators.push({\n      validator: this.maxValidator = function(val) {\n        var max = (value === Date.now ? value() : _this.cast(value));\n        return val === null || val.valueOf() <= max.valueOf();\n      },\n      message: msg,\n      type: 'max',\n      max: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Casts to date\n *\n * @param {Object} value to cast\n * @api private\n */\n\nSchemaDate.prototype.cast = function(value) {\n  // If null or undefined\n  if (value === null || value === void 0 || value === '') {\n    return null;\n  }\n\n  if (value instanceof Date) {\n    if (isNaN(value.valueOf())) {\n      throw new CastError('date', value, this.path);\n    }\n\n    return value;\n  }\n\n  var date;\n\n  if (typeof value === 'boolean') {\n    throw new CastError('date', value, this.path);\n  }\n\n  if (value instanceof Number || typeof value === 'number') {\n    date = new Date(value);\n  } else if (typeof value.valueOf === 'function') {\n    // support for moment.js. This is also the path strings will take because strings\n    // have a `valueOf()`\n    date = new Date(value.valueOf());\n  } else {\n    // fallback\n    date = new Date(value);\n  }\n\n  if (!isNaN(date.valueOf())) {\n    return date;\n  }\n\n  throw new CastError('date', value, this.path);\n};\n\n/*!\n * Date Query casting.\n *\n * @api private\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nSchemaDate.prototype.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\n      $gt: handleSingle,\n      $gte: handleSingle,\n      $lt: handleSingle,\n      $lte: handleSingle\n    });\n\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaDate.prototype.castForQuery = function($conditional, val) {\n  var handler;\n\n  if (arguments.length !== 2) {\n    return this._castForQuery($conditional);\n  }\n\n  handler = this.$conditionalHandlers[$conditional];\n\n  if (!handler) {\n    throw new Error('Can\\'t use ' + $conditional + ' with Date.');\n  }\n\n  return handler.call(this, val);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaDate;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/schema/date.js\n// module id = 128\n// module chunks = 0","\n/*!\n * Module exports.\n */\n\nexports.String = require('./string');\n\nexports.Number = require('./number');\n\nexports.Boolean = require('./boolean');\n\nexports.DocumentArray = require('./documentarray');\n\nexports.Embedded = require('./embedded');\n\nexports.Array = require('./array');\n\nexports.Buffer = require('./buffer');\n\nexports.Date = require('./date');\n\nexports.ObjectId = require('./objectid');\n\nexports.Mixed = require('./mixed');\n\nexports.Decimal128 = exports.Decimal = require('./decimal128');\n\n// alias\n\nexports.Oid = exports.ObjectId;\nexports.Object = exports.Mixed;\nexports.Bool = exports.Boolean;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/schema/index.js\n// module id = 129\n// module chunks = 0","/*!\n * Module requirements.\n */\n\nvar CastError = require('../../error/cast');\n\n/*!\n * ignore\n */\n\nfunction handleBitwiseOperator(val) {\n  var _this = this;\n  if (Array.isArray(val)) {\n    return val.map(function(v) {\n      return _castNumber(_this.path, v);\n    });\n  } else if (Buffer.isBuffer(val)) {\n    return val;\n  }\n  // Assume trying to cast to number\n  return _castNumber(_this.path, val);\n}\n\n/*!\n * ignore\n */\n\nfunction _castNumber(path, num) {\n  var v = Number(num);\n  if (isNaN(v)) {\n    throw new CastError('number', num, path);\n  }\n  return v;\n}\n\nmodule.exports = handleBitwiseOperator;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/schema/operators/bitwise.js\n// module id = 130\n// module chunks = 0","/*!\n * Module requirements.\n */\n\nvar castArraysOfNumbers = require('./helpers').castArraysOfNumbers;\nvar castToNumber = require('./helpers').castToNumber;\n\n/*!\n * ignore\n */\n\nexports.cast$geoIntersects = cast$geoIntersects;\nexports.cast$near = cast$near;\nexports.cast$within = cast$within;\n\nfunction cast$near(val) {\n  var SchemaArray = require('../array');\n\n  if (Array.isArray(val)) {\n    castArraysOfNumbers(val, this);\n    return val;\n  }\n\n  _castMinMaxDistance(this, val);\n\n  if (val && val.$geometry) {\n    return cast$geometry(val, this);\n  }\n\n  return SchemaArray.prototype.castForQuery.call(this, val);\n}\n\nfunction cast$geometry(val, self) {\n  switch (val.$geometry.type) {\n    case 'Polygon':\n    case 'LineString':\n    case 'Point':\n      castArraysOfNumbers(val.$geometry.coordinates, self);\n      break;\n    default:\n      // ignore unknowns\n      break;\n  }\n\n  _castMinMaxDistance(this, val);\n\n  return val;\n}\n\nfunction cast$within(val) {\n  _castMinMaxDistance(this, val);\n\n  if (val.$box || val.$polygon) {\n    var type = val.$box ? '$box' : '$polygon';\n    val[type].forEach(function(arr) {\n      if (!Array.isArray(arr)) {\n        var msg = 'Invalid $within $box argument. '\n            + 'Expected an array, received ' + arr;\n        throw new TypeError(msg);\n      }\n      arr.forEach(function(v, i) {\n        arr[i] = castToNumber.call(this, v);\n      });\n    });\n  } else if (val.$center || val.$centerSphere) {\n    type = val.$center ? '$center' : '$centerSphere';\n    val[type].forEach(function(item, i) {\n      if (Array.isArray(item)) {\n        item.forEach(function(v, j) {\n          item[j] = castToNumber.call(this, v);\n        });\n      } else {\n        val[type][i] = castToNumber.call(this, item);\n      }\n    });\n  } else if (val.$geometry) {\n    cast$geometry(val, this);\n  }\n\n  return val;\n}\n\nfunction cast$geoIntersects(val) {\n  var geo = val.$geometry;\n  if (!geo) {\n    return;\n  }\n\n  cast$geometry(val, this);\n  return val;\n}\n\nfunction _castMinMaxDistance(self, val) {\n  if (val.$maxDistance) {\n    val.$maxDistance = castToNumber.call(self, val.$maxDistance);\n  }\n  if (val.$minDistance) {\n    val.$minDistance = castToNumber.call(self, val.$minDistance);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/schema/operators/geospatial.js\n// module id = 131\n// module chunks = 0","'use strict';\n\n/*!\n * ignore\n */\n\nmodule.exports = function(val) {\n  if (typeof val !== 'number' && typeof val !== 'string') {\n    throw new Error('$type parameter must be number or string');\n  }\n\n  return val;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/schema/operators/type.js\n// module id = 132\n// module chunks = 0","/*!\n * Module dependencies.\n */\n\nvar SchemaType = require('../schematype');\nvar CastError = SchemaType.CastError;\nvar MongooseError = require('../error');\nvar utils = require('../utils');\nvar Document;\n\n/**\n * String SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaString(key, options) {\n  this.enumValues = [];\n  this.regExp = null;\n  SchemaType.call(this, key, options, 'String');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaString.schemaName = 'String';\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaString.prototype = Object.create(SchemaType.prototype);\nSchemaString.prototype.constructor = SchemaString;\n\n/**\n * Adds an enum validator\n *\n * ####Example:\n *\n *     var states = ['opening', 'open', 'closing', 'closed']\n *     var s = new Schema({ state: { type: String, enum: states }})\n *     var M = db.model('M', s)\n *     var m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: `invalid` is not a valid enum value for path `state`.\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n *     // or with custom error messages\n *     var enum = {\n *       values: ['opening', 'open', 'closing', 'closed'],\n *       message: 'enum validator failed for path `{PATH}` with value `{VALUE}`'\n *     }\n *     var s = new Schema({ state: { type: String, enum: enum })\n *     var M = db.model('M', s)\n *     var m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: enum validator failed for path `state` with value `invalid`\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n * @param {String|Object} [args...] enumeration values\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.enum = function() {\n  if (this.enumValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.enumValidator;\n    }, this);\n    this.enumValidator = false;\n  }\n\n  if (arguments[0] === void 0 || arguments[0] === false) {\n    return this;\n  }\n\n  var values;\n  var errorMessage;\n\n  if (utils.isObject(arguments[0])) {\n    values = arguments[0].values;\n    errorMessage = arguments[0].message;\n  } else {\n    values = arguments;\n    errorMessage = MongooseError.messages.String.enum;\n  }\n\n  for (var i = 0; i < values.length; i++) {\n    if (undefined !== values[i]) {\n      this.enumValues.push(this.cast(values[i]));\n    }\n  }\n\n  var vals = this.enumValues;\n  this.enumValidator = function(v) {\n    return undefined === v || ~vals.indexOf(v);\n  };\n  this.validators.push({\n    validator: this.enumValidator,\n    message: errorMessage,\n    type: 'enum',\n    enumValues: vals\n  });\n\n  return this;\n};\n\n/**\n * Adds a lowercase [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * ####Example:\n *\n *     var s = new Schema({ email: { type: String, lowercase: true }})\n *     var M = db.model('M', s);\n *     var m = new M({ email: 'SomeEmail@example.COM' });\n *     console.log(m.email) // someemail@example.com\n *     M.find({ email: 'SomeEmail@example.com' }); // Queries by 'someemail@example.com'\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.lowercase = function(shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n  return this.set(function(v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n    if (v) {\n      return v.toLowerCase();\n    }\n    return v;\n  });\n};\n\n/**\n * Adds an uppercase [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * ####Example:\n *\n *     var s = new Schema({ caps: { type: String, uppercase: true }})\n *     var M = db.model('M', s);\n *     var m = new M({ caps: 'an example' });\n *     console.log(m.caps) // AN EXAMPLE\n *     M.find({ caps: 'an example' }) // Matches documents where caps = 'AN EXAMPLE'\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.uppercase = function(shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n  return this.set(function(v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n    if (v) {\n      return v.toUpperCase();\n    }\n    return v;\n  });\n};\n\n/**\n * Adds a trim [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * The string value will be trimmed when set.\n *\n * ####Example:\n *\n *     var s = new Schema({ name: { type: String, trim: true }})\n *     var M = db.model('M', s)\n *     var string = ' some name '\n *     console.log(string.length) // 11\n *     var m = new M({ name: string })\n *     console.log(m.name.length) // 9\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.trim = function(shouldTrim) {\n  if (arguments.length > 0 && !shouldTrim) {\n    return this;\n  }\n  return this.set(function(v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n    if (v) {\n      return v.trim();\n    }\n    return v;\n  });\n};\n\n/**\n * Sets a minimum length validator.\n *\n * ####Example:\n *\n *     var schema = new Schema({ postalCode: { type: String, minlength: 5 })\n *     var Address = db.model('Address', schema)\n *     var address = new Address({ postalCode: '9512' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MINLENGTH} token which will be replaced with the minimum allowed length\n *     var minlength = [5, 'The value of path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).'];\n *     var schema = new Schema({ postalCode: { type: String, minlength: minlength })\n *     var Address = mongoose.model('Address', schema);\n *     var address = new Address({ postalCode: '9512' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512`) is shorter than the minimum length (5).\n *     })\n *\n * @param {Number} value minimum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.minlength = function(value, message) {\n  if (this.minlengthValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.minlengthValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    var msg = message || MongooseError.messages.String.minlength;\n    msg = msg.replace(/{MINLENGTH}/, value);\n    this.validators.push({\n      validator: this.minlengthValidator = function(v) {\n        return v === null || v.length >= value;\n      },\n      message: msg,\n      type: 'minlength',\n      minlength: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a maximum length validator.\n *\n * ####Example:\n *\n *     var schema = new Schema({ postalCode: { type: String, maxlength: 9 })\n *     var Address = db.model('Address', schema)\n *     var address = new Address({ postalCode: '9512512345' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAXLENGTH} token which will be replaced with the maximum allowed length\n *     var maxlength = [9, 'The value of path `{PATH}` (`{VALUE}`) exceeds the maximum allowed length ({MAXLENGTH}).'];\n *     var schema = new Schema({ postalCode: { type: String, maxlength: maxlength })\n *     var Address = mongoose.model('Address', schema);\n *     var address = new Address({ postalCode: '9512512345' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512512345`) exceeds the maximum allowed length (9).\n *     })\n *\n * @param {Number} value maximum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.maxlength = function(value, message) {\n  if (this.maxlengthValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.maxlengthValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    var msg = message || MongooseError.messages.String.maxlength;\n    msg = msg.replace(/{MAXLENGTH}/, value);\n    this.validators.push({\n      validator: this.maxlengthValidator = function(v) {\n        return v === null || v.length <= value;\n      },\n      message: msg,\n      type: 'maxlength',\n      maxlength: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a regexp validator.\n *\n * Any value that does not pass `regExp`.test(val) will fail validation.\n *\n * ####Example:\n *\n *     var s = new Schema({ name: { type: String, match: /^a/ }})\n *     var M = db.model('M', s)\n *     var m = new M({ name: 'I am invalid' })\n *     m.validate(function (err) {\n *       console.error(String(err)) // \"ValidationError: Path `name` is invalid (I am invalid).\"\n *       m.name = 'apples'\n *       m.validate(function (err) {\n *         assert.ok(err) // success\n *       })\n *     })\n *\n *     // using a custom error message\n *     var match = [ /\\.html$/, \"That file doesn't end in .html ({VALUE})\" ];\n *     var s = new Schema({ file: { type: String, match: match }})\n *     var M = db.model('M', s);\n *     var m = new M({ file: 'invalid' });\n *     m.validate(function (err) {\n *       console.log(String(err)) // \"ValidationError: That file doesn't end in .html (invalid)\"\n *     })\n *\n * Empty strings, `undefined`, and `null` values always pass the match validator. If you require these values, enable the `required` validator also.\n *\n *     var s = new Schema({ name: { type: String, match: /^a/, required: true }})\n *\n * @param {RegExp} regExp regular expression to test against\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.match = function match(regExp, message) {\n  // yes, we allow multiple match validators\n\n  var msg = message || MongooseError.messages.String.match;\n\n  var matchValidator = function(v) {\n    if (!regExp) {\n      return false;\n    }\n\n    var ret = ((v != null && v !== '')\n      ? regExp.test(v)\n      : true);\n    return ret;\n  };\n\n  this.validators.push({\n    validator: matchValidator,\n    message: msg,\n    type: 'regexp',\n    regexp: regExp\n  });\n  return this;\n};\n\n/**\n * Check if the given value satisfies the `required` validator. The value is\n * considered valid if it is a string (that is, not `null` or `undefined`) and\n * has positive length. The `required` validator **will** fail for empty\n * strings.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaString.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n  return (value instanceof String || typeof value === 'string') && value.length;\n};\n\n/**\n * Casts to String\n *\n * @api private\n */\n\nSchemaString.prototype.cast = function(value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n\n    if (value === null || value === undefined) {\n      return value;\n    }\n\n    // lazy load\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    }\n\n    // setting a populated path\n    if (typeof value === 'string') {\n      return value;\n    } else if (Buffer.isBuffer(value) || !utils.isObject(value)) {\n      throw new CastError('string', value, this.path);\n    }\n\n    // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n    var path = doc.$__fullPath(this.path);\n    var owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    var pop = owner.populated(path, true);\n    var ret = new pop.options.model(value);\n    ret.$__.wasPopulated = true;\n    return ret;\n  }\n\n  // If null or undefined\n  if (value === null || value === undefined) {\n    return value;\n  }\n\n  if (typeof value !== 'undefined') {\n    // handle documents being passed\n    if (value._id && typeof value._id === 'string') {\n      return value._id;\n    }\n\n    // Re: gh-647 and gh-3030, we're ok with casting using `toString()`\n    // **unless** its the default Object.toString, because \"[object Object]\"\n    // doesn't really qualify as useful data\n    if (value.toString && value.toString !== Object.prototype.toString) {\n      return value.toString();\n    }\n  }\n\n  throw new CastError('string', value, this.path);\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.castForQuery(val);\n}\n\nfunction handleArray(val) {\n  var _this = this;\n  if (!Array.isArray(val)) {\n    return [this.castForQuery(val)];\n  }\n  return val.map(function(m) {\n    return _this.castForQuery(m);\n  });\n}\n\nSchemaString.prototype.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\n      $all: handleArray,\n      $gt: handleSingle,\n      $gte: handleSingle,\n      $lt: handleSingle,\n      $lte: handleSingle,\n      $options: handleSingle,\n      $regex: handleSingle,\n      $not: handleSingle\n    });\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [val]\n * @api private\n */\n\nSchemaString.prototype.castForQuery = function($conditional, val) {\n  var handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with String.');\n    }\n    return handler.call(this, val);\n  }\n  val = $conditional;\n  if (Object.prototype.toString.call(val) === '[object RegExp]') {\n    return val;\n  }\n\n  return this._castForQuery(val);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaString;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/schema/string.js\n// module id = 133\n// module chunks = 0","'use strict';\n\n/*!\n * Module dependencies.\n */\n\nvar async = require('async');\nvar utils = require('../../utils');\n\n/**\n * Execute `fn` for every document in the cursor. If `fn` returns a promise,\n * will wait for the promise to resolve before iterating on to the next one.\n * Returns a promise that resolves when done.\n *\n * @param {Function} next the thunk to call to get the next document\n * @param {Function} fn\n * @param {Object} options\n * @param {Function} [callback] executed when all docs have been processed\n * @return {Promise}\n * @api public\n * @method eachAsync\n */\n\nmodule.exports = function eachAsync(next, fn, options, callback) {\n  var parallel = options.parallel || 1;\n\n  var handleNextResult = function(doc, callback) {\n    var promise = fn(doc);\n    if (promise && typeof promise.then === 'function') {\n      promise.then(\n        function() { callback(null); },\n        function(error) { callback(error || new Error('`eachAsync()` promise rejected without error')); });\n    } else {\n      callback(null);\n    }\n  };\n\n  var iterate = function(callback) {\n    var drained = false;\n    var nextQueue = async.queue(function(task, cb) {\n      if (drained) return cb();\n      next(function(err, doc) {\n        if (err) return cb(err);\n        if (!doc) drained = true;\n        cb(null, doc);\n      });\n    }, 1);\n\n    var getAndRun = function(cb) {\n      nextQueue.push({}, function(err, doc) {\n        if (err) return cb(err);\n        if (!doc) return cb();\n        handleNextResult(doc, function(err) {\n          if (err) return cb(err);\n          // Make sure to clear the stack re: gh-4697\n          setTimeout(function() {\n            getAndRun(cb);\n          }, 0);\n        });\n      });\n    };\n\n    async.times(parallel, function(n, cb) {\n      getAndRun(cb);\n    }, callback);\n  };\n\n  return utils.promiseOrCallback(callback, cb => {\n    iterate(cb);\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/services/cursor/eachAsync.js\n// module id = 134\n// module chunks = 0","'use strict';\n\n/*!\n * ignore\n */\n\nmodule.exports = function cleanModifiedSubpaths(doc, path) {\n  var _modifiedPaths = Object.keys(doc.$__.activePaths.states.modify);\n  var _numModifiedPaths = _modifiedPaths.length;\n  var deleted = 0;\n  for (var j = 0; j < _numModifiedPaths; ++j) {\n    if (_modifiedPaths[j].indexOf(path + '.') === 0) {\n      delete doc.$__.activePaths.states.modify[_modifiedPaths[j]];\n      ++deleted;\n    }\n  }\n  return deleted;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/services/document/cleanModifiedSubpaths.js\n// module id = 135\n// module chunks = 0","'use strict';\n\n/*!\n * ignore\n */\n\nmodule.exports = applyHooks;\n\n/*!\n * Register hooks for this model\n *\n * @param {Model} model\n * @param {Schema} schema\n */\n\nfunction applyHooks(model, schema, options) {\n  options = options || {};\n\n  const kareemOptions = {\n    useErrorHandlers: true,\n    numCallbackParams: 1,\n    nullResultByDefault: true,\n    contextParameter: true\n  };\n  const objToDecorate = options.decorateDoc ? model : model.prototype;\n\n  model.$appliedHooks = true;\n  for (let i = 0; i < schema.childSchemas.length; ++i) {\n    const childModel = schema.childSchemas[i].model;\n    if (childModel.$appliedHooks) {\n      continue;\n    }\n    applyHooks(childModel, schema.childSchemas[i].schema, options);\n    if (childModel.discriminators != null) {\n      let keys = Object.keys(childModel.discriminators);\n      for (let j = 0; j < keys.length; ++j) {\n        applyHooks(childModel.discriminators[keys[j]],\n          childModel.discriminators[keys[j]].schema, options);\n      }\n    }\n  }\n\n  objToDecorate.$__save = schema.s.hooks.\n    createWrapper('save', objToDecorate.$__save, null, kareemOptions);\n  objToDecorate.$__validate = schema.s.hooks.\n    createWrapper('validate', objToDecorate.$__validate, null, kareemOptions);\n  objToDecorate.$__remove = schema.s.hooks.\n    createWrapper('remove', objToDecorate.$__remove, null, kareemOptions);\n  objToDecorate.$__init = schema.s.hooks.\n    createWrapperSync('init', objToDecorate.$__init, null, kareemOptions);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/services/model/applyHooks.js\n// module id = 136\n// module chunks = 0","'use strict';\n\nvar StrictModeError = require('../../error/strict');\nvar ValidationError = require('../../error/validation');\nvar utils = require('../../utils');\n\n/*!\n * Casts an update op based on the given schema\n *\n * @param {Schema} schema\n * @param {Object} obj\n * @param {Object} options\n * @param {Boolean} [options.overwrite] defaults to false\n * @param {Boolean|String} [options.strict] defaults to true\n * @param {Query} context passed to setters\n * @return {Boolean} true iff the update is non-empty\n */\n\nmodule.exports = function castUpdate(schema, obj, options, context) {\n  if (!obj) {\n    return undefined;\n  }\n\n  var ops = Object.keys(obj);\n  var i = ops.length;\n  var ret = {};\n  var hasKeys;\n  var val;\n  var hasDollarKey = false;\n  var overwrite = options.overwrite;\n\n  while (i--) {\n    var op = ops[i];\n    // if overwrite is set, don't do any of the special $set stuff\n    if (op[0] !== '$' && !overwrite) {\n      // fix up $set sugar\n      if (!ret.$set) {\n        if (obj.$set) {\n          ret.$set = obj.$set;\n        } else {\n          ret.$set = {};\n        }\n      }\n      ret.$set[op] = obj[op];\n      ops.splice(i, 1);\n      if (!~ops.indexOf('$set')) ops.push('$set');\n    } else if (op === '$set') {\n      if (!ret.$set) {\n        ret[op] = obj[op];\n      }\n    } else {\n      ret[op] = obj[op];\n    }\n  }\n\n  // cast each value\n  i = ops.length;\n\n  // if we get passed {} for the update, we still need to respect that when it\n  // is an overwrite scenario\n  if (overwrite) {\n    hasKeys = true;\n  }\n\n  while (i--) {\n    op = ops[i];\n    val = ret[op];\n    hasDollarKey = hasDollarKey || op.charAt(0) === '$';\n\n    if (val &&\n        typeof val === 'object' &&\n        !Buffer.isBuffer(val) &&\n        (!overwrite || hasDollarKey)) {\n      hasKeys |= walkUpdatePath(schema, val, op, options, context);\n    } else if (overwrite && ret && typeof ret === 'object') {\n      // if we are just using overwrite, cast the query and then we will\n      // *always* return the value, even if it is an empty object. We need to\n      // set hasKeys above because we need to account for the case where the\n      // user passes {} and wants to clobber the whole document\n      // Also, _walkUpdatePath expects an operation, so give it $set since that\n      // is basically what we're doing\n      walkUpdatePath(schema, ret, '$set', options, context);\n    } else {\n      var msg = 'Invalid atomic update value for ' + op + '. '\n          + 'Expected an object, received ' + typeof val;\n      throw new Error(msg);\n    }\n  }\n\n  return hasKeys && ret;\n};\n\n/*!\n * Walk each path of obj and cast its values\n * according to its schema.\n *\n * @param {Schema} schema\n * @param {Object} obj - part of a query\n * @param {String} op - the atomic operator ($pull, $set, etc)\n * @param {Object} options\n * @param {Boolean|String} [options.strict]\n * @param {Boolean} [options.omitUndefined]\n * @param {Query} context\n * @param {String} pref - path prefix (internal only)\n * @return {Bool} true if this path has keys to update\n * @api private\n */\n\nfunction walkUpdatePath(schema, obj, op, options, context, pref) {\n  var strict = options.strict;\n  var prefix = pref ? pref + '.' : '';\n  var keys = Object.keys(obj);\n  var i = keys.length;\n  var hasKeys = false;\n  var schematype;\n  var key;\n  var val;\n\n  var aggregatedError = null;\n\n  var useNestedStrict = schema.options.useNestedStrict;\n\n  while (i--) {\n    key = keys[i];\n    val = obj[key];\n\n    if (val && val.constructor.name === 'Object') {\n      // watch for embedded doc schemas\n      schematype = schema._getSchema(prefix + key);\n      if (schematype && schematype.caster && op in castOps) {\n        // embedded doc schema\n        if ('$each' in val) {\n          hasKeys = true;\n          try {\n            obj[key] = {\n              $each: castUpdateVal(schematype, val.$each, op, context)\n            };\n          } catch (error) {\n            aggregatedError = _handleCastError(error, context, key, aggregatedError);\n          }\n\n          if (val.$slice != null) {\n            obj[key].$slice = val.$slice | 0;\n          }\n\n          if (val.$sort) {\n            obj[key].$sort = val.$sort;\n          }\n\n          if (!!val.$position || val.$position === 0) {\n            obj[key].$position = val.$position;\n          }\n        } else {\n          try {\n            obj[key] = castUpdateVal(schematype, val, op, context);\n          } catch (error) {\n            aggregatedError = _handleCastError(error, context, key, aggregatedError);\n          }\n\n          if (options.omitUndefined && obj[key] === void 0) {\n            delete obj[key];\n            continue;\n          }\n\n          hasKeys = true;\n        }\n      } else if ((op === '$currentDate') || (op in castOps && schematype)) {\n        // $currentDate can take an object\n        try {\n          obj[key] = castUpdateVal(schematype, val, op, context);\n        } catch (error) {\n          aggregatedError = _handleCastError(error, context, key, aggregatedError);\n        }\n\n        if (options.omitUndefined && obj[key] === void 0) {\n          delete obj[key];\n          continue;\n        }\n\n        hasKeys = true;\n      } else {\n        var pathToCheck = (prefix + key);\n        var v = schema._getPathType(pathToCheck);\n        var _strict = strict;\n        if (useNestedStrict &&\n            v &&\n            v.schema &&\n            'strict' in v.schema.options) {\n          _strict = v.schema.options.strict;\n        }\n\n        if (v.pathType === 'undefined') {\n          if (_strict === 'throw') {\n            throw new StrictModeError(pathToCheck);\n          } else if (_strict) {\n            delete obj[key];\n            continue;\n          }\n        }\n\n        // gh-2314\n        // we should be able to set a schema-less field\n        // to an empty object literal\n        hasKeys |= walkUpdatePath(schema, val, op, options, context, prefix + key) ||\n          (utils.isObject(val) && Object.keys(val).length === 0);\n      }\n    } else {\n      var checkPath = (key === '$each' || key === '$or' || key === '$and') ?\n        pref : prefix + key;\n      schematype = schema._getSchema(checkPath);\n\n      var pathDetails = schema._getPathType(checkPath);\n      var isStrict = strict;\n      if (useNestedStrict &&\n          pathDetails &&\n          pathDetails.schema &&\n          'strict' in pathDetails.schema.options) {\n        isStrict = pathDetails.schema.options.strict;\n      }\n\n      var skip = isStrict &&\n          !schematype &&\n          !/real|nested/.test(pathDetails.pathType);\n\n      if (skip) {\n        if (isStrict === 'throw') {\n          throw new StrictModeError(prefix + key);\n        } else {\n          delete obj[key];\n        }\n      } else {\n        // gh-1845 temporary fix: ignore $rename. See gh-3027 for tracking\n        // improving this.\n        if (op === '$rename') {\n          hasKeys = true;\n          continue;\n        }\n\n        try {\n          obj[key] = castUpdateVal(schematype, val, op, key, context);\n        } catch (error) {\n          aggregatedError = _handleCastError(error, context, key, aggregatedError);\n        }\n\n        if (Array.isArray(obj[key]) && (op === '$addToSet' || op === '$push') && key !== '$each') {\n          obj[key] = { $each: obj[key] };\n        }\n\n        if (options.omitUndefined && obj[key] === void 0) {\n          delete obj[key];\n          continue;\n        }\n\n        hasKeys = true;\n      }\n    }\n  }\n\n  if (aggregatedError != null) {\n    throw aggregatedError;\n  }\n\n  return hasKeys;\n}\n\n/*!\n * ignore\n */\n\nfunction _handleCastError(error, query, key, aggregatedError) {\n  if (typeof query !== 'object' || !query.options.multipleCastError) {\n    throw error;\n  }\n  aggregatedError = aggregatedError || new ValidationError();\n  aggregatedError.addError(key, error);\n  return aggregatedError;\n}\n\n/*!\n * These operators should be cast to numbers instead\n * of their path schema type.\n */\n\nvar numberOps = {\n  $pop: 1,\n  $unset: 1,\n  $inc: 1\n};\n\n/*!\n * These operators require casting docs\n * to real Documents for Update operations.\n */\n\nvar castOps = {\n  $push: 1,\n  $addToSet: 1,\n  $set: 1,\n  $setOnInsert: 1\n};\n\n/*!\n * ignore\n */\n\nvar overwriteOps = {\n  $set: 1,\n  $setOnInsert: 1\n};\n\n/*!\n * Casts `val` according to `schema` and atomic `op`.\n *\n * @param {SchemaType} schema\n * @param {Object} val\n * @param {String} op - the atomic operator ($pull, $set, etc)\n * @param {String} $conditional\n * @param {Query} context\n * @api private\n */\n\nfunction castUpdateVal(schema, val, op, $conditional, context) {\n  if (!schema) {\n    // non-existing schema path\n    return op in numberOps\n      ? Number(val)\n      : val;\n  }\n\n  var cond = schema.caster && op in castOps &&\n      (utils.isObject(val) || Array.isArray(val));\n  if (cond) {\n    // Cast values for ops that add data to MongoDB.\n    // Ensures embedded documents get ObjectIds etc.\n    var tmp = schema.cast(val);\n    if (Array.isArray(val)) {\n      val = tmp;\n    } else if (Array.isArray(tmp)) {\n      val = tmp[0];\n    } else {\n      val = tmp;\n    }\n    return val;\n  }\n\n  if (op in numberOps) {\n    if (op === '$inc') {\n      return schema.castForQueryWrapper({ val: val, context: context });\n    }\n    return Number(val);\n  }\n  if (op === '$currentDate') {\n    if (typeof val === 'object') {\n      return {$type: val.$type};\n    }\n    return Boolean(val);\n  }\n\n  if (/^\\$/.test($conditional)) {\n    return schema.castForQueryWrapper({\n      $conditional: $conditional,\n      val: val,\n      context: context\n    });\n  }\n\n  if (overwriteOps[op]) {\n    return schema.castForQueryWrapper({\n      val: val,\n      context: context,\n      $skipQueryCastForUpdate: val != null && schema.$isMongooseArray\n    });\n  }\n\n  return schema.castForQueryWrapper({ val: val, context: context });\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/services/query/castUpdate.js\n// module id = 137\n// module chunks = 0","'use strict';\n\nvar modifiedPaths = require('./common').modifiedPaths;\n\n/**\n * Applies defaults to update and findOneAndUpdate operations.\n *\n * @param {Object} filter\n * @param {Schema} schema\n * @param {Object} castedDoc\n * @param {Object} options\n * @method setDefaultsOnInsert\n * @api private\n */\n\nmodule.exports = function(filter, schema, castedDoc, options) {\n  var keys = Object.keys(castedDoc || {});\n  var updatedKeys = {};\n  var updatedValues = {};\n  var numKeys = keys.length;\n  var hasDollarUpdate = false;\n  var modified = {};\n\n  if (options && options.upsert) {\n    for (var i = 0; i < numKeys; ++i) {\n      if (keys[i].charAt(0) === '$') {\n        modifiedPaths(castedDoc[keys[i]], '', modified);\n        hasDollarUpdate = true;\n      }\n    }\n\n    if (!hasDollarUpdate) {\n      modifiedPaths(castedDoc, '', modified);\n    }\n\n    var paths = Object.keys(filter);\n    var numPaths = paths.length;\n    for (i = 0; i < numPaths; ++i) {\n      var path = paths[i];\n      var condition = filter[path];\n      if (condition && typeof condition === 'object') {\n        var conditionKeys = Object.keys(condition);\n        var numConditionKeys = conditionKeys.length;\n        var hasDollarKey = false;\n        for (var j = 0; j < numConditionKeys; ++j) {\n          if (conditionKeys[j].charAt(0) === '$') {\n            hasDollarKey = true;\n            break;\n          }\n        }\n        if (hasDollarKey) {\n          continue;\n        }\n      }\n      updatedKeys[path] = true;\n      modified[path] = true;\n    }\n\n    if (options && options.overwrite && !hasDollarUpdate) {\n      // Defaults will be set later, since we're overwriting we'll cast\n      // the whole update to a document\n      return castedDoc;\n    }\n\n    if (options.setDefaultsOnInsert) {\n      schema.eachPath(function(path, schemaType) {\n        if (schemaType.$isSingleNested) {\n          // Only handle nested schemas 1-level deep to avoid infinite\n          // recursion re: https://github.com/mongodb-js/mongoose-autopopulate/issues/11\n          schemaType.schema.eachPath(function(_path, _schemaType) {\n            if (path === '_id') {\n              // Ignore _id for now because it causes bugs in 2.4\n              return;\n            }\n\n            var def = _schemaType.getDefault(null, true);\n            if (!isModified(modified, path + '.' + _path) &&\n                typeof def !== 'undefined') {\n              castedDoc = castedDoc || {};\n              castedDoc.$setOnInsert = castedDoc.$setOnInsert || {};\n              castedDoc.$setOnInsert[path + '.' + _path] = def;\n              updatedValues[path + '.' + _path] = def;\n            }\n          });\n        } else {\n          var def = schemaType.getDefault(null, true);\n          if (!isModified(modified, path) && typeof def !== 'undefined') {\n            castedDoc = castedDoc || {};\n            castedDoc.$setOnInsert = castedDoc.$setOnInsert || {};\n            castedDoc.$setOnInsert[path] = def;\n            updatedValues[path] = def;\n          }\n        }\n      });\n    }\n  }\n\n  return castedDoc;\n};\n\nfunction isModified(modified, path) {\n  if (modified[path]) {\n    return true;\n  }\n  var sp = path.split('.');\n  var cur = sp[0];\n  for (var i = 0; i < sp.length; ++i) {\n    if (modified[cur]) {\n      return true;\n    }\n    cur += '.' + sp[i];\n  }\n  return false;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/services/setDefaultsOnInsert.js\n// module id = 138\n// module chunks = 0","/*!\n * Module dependencies.\n */\n\nvar Binary = require('../drivers').Binary,\n    utils = require('../utils');\n\n/**\n * Mongoose Buffer constructor.\n *\n * Values always have to be passed to the constructor to initialize.\n *\n * @param {Buffer} value\n * @param {String} encode\n * @param {Number} offset\n * @api private\n * @inherits Buffer\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseBuffer(value, encode, offset) {\n  var length = arguments.length;\n  var val;\n\n  if (length === 0 || arguments[0] === null || arguments[0] === undefined) {\n    val = 0;\n  } else {\n    val = value;\n  }\n\n  var encoding;\n  var path;\n  var doc;\n\n  if (Array.isArray(encode)) {\n    // internal casting\n    path = encode[0];\n    doc = encode[1];\n  } else {\n    encoding = encode;\n  }\n\n  var buf = new Buffer(val, encoding, offset);\n  utils.decorate(buf, MongooseBuffer.mixin);\n  buf.isMongooseBuffer = true;\n\n  // make sure these internal props don't show up in Object.keys()\n  Object.defineProperties(buf, {\n    validators: {\n      value: [],\n      enumerable: false\n    },\n    _path: {\n      value: path,\n      enumerable: false\n    },\n    _parent: {\n      value: doc,\n      enumerable: false\n    }\n  });\n\n  if (doc && typeof path === 'string') {\n    Object.defineProperty(buf, '_schema', {\n      value: doc.schema.path(path)\n    });\n  }\n\n  buf._subtype = 0;\n  return buf;\n}\n\n/*!\n * Inherit from Buffer.\n */\n\n// MongooseBuffer.prototype = new Buffer(0);\n\nMongooseBuffer.mixin = {\n\n  /**\n   * Parent owner document\n   *\n   * @api private\n   * @property _parent\n   * @receiver MongooseBuffer\n   */\n\n  _parent: undefined,\n\n  /**\n   * Default subtype for the Binary representing this Buffer\n   *\n   * @api private\n   * @property _subtype\n   * @receiver MongooseBuffer\n   */\n\n  _subtype: undefined,\n\n  /**\n   * Marks this buffer as modified.\n   *\n   * @api private\n   * @method _markModified\n   * @receiver MongooseBuffer\n   */\n\n  _markModified: function() {\n    var parent = this._parent;\n\n    if (parent) {\n      parent.markModified(this._path);\n    }\n    return this;\n  },\n\n  /**\n   * Writes the buffer.\n   *\n   * @api public\n   * @method write\n   * @receiver MongooseBuffer\n   */\n\n  write: function() {\n    var written = Buffer.prototype.write.apply(this, arguments);\n\n    if (written > 0) {\n      this._markModified();\n    }\n\n    return written;\n  },\n\n  /**\n   * Copies the buffer.\n   *\n   * ####Note:\n   *\n   * `Buffer#copy` does not mark `target` as modified so you must copy from a `MongooseBuffer` for it to work as expected. This is a work around since `copy` modifies the target, not this.\n   *\n   * @return {Number} The number of bytes copied.\n   * @param {Buffer} target\n   * @method copy\n   * @receiver MongooseBuffer\n   */\n\n  copy: function(target) {\n    var ret = Buffer.prototype.copy.apply(this, arguments);\n\n    if (target && target.isMongooseBuffer) {\n      target._markModified();\n    }\n\n    return ret;\n  }\n};\n\n/*!\n * Compile other Buffer methods marking this buffer as modified.\n */\n\n(\n// node < 0.5\n  'writeUInt8 writeUInt16 writeUInt32 writeInt8 writeInt16 writeInt32 ' +\n    'writeFloat writeDouble fill ' +\n    'utf8Write binaryWrite asciiWrite set ' +\n\n// node >= 0.5\n    'writeUInt16LE writeUInt16BE writeUInt32LE writeUInt32BE ' +\n    'writeInt16LE writeInt16BE writeInt32LE writeInt32BE ' +\n    'writeFloatLE writeFloatBE writeDoubleLE writeDoubleBE'\n).split(' ').forEach(function(method) {\n  if (!Buffer.prototype[method]) {\n    return;\n  }\n  MongooseBuffer.mixin[method] = function() {\n    var ret = Buffer.prototype[method].apply(this, arguments);\n    this._markModified();\n    return ret;\n  };\n});\n\n/**\n * Converts this buffer to its Binary type representation.\n *\n * ####SubTypes:\n *\n *   var bson = require('bson')\n *   bson.BSON_BINARY_SUBTYPE_DEFAULT\n *   bson.BSON_BINARY_SUBTYPE_FUNCTION\n *   bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY\n *   bson.BSON_BINARY_SUBTYPE_UUID\n *   bson.BSON_BINARY_SUBTYPE_MD5\n *   bson.BSON_BINARY_SUBTYPE_USER_DEFINED\n *\n *   doc.buffer.toObject(bson.BSON_BINARY_SUBTYPE_USER_DEFINED);\n *\n * @see http://bsonspec.org/#/specification\n * @param {Hex} [subtype]\n * @return {Binary}\n * @api public\n * @method toObject\n * @receiver MongooseBuffer\n */\n\nMongooseBuffer.mixin.toObject = function(options) {\n  var subtype = typeof options === 'number'\n    ? options\n    : (this._subtype || 0);\n  return new Binary(this, subtype);\n};\n\n/**\n * Converts this buffer for storage in MongoDB, including subtype\n *\n * @return {Binary}\n * @api public\n * @method toBSON\n * @receiver MongooseBuffer\n */\n\nMongooseBuffer.mixin.toBSON = function() {\n  return new Binary(this, this._subtype || 0);\n};\n\n/**\n * Determines if this buffer is equals to `other` buffer\n *\n * @param {Buffer} other\n * @return {Boolean}\n * @method equals\n * @receiver MongooseBuffer\n */\n\nMongooseBuffer.mixin.equals = function(other) {\n  if (!Buffer.isBuffer(other)) {\n    return false;\n  }\n\n  if (this.length !== other.length) {\n    return false;\n  }\n\n  for (var i = 0; i < this.length; ++i) {\n    if (this[i] !== other[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Sets the subtype option and marks the buffer modified.\n *\n * ####SubTypes:\n *\n *   var bson = require('bson')\n *   bson.BSON_BINARY_SUBTYPE_DEFAULT\n *   bson.BSON_BINARY_SUBTYPE_FUNCTION\n *   bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY\n *   bson.BSON_BINARY_SUBTYPE_UUID\n *   bson.BSON_BINARY_SUBTYPE_MD5\n *   bson.BSON_BINARY_SUBTYPE_USER_DEFINED\n *\n *   doc.buffer.subtype(bson.BSON_BINARY_SUBTYPE_UUID);\n *\n * @see http://bsonspec.org/#/specification\n * @param {Hex} subtype\n * @api public\n * @method subtype\n * @receiver MongooseBuffer\n */\n\nMongooseBuffer.mixin.subtype = function(subtype) {\n  if (typeof subtype !== 'number') {\n    throw new TypeError('Invalid subtype. Expected a number');\n  }\n\n  if (this._subtype !== subtype) {\n    this._markModified();\n  }\n\n  this._subtype = subtype;\n};\n\n/*!\n * Module exports.\n */\n\nMongooseBuffer.Binary = Binary;\n\nmodule.exports = MongooseBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/types/buffer.js\n// module id = 139\n// module chunks = 0","'use strict';\n\nvar Document = require('../document');\nvar internalToObjectOptions = require('../options').internalToObjectOptions;\nvar utils = require('../utils');\n\nmodule.exports = Subdocument;\n\n/**\n * Subdocument constructor.\n *\n * @inherits Document\n * @api private\n */\n\nfunction Subdocument(value, fields, parent, skipId, options) {\n  this.$isSingleNested = true;\n  Document.call(this, value, fields, skipId, options);\n}\n\nSubdocument.prototype = Object.create(Document.prototype);\n\nSubdocument.prototype.toBSON = function() {\n  return this.toObject(internalToObjectOptions);\n};\n\n/**\n * Used as a stub for middleware\n *\n * ####NOTE:\n *\n * _This is a no-op. Does not actually save the doc to the db._\n *\n * @param {Function} [fn]\n * @return {Promise} resolved Promise\n * @api private\n */\n\nSubdocument.prototype.save = function(fn) {\n  return utils.promiseOrCallback(fn, cb => {\n    this.$__save(cb);\n  });\n};\n\n/**\n * Used as a stub for middleware\n *\n * ####NOTE:\n *\n * _This is a no-op. Does not actually save the doc to the db._\n *\n * @param {Function} [fn]\n * @method $__save\n * @api private\n */\n\nSubdocument.prototype.$__save = function(fn) {\n  return utils.immediate(() => fn(null, this));\n};\n\nSubdocument.prototype.$isValid = function(path) {\n  if (this.$parent && this.$basePath) {\n    return this.$parent.$isValid([this.$basePath, path].join('.'));\n  }\n  return Document.prototype.$isValid.call(this, path);\n};\n\nSubdocument.prototype.markModified = function(path) {\n  Document.prototype.markModified.call(this, path);\n  if (this.$parent && this.$basePath) {\n    if (this.$parent.isDirectModified(this.$basePath)) {\n      return;\n    }\n    this.$parent.markModified([this.$basePath, path].join('.'), this);\n  }\n};\n\nSubdocument.prototype.$markValid = function(path) {\n  Document.prototype.$markValid.call(this, path);\n  if (this.$parent && this.$basePath) {\n    this.$parent.$markValid([this.$basePath, path].join('.'));\n  }\n};\n\nSubdocument.prototype.invalidate = function(path, err, val) {\n  // Hack: array subdocuments' validationError is equal to the owner doc's,\n  // so validating an array subdoc gives the top-level doc back. Temporary\n  // workaround for #5208 so we don't have circular errors.\n  if (err !== this.ownerDocument().$__.validationError) {\n    Document.prototype.invalidate.call(this, path, err, val);\n  }\n\n  if (this.$parent && this.$basePath) {\n    this.$parent.invalidate([this.$basePath, path].join('.'), err, val);\n  } else if (err.kind === 'cast' || err.name === 'CastError') {\n    throw err;\n  }\n};\n\n/**\n * Returns the top level document of this sub-document.\n *\n * @return {Document}\n */\n\nSubdocument.prototype.ownerDocument = function() {\n  if (this.$__.ownerDocument) {\n    return this.$__.ownerDocument;\n  }\n\n  var parent = this.$parent;\n  if (!parent) {\n    return this;\n  }\n\n  while (parent.$parent || parent.__parent) {\n    parent = parent.$parent || parent.__parent;\n  }\n  this.$__.ownerDocument = parent;\n  return this.$__.ownerDocument;\n};\n\n/**\n * Returns this sub-documents parent document.\n *\n * @api public\n */\n\nSubdocument.prototype.parent = function() {\n  return this.$parent;\n};\n\n/*!\n * no-op for hooks\n */\n\nSubdocument.prototype.$__remove = function(cb) {\n  return cb(null, this);\n};\n\n/**\n * Null-out this subdoc\n *\n * @param {Object} [options]\n * @param {Function} [callback] optional callback for compatibility with Document.prototype.remove\n */\n\nSubdocument.prototype.remove = function(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  registerRemoveListener(this);\n\n  // If removing entire doc, no need to remove subdoc\n  if (!options || !options.noop) {\n    this.$parent.set(this.$basePath, null);\n  }\n\n  if (typeof callback === 'function') {\n    callback(null);\n  }\n};\n\n/*!\n * ignore\n */\n\nSubdocument.prototype.populate = function() {\n  throw new Error('Mongoose does not support calling populate() on nested ' +\n    'docs. Instead of `doc.nested.populate(\"path\")`, use ' +\n    '`doc.populate(\"nested.path\")`');\n};\n\n/*!\n * Registers remove event listeners for triggering\n * on subdocuments.\n *\n * @param {EmbeddedDocument} sub\n * @api private\n */\n\nfunction registerRemoveListener(sub) {\n  var owner = sub.ownerDocument();\n\n  function emitRemove() {\n    owner.removeListener('save', emitRemove);\n    owner.removeListener('remove', emitRemove);\n    sub.emit('remove', sub);\n    sub.constructor.emit('remove', sub);\n    owner = sub = null;\n  }\n\n  owner.on('save', emitRemove);\n  owner.on('remove', emitRemove);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/types/subdocument.js\n// module id = 140\n// module chunks = 0","'use strict';\n\nexports.isNode = 'undefined' != typeof process\n           && 'object' == typeof module\n           && 'object' == typeof global\n           && 'function' == typeof Buffer\n           && process.argv\n\nexports.isMongo = !exports.isNode\n           && 'function' == typeof printjson\n           && 'function' == typeof ObjectId\n           && 'function' == typeof rs\n           && 'function' == typeof sh;\n\nexports.isBrowser = !exports.isNode\n                 && !exports.isMongo\n                 && 'undefined' != typeof window;\n\nexports.type = exports.isNode ? 'node'\n  : exports.isMongo ? 'mongo'\n  : exports.isBrowser ? 'browser'\n  : 'unknown'\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mquery@3.0.0@mquery/lib/env.js\n// module id = 141\n// module chunks = 0","'use strict';\n\n/*!\n * Module dependencies.\n */\n\nvar RegExpClone = require('regexp-clone')\n\n/**\n * Clones objects\n *\n * @param {Object} obj the object to clone\n * @param {Object} options\n * @return {Object} the cloned object\n * @api private\n */\n\nvar clone = exports.clone = function clone (obj, options) {\n  if (obj === undefined || obj === null)\n    return obj;\n\n  if (Array.isArray(obj))\n    return exports.cloneArray(obj, options);\n\n  if (obj.constructor) {\n    if (/ObjectI[dD]$/.test(obj.constructor.name)) {\n      return 'function' == typeof obj.clone\n        ? obj.clone()\n        : new obj.constructor(obj.id);\n    }\n\n    if ('ReadPreference' === obj._type && obj.isValid && obj.toObject) {\n      return 'function' == typeof obj.clone\n        ? obj.clone()\n        : new obj.constructor(obj.mode, clone(obj.tags, options));\n    }\n\n    if ('Binary' == obj._bsontype && obj.buffer && obj.value) {\n      return 'function' == typeof obj.clone\n        ? obj.clone()\n        : new obj.constructor(obj.value(true), obj.sub_type);\n    }\n\n    if ('Date' === obj.constructor.name || 'Function' === obj.constructor.name)\n      return new obj.constructor(+obj);\n\n    if ('RegExp' === obj.constructor.name)\n      return RegExpClone(obj);\n\n    if ('Buffer' === obj.constructor.name)\n      return exports.cloneBuffer(obj);\n  }\n\n  if (isObject(obj))\n    return exports.cloneObject(obj, options);\n\n  if (obj.valueOf)\n    return obj.valueOf();\n};\n\n/*!\n * ignore\n */\n\nvar cloneObject = exports.cloneObject = function cloneObject (obj, options) {\n  var minimize = options && options.minimize;\n  var ret = {};\n  var hasKeys;\n  var keys;\n  var val;\n  var k;\n  var i;\n\n  for (k in obj) {\n    val = clone(obj[k], options);\n\n    if (!minimize || ('undefined' !== typeof val)) {\n      hasKeys || (hasKeys = true);\n      ret[k] = val;\n    }\n  }\n\n  return minimize\n    ? hasKeys && ret\n    : ret;\n};\n\nvar cloneArray = exports.cloneArray = function cloneArray (arr, options) {\n  var ret = [];\n  for (var i = 0, l = arr.length; i < l; i++)\n    ret.push(clone(arr[i], options));\n  return ret;\n};\n\n/**\n * process.nextTick helper.\n *\n * Wraps the given `callback` in a try/catch. If an error is\n * caught it will be thrown on nextTick.\n *\n * node-mongodb-native had a habit of state corruption when\n * an error was immediately thrown from within a collection\n * method (find, update, etc) callback.\n *\n * @param {Function} [callback]\n * @api private\n */\n\nvar tick = exports.tick = function tick (callback) {\n  if ('function' !== typeof callback) return;\n  return function () {\n    // callbacks should always be fired on the next\n    // turn of the event loop. A side benefit is\n    // errors thrown from executing the callback\n    // will not cause drivers state to be corrupted\n    // which has historically been a problem.\n    var args = arguments;\n    soon(function(){\n      callback.apply(this, args);\n    });\n  }\n}\n\n/**\n * Merges `from` into `to` without overwriting existing properties.\n *\n * @param {Object} to\n * @param {Object} from\n * @api private\n */\n\nvar merge = exports.merge = function merge (to, from) {\n  var keys = Object.keys(from)\n    , i = keys.length\n    , key\n\n  while (i--) {\n    key = keys[i];\n    if ('undefined' === typeof to[key]) {\n      to[key] = from[key];\n    } else {\n      if (exports.isObject(from[key])) {\n        merge(to[key], from[key]);\n      } else {\n        to[key] = from[key];\n      }\n    }\n  }\n}\n\n/**\n * Same as merge but clones the assigned values.\n *\n * @param {Object} to\n * @param {Object} from\n * @api private\n */\n\nvar mergeClone = exports.mergeClone = function mergeClone (to, from) {\n  var keys = Object.keys(from)\n    , i = keys.length\n    , key\n\n  while (i--) {\n    key = keys[i];\n    if ('undefined' === typeof to[key]) {\n      to[key] = clone(from[key]);\n    } else {\n      if (exports.isObject(from[key])) {\n        mergeClone(to[key], from[key]);\n      } else {\n        to[key] = clone(from[key]);\n      }\n    }\n  }\n}\n\n/**\n * Read pref helper (mongo 2.2 drivers support this)\n *\n * Allows using aliases instead of full preference names:\n *\n *     p   primary\n *     pp  primaryPreferred\n *     s   secondary\n *     sp  secondaryPreferred\n *     n   nearest\n *\n * @param {String} pref\n */\n\nexports.readPref = function readPref (pref) {\n  switch (pref) {\n    case 'p':\n      pref = 'primary';\n      break;\n    case 'pp':\n      pref = 'primaryPreferred';\n      break;\n    case 's':\n      pref = 'secondary';\n      break;\n    case 'sp':\n      pref = 'secondaryPreferred';\n      break;\n    case 'n':\n      pref = 'nearest';\n      break;\n  }\n\n  return pref;\n}\n\n/**\n * Object.prototype.toString.call helper\n */\n\nvar _toString = Object.prototype.toString;\nvar toString = exports.toString = function (arg) {\n  return _toString.call(arg);\n}\n\n/**\n * Determines if `arg` is an object.\n *\n * @param {Object|Array|String|Function|RegExp|any} arg\n * @return {Boolean}\n */\n\nvar isObject = exports.isObject = function (arg) {\n  return '[object Object]' == exports.toString(arg);\n}\n\n/**\n * Determines if `arg` is an array.\n *\n * @param {Object}\n * @return {Boolean}\n * @see nodejs utils\n */\n\nvar isArray = exports.isArray = function (arg) {\n  return Array.isArray(arg) ||\n    'object' == typeof arg && '[object Array]' == exports.toString(arg);\n}\n\n/**\n * Object.keys helper\n */\n\nexports.keys = Object.keys || function (obj) {\n  var keys = [];\n  for (var k in obj) if (obj.hasOwnProperty(k)) {\n    keys.push(k);\n  }\n  return keys;\n}\n\n/**\n * Basic Object.create polyfill.\n * Only one argument is supported.\n *\n * Based on https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/create\n */\n\nexports.create = 'function' == typeof Object.create\n  ? Object.create\n  : create;\n\nfunction create (proto) {\n  if (arguments.length > 1) {\n    throw new Error(\"Adding properties is not supported\")\n  }\n\n  function F () {}\n  F.prototype = proto;\n  return new F;\n}\n\n/**\n * inheritance\n */\n\nexports.inherits = function (ctor, superCtor) {\n  ctor.prototype = exports.create(superCtor.prototype);\n  ctor.prototype.constructor = ctor;\n}\n\n/**\n * nextTick helper\n * compat with node 0.10 which behaves differently than previous versions\n */\n\nvar soon = exports.soon = 'function' == typeof setImmediate\n  ? setImmediate\n  : process.nextTick;\n\n/**\n * Clones the contents of a buffer.\n *\n * @param {Buffer} buff\n * @return {Buffer}\n */\n\nexports.cloneBuffer = function (buff) {\n  var dupe = new Buffer(buff.length);\n  buff.copy(dupe, 0, 0, buff.length);\n  return dupe;\n};\n\n/**\n * Check if this object is an arguments object\n *\n * @param {Any} v\n * @return {Boolean}\n */\n\nexports.isArgumentsObject = function(v) {\n  return Object.prototype.toString.call(v) === '[object Arguments]';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mquery@3.0.0@mquery/lib/utils.js\n// module id = 142\n// module chunks = 0","\nvar toString = Object.prototype.toString;\n\nfunction isRegExp (o) {\n  return 'object' == typeof o\n      && '[object RegExp]' == toString.call(o);\n}\n\nmodule.exports = exports = function (regexp) {\n  if (!isRegExp(regexp)) {\n    throw new TypeError('Not a RegExp');\n  }\n\n  var flags = [];\n  if (regexp.global) flags.push('g');\n  if (regexp.multiline) flags.push('m');\n  if (regexp.ignoreCase) flags.push('i');\n  return new RegExp(regexp.source, flags.join(''));\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_regexp-clone@0.0.1@regexp-clone/index.js\n// module id = 143\n// module chunks = 0","module.exports = require(\"assert\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"assert\"\n// module id = 144\n// module chunks = 0","module.exports = require(\"async/each\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"async/each\"\n// module id = 145\n// module chunks = 0","module.exports = require(\"async/parallel\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"async/parallel\"\n// module id = 146\n// module chunks = 0","module.exports = require(\"buffer\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"buffer\"\n// module id = 147\n// module chunks = 0","module.exports = require(\"dns\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"dns\"\n// module id = 148\n// module chunks = 0","module.exports = require(\"fs\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"fs\"\n// module id = 149\n// module chunks = 0","module.exports = require(\"os\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"os\"\n// module id = 150\n// module chunks = 0","module.exports = require(\"url\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"url\"\n// module id = 151\n// module chunks = 0","import mongoose from 'mongoose'\nconst Schema = mongoose.Schema;\n\nconst blogSchema = new Schema({\n  title: String,\n  tags: Array,\n  type: String,\n  content: String,\n  isPublic: Boolean,\n  status: Number, // 0 - blog, 1 - draft, 2 - delete\n  storeAt: Date,\n  updateAt: Date,\n})\n\nconst blogModel = mongoose.model('BLOG', blogSchema, 'blogs');\n\nexport default blogModel;\n\n\n// WEBPACK FOOTER //\n// ./apis/models/blog.js","'use strict';\n\nvar Map = require('./map'),\n  Long = require('./long'),\n  Double = require('./double'),\n  Timestamp = require('./timestamp'),\n  ObjectID = require('./objectid'),\n  BSONRegExp = require('./regexp'),\n  Symbol = require('./symbol'),\n  Int32 = require('./int_32'),\n  Code = require('./code'),\n  Decimal128 = require('./decimal128'),\n  MinKey = require('./min_key'),\n  MaxKey = require('./max_key'),\n  DBRef = require('./db_ref'),\n  Binary = require('./binary');\n\n// Parts of the parser\nvar deserialize = require('./parser/deserializer'),\n  serializer = require('./parser/serializer'),\n  calculateObjectSize = require('./parser/calculate_size');\n\n/**\n * @ignore\n * @api private\n */\n// Default Max Size\nvar MAXSIZE = 1024 * 1024 * 17;\n\n// Current Internal Temporary Serialization Buffer\nvar buffer = new Buffer(MAXSIZE);\n\nvar BSON = function() {};\n\n/**\n * Serialize a Javascript object.\n *\n * @param {Object} object the Javascript object to serialize.\n * @param {Boolean} [options.checkKeys] the serializer will check if keys are valid.\n * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.\n * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.\n * @param {Number} [options.minInternalBufferSize=1024*1024*17] minimum size of the internal temporary serialization buffer **(default:1024*1024*17)**.\n * @return {Buffer} returns the Buffer object containing the serialized object.\n * @api public\n */\nBSON.prototype.serialize = function serialize(object, options) {\n  options = options || {};\n  // Unpack the options\n  var checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n  var serializeFunctions =\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  var ignoreUndefined =\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n  var minInternalBufferSize =\n    typeof options.minInternalBufferSize === 'number' ? options.minInternalBufferSize : MAXSIZE;\n  \n  // Resize the internal serialization buffer if needed\n  if (buffer.length < minInternalBufferSize) {\n    buffer = new Buffer(minInternalBufferSize);\n  }\n\n  // Attempt to serialize\n  var serializationIndex = serializer(\n    buffer,\n    object,\n    checkKeys,\n    0,\n    0,\n    serializeFunctions,\n    ignoreUndefined,\n    []\n  );\n  // Create the final buffer\n  var finishedBuffer = new Buffer(serializationIndex);\n  // Copy into the finished buffer\n  buffer.copy(finishedBuffer, 0, 0, finishedBuffer.length);\n  // Return the buffer\n  return finishedBuffer;\n};\n\n/**\n * Serialize a Javascript object using a predefined Buffer and index into the buffer, useful when pre-allocating the space for serialization.\n *\n * @param {Object} object the Javascript object to serialize.\n * @param {Buffer} buffer the Buffer you pre-allocated to store the serialized BSON object.\n * @param {Boolean} [options.checkKeys] the serializer will check if keys are valid.\n * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.\n * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.\n * @param {Number} [options.index] the index in the buffer where we wish to start serializing into.\n * @return {Number} returns the index pointing to the last written byte in the buffer.\n * @api public\n */\nBSON.prototype.serializeWithBufferAndIndex = function(object, finalBuffer, options) {\n  options = options || {};\n  // Unpack the options\n  var checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n  var serializeFunctions =\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  var ignoreUndefined =\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n  var startIndex = typeof options.index === 'number' ? options.index : 0;\n\n  // Attempt to serialize\n  var serializationIndex = serializer(\n    finalBuffer,\n    object,\n    checkKeys,\n    startIndex || 0,\n    0,\n    serializeFunctions,\n    ignoreUndefined\n  );\n\n  // Return the index\n  return serializationIndex - 1;\n};\n\n/**\n * Deserialize data as BSON.\n *\n * @param {Buffer} buffer the buffer containing the serialized set of BSON documents.\n * @param {Object} [options.evalFunctions=false] evaluate functions in the BSON document scoped to the object deserialized.\n * @param {Object} [options.cacheFunctions=false] cache evaluated functions for reuse.\n * @param {Object} [options.cacheFunctionsCrc32=false] use a crc32 code for caching, otherwise use the string of the function.\n * @param {Object} [options.promoteLongs=true] when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n * @param {Object} [options.promoteBuffers=false] when deserializing a Binary will return it as a node.js Buffer instance.\n * @param {Object} [options.promoteValues=false] when deserializing will promote BSON values to their Node.js closest equivalent types.\n * @param {Object} [options.fieldsAsRaw=null] allow to specify if there what fields we wish to return as unserialized raw buffer.\n * @param {Object} [options.bsonRegExp=false] return BSON regular expressions as BSONRegExp instances.\n * @return {Object} returns the deserialized Javascript Object.\n * @api public\n */\nBSON.prototype.deserialize = function(buffer, options) {\n  return deserialize(buffer, options);\n};\n\n/**\n * Calculate the bson size for a passed in Javascript object.\n *\n * @param {Object} object the Javascript object to calculate the BSON byte size for.\n * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.\n * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.\n * @return {Number} returns the number of bytes the BSON object will take up.\n * @api public\n */\nBSON.prototype.calculateObjectSize = function(object, options) {\n  options = options || {};\n\n  var serializeFunctions =\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  var ignoreUndefined =\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n\n  return calculateObjectSize(object, serializeFunctions, ignoreUndefined);\n};\n\n/**\n * Deserialize stream data as BSON documents.\n *\n * @param {Buffer} data the buffer containing the serialized set of BSON documents.\n * @param {Number} startIndex the start index in the data Buffer where the deserialization is to start.\n * @param {Number} numberOfDocuments number of documents to deserialize.\n * @param {Array} documents an array where to store the deserialized documents.\n * @param {Number} docStartIndex the index in the documents array from where to start inserting documents.\n * @param {Object} [options] additional options used for the deserialization.\n * @param {Object} [options.evalFunctions=false] evaluate functions in the BSON document scoped to the object deserialized.\n * @param {Object} [options.cacheFunctions=false] cache evaluated functions for reuse.\n * @param {Object} [options.cacheFunctionsCrc32=false] use a crc32 code for caching, otherwise use the string of the function.\n * @param {Object} [options.promoteLongs=true] when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n * @param {Object} [options.promoteBuffers=false] when deserializing a Binary will return it as a node.js Buffer instance.\n * @param {Object} [options.promoteValues=false] when deserializing will promote BSON values to their Node.js closest equivalent types.\n * @param {Object} [options.fieldsAsRaw=null] allow to specify if there what fields we wish to return as unserialized raw buffer.\n * @param {Object} [options.bsonRegExp=false] return BSON regular expressions as BSONRegExp instances.\n * @return {Number} returns the next index in the buffer after deserialization **x** numbers of documents.\n * @api public\n */\nBSON.prototype.deserializeStream = function(\n  data,\n  startIndex,\n  numberOfDocuments,\n  documents,\n  docStartIndex,\n  options\n) {\n  options = options != null ? options : {};\n  var index = startIndex;\n  // Loop over all documents\n  for (var i = 0; i < numberOfDocuments; i++) {\n    // Find size of the document\n    var size =\n      data[index] | (data[index + 1] << 8) | (data[index + 2] << 16) | (data[index + 3] << 24);\n    // Update options with index\n    options['index'] = index;\n    // Parse the document at this point\n    documents[docStartIndex + i] = this.deserialize(data, options);\n    // Adjust index by the document size\n    index = index + size;\n  }\n\n  // Return object containing end index of parsing and list of documents\n  return index;\n};\n\n/**\n * @ignore\n * @api private\n */\n// BSON MAX VALUES\nBSON.BSON_INT32_MAX = 0x7fffffff;\nBSON.BSON_INT32_MIN = -0x80000000;\n\nBSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;\nBSON.BSON_INT64_MIN = -Math.pow(2, 63);\n\n// JS MAX PRECISE VALUES\nBSON.JS_INT_MAX = 0x20000000000000; // Any integer up to 2^53 can be precisely represented by a double.\nBSON.JS_INT_MIN = -0x20000000000000; // Any integer down to -2^53 can be precisely represented by a double.\n\n// Internal long versions\n// var JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000); // Any integer up to 2^53 can be precisely represented by a double.\n// var JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000); // Any integer down to -2^53 can be precisely represented by a double.\n\n/**\n * Number BSON Type\n *\n * @classconstant BSON_DATA_NUMBER\n **/\nBSON.BSON_DATA_NUMBER = 1;\n/**\n * String BSON Type\n *\n * @classconstant BSON_DATA_STRING\n **/\nBSON.BSON_DATA_STRING = 2;\n/**\n * Object BSON Type\n *\n * @classconstant BSON_DATA_OBJECT\n **/\nBSON.BSON_DATA_OBJECT = 3;\n/**\n * Array BSON Type\n *\n * @classconstant BSON_DATA_ARRAY\n **/\nBSON.BSON_DATA_ARRAY = 4;\n/**\n * Binary BSON Type\n *\n * @classconstant BSON_DATA_BINARY\n **/\nBSON.BSON_DATA_BINARY = 5;\n/**\n * ObjectID BSON Type\n *\n * @classconstant BSON_DATA_OID\n **/\nBSON.BSON_DATA_OID = 7;\n/**\n * Boolean BSON Type\n *\n * @classconstant BSON_DATA_BOOLEAN\n **/\nBSON.BSON_DATA_BOOLEAN = 8;\n/**\n * Date BSON Type\n *\n * @classconstant BSON_DATA_DATE\n **/\nBSON.BSON_DATA_DATE = 9;\n/**\n * null BSON Type\n *\n * @classconstant BSON_DATA_NULL\n **/\nBSON.BSON_DATA_NULL = 10;\n/**\n * RegExp BSON Type\n *\n * @classconstant BSON_DATA_REGEXP\n **/\nBSON.BSON_DATA_REGEXP = 11;\n/**\n * Code BSON Type\n *\n * @classconstant BSON_DATA_CODE\n **/\nBSON.BSON_DATA_CODE = 13;\n/**\n * Symbol BSON Type\n *\n * @classconstant BSON_DATA_SYMBOL\n **/\nBSON.BSON_DATA_SYMBOL = 14;\n/**\n * Code with Scope BSON Type\n *\n * @classconstant BSON_DATA_CODE_W_SCOPE\n **/\nBSON.BSON_DATA_CODE_W_SCOPE = 15;\n/**\n * 32 bit Integer BSON Type\n *\n * @classconstant BSON_DATA_INT\n **/\nBSON.BSON_DATA_INT = 16;\n/**\n * Timestamp BSON Type\n *\n * @classconstant BSON_DATA_TIMESTAMP\n **/\nBSON.BSON_DATA_TIMESTAMP = 17;\n/**\n * Long BSON Type\n *\n * @classconstant BSON_DATA_LONG\n **/\nBSON.BSON_DATA_LONG = 18;\n/**\n * MinKey BSON Type\n *\n * @classconstant BSON_DATA_MIN_KEY\n **/\nBSON.BSON_DATA_MIN_KEY = 0xff;\n/**\n * MaxKey BSON Type\n *\n * @classconstant BSON_DATA_MAX_KEY\n **/\nBSON.BSON_DATA_MAX_KEY = 0x7f;\n\n/**\n * Binary Default Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_DEFAULT\n **/\nBSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;\n/**\n * Binary Function Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_FUNCTION\n **/\nBSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;\n/**\n * Binary Byte Array Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY\n **/\nBSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;\n/**\n * Binary UUID Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_UUID\n **/\nBSON.BSON_BINARY_SUBTYPE_UUID = 3;\n/**\n * Binary MD5 Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_MD5\n **/\nBSON.BSON_BINARY_SUBTYPE_MD5 = 4;\n/**\n * Binary User Defined Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED\n **/\nBSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;\n\n// Return BSON\nmodule.exports = BSON;\nmodule.exports.Code = Code;\nmodule.exports.Map = Map;\nmodule.exports.Symbol = Symbol;\nmodule.exports.BSON = BSON;\nmodule.exports.DBRef = DBRef;\nmodule.exports.Binary = Binary;\nmodule.exports.ObjectID = ObjectID;\nmodule.exports.Long = Long;\nmodule.exports.Timestamp = Timestamp;\nmodule.exports.Double = Double;\nmodule.exports.Int32 = Int32;\nmodule.exports.MinKey = MinKey;\nmodule.exports.MaxKey = MaxKey;\nmodule.exports.BSONRegExp = BSONRegExp;\nmodule.exports.Decimal128 = Decimal128;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_bson@1.0.6@bson/lib/bson/bson.js\n// module id = 153\n// module chunks = 0","// Copyright (c) 2008, Fair Oaks Labs, Inc.\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//  * Redistributions of source code must retain the above copyright notice,\n//    this list of conditions and the following disclaimer.\n//\n//  * Redistributions in binary form must reproduce the above copyright notice,\n//    this list of conditions and the following disclaimer in the documentation\n//    and/or other materials provided with the distribution.\n//\n//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors\n//    may be used to endorse or promote products derived from this software\n//    without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n//\n//\n// Modifications to writeIEEE754 to support negative zeroes made by Brian White\n\nvar readIEEE754 = function(buffer, offset, endian, mLen, nBytes) {\n  var e,\n    m,\n    bBE = endian === 'big',\n    eLen = nBytes * 8 - mLen - 1,\n    eMax = (1 << eLen) - 1,\n    eBias = eMax >> 1,\n    nBits = -7,\n    i = bBE ? 0 : nBytes - 1,\n    d = bBE ? 1 : -1,\n    s = buffer[offset + i];\n\n  i += d;\n\n  e = s & ((1 << -nBits) - 1);\n  s >>= -nBits;\n  nBits += eLen;\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\n\n  m = e & ((1 << -nBits) - 1);\n  e >>= -nBits;\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : (s ? -1 : 1) * Infinity;\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\n\nvar writeIEEE754 = function(buffer, value, offset, endian, mLen, nBytes) {\n  var e,\n    m,\n    c,\n    bBE = endian === 'big',\n    eLen = nBytes * 8 - mLen - 1,\n    eMax = (1 << eLen) - 1,\n    eBias = eMax >> 1,\n    rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0,\n    i = bBE ? nBytes - 1 : 0,\n    d = bBE ? -1 : 1,\n    s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\n\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\n\n  e = (e << mLen) | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\n\n  buffer[offset + i - d] |= s * 128;\n};\n\nexports.readIEEE754 = readIEEE754;\nexports.writeIEEE754 = writeIEEE754;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_bson@1.0.6@bson/lib/bson/float_parser.js\n// module id = 154\n// module chunks = 0","'use strict';\n\nvar Long = require('../long').Long,\n  Double = require('../double').Double,\n  Timestamp = require('../timestamp').Timestamp,\n  ObjectID = require('../objectid').ObjectID,\n  Symbol = require('../symbol').Symbol,\n  BSONRegExp = require('../regexp').BSONRegExp,\n  Code = require('../code').Code,\n  Decimal128 = require('../decimal128'),\n  MinKey = require('../min_key').MinKey,\n  MaxKey = require('../max_key').MaxKey,\n  DBRef = require('../db_ref').DBRef,\n  Binary = require('../binary').Binary;\n\n// To ensure that 0.4 of node works correctly\nvar isDate = function isDate(d) {\n  return typeof d === 'object' && Object.prototype.toString.call(d) === '[object Date]';\n};\n\nvar calculateObjectSize = function calculateObjectSize(\n  object,\n  serializeFunctions,\n  ignoreUndefined\n) {\n  var totalLength = 4 + 1;\n\n  if (Array.isArray(object)) {\n    for (var i = 0; i < object.length; i++) {\n      totalLength += calculateElement(\n        i.toString(),\n        object[i],\n        serializeFunctions,\n        true,\n        ignoreUndefined\n      );\n    }\n  } else {\n    // If we have toBSON defined, override the current object\n    if (object.toBSON) {\n      object = object.toBSON();\n    }\n\n    // Calculate size\n    for (var key in object) {\n      totalLength += calculateElement(key, object[key], serializeFunctions, false, ignoreUndefined);\n    }\n  }\n\n  return totalLength;\n};\n\n/**\n * @ignore\n * @api private\n */\nfunction calculateElement(name, value, serializeFunctions, isArray, ignoreUndefined) {\n  // If we have toBSON defined, override the current object\n  if (value && value.toBSON) {\n    value = value.toBSON();\n  }\n\n  switch (typeof value) {\n    case 'string':\n      return 1 + Buffer.byteLength(name, 'utf8') + 1 + 4 + Buffer.byteLength(value, 'utf8') + 1;\n    case 'number':\n      if (Math.floor(value) === value && value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {\n        if (value >= BSON.BSON_INT32_MIN && value <= BSON.BSON_INT32_MAX) {\n          // 32 bit\n          return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (4 + 1);\n        } else {\n          return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);\n        }\n      } else {\n        // 64 bit\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);\n      }\n    case 'undefined':\n      if (isArray || !ignoreUndefined)\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + 1;\n      return 0;\n    case 'boolean':\n      return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (1 + 1);\n    case 'object':\n      if (\n        value == null ||\n        value instanceof MinKey ||\n        value instanceof MaxKey ||\n        value['_bsontype'] === 'MinKey' ||\n        value['_bsontype'] === 'MaxKey'\n      ) {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + 1;\n      } else if (value instanceof ObjectID || value['_bsontype'] === 'ObjectID') {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (12 + 1);\n      } else if (value instanceof Date || isDate(value)) {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);\n      } else if (typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {\n        return (\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (1 + 4 + 1) + value.length\n        );\n      } else if (\n        value instanceof Long ||\n        value instanceof Double ||\n        value instanceof Timestamp ||\n        value['_bsontype'] === 'Long' ||\n        value['_bsontype'] === 'Double' ||\n        value['_bsontype'] === 'Timestamp'\n      ) {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);\n      } else if (value instanceof Decimal128 || value['_bsontype'] === 'Decimal128') {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (16 + 1);\n      } else if (value instanceof Code || value['_bsontype'] === 'Code') {\n        // Calculate size depending on the availability of a scope\n        if (value.scope != null && Object.keys(value.scope).length > 0) {\n          return (\n            (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n            1 +\n            4 +\n            4 +\n            Buffer.byteLength(value.code.toString(), 'utf8') +\n            1 +\n            calculateObjectSize(value.scope, serializeFunctions, ignoreUndefined)\n          );\n        } else {\n          return (\n            (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n            1 +\n            4 +\n            Buffer.byteLength(value.code.toString(), 'utf8') +\n            1\n          );\n        }\n      } else if (value instanceof Binary || value['_bsontype'] === 'Binary') {\n        // Check what kind of subtype we have\n        if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY) {\n          return (\n            (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n            (value.position + 1 + 4 + 1 + 4)\n          );\n        } else {\n          return (\n            (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (value.position + 1 + 4 + 1)\n          );\n        }\n      } else if (value instanceof Symbol || value['_bsontype'] === 'Symbol') {\n        return (\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n          Buffer.byteLength(value.value, 'utf8') +\n          4 +\n          1 +\n          1\n        );\n      } else if (value instanceof DBRef || value['_bsontype'] === 'DBRef') {\n        // Set up correct object for serialization\n        var ordered_values = {\n          $ref: value.namespace,\n          $id: value.oid\n        };\n\n        // Add db reference if it exists\n        if (null != value.db) {\n          ordered_values['$db'] = value.db;\n        }\n\n        return (\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n          1 +\n          calculateObjectSize(ordered_values, serializeFunctions, ignoreUndefined)\n        );\n      } else if (\n        value instanceof RegExp ||\n        Object.prototype.toString.call(value) === '[object RegExp]'\n      ) {\n        return (\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n          1 +\n          Buffer.byteLength(value.source, 'utf8') +\n          1 +\n          (value.global ? 1 : 0) +\n          (value.ignoreCase ? 1 : 0) +\n          (value.multiline ? 1 : 0) +\n          1\n        );\n      } else if (value instanceof BSONRegExp || value['_bsontype'] === 'BSONRegExp') {\n        return (\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n          1 +\n          Buffer.byteLength(value.pattern, 'utf8') +\n          1 +\n          Buffer.byteLength(value.options, 'utf8') +\n          1\n        );\n      } else {\n        return (\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n          calculateObjectSize(value, serializeFunctions, ignoreUndefined) +\n          1\n        );\n      }\n    case 'function':\n      // WTF for 0.4.X where typeof /someregexp/ === 'function'\n      if (\n        value instanceof RegExp ||\n        Object.prototype.toString.call(value) === '[object RegExp]' ||\n        String.call(value) === '[object RegExp]'\n      ) {\n        return (\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n          1 +\n          Buffer.byteLength(value.source, 'utf8') +\n          1 +\n          (value.global ? 1 : 0) +\n          (value.ignoreCase ? 1 : 0) +\n          (value.multiline ? 1 : 0) +\n          1\n        );\n      } else {\n        if (serializeFunctions && value.scope != null && Object.keys(value.scope).length > 0) {\n          return (\n            (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n            1 +\n            4 +\n            4 +\n            Buffer.byteLength(value.toString(), 'utf8') +\n            1 +\n            calculateObjectSize(value.scope, serializeFunctions, ignoreUndefined)\n          );\n        } else if (serializeFunctions) {\n          return (\n            (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\n            1 +\n            4 +\n            Buffer.byteLength(value.toString(), 'utf8') +\n            1\n          );\n        }\n      }\n  }\n\n  return 0;\n}\n\nvar BSON = {};\n\n// BSON MAX VALUES\nBSON.BSON_INT32_MAX = 0x7fffffff;\nBSON.BSON_INT32_MIN = -0x80000000;\n\n// JS MAX PRECISE VALUES\nBSON.JS_INT_MAX = 0x20000000000000; // Any integer up to 2^53 can be precisely represented by a double.\nBSON.JS_INT_MIN = -0x20000000000000; // Any integer down to -2^53 can be precisely represented by a double.\n\nmodule.exports = calculateObjectSize;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_bson@1.0.6@bson/lib/bson/parser/calculate_size.js\n// module id = 155\n// module chunks = 0","'use strict';\n\nvar Long = require('../long').Long,\n  Double = require('../double').Double,\n  Timestamp = require('../timestamp').Timestamp,\n  ObjectID = require('../objectid').ObjectID,\n  Symbol = require('../symbol').Symbol,\n  Code = require('../code').Code,\n  MinKey = require('../min_key').MinKey,\n  MaxKey = require('../max_key').MaxKey,\n  Decimal128 = require('../decimal128'),\n  Int32 = require('../int_32'),\n  DBRef = require('../db_ref').DBRef,\n  BSONRegExp = require('../regexp').BSONRegExp,\n  Binary = require('../binary').Binary;\n\nvar deserialize = function(buffer, options, isArray) {\n  options = options == null ? {} : options;\n  var index = options && options.index ? options.index : 0;\n  // Read the document size\n  var size =\n    buffer[index] |\n    (buffer[index + 1] << 8) |\n    (buffer[index + 2] << 16) |\n    (buffer[index + 3] << 24);\n\n  // Ensure buffer is valid size\n  if (size < 5 || buffer.length < size || size + index > buffer.length) {\n    throw new Error('corrupt bson message');\n  }\n\n  // Illegal end value\n  if (buffer[index + size - 1] !== 0) {\n    throw new Error(\"One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00\");\n  }\n\n  // Start deserializtion\n  return deserializeObject(buffer, index, options, isArray);\n};\n\nvar deserializeObject = function(buffer, index, options, isArray) {\n  var evalFunctions = options['evalFunctions'] == null ? false : options['evalFunctions'];\n  var cacheFunctions = options['cacheFunctions'] == null ? false : options['cacheFunctions'];\n  var cacheFunctionsCrc32 =\n    options['cacheFunctionsCrc32'] == null ? false : options['cacheFunctionsCrc32'];\n\n  if (!cacheFunctionsCrc32) var crc32 = null;\n\n  var fieldsAsRaw = options['fieldsAsRaw'] == null ? null : options['fieldsAsRaw'];\n\n  // Return raw bson buffer instead of parsing it\n  var raw = options['raw'] == null ? false : options['raw'];\n\n  // Return BSONRegExp objects instead of native regular expressions\n  var bsonRegExp = typeof options['bsonRegExp'] === 'boolean' ? options['bsonRegExp'] : false;\n\n  // Controls the promotion of values vs wrapper classes\n  var promoteBuffers = options['promoteBuffers'] == null ? false : options['promoteBuffers'];\n  var promoteLongs = options['promoteLongs'] == null ? true : options['promoteLongs'];\n  var promoteValues = options['promoteValues'] == null ? true : options['promoteValues'];\n\n  // Set the start index\n  var startIndex = index;\n\n  // Validate that we have at least 4 bytes of buffer\n  if (buffer.length < 5) throw new Error('corrupt bson message < 5 bytes long');\n\n  // Read the document size\n  var size =\n    buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n\n  // Ensure buffer is valid size\n  if (size < 5 || size > buffer.length) throw new Error('corrupt bson message');\n\n  // Create holding object\n  var object = isArray ? [] : {};\n  // Used for arrays to skip having to perform utf8 decoding\n  var arrayIndex = 0;\n\n  var done = false;\n\n  // While we have more left data left keep parsing\n  // while (buffer[index + 1] !== 0) {\n  while (!done) {\n    // Read the type\n    var elementType = buffer[index++];\n    // If we get a zero it's the last byte, exit\n    if (elementType === 0) break;\n\n    // Get the start search index\n    var i = index;\n    // Locate the end of the c string\n    while (buffer[i] !== 0x00 && i < buffer.length) {\n      i++;\n    }\n\n    // If are at the end of the buffer there is a problem with the document\n    if (i >= buffer.length) throw new Error('Bad BSON Document: illegal CString');\n    var name = isArray ? arrayIndex++ : buffer.toString('utf8', index, i);\n\n    index = i + 1;\n\n    if (elementType === BSON.BSON_DATA_STRING) {\n      var stringSize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      if (\n        stringSize <= 0 ||\n        stringSize > buffer.length - index ||\n        buffer[index + stringSize - 1] !== 0\n      )\n        throw new Error('bad string length in bson');\n      object[name] = buffer.toString('utf8', index, index + stringSize - 1);\n      index = index + stringSize;\n    } else if (elementType === BSON.BSON_DATA_OID) {\n      var oid = new Buffer(12);\n      buffer.copy(oid, 0, index, index + 12);\n      object[name] = new ObjectID(oid);\n      index = index + 12;\n    } else if (elementType === BSON.BSON_DATA_INT && promoteValues === false) {\n      object[name] = new Int32(\n        buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24)\n      );\n    } else if (elementType === BSON.BSON_DATA_INT) {\n      object[name] =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n    } else if (elementType === BSON.BSON_DATA_NUMBER && promoteValues === false) {\n      object[name] = new Double(buffer.readDoubleLE(index));\n      index = index + 8;\n    } else if (elementType === BSON.BSON_DATA_NUMBER) {\n      object[name] = buffer.readDoubleLE(index);\n      index = index + 8;\n    } else if (elementType === BSON.BSON_DATA_DATE) {\n      var lowBits =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      var highBits =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      object[name] = new Date(new Long(lowBits, highBits).toNumber());\n    } else if (elementType === BSON.BSON_DATA_BOOLEAN) {\n      if (buffer[index] !== 0 && buffer[index] !== 1) throw new Error('illegal boolean type value');\n      object[name] = buffer[index++] === 1;\n    } else if (elementType === BSON.BSON_DATA_OBJECT) {\n      var _index = index;\n      var objectSize =\n        buffer[index] |\n        (buffer[index + 1] << 8) |\n        (buffer[index + 2] << 16) |\n        (buffer[index + 3] << 24);\n      if (objectSize <= 0 || objectSize > buffer.length - index)\n        throw new Error('bad embedded document length in bson');\n\n      // We have a raw value\n      if (raw) {\n        object[name] = buffer.slice(index, index + objectSize);\n      } else {\n        object[name] = deserializeObject(buffer, _index, options, false);\n      }\n\n      index = index + objectSize;\n    } else if (elementType === BSON.BSON_DATA_ARRAY) {\n      _index = index;\n      objectSize =\n        buffer[index] |\n        (buffer[index + 1] << 8) |\n        (buffer[index + 2] << 16) |\n        (buffer[index + 3] << 24);\n      var arrayOptions = options;\n\n      // Stop index\n      var stopIndex = index + objectSize;\n\n      // All elements of array to be returned as raw bson\n      if (fieldsAsRaw && fieldsAsRaw[name]) {\n        arrayOptions = {};\n        for (var n in options) arrayOptions[n] = options[n];\n        arrayOptions['raw'] = true;\n      }\n\n      object[name] = deserializeObject(buffer, _index, arrayOptions, true);\n      index = index + objectSize;\n\n      if (buffer[index - 1] !== 0) throw new Error('invalid array terminator byte');\n      if (index !== stopIndex) throw new Error('corrupted array bson');\n    } else if (elementType === BSON.BSON_DATA_UNDEFINED) {\n      object[name] = undefined;\n    } else if (elementType === BSON.BSON_DATA_NULL) {\n      object[name] = null;\n    } else if (elementType === BSON.BSON_DATA_LONG) {\n      // Unpack the low and high bits\n      lowBits =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      highBits =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      var long = new Long(lowBits, highBits);\n      // Promote the long if possible\n      if (promoteLongs && promoteValues === true) {\n        object[name] =\n          long.lessThanOrEqual(JS_INT_MAX_LONG) && long.greaterThanOrEqual(JS_INT_MIN_LONG)\n            ? long.toNumber()\n            : long;\n      } else {\n        object[name] = long;\n      }\n    } else if (elementType === BSON.BSON_DATA_DECIMAL128) {\n      // Buffer to contain the decimal bytes\n      var bytes = new Buffer(16);\n      // Copy the next 16 bytes into the bytes buffer\n      buffer.copy(bytes, 0, index, index + 16);\n      // Update index\n      index = index + 16;\n      // Assign the new Decimal128 value\n      var decimal128 = new Decimal128(bytes);\n      // If we have an alternative mapper use that\n      object[name] = decimal128.toObject ? decimal128.toObject() : decimal128;\n    } else if (elementType === BSON.BSON_DATA_BINARY) {\n      var binarySize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      var totalBinarySize = binarySize;\n      var subType = buffer[index++];\n\n      // Did we have a negative binary size, throw\n      if (binarySize < 0) throw new Error('Negative binary type element size found');\n\n      // Is the length longer than the document\n      if (binarySize > buffer.length) throw new Error('Binary type size larger than document size');\n\n      // Decode as raw Buffer object if options specifies it\n      if (buffer['slice'] != null) {\n        // If we have subtype 2 skip the 4 bytes for the size\n        if (subType === Binary.SUBTYPE_BYTE_ARRAY) {\n          binarySize =\n            buffer[index++] |\n            (buffer[index++] << 8) |\n            (buffer[index++] << 16) |\n            (buffer[index++] << 24);\n          if (binarySize < 0)\n            throw new Error('Negative binary type element size found for subtype 0x02');\n          if (binarySize > totalBinarySize - 4)\n            throw new Error('Binary type with subtype 0x02 contains to long binary size');\n          if (binarySize < totalBinarySize - 4)\n            throw new Error('Binary type with subtype 0x02 contains to short binary size');\n        }\n\n        if (promoteBuffers && promoteValues) {\n          object[name] = buffer.slice(index, index + binarySize);\n        } else {\n          object[name] = new Binary(buffer.slice(index, index + binarySize), subType);\n        }\n      } else {\n        var _buffer =\n          typeof Uint8Array !== 'undefined'\n            ? new Uint8Array(new ArrayBuffer(binarySize))\n            : new Array(binarySize);\n        // If we have subtype 2 skip the 4 bytes for the size\n        if (subType === Binary.SUBTYPE_BYTE_ARRAY) {\n          binarySize =\n            buffer[index++] |\n            (buffer[index++] << 8) |\n            (buffer[index++] << 16) |\n            (buffer[index++] << 24);\n          if (binarySize < 0)\n            throw new Error('Negative binary type element size found for subtype 0x02');\n          if (binarySize > totalBinarySize - 4)\n            throw new Error('Binary type with subtype 0x02 contains to long binary size');\n          if (binarySize < totalBinarySize - 4)\n            throw new Error('Binary type with subtype 0x02 contains to short binary size');\n        }\n\n        // Copy the data\n        for (i = 0; i < binarySize; i++) {\n          _buffer[i] = buffer[index + i];\n        }\n\n        if (promoteBuffers && promoteValues) {\n          object[name] = _buffer;\n        } else {\n          object[name] = new Binary(_buffer, subType);\n        }\n      }\n\n      // Update the index\n      index = index + binarySize;\n    } else if (elementType === BSON.BSON_DATA_REGEXP && bsonRegExp === false) {\n      // Get the start search index\n      i = index;\n      // Locate the end of the c string\n      while (buffer[i] !== 0x00 && i < buffer.length) {\n        i++;\n      }\n      // If are at the end of the buffer there is a problem with the document\n      if (i >= buffer.length) throw new Error('Bad BSON Document: illegal CString');\n      // Return the C string\n      var source = buffer.toString('utf8', index, i);\n      // Create the regexp\n      index = i + 1;\n\n      // Get the start search index\n      i = index;\n      // Locate the end of the c string\n      while (buffer[i] !== 0x00 && i < buffer.length) {\n        i++;\n      }\n      // If are at the end of the buffer there is a problem with the document\n      if (i >= buffer.length) throw new Error('Bad BSON Document: illegal CString');\n      // Return the C string\n      var regExpOptions = buffer.toString('utf8', index, i);\n      index = i + 1;\n\n      // For each option add the corresponding one for javascript\n      var optionsArray = new Array(regExpOptions.length);\n\n      // Parse options\n      for (i = 0; i < regExpOptions.length; i++) {\n        switch (regExpOptions[i]) {\n          case 'm':\n            optionsArray[i] = 'm';\n            break;\n          case 's':\n            optionsArray[i] = 'g';\n            break;\n          case 'i':\n            optionsArray[i] = 'i';\n            break;\n        }\n      }\n\n      object[name] = new RegExp(source, optionsArray.join(''));\n    } else if (elementType === BSON.BSON_DATA_REGEXP && bsonRegExp === true) {\n      // Get the start search index\n      i = index;\n      // Locate the end of the c string\n      while (buffer[i] !== 0x00 && i < buffer.length) {\n        i++;\n      }\n      // If are at the end of the buffer there is a problem with the document\n      if (i >= buffer.length) throw new Error('Bad BSON Document: illegal CString');\n      // Return the C string\n      source = buffer.toString('utf8', index, i);\n      index = i + 1;\n\n      // Get the start search index\n      i = index;\n      // Locate the end of the c string\n      while (buffer[i] !== 0x00 && i < buffer.length) {\n        i++;\n      }\n      // If are at the end of the buffer there is a problem with the document\n      if (i >= buffer.length) throw new Error('Bad BSON Document: illegal CString');\n      // Return the C string\n      regExpOptions = buffer.toString('utf8', index, i);\n      index = i + 1;\n\n      // Set the object\n      object[name] = new BSONRegExp(source, regExpOptions);\n    } else if (elementType === BSON.BSON_DATA_SYMBOL) {\n      stringSize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      if (\n        stringSize <= 0 ||\n        stringSize > buffer.length - index ||\n        buffer[index + stringSize - 1] !== 0\n      )\n        throw new Error('bad string length in bson');\n      object[name] = new Symbol(buffer.toString('utf8', index, index + stringSize - 1));\n      index = index + stringSize;\n    } else if (elementType === BSON.BSON_DATA_TIMESTAMP) {\n      lowBits =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      highBits =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      object[name] = new Timestamp(lowBits, highBits);\n    } else if (elementType === BSON.BSON_DATA_MIN_KEY) {\n      object[name] = new MinKey();\n    } else if (elementType === BSON.BSON_DATA_MAX_KEY) {\n      object[name] = new MaxKey();\n    } else if (elementType === BSON.BSON_DATA_CODE) {\n      stringSize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      if (\n        stringSize <= 0 ||\n        stringSize > buffer.length - index ||\n        buffer[index + stringSize - 1] !== 0\n      )\n        throw new Error('bad string length in bson');\n      var functionString = buffer.toString('utf8', index, index + stringSize - 1);\n\n      // If we are evaluating the functions\n      if (evalFunctions) {\n        // If we have cache enabled let's look for the md5 of the function in the cache\n        if (cacheFunctions) {\n          var hash = cacheFunctionsCrc32 ? crc32(functionString) : functionString;\n          // Got to do this to avoid V8 deoptimizing the call due to finding eval\n          object[name] = isolateEvalWithHash(functionCache, hash, functionString, object);\n        } else {\n          object[name] = isolateEval(functionString);\n        }\n      } else {\n        object[name] = new Code(functionString);\n      }\n\n      // Update parse index position\n      index = index + stringSize;\n    } else if (elementType === BSON.BSON_DATA_CODE_W_SCOPE) {\n      var totalSize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n\n      // Element cannot be shorter than totalSize + stringSize + documentSize + terminator\n      if (totalSize < 4 + 4 + 4 + 1) {\n        throw new Error('code_w_scope total size shorter minimum expected length');\n      }\n\n      // Get the code string size\n      stringSize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      // Check if we have a valid string\n      if (\n        stringSize <= 0 ||\n        stringSize > buffer.length - index ||\n        buffer[index + stringSize - 1] !== 0\n      )\n        throw new Error('bad string length in bson');\n\n      // Javascript function\n      functionString = buffer.toString('utf8', index, index + stringSize - 1);\n      // Update parse index position\n      index = index + stringSize;\n      // Parse the element\n      _index = index;\n      // Decode the size of the object document\n      objectSize =\n        buffer[index] |\n        (buffer[index + 1] << 8) |\n        (buffer[index + 2] << 16) |\n        (buffer[index + 3] << 24);\n      // Decode the scope object\n      var scopeObject = deserializeObject(buffer, _index, options, false);\n      // Adjust the index\n      index = index + objectSize;\n\n      // Check if field length is to short\n      if (totalSize < 4 + 4 + objectSize + stringSize) {\n        throw new Error('code_w_scope total size is to short, truncating scope');\n      }\n\n      // Check if totalSize field is to long\n      if (totalSize > 4 + 4 + objectSize + stringSize) {\n        throw new Error('code_w_scope total size is to long, clips outer document');\n      }\n\n      // If we are evaluating the functions\n      if (evalFunctions) {\n        // If we have cache enabled let's look for the md5 of the function in the cache\n        if (cacheFunctions) {\n          hash = cacheFunctionsCrc32 ? crc32(functionString) : functionString;\n          // Got to do this to avoid V8 deoptimizing the call due to finding eval\n          object[name] = isolateEvalWithHash(functionCache, hash, functionString, object);\n        } else {\n          object[name] = isolateEval(functionString);\n        }\n\n        object[name].scope = scopeObject;\n      } else {\n        object[name] = new Code(functionString, scopeObject);\n      }\n    } else if (elementType === BSON.BSON_DATA_DBPOINTER) {\n      // Get the code string size\n      stringSize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      // Check if we have a valid string\n      if (\n        stringSize <= 0 ||\n        stringSize > buffer.length - index ||\n        buffer[index + stringSize - 1] !== 0\n      )\n        throw new Error('bad string length in bson');\n      // Namespace\n      var namespace = buffer.toString('utf8', index, index + stringSize - 1);\n      // Update parse index position\n      index = index + stringSize;\n\n      // Read the oid\n      var oidBuffer = new Buffer(12);\n      buffer.copy(oidBuffer, 0, index, index + 12);\n      oid = new ObjectID(oidBuffer);\n\n      // Update the index\n      index = index + 12;\n\n      // Split the namespace\n      var parts = namespace.split('.');\n      var db = parts.shift();\n      var collection = parts.join('.');\n      // Upgrade to DBRef type\n      object[name] = new DBRef(collection, oid, db);\n    } else {\n      throw new Error(\n        'Detected unknown BSON type ' +\n          elementType.toString(16) +\n          ' for fieldname \"' +\n          name +\n          '\", are you using the latest BSON parser'\n      );\n    }\n  }\n\n  // Check if the deserialization was against a valid array/object\n  if (size !== index - startIndex) {\n    if (isArray) throw new Error('corrupt array bson');\n    throw new Error('corrupt object bson');\n  }\n\n  // Check if we have a db ref object\n  if (object['$id'] != null) object = new DBRef(object['$ref'], object['$id'], object['$db']);\n  return object;\n};\n\n/**\n * Ensure eval is isolated.\n *\n * @ignore\n * @api private\n */\nvar isolateEvalWithHash = function(functionCache, hash, functionString, object) {\n  // Contains the value we are going to set\n  var value = null;\n\n  // Check for cache hit, eval if missing and return cached function\n  if (functionCache[hash] == null) {\n    eval('value = ' + functionString);\n    functionCache[hash] = value;\n  }\n  // Set the object\n  return functionCache[hash].bind(object);\n};\n\n/**\n * Ensure eval is isolated.\n *\n * @ignore\n * @api private\n */\nvar isolateEval = function(functionString) {\n  // Contains the value we are going to set\n  var value = null;\n  // Eval the function\n  eval('value = ' + functionString);\n  return value;\n};\n\nvar BSON = {};\n\n/**\n * Contains the function cache if we have that enable to allow for avoiding the eval step on each deserialization, comparison is by md5\n *\n * @ignore\n * @api private\n */\nvar functionCache = (BSON.functionCache = {});\n\n/**\n * Number BSON Type\n *\n * @classconstant BSON_DATA_NUMBER\n **/\nBSON.BSON_DATA_NUMBER = 1;\n/**\n * String BSON Type\n *\n * @classconstant BSON_DATA_STRING\n **/\nBSON.BSON_DATA_STRING = 2;\n/**\n * Object BSON Type\n *\n * @classconstant BSON_DATA_OBJECT\n **/\nBSON.BSON_DATA_OBJECT = 3;\n/**\n * Array BSON Type\n *\n * @classconstant BSON_DATA_ARRAY\n **/\nBSON.BSON_DATA_ARRAY = 4;\n/**\n * Binary BSON Type\n *\n * @classconstant BSON_DATA_BINARY\n **/\nBSON.BSON_DATA_BINARY = 5;\n/**\n * Binary BSON Type\n *\n * @classconstant BSON_DATA_UNDEFINED\n **/\nBSON.BSON_DATA_UNDEFINED = 6;\n/**\n * ObjectID BSON Type\n *\n * @classconstant BSON_DATA_OID\n **/\nBSON.BSON_DATA_OID = 7;\n/**\n * Boolean BSON Type\n *\n * @classconstant BSON_DATA_BOOLEAN\n **/\nBSON.BSON_DATA_BOOLEAN = 8;\n/**\n * Date BSON Type\n *\n * @classconstant BSON_DATA_DATE\n **/\nBSON.BSON_DATA_DATE = 9;\n/**\n * null BSON Type\n *\n * @classconstant BSON_DATA_NULL\n **/\nBSON.BSON_DATA_NULL = 10;\n/**\n * RegExp BSON Type\n *\n * @classconstant BSON_DATA_REGEXP\n **/\nBSON.BSON_DATA_REGEXP = 11;\n/**\n * Code BSON Type\n *\n * @classconstant BSON_DATA_DBPOINTER\n **/\nBSON.BSON_DATA_DBPOINTER = 12;\n/**\n * Code BSON Type\n *\n * @classconstant BSON_DATA_CODE\n **/\nBSON.BSON_DATA_CODE = 13;\n/**\n * Symbol BSON Type\n *\n * @classconstant BSON_DATA_SYMBOL\n **/\nBSON.BSON_DATA_SYMBOL = 14;\n/**\n * Code with Scope BSON Type\n *\n * @classconstant BSON_DATA_CODE_W_SCOPE\n **/\nBSON.BSON_DATA_CODE_W_SCOPE = 15;\n/**\n * 32 bit Integer BSON Type\n *\n * @classconstant BSON_DATA_INT\n **/\nBSON.BSON_DATA_INT = 16;\n/**\n * Timestamp BSON Type\n *\n * @classconstant BSON_DATA_TIMESTAMP\n **/\nBSON.BSON_DATA_TIMESTAMP = 17;\n/**\n * Long BSON Type\n *\n * @classconstant BSON_DATA_LONG\n **/\nBSON.BSON_DATA_LONG = 18;\n/**\n * Long BSON Type\n *\n * @classconstant BSON_DATA_DECIMAL128\n **/\nBSON.BSON_DATA_DECIMAL128 = 19;\n/**\n * MinKey BSON Type\n *\n * @classconstant BSON_DATA_MIN_KEY\n **/\nBSON.BSON_DATA_MIN_KEY = 0xff;\n/**\n * MaxKey BSON Type\n *\n * @classconstant BSON_DATA_MAX_KEY\n **/\nBSON.BSON_DATA_MAX_KEY = 0x7f;\n\n/**\n * Binary Default Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_DEFAULT\n **/\nBSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;\n/**\n * Binary Function Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_FUNCTION\n **/\nBSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;\n/**\n * Binary Byte Array Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY\n **/\nBSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;\n/**\n * Binary UUID Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_UUID\n **/\nBSON.BSON_BINARY_SUBTYPE_UUID = 3;\n/**\n * Binary MD5 Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_MD5\n **/\nBSON.BSON_BINARY_SUBTYPE_MD5 = 4;\n/**\n * Binary User Defined Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED\n **/\nBSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;\n\n// BSON MAX VALUES\nBSON.BSON_INT32_MAX = 0x7fffffff;\nBSON.BSON_INT32_MIN = -0x80000000;\n\nBSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;\nBSON.BSON_INT64_MIN = -Math.pow(2, 63);\n\n// JS MAX PRECISE VALUES\nBSON.JS_INT_MAX = 0x20000000000000; // Any integer up to 2^53 can be precisely represented by a double.\nBSON.JS_INT_MIN = -0x20000000000000; // Any integer down to -2^53 can be precisely represented by a double.\n\n// Internal long versions\nvar JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000); // Any integer up to 2^53 can be precisely represented by a double.\nvar JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000); // Any integer down to -2^53 can be precisely represented by a double.\n\nmodule.exports = deserialize;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_bson@1.0.6@bson/lib/bson/parser/deserializer.js\n// module id = 156\n// module chunks = 0","'use strict';\n\nvar writeIEEE754 = require('../float_parser').writeIEEE754,\n  Long = require('../long').Long,\n  MinKey = require('../min_key').MinKey,\n  Map = require('../map'),\n  Binary = require('../binary').Binary;\n\n// try {\n//   var _Buffer = Uint8Array;\n// } catch (e) {\n//   _Buffer = Buffer;\n// }\n\nvar regexp = /\\x00/; // eslint-disable-line no-control-regex\n\n// To ensure that 0.4 of node works correctly\nvar isDate = function isDate(d) {\n  return typeof d === 'object' && Object.prototype.toString.call(d) === '[object Date]';\n};\n\nvar isRegExp = function isRegExp(d) {\n  return Object.prototype.toString.call(d) === '[object RegExp]';\n};\n\nvar serializeString = function(buffer, key, value, index, isArray) {\n  // Encode String type\n  buffer[index++] = BSON.BSON_DATA_STRING;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes + 1;\n  buffer[index - 1] = 0;\n  // Write the string\n  var size = buffer.write(value, index + 4, 'utf8');\n  // Write the size of the string to buffer\n  buffer[index + 3] = ((size + 1) >> 24) & 0xff;\n  buffer[index + 2] = ((size + 1) >> 16) & 0xff;\n  buffer[index + 1] = ((size + 1) >> 8) & 0xff;\n  buffer[index] = (size + 1) & 0xff;\n  // Update index\n  index = index + 4 + size;\n  // Write zero\n  buffer[index++] = 0;\n  return index;\n};\n\nvar serializeNumber = function(buffer, key, value, index, isArray) {\n  // We have an integer value\n  if (Math.floor(value) === value && value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {\n    // If the value fits in 32 bits encode as int, if it fits in a double\n    // encode it as a double, otherwise long\n    if (value >= BSON.BSON_INT32_MIN && value <= BSON.BSON_INT32_MAX) {\n      // Set int type 32 bits or less\n      buffer[index++] = BSON.BSON_DATA_INT;\n      // Number of written bytes\n      var numberOfWrittenBytes = !isArray\n        ? buffer.write(key, index, 'utf8')\n        : buffer.write(key, index, 'ascii');\n      // Encode the name\n      index = index + numberOfWrittenBytes;\n      buffer[index++] = 0;\n      // Write the int value\n      buffer[index++] = value & 0xff;\n      buffer[index++] = (value >> 8) & 0xff;\n      buffer[index++] = (value >> 16) & 0xff;\n      buffer[index++] = (value >> 24) & 0xff;\n    } else if (value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {\n      // Encode as double\n      buffer[index++] = BSON.BSON_DATA_NUMBER;\n      // Number of written bytes\n      numberOfWrittenBytes = !isArray\n        ? buffer.write(key, index, 'utf8')\n        : buffer.write(key, index, 'ascii');\n      // Encode the name\n      index = index + numberOfWrittenBytes;\n      buffer[index++] = 0;\n      // Write float\n      writeIEEE754(buffer, value, index, 'little', 52, 8);\n      // Ajust index\n      index = index + 8;\n    } else {\n      // Set long type\n      buffer[index++] = BSON.BSON_DATA_LONG;\n      // Number of written bytes\n      numberOfWrittenBytes = !isArray\n        ? buffer.write(key, index, 'utf8')\n        : buffer.write(key, index, 'ascii');\n      // Encode the name\n      index = index + numberOfWrittenBytes;\n      buffer[index++] = 0;\n      var longVal = Long.fromNumber(value);\n      var lowBits = longVal.getLowBits();\n      var highBits = longVal.getHighBits();\n      // Encode low bits\n      buffer[index++] = lowBits & 0xff;\n      buffer[index++] = (lowBits >> 8) & 0xff;\n      buffer[index++] = (lowBits >> 16) & 0xff;\n      buffer[index++] = (lowBits >> 24) & 0xff;\n      // Encode high bits\n      buffer[index++] = highBits & 0xff;\n      buffer[index++] = (highBits >> 8) & 0xff;\n      buffer[index++] = (highBits >> 16) & 0xff;\n      buffer[index++] = (highBits >> 24) & 0xff;\n    }\n  } else {\n    // Encode as double\n    buffer[index++] = BSON.BSON_DATA_NUMBER;\n    // Number of written bytes\n    numberOfWrittenBytes = !isArray\n      ? buffer.write(key, index, 'utf8')\n      : buffer.write(key, index, 'ascii');\n    // Encode the name\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    // Write float\n    writeIEEE754(buffer, value, index, 'little', 52, 8);\n    // Ajust index\n    index = index + 8;\n  }\n\n  return index;\n};\n\nvar serializeNull = function(buffer, key, value, index, isArray) {\n  // Set long type\n  buffer[index++] = BSON.BSON_DATA_NULL;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  return index;\n};\n\nvar serializeBoolean = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_BOOLEAN;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Encode the boolean value\n  buffer[index++] = value ? 1 : 0;\n  return index;\n};\n\nvar serializeDate = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_DATE;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  // Write the date\n  var dateInMilis = Long.fromNumber(value.getTime());\n  var lowBits = dateInMilis.getLowBits();\n  var highBits = dateInMilis.getHighBits();\n  // Encode low bits\n  buffer[index++] = lowBits & 0xff;\n  buffer[index++] = (lowBits >> 8) & 0xff;\n  buffer[index++] = (lowBits >> 16) & 0xff;\n  buffer[index++] = (lowBits >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = highBits & 0xff;\n  buffer[index++] = (highBits >> 8) & 0xff;\n  buffer[index++] = (highBits >> 16) & 0xff;\n  buffer[index++] = (highBits >> 24) & 0xff;\n  return index;\n};\n\nvar serializeRegExp = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_REGEXP;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  if (value.source && value.source.match(regexp) != null) {\n    throw Error('value ' + value.source + ' must not contain null bytes');\n  }\n  // Adjust the index\n  index = index + buffer.write(value.source, index, 'utf8');\n  // Write zero\n  buffer[index++] = 0x00;\n  // Write the parameters\n  if (value.global) buffer[index++] = 0x73; // s\n  if (value.ignoreCase) buffer[index++] = 0x69; // i\n  if (value.multiline) buffer[index++] = 0x6d; // m\n  // Add ending zero\n  buffer[index++] = 0x00;\n  return index;\n};\n\nvar serializeBSONRegExp = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_REGEXP;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  // Check the pattern for 0 bytes\n  if (value.pattern.match(regexp) != null) {\n    // The BSON spec doesn't allow keys with null bytes because keys are\n    // null-terminated.\n    throw Error('pattern ' + value.pattern + ' must not contain null bytes');\n  }\n\n  // Adjust the index\n  index = index + buffer.write(value.pattern, index, 'utf8');\n  // Write zero\n  buffer[index++] = 0x00;\n  // Write the options\n  index =\n    index +\n    buffer.write(\n      value.options\n        .split('')\n        .sort()\n        .join(''),\n      index,\n      'utf8'\n    );\n  // Add ending zero\n  buffer[index++] = 0x00;\n  return index;\n};\n\nvar serializeMinMax = function(buffer, key, value, index, isArray) {\n  // Write the type of either min or max key\n  if (value === null) {\n    buffer[index++] = BSON.BSON_DATA_NULL;\n  } else if (value instanceof MinKey) {\n    buffer[index++] = BSON.BSON_DATA_MIN_KEY;\n  } else {\n    buffer[index++] = BSON.BSON_DATA_MAX_KEY;\n  }\n\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  return index;\n};\n\nvar serializeObjectId = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_OID;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  // Write the objectId into the shared buffer\n  if (typeof value.id === 'string') {\n    buffer.write(value.id, index, 'binary');\n  } else if (value.id && value.id.copy) {\n    value.id.copy(buffer, index, 0, 12);\n  } else {\n    throw new Error('object [' + JSON.stringify(value) + '] is not a valid ObjectId');\n  }\n\n  // Ajust index\n  return index + 12;\n};\n\nvar serializeBuffer = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_BINARY;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Get size of the buffer (current write point)\n  var size = value.length;\n  // Write the size of the string to buffer\n  buffer[index++] = size & 0xff;\n  buffer[index++] = (size >> 8) & 0xff;\n  buffer[index++] = (size >> 16) & 0xff;\n  buffer[index++] = (size >> 24) & 0xff;\n  // Write the default subtype\n  buffer[index++] = BSON.BSON_BINARY_SUBTYPE_DEFAULT;\n  // Copy the content form the binary field to the buffer\n  value.copy(buffer, index, 0, size);\n  // Adjust the index\n  index = index + size;\n  return index;\n};\n\nvar serializeObject = function(\n  buffer,\n  key,\n  value,\n  index,\n  checkKeys,\n  depth,\n  serializeFunctions,\n  ignoreUndefined,\n  isArray,\n  path\n) {\n  for (var i = 0; i < path.length; i++) {\n    if (path[i] === value) throw new Error('cyclic dependency detected');\n  }\n\n  // Push value to stack\n  path.push(value);\n  // Write the type\n  buffer[index++] = Array.isArray(value) ? BSON.BSON_DATA_ARRAY : BSON.BSON_DATA_OBJECT;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  var endIndex = serializeInto(\n    buffer,\n    value,\n    checkKeys,\n    index,\n    depth + 1,\n    serializeFunctions,\n    ignoreUndefined,\n    path\n  );\n  // Pop stack\n  path.pop();\n  // Write size\n  return endIndex;\n};\n\nvar serializeDecimal128 = function(buffer, key, value, index, isArray) {\n  buffer[index++] = BSON.BSON_DATA_DECIMAL128;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write the data from the value\n  value.bytes.copy(buffer, index, 0, 16);\n  return index + 16;\n};\n\nvar serializeLong = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = value._bsontype === 'Long' ? BSON.BSON_DATA_LONG : BSON.BSON_DATA_TIMESTAMP;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write the date\n  var lowBits = value.getLowBits();\n  var highBits = value.getHighBits();\n  // Encode low bits\n  buffer[index++] = lowBits & 0xff;\n  buffer[index++] = (lowBits >> 8) & 0xff;\n  buffer[index++] = (lowBits >> 16) & 0xff;\n  buffer[index++] = (lowBits >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = highBits & 0xff;\n  buffer[index++] = (highBits >> 8) & 0xff;\n  buffer[index++] = (highBits >> 16) & 0xff;\n  buffer[index++] = (highBits >> 24) & 0xff;\n  return index;\n};\n\nvar serializeInt32 = function(buffer, key, value, index, isArray) {\n  // Set int type 32 bits or less\n  buffer[index++] = BSON.BSON_DATA_INT;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write the int value\n  buffer[index++] = value & 0xff;\n  buffer[index++] = (value >> 8) & 0xff;\n  buffer[index++] = (value >> 16) & 0xff;\n  buffer[index++] = (value >> 24) & 0xff;\n  return index;\n};\n\nvar serializeDouble = function(buffer, key, value, index, isArray) {\n  // Encode as double\n  buffer[index++] = BSON.BSON_DATA_NUMBER;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write float\n  writeIEEE754(buffer, value, index, 'little', 52, 8);\n  // Ajust index\n  index = index + 8;\n  return index;\n};\n\nvar serializeFunction = function(buffer, key, value, index, checkKeys, depth, isArray) {\n  buffer[index++] = BSON.BSON_DATA_CODE;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Function string\n  var functionString = value.toString();\n  // Write the string\n  var size = buffer.write(functionString, index + 4, 'utf8') + 1;\n  // Write the size of the string to buffer\n  buffer[index] = size & 0xff;\n  buffer[index + 1] = (size >> 8) & 0xff;\n  buffer[index + 2] = (size >> 16) & 0xff;\n  buffer[index + 3] = (size >> 24) & 0xff;\n  // Update index\n  index = index + 4 + size - 1;\n  // Write zero\n  buffer[index++] = 0;\n  return index;\n};\n\nvar serializeCode = function(\n  buffer,\n  key,\n  value,\n  index,\n  checkKeys,\n  depth,\n  serializeFunctions,\n  ignoreUndefined,\n  isArray\n) {\n  if (value.scope && typeof value.scope === 'object') {\n    // Write the type\n    buffer[index++] = BSON.BSON_DATA_CODE_W_SCOPE;\n    // Number of written bytes\n    var numberOfWrittenBytes = !isArray\n      ? buffer.write(key, index, 'utf8')\n      : buffer.write(key, index, 'ascii');\n    // Encode the name\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n\n    // Starting index\n    var startIndex = index;\n\n    // Serialize the function\n    // Get the function string\n    var functionString = typeof value.code === 'string' ? value.code : value.code.toString();\n    // Index adjustment\n    index = index + 4;\n    // Write string into buffer\n    var codeSize = buffer.write(functionString, index + 4, 'utf8') + 1;\n    // Write the size of the string to buffer\n    buffer[index] = codeSize & 0xff;\n    buffer[index + 1] = (codeSize >> 8) & 0xff;\n    buffer[index + 2] = (codeSize >> 16) & 0xff;\n    buffer[index + 3] = (codeSize >> 24) & 0xff;\n    // Write end 0\n    buffer[index + 4 + codeSize - 1] = 0;\n    // Write the\n    index = index + codeSize + 4;\n\n    //\n    // Serialize the scope value\n    var endIndex = serializeInto(\n      buffer,\n      value.scope,\n      checkKeys,\n      index,\n      depth + 1,\n      serializeFunctions,\n      ignoreUndefined\n    );\n    index = endIndex - 1;\n\n    // Writ the total\n    var totalSize = endIndex - startIndex;\n\n    // Write the total size of the object\n    buffer[startIndex++] = totalSize & 0xff;\n    buffer[startIndex++] = (totalSize >> 8) & 0xff;\n    buffer[startIndex++] = (totalSize >> 16) & 0xff;\n    buffer[startIndex++] = (totalSize >> 24) & 0xff;\n    // Write trailing zero\n    buffer[index++] = 0;\n  } else {\n    buffer[index++] = BSON.BSON_DATA_CODE;\n    // Number of written bytes\n    numberOfWrittenBytes = !isArray\n      ? buffer.write(key, index, 'utf8')\n      : buffer.write(key, index, 'ascii');\n    // Encode the name\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    // Function string\n    functionString = value.code.toString();\n    // Write the string\n    var size = buffer.write(functionString, index + 4, 'utf8') + 1;\n    // Write the size of the string to buffer\n    buffer[index] = size & 0xff;\n    buffer[index + 1] = (size >> 8) & 0xff;\n    buffer[index + 2] = (size >> 16) & 0xff;\n    buffer[index + 3] = (size >> 24) & 0xff;\n    // Update index\n    index = index + 4 + size - 1;\n    // Write zero\n    buffer[index++] = 0;\n  }\n\n  return index;\n};\n\nvar serializeBinary = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_BINARY;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Extract the buffer\n  var data = value.value(true);\n  // Calculate size\n  var size = value.position;\n  // Add the deprecated 02 type 4 bytes of size to total\n  if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY) size = size + 4;\n  // Write the size of the string to buffer\n  buffer[index++] = size & 0xff;\n  buffer[index++] = (size >> 8) & 0xff;\n  buffer[index++] = (size >> 16) & 0xff;\n  buffer[index++] = (size >> 24) & 0xff;\n  // Write the subtype to the buffer\n  buffer[index++] = value.sub_type;\n\n  // If we have binary type 2 the 4 first bytes are the size\n  if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY) {\n    size = size - 4;\n    buffer[index++] = size & 0xff;\n    buffer[index++] = (size >> 8) & 0xff;\n    buffer[index++] = (size >> 16) & 0xff;\n    buffer[index++] = (size >> 24) & 0xff;\n  }\n\n  // Write the data to the object\n  data.copy(buffer, index, 0, value.position);\n  // Adjust the index\n  index = index + value.position;\n  return index;\n};\n\nvar serializeSymbol = function(buffer, key, value, index, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_SYMBOL;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write the string\n  var size = buffer.write(value.value, index + 4, 'utf8') + 1;\n  // Write the size of the string to buffer\n  buffer[index] = size & 0xff;\n  buffer[index + 1] = (size >> 8) & 0xff;\n  buffer[index + 2] = (size >> 16) & 0xff;\n  buffer[index + 3] = (size >> 24) & 0xff;\n  // Update index\n  index = index + 4 + size - 1;\n  // Write zero\n  buffer[index++] = 0x00;\n  return index;\n};\n\nvar serializeDBRef = function(buffer, key, value, index, depth, serializeFunctions, isArray) {\n  // Write the type\n  buffer[index++] = BSON.BSON_DATA_OBJECT;\n  // Number of written bytes\n  var numberOfWrittenBytes = !isArray\n    ? buffer.write(key, index, 'utf8')\n    : buffer.write(key, index, 'ascii');\n\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  var startIndex = index;\n  var endIndex;\n\n  // Serialize object\n  if (null != value.db) {\n    endIndex = serializeInto(\n      buffer,\n      {\n        $ref: value.namespace,\n        $id: value.oid,\n        $db: value.db\n      },\n      false,\n      index,\n      depth + 1,\n      serializeFunctions\n    );\n  } else {\n    endIndex = serializeInto(\n      buffer,\n      {\n        $ref: value.namespace,\n        $id: value.oid\n      },\n      false,\n      index,\n      depth + 1,\n      serializeFunctions\n    );\n  }\n\n  // Calculate object size\n  var size = endIndex - startIndex;\n  // Write the size\n  buffer[startIndex++] = size & 0xff;\n  buffer[startIndex++] = (size >> 8) & 0xff;\n  buffer[startIndex++] = (size >> 16) & 0xff;\n  buffer[startIndex++] = (size >> 24) & 0xff;\n  // Set index\n  return endIndex;\n};\n\nvar serializeInto = function serializeInto(\n  buffer,\n  object,\n  checkKeys,\n  startingIndex,\n  depth,\n  serializeFunctions,\n  ignoreUndefined,\n  path\n) {\n  startingIndex = startingIndex || 0;\n  path = path || [];\n\n  // Push the object to the path\n  path.push(object);\n\n  // Start place to serialize into\n  var index = startingIndex + 4;\n  // var self = this;\n\n  // Special case isArray\n  if (Array.isArray(object)) {\n    // Get object keys\n    for (var i = 0; i < object.length; i++) {\n      var key = '' + i;\n      var value = object[i];\n\n      // Is there an override value\n      if (value && value.toBSON) {\n        if (typeof value.toBSON !== 'function') throw new Error('toBSON is not a function');\n        value = value.toBSON();\n      }\n\n      var type = typeof value;\n      if (type === 'string') {\n        index = serializeString(buffer, key, value, index, true);\n      } else if (type === 'number') {\n        index = serializeNumber(buffer, key, value, index, true);\n      } else if (type === 'boolean') {\n        index = serializeBoolean(buffer, key, value, index, true);\n      } else if (value instanceof Date || isDate(value)) {\n        index = serializeDate(buffer, key, value, index, true);\n      } else if (value === undefined) {\n        index = serializeNull(buffer, key, value, index, true);\n      } else if (value === null) {\n        index = serializeNull(buffer, key, value, index, true);\n      } else if (value['_bsontype'] === 'ObjectID') {\n        index = serializeObjectId(buffer, key, value, index, true);\n      } else if (Buffer.isBuffer(value)) {\n        index = serializeBuffer(buffer, key, value, index, true);\n      } else if (value instanceof RegExp || isRegExp(value)) {\n        index = serializeRegExp(buffer, key, value, index, true);\n      } else if (type === 'object' && value['_bsontype'] == null) {\n        index = serializeObject(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          ignoreUndefined,\n          true,\n          path\n        );\n      } else if (type === 'object' && value['_bsontype'] === 'Decimal128') {\n        index = serializeDecimal128(buffer, key, value, index, true);\n      } else if (value['_bsontype'] === 'Long' || value['_bsontype'] === 'Timestamp') {\n        index = serializeLong(buffer, key, value, index, true);\n      } else if (value['_bsontype'] === 'Double') {\n        index = serializeDouble(buffer, key, value, index, true);\n      } else if (typeof value === 'function' && serializeFunctions) {\n        index = serializeFunction(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          true\n        );\n      } else if (value['_bsontype'] === 'Code') {\n        index = serializeCode(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          ignoreUndefined,\n          true\n        );\n      } else if (value['_bsontype'] === 'Binary') {\n        index = serializeBinary(buffer, key, value, index, true);\n      } else if (value['_bsontype'] === 'Symbol') {\n        index = serializeSymbol(buffer, key, value, index, true);\n      } else if (value['_bsontype'] === 'DBRef') {\n        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, true);\n      } else if (value['_bsontype'] === 'BSONRegExp') {\n        index = serializeBSONRegExp(buffer, key, value, index, true);\n      } else if (value['_bsontype'] === 'Int32') {\n        index = serializeInt32(buffer, key, value, index, true);\n      } else if (value['_bsontype'] === 'MinKey' || value['_bsontype'] === 'MaxKey') {\n        index = serializeMinMax(buffer, key, value, index, true);\n      }\n    }\n  } else if (object instanceof Map) {\n    var iterator = object.entries();\n    var done = false;\n\n    while (!done) {\n      // Unpack the next entry\n      var entry = iterator.next();\n      done = entry.done;\n      // Are we done, then skip and terminate\n      if (done) continue;\n\n      // Get the entry values\n      key = entry.value[0];\n      value = entry.value[1];\n\n      // Check the type of the value\n      type = typeof value;\n\n      // Check the key and throw error if it's illegal\n      if (key !== '$db' && key !== '$ref' && key !== '$id') {\n        if (key.match(regexp) != null) {\n          // The BSON spec doesn't allow keys with null bytes because keys are\n          // null-terminated.\n          throw Error('key ' + key + ' must not contain null bytes');\n        }\n\n        if (checkKeys) {\n          if ('$' === key[0]) {\n            throw Error('key ' + key + \" must not start with '$'\");\n          } else if (~key.indexOf('.')) {\n            throw Error('key ' + key + \" must not contain '.'\");\n          }\n        }\n      }\n\n      if (type === 'string') {\n        index = serializeString(buffer, key, value, index);\n      } else if (type === 'number') {\n        index = serializeNumber(buffer, key, value, index);\n      } else if (type === 'boolean') {\n        index = serializeBoolean(buffer, key, value, index);\n      } else if (value instanceof Date || isDate(value)) {\n        index = serializeDate(buffer, key, value, index);\n        // } else if (value === undefined && ignoreUndefined === true) {\n      } else if (value === null || (value === undefined && ignoreUndefined === false)) {\n        index = serializeNull(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'ObjectID') {\n        index = serializeObjectId(buffer, key, value, index);\n      } else if (Buffer.isBuffer(value)) {\n        index = serializeBuffer(buffer, key, value, index);\n      } else if (value instanceof RegExp || isRegExp(value)) {\n        index = serializeRegExp(buffer, key, value, index);\n      } else if (type === 'object' && value['_bsontype'] == null) {\n        index = serializeObject(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          ignoreUndefined,\n          false,\n          path\n        );\n      } else if (type === 'object' && value['_bsontype'] === 'Decimal128') {\n        index = serializeDecimal128(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Long' || value['_bsontype'] === 'Timestamp') {\n        index = serializeLong(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Double') {\n        index = serializeDouble(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Code') {\n        index = serializeCode(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          ignoreUndefined\n        );\n      } else if (typeof value === 'function' && serializeFunctions) {\n        index = serializeFunction(buffer, key, value, index, checkKeys, depth, serializeFunctions);\n      } else if (value['_bsontype'] === 'Binary') {\n        index = serializeBinary(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Symbol') {\n        index = serializeSymbol(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'DBRef') {\n        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions);\n      } else if (value['_bsontype'] === 'BSONRegExp') {\n        index = serializeBSONRegExp(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Int32') {\n        index = serializeInt32(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'MinKey' || value['_bsontype'] === 'MaxKey') {\n        index = serializeMinMax(buffer, key, value, index);\n      }\n    }\n  } else {\n    // Did we provide a custom serialization method\n    if (object.toBSON) {\n      if (typeof object.toBSON !== 'function') throw new Error('toBSON is not a function');\n      object = object.toBSON();\n      if (object != null && typeof object !== 'object')\n        throw new Error('toBSON function did not return an object');\n    }\n\n    // Iterate over all the keys\n    for (key in object) {\n      value = object[key];\n      // Is there an override value\n      if (value && value.toBSON) {\n        if (typeof value.toBSON !== 'function') throw new Error('toBSON is not a function');\n        value = value.toBSON();\n      }\n\n      // Check the type of the value\n      type = typeof value;\n\n      // Check the key and throw error if it's illegal\n      if (key !== '$db' && key !== '$ref' && key !== '$id') {\n        if (key.match(regexp) != null) {\n          // The BSON spec doesn't allow keys with null bytes because keys are\n          // null-terminated.\n          throw Error('key ' + key + ' must not contain null bytes');\n        }\n\n        if (checkKeys) {\n          if ('$' === key[0]) {\n            throw Error('key ' + key + \" must not start with '$'\");\n          } else if (~key.indexOf('.')) {\n            throw Error('key ' + key + \" must not contain '.'\");\n          }\n        }\n      }\n\n      if (type === 'string') {\n        index = serializeString(buffer, key, value, index);\n      } else if (type === 'number') {\n        index = serializeNumber(buffer, key, value, index);\n      } else if (type === 'boolean') {\n        index = serializeBoolean(buffer, key, value, index);\n      } else if (value instanceof Date || isDate(value)) {\n        index = serializeDate(buffer, key, value, index);\n      } else if (value === undefined) {\n        if (ignoreUndefined === false) index = serializeNull(buffer, key, value, index);\n      } else if (value === null) {\n        index = serializeNull(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'ObjectID') {\n        index = serializeObjectId(buffer, key, value, index);\n      } else if (Buffer.isBuffer(value)) {\n        index = serializeBuffer(buffer, key, value, index);\n      } else if (value instanceof RegExp || isRegExp(value)) {\n        index = serializeRegExp(buffer, key, value, index);\n      } else if (type === 'object' && value['_bsontype'] == null) {\n        index = serializeObject(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          ignoreUndefined,\n          false,\n          path\n        );\n      } else if (type === 'object' && value['_bsontype'] === 'Decimal128') {\n        index = serializeDecimal128(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Long' || value['_bsontype'] === 'Timestamp') {\n        index = serializeLong(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Double') {\n        index = serializeDouble(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Code') {\n        index = serializeCode(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          ignoreUndefined\n        );\n      } else if (typeof value === 'function' && serializeFunctions) {\n        index = serializeFunction(buffer, key, value, index, checkKeys, depth, serializeFunctions);\n      } else if (value['_bsontype'] === 'Binary') {\n        index = serializeBinary(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Symbol') {\n        index = serializeSymbol(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'DBRef') {\n        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions);\n      } else if (value['_bsontype'] === 'BSONRegExp') {\n        index = serializeBSONRegExp(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'Int32') {\n        index = serializeInt32(buffer, key, value, index);\n      } else if (value['_bsontype'] === 'MinKey' || value['_bsontype'] === 'MaxKey') {\n        index = serializeMinMax(buffer, key, value, index);\n      }\n    }\n  }\n\n  // Remove the path\n  path.pop();\n\n  // Final padding byte for object\n  buffer[index++] = 0x00;\n\n  // Final size\n  var size = index - startingIndex;\n  // Write the size of the object\n  buffer[startingIndex++] = size & 0xff;\n  buffer[startingIndex++] = (size >> 8) & 0xff;\n  buffer[startingIndex++] = (size >> 16) & 0xff;\n  buffer[startingIndex++] = (size >> 24) & 0xff;\n  return index;\n};\n\nvar BSON = {};\n\n/**\n * Contains the function cache if we have that enable to allow for avoiding the eval step on each deserialization, comparison is by md5\n *\n * @ignore\n * @api private\n */\n// var functionCache = (BSON.functionCache = {});\n\n/**\n * Number BSON Type\n *\n * @classconstant BSON_DATA_NUMBER\n **/\nBSON.BSON_DATA_NUMBER = 1;\n/**\n * String BSON Type\n *\n * @classconstant BSON_DATA_STRING\n **/\nBSON.BSON_DATA_STRING = 2;\n/**\n * Object BSON Type\n *\n * @classconstant BSON_DATA_OBJECT\n **/\nBSON.BSON_DATA_OBJECT = 3;\n/**\n * Array BSON Type\n *\n * @classconstant BSON_DATA_ARRAY\n **/\nBSON.BSON_DATA_ARRAY = 4;\n/**\n * Binary BSON Type\n *\n * @classconstant BSON_DATA_BINARY\n **/\nBSON.BSON_DATA_BINARY = 5;\n/**\n * ObjectID BSON Type, deprecated\n *\n * @classconstant BSON_DATA_UNDEFINED\n **/\nBSON.BSON_DATA_UNDEFINED = 6;\n/**\n * ObjectID BSON Type\n *\n * @classconstant BSON_DATA_OID\n **/\nBSON.BSON_DATA_OID = 7;\n/**\n * Boolean BSON Type\n *\n * @classconstant BSON_DATA_BOOLEAN\n **/\nBSON.BSON_DATA_BOOLEAN = 8;\n/**\n * Date BSON Type\n *\n * @classconstant BSON_DATA_DATE\n **/\nBSON.BSON_DATA_DATE = 9;\n/**\n * null BSON Type\n *\n * @classconstant BSON_DATA_NULL\n **/\nBSON.BSON_DATA_NULL = 10;\n/**\n * RegExp BSON Type\n *\n * @classconstant BSON_DATA_REGEXP\n **/\nBSON.BSON_DATA_REGEXP = 11;\n/**\n * Code BSON Type\n *\n * @classconstant BSON_DATA_CODE\n **/\nBSON.BSON_DATA_CODE = 13;\n/**\n * Symbol BSON Type\n *\n * @classconstant BSON_DATA_SYMBOL\n **/\nBSON.BSON_DATA_SYMBOL = 14;\n/**\n * Code with Scope BSON Type\n *\n * @classconstant BSON_DATA_CODE_W_SCOPE\n **/\nBSON.BSON_DATA_CODE_W_SCOPE = 15;\n/**\n * 32 bit Integer BSON Type\n *\n * @classconstant BSON_DATA_INT\n **/\nBSON.BSON_DATA_INT = 16;\n/**\n * Timestamp BSON Type\n *\n * @classconstant BSON_DATA_TIMESTAMP\n **/\nBSON.BSON_DATA_TIMESTAMP = 17;\n/**\n * Long BSON Type\n *\n * @classconstant BSON_DATA_LONG\n **/\nBSON.BSON_DATA_LONG = 18;\n/**\n * Long BSON Type\n *\n * @classconstant BSON_DATA_DECIMAL128\n **/\nBSON.BSON_DATA_DECIMAL128 = 19;\n/**\n * MinKey BSON Type\n *\n * @classconstant BSON_DATA_MIN_KEY\n **/\nBSON.BSON_DATA_MIN_KEY = 0xff;\n/**\n * MaxKey BSON Type\n *\n * @classconstant BSON_DATA_MAX_KEY\n **/\nBSON.BSON_DATA_MAX_KEY = 0x7f;\n/**\n * Binary Default Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_DEFAULT\n **/\nBSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;\n/**\n * Binary Function Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_FUNCTION\n **/\nBSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;\n/**\n * Binary Byte Array Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY\n **/\nBSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;\n/**\n * Binary UUID Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_UUID\n **/\nBSON.BSON_BINARY_SUBTYPE_UUID = 3;\n/**\n * Binary MD5 Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_MD5\n **/\nBSON.BSON_BINARY_SUBTYPE_MD5 = 4;\n/**\n * Binary User Defined Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED\n **/\nBSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;\n\n// BSON MAX VALUES\nBSON.BSON_INT32_MAX = 0x7fffffff;\nBSON.BSON_INT32_MIN = -0x80000000;\n\nBSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;\nBSON.BSON_INT64_MIN = -Math.pow(2, 63);\n\n// JS MAX PRECISE VALUES\nBSON.JS_INT_MAX = 0x20000000000000; // Any integer up to 2^53 can be precisely represented by a double.\nBSON.JS_INT_MIN = -0x20000000000000; // Any integer down to -2^53 can be precisely represented by a double.\n\n// Internal long versions\n// var JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000); // Any integer up to 2^53 can be precisely represented by a double.\n// var JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000); // Any integer down to -2^53 can be precisely represented by a double.\n\nmodule.exports = serializeInto;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_bson@1.0.6@bson/lib/bson/parser/serializer.js\n// module id = 157\n// module chunks = 0","module.exports = {\"name\":\"mongodb-core\",\"version\":\"3.0.4\",\"description\":\"Core MongoDB driver functionality, no bells and whistles and meant for integration not end applications\",\"main\":\"index.js\",\"scripts\":{\"test\":\"npm run lint && mongodb-test-runner -t 60000 test/tests\",\"coverage\":\"node_modules/.bin/nyc node test/runner.js -t functional -l && node_modules/.bin/nyc report --reporter=text-lcov | node_modules/.bin/coveralls\",\"lint\":\"eslint index.js lib test\",\"format\":\"prettier --print-width 100 --tab-width 2 --single-quote --write index.js 'test/**/*.js' 'lib/**/*.js'\",\"changelog\":\"conventional-changelog -p angular -i HISTORY.md -s\"},\"repository\":{\"type\":\"git\",\"url\":\"git://github.com/mongodb-js/mongodb-core.git\"},\"keywords\":[\"mongodb\",\"core\"],\"dependencies\":{\"bson\":\"~1.0.4\",\"require_optional\":\"^1.0.1\"},\"devDependencies\":{\"chai\":\"^4.1.2\",\"co\":\"^4.6.0\",\"conventional-changelog-cli\":\"^1.3.5\",\"eslint\":\"^4.6.1\",\"eslint-plugin-prettier\":\"^2.2.0\",\"jsdoc\":\"3.5.4\",\"mongodb-mock-server\":\"^1.0.0\",\"mongodb-test-runner\":\"^1.1.18\",\"prettier\":\"^1.6.1\",\"snappy\":\"^6.0.1\"},\"peerOptionalDependencies\":{\"kerberos\":\"^0.0.23\",\"snappy\":\"^6.0.1\",\"bson-ext\":\"1.0.5\"},\"author\":\"Christian Kvalheim\",\"license\":\"Apache-2.0\",\"bugs\":{\"url\":\"https://github.com/mongodb-js/mongodb-core/issues\"},\"homepage\":\"https://github.com/mongodb-js/mongodb-core\",\"_from\":\"mongodb-core@3.0.4\",\"_resolved\":\"http://registry.npm.taobao.org/mongodb-core/download/mongodb-core-3.0.4.tgz\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/package.json\n// module id = 158\n// module chunks = 0","module.exports = {\"name\":\"mongodb\",\"version\":\"3.0.4\",\"description\":\"The official MongoDB driver for Node.js\",\"main\":\"index.js\",\"repository\":{\"type\":\"git\",\"url\":\"git@github.com:mongodb/node-mongodb-native.git\"},\"keywords\":[\"mongodb\",\"driver\",\"official\"],\"dependencies\":{\"mongodb-core\":\"3.0.4\"},\"devDependencies\":{\"betterbenchmarks\":\"^0.1.0\",\"bluebird\":\"3.5.0\",\"bson\":\"^1.0.4\",\"chai\":\"^4.1.1\",\"co\":\"4.6.0\",\"conventional-changelog-cli\":\"^1.3.5\",\"coveralls\":\"^2.11.6\",\"eslint\":\"^4.5.0\",\"eslint-plugin-prettier\":\"^2.2.0\",\"istanbul\":\"^0.4.5\",\"jsdoc\":\"3.5.4\",\"mongodb-extended-json\":\"^1.10.0\",\"mongodb-mock-server\":\"^1.0.0\",\"mongodb-test-runner\":\"^1.1.18\",\"prettier\":\"^1.5.3\",\"semver\":\"5.4.1\",\"sinon\":\"^4.3.0\",\"worker-farm\":\"^1.5.0\"},\"author\":\"Christian Kvalheim\",\"license\":\"Apache-2.0\",\"engines\":{\"node\":\">=4\"},\"bugs\":{\"url\":\"https://github.com/mongodb/node-mongodb-native/issues\"},\"scripts\":{\"test\":\"npm run lint && mongodb-test-runner -t 60000 test/unit test/functional\",\"coverage\":\"istanbul cover mongodb-test-runner -- -t 60000  test/unit test/functional\",\"lint\":\"eslint lib test\",\"format\":\"prettier --print-width 100 --tab-width 2 --single-quote --write 'test/**/*.js' 'lib/**/*.js'\",\"changelog\":\"conventional-changelog -p angular -i HISTORY.md -s\"},\"homepage\":\"https://github.com/mongodb/node-mongodb-native\",\"_from\":\"mongodb@3.0.4\",\"_resolved\":\"http://registry.npm.taobao.org/mongodb/download/mongodb-3.0.4.tgz\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/package.json\n// module id = 159\n// module chunks = 0","module.exports = {\"name\":\"mongoose\",\"description\":\"Mongoose MongoDB ODM\",\"version\":\"5.0.11\",\"author\":\"Guillermo Rauch <guillermo@learnboost.com>\",\"keywords\":[\"mongodb\",\"document\",\"model\",\"schema\",\"database\",\"odm\",\"data\",\"datastore\",\"query\",\"nosql\",\"orm\",\"db\"],\"license\":\"MIT\",\"dependencies\":{\"async\":\"2.1.4\",\"bson\":\"~1.0.4\",\"kareem\":\"2.0.5\",\"lodash.get\":\"4.4.2\",\"mongodb\":\"3.0.4\",\"mongoose-legacy-pluralize\":\"1.0.2\",\"mpath\":\"0.3.0\",\"mquery\":\"3.0.0\",\"ms\":\"2.0.0\",\"regexp-clone\":\"0.0.1\",\"sliced\":\"1.0.1\"},\"devDependencies\":{\"acquit\":\"0.5.1\",\"acquit-ignore\":\"0.0.3\",\"benchmark\":\"2.1.2\",\"bluebird\":\"3.5.0\",\"co\":\"4.6.0\",\"dox\":\"0.3.1\",\"eslint\":\"4.14.0\",\"highlight.js\":\"9.1.0\",\"jade\":\"1.11.0\",\"lodash\":\"4.16.6\",\"markdown\":\"0.5.0\",\"marked\":\"0.3.9\",\"mocha\":\"4.1.0\",\"mongodb-topology-manager\":\"1.0.11\",\"mongoose-long\":\"0.1.1\",\"node-static\":\"0.7.10\",\"nsp\":\"~2.8.1\",\"nyc\":\"11.4.1\",\"power-assert\":\"1.4.1\",\"q\":\"1.5.1\",\"tbd\":\"0.6.4\",\"uuid\":\"2.0.3\",\"uuid-parse\":\"1.0.0\",\"validator\":\"5.4.0\"},\"directories\":{\"lib\":\"./lib/mongoose\"},\"scripts\":{\"fix-lint\":\"eslint . --fix\",\"lint\":\"eslint . --quiet\",\"nsp\":\"nsp check\",\"release\":\"git pull && git push origin master --tags && npm publish\",\"release-legacy\":\"git pull origin 4.x && git push origin 4.x --tags && npm publish --tag legacy\",\"test\":\"mocha --exit test/*.test.js test/**/*.test.js\",\"test-cov\":\"nyc --reporter=html --reporter=text npm test\"},\"main\":\"./index.js\",\"engines\":{\"node\":\">=4.0.0\"},\"bugs\":{\"url\":\"https://github.com/Automattic/mongoose/issues/new\"},\"repository\":{\"type\":\"git\",\"url\":\"git://github.com/Automattic/mongoose.git\"},\"homepage\":\"http://mongoosejs.com\",\"browser\":\"./browser.js\",\"eslintConfig\":{\"extends\":[\"eslint:recommended\"],\"parserOptions\":{\"ecmaVersion\":2015},\"env\":{\"node\":true,\"mocha\":true,\"es6\":true},\"rules\":{\"comma-style\":\"error\",\"consistent-this\":[\"error\",\"_this\"],\"indent\":[\"error\",2,{\"SwitchCase\":1,\"VariableDeclarator\":2}],\"keyword-spacing\":\"error\",\"no-console\":\"off\",\"no-multi-spaces\":\"error\",\"func-call-spacing\":\"error\",\"no-trailing-spaces\":\"error\",\"quotes\":[\"error\",\"single\"],\"semi\":\"error\",\"space-before-blocks\":\"error\",\"space-before-function-paren\":[\"error\",\"never\"],\"space-infix-ops\":\"error\",\"space-unary-ops\":\"error\"}},\"_from\":\"mongoose@5.0.11\",\"_resolved\":\"http://registry.npm.taobao.org/mongoose/download/mongoose-5.0.11.tgz\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/package.json\n// module id = 160\n// module chunks = 0","'use strict';\n\nfunction Kareem() {\n  this._pres = {};\n  this._posts = {};\n}\n\nKareem.prototype.execPre = function(name, context, args, callback) {\n  if (arguments.length === 3) {\n    callback = args;\n    args = [];\n  }\n  var pres = get(this._pres, name, []);\n  var numPres = pres.length;\n  var numAsyncPres = pres.numAsync || 0;\n  var currentPre = 0;\n  var asyncPresLeft = numAsyncPres;\n  var done = false;\n  var $args = args;\n\n  if (!numPres) {\n    return process.nextTick(function() {\n      callback(null);\n    });\n  }\n\n  var next = function() {\n    if (currentPre >= numPres) {\n      return;\n    }\n    var pre = pres[currentPre];\n\n    if (pre.isAsync) {\n      var args = [\n        decorateNextFn(_next),\n        decorateNextFn(function(error) {\n          if (error) {\n            if (done) {\n              return;\n            }\n            done = true;\n            return callback(error);\n          }\n          if (--asyncPresLeft === 0 && currentPre >= numPres) {\n            return callback(null);\n          }\n        })\n      ];\n\n      callMiddlewareFunction(pre.fn, context, args, args[0]);\n    } else if (pre.fn.length > 0) {\n      var args = [decorateNextFn(_next)];\n      var _args = arguments.length >= 2 ? arguments : [null].concat($args);\n      for (var i = 1; i < _args.length; ++i) {\n        args.push(_args[i]);\n      }\n\n      callMiddlewareFunction(pre.fn, context, args, args[0]);\n    } else {\n      let error = null;\n      let maybePromise = null;\n      try {\n        maybePromise = pre.fn.call(context);\n      } catch (err) {\n        error = err;\n      }\n\n      if (isPromise(maybePromise)) {\n        maybePromise.then(() => _next(), err => _next(err));\n      } else {\n        if (++currentPre >= numPres) {\n          if (asyncPresLeft > 0) {\n            // Leave parallel hooks to run\n            return;\n          } else {\n            return process.nextTick(function() {\n              callback(error);\n            });\n          }\n        }\n        next(error);\n      }\n    }\n  };\n\n  next.apply(null, [null].concat(args));\n\n  function _next(error) {\n    if (error) {\n      if (done) {\n        return;\n      }\n      done = true;\n      return callback(error);\n    }\n\n    if (++currentPre >= numPres) {\n      if (asyncPresLeft > 0) {\n        // Leave parallel hooks to run\n        return;\n      } else {\n        return callback(null);\n      }\n    }\n\n    next.apply(context, arguments);\n  }\n};\n\nKareem.prototype.execPreSync = function(name, context, args) {\n  var pres = get(this._pres, name, []);\n  var numPres = pres.length;\n\n  for (var i = 0; i < numPres; ++i) {\n    pres[i].fn.apply(context, args || []);\n  }\n};\n\nKareem.prototype.execPost = function(name, context, args, options, callback) {\n  if (arguments.length < 5) {\n    callback = options;\n    options = null;\n  }\n  var posts = get(this._posts, name, []);\n  var numPosts = posts.length;\n  var currentPost = 0;\n\n  var firstError = null;\n  if (options && options.error) {\n    firstError = options.error;\n  }\n\n  if (!numPosts) {\n    return process.nextTick(function() {\n      callback.apply(null, [firstError].concat(args));\n    });\n  }\n\n  var next = function() {\n    var post = posts[currentPost];\n    var numArgs = 0;\n    var argLength = args.length;\n    var newArgs = [];\n    for (var i = 0; i < argLength; ++i) {\n      numArgs += args[i] && args[i]._kareemIgnore ? 0 : 1;\n      if (!args[i] || !args[i]._kareemIgnore) {\n        newArgs.push(args[i]);\n      }\n    }\n\n    if (firstError) {\n      if (post.length === numArgs + 2) {\n        var _cb = decorateNextFn(function(error) {\n          if (error) {\n            firstError = error;\n          }\n          if (++currentPost >= numPosts) {\n            return callback.call(null, firstError);\n          }\n          next();\n        });\n\n        callMiddlewareFunction(post, context,\n          [firstError].concat(newArgs).concat([_cb]), _cb);\n      } else {\n        if (++currentPost >= numPosts) {\n          return callback.call(null, firstError);\n        }\n        next();\n      }\n    } else {\n      const _cb = decorateNextFn(function(error) {\n        if (error) {\n          firstError = error;\n          return next();\n        }\n\n        if (++currentPost >= numPosts) {\n          return callback.apply(null, [null].concat(args));\n        }\n\n        next();\n      });\n\n      if (post.length === numArgs + 2) {\n        // Skip error handlers if no error\n        if (++currentPost >= numPosts) {\n          return callback.apply(null, [null].concat(args));\n        }\n        return next();\n      }\n      if (post.length === numArgs + 1) {\n        callMiddlewareFunction(post, context, newArgs.concat([_cb]), _cb);\n      } else {\n        let error;\n        let maybePromise;\n        try {\n          maybePromise = post.apply(context, newArgs);\n        } catch (err) {\n          error = err;\n          firstError = err;\n        }\n\n        if (isPromise(maybePromise)) {\n          return maybePromise.then(() => _cb(), err => _cb(err));\n        }\n\n        if (++currentPost >= numPosts) {\n          return callback.apply(null, [error].concat(args));\n        }\n\n        next(error);\n      }\n    }\n  };\n\n  next();\n};\n\nKareem.prototype.execPostSync = function(name, context, args) {\n  var posts = get(this._posts, name, []);\n  var numPosts = posts.length;\n\n  for (var i = 0; i < numPosts; ++i) {\n    posts[i].apply(context, args || []);\n  }\n};\n\nKareem.prototype.createWrapperSync = function(name, fn) {\n  var kareem = this;\n  return function syncWrapper() {\n    kareem.execPreSync(name, this, arguments);\n\n    var toReturn = fn.apply(this, arguments);\n\n    kareem.execPostSync(name, this, [toReturn]);\n\n    return toReturn;\n  };\n}\n\nfunction _handleWrapError(instance, error, name, context, args, options, callback) {\n  if (options.useErrorHandlers) {\n    var _options = { error: error };\n    return instance.execPost(name, context, args, _options, function(error) {\n      return typeof callback === 'function' && callback(error);\n    });\n  } else {\n    return typeof callback === 'function' ?\n      callback(error) :\n      undefined;\n  }\n}\n\nKareem.prototype.wrap = function(name, fn, context, args, options) {\n  var lastArg = (args.length > 0 ? args[args.length - 1] : null);\n  var argsWithoutCb = typeof lastArg === 'function' ?\n    args.slice(0, args.length - 1) :\n    args;\n  var _this = this;\n\n  options = options || {};\n\n  this.execPre(name, context, args, function(error) {\n    if (error) {\n      var numCallbackParams = options.numCallbackParams || 0;\n      var errorArgs = options.contextParameter ? [context] : [];\n      for (var i = errorArgs.length; i < numCallbackParams; ++i) {\n        errorArgs.push(null);\n      }\n      return _handleWrapError(_this, error, name, context, errorArgs,\n        options, lastArg);\n    }\n\n    var end = (typeof lastArg === 'function' ? args.length - 1 : args.length);\n    fn.apply(context, args.slice(0, end).concat(_cb));\n\n    function _cb() {\n      var args = arguments;\n      var argsWithoutError = Array.prototype.slice.call(arguments, 1);\n      if (options.nullResultByDefault && argsWithoutError.length === 0) {\n        argsWithoutError.push(null);\n      }\n      if (arguments[0]) {\n        // Assume error\n        return _handleWrapError(_this, arguments[0], name, context,\n          argsWithoutError, options, lastArg);\n      } else {\n        _this.execPost(name, context, argsWithoutError, function() {\n          if (arguments[0]) {\n            return typeof lastArg === 'function' ?\n              lastArg(arguments[0]) :\n              undefined;\n          }\n\n          return typeof lastArg === 'function' ?\n            lastArg.apply(context, arguments) :\n            undefined;\n        });\n      }\n    }\n  });\n};\n\nKareem.prototype.createWrapper = function(name, fn, context, options) {\n  var _this = this;\n  if (this._pres[name] == null && this._posts[name] == null) {\n    // Fast path: if there's no hooks for this function, just return the function\n    return fn;\n  }\n  return function() {\n    var _context = context || this;\n    var args = Array.prototype.slice.call(arguments);\n    _this.wrap(name, fn, _context, args, options);\n  };\n};\n\nKareem.prototype.pre = function(name, isAsync, fn, error, unshift) {\n  if (typeof arguments[1] !== 'boolean') {\n    error = fn;\n    fn = isAsync;\n    isAsync = false;\n  }\n\n  this._pres[name] = get(this._pres, name, []);\n  const pres = this._pres[name];\n\n  if (isAsync) {\n    pres.numAsync = pres.numAsync || 0;\n    ++pres.numAsync;\n  }\n\n  if (unshift) {\n    pres.unshift({ fn: fn, isAsync: isAsync });\n  } else {\n    pres.push({ fn: fn, isAsync: isAsync });\n  }\n\n  return this;\n};\n\nKareem.prototype.post = function(name, fn, unshift) {\n  this._posts[name] = get(this._posts, name, []);\n\n  if (unshift) {\n    this._posts[name].unshift(fn);\n  } else {\n    this._posts[name].push(fn);\n  }\n  return this;\n};\n\nKareem.prototype.clone = function() {\n  const n = new Kareem();\n\n  for (let key of Object.keys(this._pres)) {\n    n._pres[key] = this._pres[key].slice();\n    n._pres[key].numAsync = this._pres[key].numAsync;\n  }\n  for (let key of Object.keys(this._posts)) {\n    n._posts[key] = this._posts[key].slice();\n  }\n\n  return n;\n};\n\nKareem.prototype.merge = function(other) {\n  var ret = this.clone();\n\n  for (let key of Object.keys(other._pres)) {\n    const sourcePres = get(ret._pres, key, []);\n    const deduplicated = other._pres[key].\n      // Deduplicate based on `fn`\n      filter(p => sourcePres.map(_p => _p.fn).indexOf(p.fn) === -1);\n    ret._pres[key] = sourcePres.concat(deduplicated);\n    ret._pres[key].numAsync = get(ret._pres[key], 'numAsync', 0);\n    ret._pres[key].numAsync += deduplicated.filter(p => p.isAsync).length;\n  }\n  for (let key of Object.keys(other._posts)) {\n    const sourcePosts = get(ret._posts, key, []);\n    const deduplicated = other._posts[key].\n      filter(p => sourcePosts.indexOf(p) === -1);\n    ret._posts[key] = sourcePosts.concat(deduplicated);\n  }\n\n  return ret;\n};\n\nfunction get(obj, key, def) {\n  if (obj[key] != null) {\n    return obj[key];\n  }\n  return def;\n}\n\nfunction callMiddlewareFunction(fn, context, args, next) {\n  let maybePromise;\n  try {\n    maybePromise = fn.apply(context, args);\n  } catch (error) {\n    return next(error);\n  }\n\n  if (isPromise(maybePromise)) {\n    maybePromise.then(() => next(), err => next(err));\n  }\n}\n\nfunction isPromise(v) {\n  return v != null && typeof v.then === 'function';\n}\n\nfunction decorateNextFn(fn) {\n  var called = false;\n  var _this = this;\n  return function() {\n    // Ensure this function can only be called once\n    if (called) {\n      return;\n    }\n    called = true;\n    // Make sure to clear the stack so try/catch doesn't catch errors\n    // in subsequent middleware\n    return process.nextTick(() => fn.apply(_this, arguments));\n  };\n}\n\nmodule.exports = Kareem;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_kareem@2.0.5@kareem/index.js\n// module id = 161\n// module chunks = 0","'use strict';\n\n/**\n * Creates a new CommandResult instance\n * @class\n * @param {object} result CommandResult object\n * @param {Connection} connection A connection instance associated with this result\n * @return {CommandResult} A cursor instance\n */\nvar CommandResult = function(result, connection, message) {\n  this.result = result;\n  this.connection = connection;\n  this.message = message;\n};\n\n/**\n * Convert CommandResult to JSON\n * @method\n * @return {object}\n */\nCommandResult.prototype.toJSON = function() {\n  return this.result;\n};\n\n/**\n * Convert CommandResult to String representation\n * @method\n * @return {string}\n */\nCommandResult.prototype.toString = function() {\n  return JSON.stringify(this.toJSON());\n};\n\nmodule.exports = CommandResult;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/connection/command_result.js\n// module id = 162\n// module chunks = 0","'use strict';\n\nvar inherits = require('util').inherits,\n  EventEmitter = require('events').EventEmitter,\n  Connection = require('./connection'),\n  MongoError = require('../error').MongoError,\n  MongoNetworkError = require('../error').MongoNetworkError,\n  Logger = require('./logger'),\n  f = require('util').format,\n  Query = require('./commands').Query,\n  CommandResult = require('./command_result'),\n  MESSAGE_HEADER_SIZE = require('../wireprotocol/shared').MESSAGE_HEADER_SIZE,\n  opcodes = require('../wireprotocol/shared').opcodes,\n  compress = require('../wireprotocol/compression').compress,\n  compressorIDs = require('../wireprotocol/compression').compressorIDs,\n  uncompressibleCommands = require('../wireprotocol/compression').uncompressibleCommands,\n  resolveClusterTime = require('../topologies/shared').resolveClusterTime;\n\nvar MongoCR = require('../auth/mongocr'),\n  X509 = require('../auth/x509'),\n  Plain = require('../auth/plain'),\n  GSSAPI = require('../auth/gssapi'),\n  SSPI = require('../auth/sspi'),\n  ScramSHA1 = require('../auth/scram');\n\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar DESTROYING = 'destroying';\nvar DESTROYED = 'destroyed';\n\nvar _id = 0;\n\nfunction hasSessionSupport(topology) {\n  if (topology == null) return false;\n  return topology.ismaster == null ? false : topology.ismaster.maxWireVersion >= 6;\n}\n\n/**\n * Creates a new Pool instance\n * @class\n * @param {string} options.host The server host\n * @param {number} options.port The server port\n * @param {number} [options.size=5] Max server connection pool size\n * @param {number} [options.minSize=0] Minimum server connection pool size\n * @param {boolean} [options.reconnect=true] Server will attempt to reconnect on loss of connection\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=300000] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=30000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=360000] TCP Socket timeout setting\n * @param {number} [options.monitoringSocketTimeout=30000] TCP Socket timeout setting for replicaset monitoring socket\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passPhrase] SSL Certificate pass phrase\n * @param {boolean} [options.rejectUnauthorized=false] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @fires Pool#connect\n * @fires Pool#close\n * @fires Pool#error\n * @fires Pool#timeout\n * @fires Pool#parseError\n * @return {Pool} A cursor instance\n */\nvar Pool = function(topology, options) {\n  // Add event listener\n  EventEmitter.call(this);\n\n  // Store topology for later use\n  this.topology = topology;\n\n  // Add the options\n  this.options = Object.assign(\n    {\n      // Host and port settings\n      host: 'localhost',\n      port: 27017,\n      // Pool default max size\n      size: 5,\n      // Pool default min size\n      minSize: 0,\n      // socket settings\n      connectionTimeout: 30000,\n      socketTimeout: 360000,\n      keepAlive: true,\n      keepAliveInitialDelay: 300000,\n      noDelay: true,\n      // SSL Settings\n      ssl: false,\n      checkServerIdentity: true,\n      ca: null,\n      crl: null,\n      cert: null,\n      key: null,\n      passPhrase: null,\n      rejectUnauthorized: false,\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: false,\n      // Reconnection options\n      reconnect: true,\n      reconnectInterval: 1000,\n      reconnectTries: 30,\n      // Enable domains\n      domainsEnabled: false\n    },\n    options\n  );\n\n  // Identification information\n  this.id = _id++;\n  // Current reconnect retries\n  this.retriesLeft = this.options.reconnectTries;\n  this.reconnectId = null;\n  // No bson parser passed in\n  if (\n    !options.bson ||\n    (options.bson &&\n      (typeof options.bson.serialize !== 'function' ||\n        typeof options.bson.deserialize !== 'function'))\n  ) {\n    throw new Error('must pass in valid bson parser');\n  }\n\n  // Logger instance\n  this.logger = Logger('Pool', options);\n  // Pool state\n  this.state = DISCONNECTED;\n  // Connections\n  this.availableConnections = [];\n  this.inUseConnections = [];\n  this.connectingConnections = [];\n  // Currently executing\n  this.executing = false;\n  // Operation work queue\n  this.queue = [];\n\n  // All the authProviders\n  this.authProviders = options.authProviders || {\n    mongocr: new MongoCR(options.bson),\n    x509: new X509(options.bson),\n    plain: new Plain(options.bson),\n    gssapi: new GSSAPI(options.bson),\n    sspi: new SSPI(options.bson),\n    'scram-sha-1': new ScramSHA1(options.bson)\n  };\n\n  // Contains the reconnect connection\n  this.reconnectConnection = null;\n\n  // Are we currently authenticating\n  this.authenticating = false;\n  this.loggingout = false;\n  this.nonAuthenticatedConnections = [];\n  this.authenticatingTimestamp = null;\n  // Number of consecutive timeouts caught\n  this.numberOfConsecutiveTimeouts = 0;\n  // Current pool Index\n  this.connectionIndex = 0;\n};\n\ninherits(Pool, EventEmitter);\n\nObject.defineProperty(Pool.prototype, 'size', {\n  enumerable: true,\n  get: function() {\n    return this.options.size;\n  }\n});\n\nObject.defineProperty(Pool.prototype, 'minSize', {\n  enumerable: true,\n  get: function() {\n    return this.options.minSize;\n  }\n});\n\nObject.defineProperty(Pool.prototype, 'connectionTimeout', {\n  enumerable: true,\n  get: function() {\n    return this.options.connectionTimeout;\n  }\n});\n\nObject.defineProperty(Pool.prototype, 'socketTimeout', {\n  enumerable: true,\n  get: function() {\n    return this.options.socketTimeout;\n  }\n});\n\nfunction stateTransition(self, newState) {\n  var legalTransitions = {\n    disconnected: [CONNECTING, DESTROYING, DISCONNECTED],\n    connecting: [CONNECTING, DESTROYING, CONNECTED, DISCONNECTED],\n    connected: [CONNECTED, DISCONNECTED, DESTROYING],\n    destroying: [DESTROYING, DESTROYED],\n    destroyed: [DESTROYED]\n  };\n\n  // Get current state\n  var legalStates = legalTransitions[self.state];\n  if (legalStates && legalStates.indexOf(newState) !== -1) {\n    self.state = newState;\n  } else {\n    self.logger.error(\n      f(\n        'Pool with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]',\n        self.id,\n        self.state,\n        newState,\n        legalStates\n      )\n    );\n  }\n}\n\nfunction authenticate(pool, auth, connection, cb) {\n  if (auth[0] === undefined) return cb(null);\n  // We need to authenticate the server\n  var mechanism = auth[0];\n  var db = auth[1];\n  // Validate if the mechanism exists\n  if (!pool.authProviders[mechanism]) {\n    throw new MongoError(f('authMechanism %s not supported', mechanism));\n  }\n\n  // Get the provider\n  var provider = pool.authProviders[mechanism];\n\n  // Authenticate using the provided mechanism\n  provider.auth.apply(provider, [write(pool), [connection], db].concat(auth.slice(2)).concat([cb]));\n}\n\n// The write function used by the authentication mechanism (bypasses external)\nfunction write(self) {\n  return function(connection, command, callback) {\n    // Get the raw buffer\n    // Ensure we stop auth if pool was destroyed\n    if (self.state === DESTROYED || self.state === DESTROYING) {\n      return callback(new MongoError('pool destroyed'));\n    }\n\n    // Set the connection workItem callback\n    connection.workItems.push({\n      cb: callback,\n      command: true,\n      requestId: command.requestId\n    });\n\n    // Write the buffer out to the connection\n    connection.write(command.toBin());\n  };\n}\n\nfunction reauthenticate(pool, connection, cb) {\n  // Authenticate\n  function authenticateAgainstProvider(pool, connection, providers, cb) {\n    // Finished re-authenticating against providers\n    if (providers.length === 0) return cb();\n    // Get the provider name\n    var provider = pool.authProviders[providers.pop()];\n\n    // Auth provider\n    provider.reauthenticate(write(pool), [connection], function(err) {\n      // We got an error return immediately\n      if (err) return cb(err);\n      // Continue authenticating the connection\n      authenticateAgainstProvider(pool, connection, providers, cb);\n    });\n  }\n\n  // Start re-authenticating process\n  authenticateAgainstProvider(pool, connection, Object.keys(pool.authProviders), cb);\n}\n\nfunction connectionFailureHandler(self, event) {\n  return function(err) {\n    if (this._connectionFailHandled) return;\n    this._connectionFailHandled = true;\n    // Destroy the connection\n    this.destroy();\n\n    // Remove the connection\n    removeConnection(self, this);\n\n    // Flush all work Items on this connection\n    while (this.workItems.length > 0) {\n      var workItem = this.workItems.shift();\n      if (workItem.cb) workItem.cb(err);\n    }\n\n    // Did we catch a timeout, increment the numberOfConsecutiveTimeouts\n    if (event === 'timeout') {\n      self.numberOfConsecutiveTimeouts = self.numberOfConsecutiveTimeouts + 1;\n\n      // Have we timed out more than reconnectTries in a row ?\n      // Force close the pool as we are trying to connect to tcp sink hole\n      if (self.numberOfConsecutiveTimeouts > self.options.reconnectTries) {\n        self.numberOfConsecutiveTimeouts = 0;\n        // Destroy all connections and pool\n        self.destroy(true);\n        // Emit close event\n        return self.emit('close', self);\n      }\n    }\n\n    // No more socket available propegate the event\n    if (self.socketCount() === 0) {\n      if (self.state !== DESTROYED && self.state !== DESTROYING) {\n        stateTransition(self, DISCONNECTED);\n      }\n\n      // Do not emit error events, they are always close events\n      // do not trigger the low level error handler in node\n      event = event === 'error' ? 'close' : event;\n      self.emit(event, err);\n    }\n\n    // Start reconnection attempts\n    if (!self.reconnectId && self.options.reconnect) {\n      self.reconnectId = setTimeout(attemptReconnect(self), self.options.reconnectInterval);\n    }\n\n    // Do we need to do anything to maintain the minimum pool size\n    const totalConnections =\n      self.availableConnections.length +\n      self.connectingConnections.length +\n      self.inUseConnections.length;\n\n    if (totalConnections < self.minSize) {\n      _createConnection(self);\n    }\n  };\n}\n\nfunction attemptReconnect(self) {\n  return function() {\n    self.emit('attemptReconnect', self);\n    if (self.state === DESTROYED || self.state === DESTROYING) return;\n\n    // We are connected do not try again\n    if (self.isConnected()) {\n      self.reconnectId = null;\n      return;\n    }\n\n    // If we have failure schedule a retry\n    function _connectionFailureHandler(self) {\n      return function() {\n        if (this._connectionFailHandled) return;\n        this._connectionFailHandled = true;\n        // Destroy the connection\n        this.destroy();\n        // Count down the number of reconnects\n        self.retriesLeft = self.retriesLeft - 1;\n        // How many retries are left\n        if (self.retriesLeft <= 0) {\n          // Destroy the instance\n          self.destroy();\n          // Emit close event\n          self.emit(\n            'reconnectFailed',\n            new MongoNetworkError(\n              f(\n                'failed to reconnect after %s attempts with interval %s ms',\n                self.options.reconnectTries,\n                self.options.reconnectInterval\n              )\n            )\n          );\n        } else {\n          self.reconnectId = setTimeout(attemptReconnect(self), self.options.reconnectInterval);\n        }\n      };\n    }\n\n    // Got a connect handler\n    function _connectHandler(self) {\n      return function() {\n        // Assign\n        var connection = this;\n\n        // Pool destroyed stop the connection\n        if (self.state === DESTROYED || self.state === DESTROYING) {\n          return connection.destroy();\n        }\n\n        // Clear out all handlers\n        handlers.forEach(function(event) {\n          connection.removeAllListeners(event);\n        });\n\n        // Reset reconnect id\n        self.reconnectId = null;\n\n        // Apply pool connection handlers\n        connection.on('error', connectionFailureHandler(self, 'error'));\n        connection.on('close', connectionFailureHandler(self, 'close'));\n        connection.on('timeout', connectionFailureHandler(self, 'timeout'));\n        connection.on('parseError', connectionFailureHandler(self, 'parseError'));\n\n        // Apply any auth to the connection\n        reauthenticate(self, this, function() {\n          // Reset retries\n          self.retriesLeft = self.options.reconnectTries;\n          // Push to available connections\n          self.availableConnections.push(connection);\n          // Set the reconnectConnection to null\n          self.reconnectConnection = null;\n          // Emit reconnect event\n          self.emit('reconnect', self);\n          // Trigger execute to start everything up again\n          _execute(self)();\n        });\n      };\n    }\n\n    // Create a connection\n    self.reconnectConnection = new Connection(messageHandler(self), self.options);\n    // Add handlers\n    self.reconnectConnection.on('close', _connectionFailureHandler(self, 'close'));\n    self.reconnectConnection.on('error', _connectionFailureHandler(self, 'error'));\n    self.reconnectConnection.on('timeout', _connectionFailureHandler(self, 'timeout'));\n    self.reconnectConnection.on('parseError', _connectionFailureHandler(self, 'parseError'));\n    // On connection\n    self.reconnectConnection.on('connect', _connectHandler(self));\n    // Attempt connection\n    self.reconnectConnection.connect();\n  };\n}\n\nfunction moveConnectionBetween(connection, from, to) {\n  var index = from.indexOf(connection);\n  // Move the connection from connecting to available\n  if (index !== -1) {\n    from.splice(index, 1);\n    to.push(connection);\n  }\n}\n\nfunction messageHandler(self) {\n  return function(message, connection) {\n    // workItem to execute\n    var workItem = null;\n\n    // Locate the workItem\n    for (var i = 0; i < connection.workItems.length; i++) {\n      if (connection.workItems[i].requestId === message.responseTo) {\n        // Get the callback\n        workItem = connection.workItems[i];\n        // Remove from list of workItems\n        connection.workItems.splice(i, 1);\n      }\n    }\n\n    // Reset timeout counter\n    self.numberOfConsecutiveTimeouts = 0;\n\n    // Reset the connection timeout if we modified it for\n    // this operation\n    if (workItem && workItem.socketTimeout) {\n      connection.resetSocketTimeout();\n    }\n\n    // Log if debug enabled\n    if (self.logger.isDebug()) {\n      self.logger.debug(\n        f(\n          'message [%s] received from %s:%s',\n          message.raw.toString('hex'),\n          self.options.host,\n          self.options.port\n        )\n      );\n    }\n\n    // Authenticate any straggler connections\n    function authenticateStragglers(self, connection, callback) {\n      // Get any non authenticated connections\n      var connections = self.nonAuthenticatedConnections.slice(0);\n      var nonAuthenticatedConnections = self.nonAuthenticatedConnections;\n      self.nonAuthenticatedConnections = [];\n\n      // Establish if the connection need to be authenticated\n      // Add to authentication list if\n      // 1. we were in an authentication process when the operation was executed\n      // 2. our current authentication timestamp is from the workItem one, meaning an auth has happened\n      if (\n        connection.workItems.length === 1 &&\n        (connection.workItems[0].authenticating === true ||\n          (typeof connection.workItems[0].authenticatingTimestamp === 'number' &&\n            connection.workItems[0].authenticatingTimestamp !== self.authenticatingTimestamp))\n      ) {\n        // Add connection to the list\n        connections.push(connection);\n      }\n\n      // No connections need to be re-authenticated\n      if (connections.length === 0) {\n        // Release the connection back to the pool\n        moveConnectionBetween(connection, self.inUseConnections, self.availableConnections);\n        // Finish\n        return callback();\n      }\n\n      // Apply re-authentication to all connections before releasing back to pool\n      var connectionCount = connections.length;\n      // Authenticate all connections\n      for (var i = 0; i < connectionCount; i++) {\n        reauthenticate(self, connections[i], function() {\n          connectionCount = connectionCount - 1;\n\n          if (connectionCount === 0) {\n            // Put non authenticated connections in available connections\n            self.availableConnections = self.availableConnections.concat(\n              nonAuthenticatedConnections\n            );\n            // Release the connection back to the pool\n            moveConnectionBetween(connection, self.inUseConnections, self.availableConnections);\n            // Return\n            callback();\n          }\n        });\n      }\n    }\n\n    function handleOperationCallback(self, cb, err, result) {\n      // No domain enabled\n      if (!self.options.domainsEnabled) {\n        return process.nextTick(function() {\n          return cb(err, result);\n        });\n      }\n\n      // Domain enabled just call the callback\n      cb(err, result);\n    }\n\n    authenticateStragglers(self, connection, function() {\n      // Keep executing, ensure current message handler does not stop execution\n      if (!self.executing) {\n        process.nextTick(function() {\n          _execute(self)();\n        });\n      }\n\n      // Time to dispatch the message if we have a callback\n      if (workItem && !workItem.immediateRelease) {\n        try {\n          // Parse the message according to the provided options\n          message.parse(workItem);\n        } catch (err) {\n          return handleOperationCallback(self, workItem.cb, new MongoError(err));\n        }\n\n        // Look for clusterTime, and operationTime and update them if necessary\n        if (message.documents[0]) {\n          if (message.documents[0].$clusterTime) {\n            const $clusterTime = message.documents[0].$clusterTime;\n            self.topology.clusterTime = $clusterTime;\n\n            if (workItem.session != null) {\n              resolveClusterTime(workItem.session, $clusterTime);\n            }\n          }\n\n          if (\n            message.documents[0].operationTime &&\n            workItem.session &&\n            workItem.session.supports.causalConsistency\n          ) {\n            workItem.session.advanceOperationTime(message.documents[0].operationTime);\n          }\n        }\n\n        // Establish if we have an error\n        if (\n          workItem.command &&\n          message.documents[0] &&\n          (message.documents[0].ok === 0 ||\n            message.documents[0]['$err'] ||\n            message.documents[0]['errmsg'] ||\n            message.documents[0]['code'])\n        ) {\n          return handleOperationCallback(self, workItem.cb, new MongoError(message.documents[0]));\n        }\n\n        // Add the connection details\n        message.hashedName = connection.hashedName;\n\n        // Return the documents\n        handleOperationCallback(\n          self,\n          workItem.cb,\n          null,\n          new CommandResult(\n            workItem.fullResult ? message : message.documents[0],\n            connection,\n            message\n          )\n        );\n      }\n    });\n  };\n}\n\n/**\n * Return the total socket count in the pool.\n * @method\n * @return {Number} The number of socket available.\n */\nPool.prototype.socketCount = function() {\n  return this.availableConnections.length + this.inUseConnections.length;\n  // + this.connectingConnections.length;\n};\n\n/**\n * Return all pool connections\n * @method\n * @return {Connection[]} The pool connections\n */\nPool.prototype.allConnections = function() {\n  return this.availableConnections.concat(this.inUseConnections).concat(this.connectingConnections);\n};\n\n/**\n * Get a pool connection (round-robin)\n * @method\n * @return {Connection}\n */\nPool.prototype.get = function() {\n  return this.allConnections()[0];\n};\n\n/**\n * Is the pool connected\n * @method\n * @return {boolean}\n */\nPool.prototype.isConnected = function() {\n  // We are in a destroyed state\n  if (this.state === DESTROYED || this.state === DESTROYING) {\n    return false;\n  }\n\n  // Get connections\n  var connections = this.availableConnections.concat(this.inUseConnections);\n\n  // Check if we have any connected connections\n  for (var i = 0; i < connections.length; i++) {\n    if (connections[i].isConnected()) return true;\n  }\n\n  // Might be authenticating, but we are still connected\n  if (connections.length === 0 && this.authenticating) {\n    return true;\n  }\n\n  // Not connected\n  return false;\n};\n\n/**\n * Was the pool destroyed\n * @method\n * @return {boolean}\n */\nPool.prototype.isDestroyed = function() {\n  return this.state === DESTROYED || this.state === DESTROYING;\n};\n\n/**\n * Is the pool in a disconnected state\n * @method\n * @return {boolean}\n */\nPool.prototype.isDisconnected = function() {\n  return this.state === DISCONNECTED;\n};\n\n/**\n * Connect pool\n * @method\n */\nPool.prototype.connect = function() {\n  if (this.state !== DISCONNECTED) {\n    throw new MongoError('connection in unlawful state ' + this.state);\n  }\n\n  var self = this;\n  // Transition to connecting state\n  stateTransition(this, CONNECTING);\n  // Create an array of the arguments\n  var args = Array.prototype.slice.call(arguments, 0);\n  // Create a connection\n  var connection = new Connection(messageHandler(self), this.options);\n  // Add to list of connections\n  this.connectingConnections.push(connection);\n  // Add listeners to the connection\n  connection.once('connect', function(connection) {\n    if (self.state === DESTROYED || self.state === DESTROYING) return self.destroy();\n\n    // If we are in a topology, delegate the auth to it\n    // This is to avoid issues where we would auth against an\n    // arbiter\n    if (self.options.inTopology) {\n      // Set connected mode\n      stateTransition(self, CONNECTED);\n\n      // Move the active connection\n      moveConnectionBetween(connection, self.connectingConnections, self.availableConnections);\n\n      // Emit the connect event\n      return self.emit('connect', self);\n    }\n\n    // Apply any store credentials\n    reauthenticate(self, connection, function(err) {\n      if (self.state === DESTROYED || self.state === DESTROYING) return self.destroy();\n\n      // We have an error emit it\n      if (err) {\n        // Destroy the pool\n        self.destroy();\n        // Emit the error\n        return self.emit('error', err);\n      }\n\n      // Authenticate\n      authenticate(self, args, connection, function(err) {\n        if (self.state === DESTROYED || self.state === DESTROYING) return self.destroy();\n\n        // We have an error emit it\n        if (err) {\n          // Destroy the pool\n          self.destroy();\n          // Emit the error\n          return self.emit('error', err);\n        }\n        // Set connected mode\n        stateTransition(self, CONNECTED);\n\n        // Move the active connection\n        moveConnectionBetween(connection, self.connectingConnections, self.availableConnections);\n\n        // if we have a minPoolSize, create a connection\n        if (self.minSize) {\n          for (let i = 0; i < self.minSize; i++) _createConnection(self);\n        }\n\n        // Emit the connect event\n        self.emit('connect', self);\n      });\n    });\n  });\n\n  // Add error handlers\n  connection.once('error', connectionFailureHandler(this, 'error'));\n  connection.once('close', connectionFailureHandler(this, 'close'));\n  connection.once('timeout', connectionFailureHandler(this, 'timeout'));\n  connection.once('parseError', connectionFailureHandler(this, 'parseError'));\n\n  try {\n    connection.connect();\n  } catch (err) {\n    // SSL or something threw on connect\n    process.nextTick(function() {\n      self.emit('error', err);\n    });\n  }\n};\n\n/**\n * Authenticate using a specified mechanism\n * @method\n * @param {string} mechanism The Auth mechanism we are invoking\n * @param {string} db The db we are invoking the mechanism against\n * @param {...object} param Parameters for the specific mechanism\n * @param {authResultCallback} callback A callback function\n */\nPool.prototype.auth = function(mechanism) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 0);\n  var callback = args.pop();\n\n  // If we don't have the mechanism fail\n  if (self.authProviders[mechanism] == null && mechanism !== 'default') {\n    throw new MongoError(f('auth provider %s does not exist', mechanism));\n  }\n\n  // Signal that we are authenticating a new set of credentials\n  this.authenticating = true;\n  this.authenticatingTimestamp = new Date().getTime();\n\n  // Authenticate all live connections\n  function authenticateLiveConnections(self, args, cb) {\n    // Get the current viable connections\n    var connections = self.allConnections();\n    // Allow nothing else to use the connections while we authenticate them\n    self.availableConnections = [];\n    self.inUseConnections = [];\n    self.connectingConnections = [];\n\n    var connectionsCount = connections.length;\n    var error = null;\n    // No connections available, return\n    if (connectionsCount === 0) {\n      self.authenticating = false;\n      return callback(null);\n    }\n\n    // Authenticate the connections\n    for (var i = 0; i < connections.length; i++) {\n      authenticate(self, args, connections[i], function(err) {\n        connectionsCount = connectionsCount - 1;\n\n        // Store the error\n        if (err) error = err;\n\n        // Processed all connections\n        if (connectionsCount === 0) {\n          // Auth finished\n          self.authenticating = false;\n          // Add the connections back to available connections\n          self.availableConnections = self.availableConnections.concat(connections);\n          // We had an error, return it\n          if (error) {\n            // Log the error\n            if (self.logger.isError()) {\n              self.logger.error(\n                f(\n                  '[%s] failed to authenticate against server %s:%s',\n                  self.id,\n                  self.options.host,\n                  self.options.port\n                )\n              );\n            }\n\n            return cb(error);\n          }\n          cb(null);\n        }\n      });\n    }\n  }\n\n  // Wait for a logout in process to happen\n  function waitForLogout(self, cb) {\n    if (!self.loggingout) return cb();\n    setTimeout(function() {\n      waitForLogout(self, cb);\n    }, 1);\n  }\n\n  // Wait for loggout to finish\n  waitForLogout(self, function() {\n    // Authenticate all live connections\n    authenticateLiveConnections(self, args, function(err) {\n      // Credentials correctly stored in auth provider if successful\n      // Any new connections will now reauthenticate correctly\n      self.authenticating = false;\n      // Return after authentication connections\n      callback(err);\n    });\n  });\n};\n\n/**\n * Logout all users against a database\n * @method\n * @param {string} dbName The database name\n * @param {authResultCallback} callback A callback function\n */\nPool.prototype.logout = function(dbName, callback) {\n  var self = this;\n  if (typeof dbName !== 'string') {\n    throw new MongoError('logout method requires a db name as first argument');\n  }\n\n  if (typeof callback !== 'function') {\n    throw new MongoError('logout method requires a callback');\n  }\n\n  // Indicate logout in process\n  this.loggingout = true;\n\n  // Get all relevant connections\n  var connections = self.availableConnections.concat(self.inUseConnections);\n  var count = connections.length;\n  // Store any error\n  var error = null;\n\n  // Send logout command over all the connections\n  for (var i = 0; i < connections.length; i++) {\n    write(self)(\n      connections[i],\n      new Query(\n        this.options.bson,\n        f('%s.$cmd', dbName),\n        { logout: 1 },\n        { numberToSkip: 0, numberToReturn: 1 }\n      ),\n      function(err) {\n        count = count - 1;\n        if (err) error = err;\n\n        if (count === 0) {\n          self.loggingout = false;\n          callback(error);\n        }\n      }\n    );\n  }\n};\n\n/**\n * Unref the pool\n * @method\n */\nPool.prototype.unref = function() {\n  // Get all the known connections\n  var connections = this.availableConnections\n    .concat(this.inUseConnections)\n    .concat(this.connectingConnections);\n  connections.forEach(function(c) {\n    c.unref();\n  });\n};\n\n// Events\nvar events = ['error', 'close', 'timeout', 'parseError', 'connect'];\n\n// Destroy the connections\nfunction destroy(self, connections) {\n  // Destroy all connections\n  connections.forEach(function(c) {\n    // Remove all listeners\n    for (var i = 0; i < events.length; i++) {\n      c.removeAllListeners(events[i]);\n    }\n    // Destroy connection\n    c.destroy();\n  });\n\n  // Zero out all connections\n  self.inUseConnections = [];\n  self.availableConnections = [];\n  self.nonAuthenticatedConnections = [];\n  self.connectingConnections = [];\n\n  // Set state to destroyed\n  stateTransition(self, DESTROYED);\n}\n\n/**\n * Destroy pool\n * @method\n */\nPool.prototype.destroy = function(force) {\n  var self = this;\n  // Do not try again if the pool is already dead\n  if (this.state === DESTROYED || self.state === DESTROYING) return;\n  // Set state to destroyed\n  stateTransition(this, DESTROYING);\n\n  // Are we force closing\n  if (force) {\n    // Get all the known connections\n    var connections = self.availableConnections\n      .concat(self.inUseConnections)\n      .concat(self.nonAuthenticatedConnections)\n      .concat(self.connectingConnections);\n\n    // Flush any remaining work items with\n    // an error\n    while (self.queue.length > 0) {\n      var workItem = self.queue.shift();\n      if (typeof workItem.cb === 'function') {\n        workItem.cb(new MongoError('Pool was force destroyed'));\n      }\n    }\n\n    // Destroy the topology\n    return destroy(self, connections);\n  }\n\n  // Clear out the reconnect if set\n  if (this.reconnectId) {\n    clearTimeout(this.reconnectId);\n  }\n\n  // If we have a reconnect connection running, close\n  // immediately\n  if (this.reconnectConnection) {\n    this.reconnectConnection.destroy();\n  }\n\n  // Wait for the operations to drain before we close the pool\n  function checkStatus() {\n    flushMonitoringOperations(self.queue);\n\n    if (self.queue.length === 0) {\n      // Get all the known connections\n      var connections = self.availableConnections\n        .concat(self.inUseConnections)\n        .concat(self.nonAuthenticatedConnections)\n        .concat(self.connectingConnections);\n\n      // Check if we have any in flight operations\n      for (var i = 0; i < connections.length; i++) {\n        // There is an operation still in flight, reschedule a\n        // check waiting for it to drain\n        if (connections[i].workItems.length > 0) {\n          return setTimeout(checkStatus, 1);\n        }\n      }\n\n      destroy(self, connections);\n      // } else if (self.queue.length > 0 && !this.reconnectId) {\n    } else {\n      // Ensure we empty the queue\n      _execute(self)();\n      // Set timeout\n      setTimeout(checkStatus, 1);\n    }\n  }\n\n  // Initiate drain of operations\n  checkStatus();\n};\n\n// Prepare the buffer that Pool.prototype.write() uses to send to the server\nvar serializeCommands = function(self, commands, result, callback) {\n  // Base case when there are no more commands to serialize\n  if (commands.length === 0) return callback(null, result);\n\n  // Pop off the zeroth command and serialize it\n  var thisCommand = commands.shift();\n  var originalCommandBuffer = thisCommand.toBin();\n\n  // Check whether we and the server have agreed to use a compressor\n  if (self.options.agreedCompressor && !hasUncompressibleCommands(thisCommand)) {\n    // Transform originalCommandBuffer into OP_COMPRESSED\n    var concatenatedOriginalCommandBuffer = Buffer.concat(originalCommandBuffer);\n    var messageToBeCompressed = concatenatedOriginalCommandBuffer.slice(MESSAGE_HEADER_SIZE);\n\n    // Extract information needed for OP_COMPRESSED from the uncompressed message\n    var originalCommandOpCode = concatenatedOriginalCommandBuffer.readInt32LE(12);\n\n    // Compress the message body\n    compress(self, messageToBeCompressed, function(err, compressedMessage) {\n      if (err) return callback(err, null);\n\n      // Create the msgHeader of OP_COMPRESSED\n      var msgHeader = new Buffer(MESSAGE_HEADER_SIZE);\n      msgHeader.writeInt32LE(MESSAGE_HEADER_SIZE + 9 + compressedMessage.length, 0); // messageLength\n      msgHeader.writeInt32LE(thisCommand.requestId, 4); // requestID\n      msgHeader.writeInt32LE(0, 8); // responseTo (zero)\n      msgHeader.writeInt32LE(opcodes.OP_COMPRESSED, 12); // opCode\n\n      // Create the compression details of OP_COMPRESSED\n      var compressionDetails = new Buffer(9);\n      compressionDetails.writeInt32LE(originalCommandOpCode, 0); // originalOpcode\n      compressionDetails.writeInt32LE(messageToBeCompressed.length, 4); // Size of the uncompressed compressedMessage, excluding the MsgHeader\n      compressionDetails.writeUInt8(compressorIDs[self.options.agreedCompressor], 8); // compressorID\n\n      // Push the concatenation of the OP_COMPRESSED message onto results\n      result.push(Buffer.concat([msgHeader, compressionDetails, compressedMessage]));\n\n      // Continue recursing through the commands array\n      serializeCommands(self, commands, result, callback);\n    });\n  } else {\n    // Push the serialization of the command onto results\n    result.push(originalCommandBuffer);\n\n    // Continue recursing through the commands array\n    serializeCommands(self, commands, result, callback);\n  }\n};\n\n/**\n * Write a message to MongoDB\n * @method\n * @return {Connection}\n */\nPool.prototype.write = function(commands, options, cb) {\n  var self = this;\n  // Ensure we have a callback\n  if (typeof options === 'function') {\n    cb = options;\n  }\n\n  // Always have options\n  options = options || {};\n\n  // We need to have a callback function unless the message returns no response\n  if (!(typeof cb === 'function') && !options.noResponse) {\n    throw new MongoError('write method must provide a callback');\n  }\n\n  // Pool was destroyed error out\n  if (this.state === DESTROYED || this.state === DESTROYING) {\n    // Callback with an error\n    if (cb) {\n      try {\n        cb(new MongoError('pool destroyed'));\n      } catch (err) {\n        process.nextTick(function() {\n          throw err;\n        });\n      }\n    }\n\n    return;\n  }\n\n  if (this.options.domainsEnabled && process.domain && typeof cb === 'function') {\n    // if we have a domain bind to it\n    var oldCb = cb;\n    cb = process.domain.bind(function() {\n      // v8 - argumentsToArray one-liner\n      var args = new Array(arguments.length);\n      for (var i = 0; i < arguments.length; i++) {\n        args[i] = arguments[i];\n      }\n      // bounce off event loop so domain switch takes place\n      process.nextTick(function() {\n        oldCb.apply(null, args);\n      });\n    });\n  }\n\n  // Do we have an operation\n  var operation = {\n    cb: cb,\n    raw: false,\n    promoteLongs: true,\n    promoteValues: true,\n    promoteBuffers: false,\n    fullResult: false\n  };\n\n  // Set the options for the parsing\n  operation.promoteLongs = typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true;\n  operation.promoteValues =\n    typeof options.promoteValues === 'boolean' ? options.promoteValues : true;\n  operation.promoteBuffers =\n    typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false;\n  operation.raw = typeof options.raw === 'boolean' ? options.raw : false;\n  operation.immediateRelease =\n    typeof options.immediateRelease === 'boolean' ? options.immediateRelease : false;\n  operation.documentsReturnedIn = options.documentsReturnedIn;\n  operation.command = typeof options.command === 'boolean' ? options.command : false;\n  operation.fullResult = typeof options.fullResult === 'boolean' ? options.fullResult : false;\n  operation.noResponse = typeof options.noResponse === 'boolean' ? options.noResponse : false;\n  operation.session = options.session || null;\n\n  // Optional per operation socketTimeout\n  operation.socketTimeout = options.socketTimeout;\n  operation.monitoring = options.monitoring;\n  // Custom socket Timeout\n  if (options.socketTimeout) {\n    operation.socketTimeout = options.socketTimeout;\n  }\n\n  // Ensure commands is an array\n  if (!Array.isArray(commands)) {\n    commands = [commands];\n  }\n\n  // Get the requestId\n  operation.requestId = commands[commands.length - 1].requestId;\n\n  if (hasSessionSupport(this.topology)) {\n    let sessionOptions = {};\n    if (this.topology.clusterTime) {\n      sessionOptions = { $clusterTime: this.topology.clusterTime };\n    }\n\n    if (operation.session) {\n      // TODO: reenable when sessions development is complete\n      // if (operation.session.topology !== this.topology) {\n      //   return cb(\n      //     new MongoError('Sessions may only be used with the client they were created from')\n      //   );\n      // }\n\n      if (operation.session.hasEnded) {\n        return cb(new MongoError('Use of expired sessions is not permitted'));\n      }\n\n      if (\n        operation.session.clusterTime &&\n        operation.session.clusterTime.clusterTime.greaterThan(\n          sessionOptions.$clusterTime.clusterTime\n        )\n      ) {\n        sessionOptions.$clusterTime = operation.session.clusterTime;\n      }\n\n      sessionOptions.lsid = operation.session.id;\n\n      // update the `lastUse` of the acquired ServerSession\n      operation.session.serverSession.lastUse = Date.now();\n    }\n\n    // decorate the commands with session-specific details\n    commands.forEach(command => {\n      if (command instanceof Query) {\n        Object.assign(command.query, sessionOptions);\n      } else {\n        Object.assign(command, sessionOptions);\n      }\n    });\n  }\n\n  // Prepare the operation buffer\n  serializeCommands(self, commands, [], function(err, serializedCommands) {\n    if (err) throw err;\n\n    // Set the operation's buffer to the serialization of the commands\n    operation.buffer = serializedCommands;\n\n    // If we have a monitoring operation schedule as the very first operation\n    // Otherwise add to back of queue\n    if (options.monitoring) {\n      self.queue.unshift(operation);\n    } else {\n      self.queue.push(operation);\n    }\n\n    // Attempt to execute the operation\n    if (!self.executing) {\n      process.nextTick(function() {\n        _execute(self)();\n      });\n    }\n  });\n};\n\n// Return whether a command contains an uncompressible command term\n// Will return true if command contains no uncompressible command terms\nvar hasUncompressibleCommands = function(command) {\n  return uncompressibleCommands.some(function(cmd) {\n    return command.query.hasOwnProperty(cmd);\n  });\n};\n\n// Remove connection method\nfunction remove(connection, connections) {\n  for (var i = 0; i < connections.length; i++) {\n    if (connections[i] === connection) {\n      connections.splice(i, 1);\n      return true;\n    }\n  }\n}\n\nfunction removeConnection(self, connection) {\n  if (remove(connection, self.availableConnections)) return;\n  if (remove(connection, self.inUseConnections)) return;\n  if (remove(connection, self.connectingConnections)) return;\n  if (remove(connection, self.nonAuthenticatedConnections)) return;\n}\n\n// All event handlers\nvar handlers = ['close', 'message', 'error', 'timeout', 'parseError', 'connect'];\n\nfunction _createConnection(self) {\n  if (self.state === DESTROYED || self.state === DESTROYING) {\n    return;\n  }\n  var connection = new Connection(messageHandler(self), self.options);\n\n  // Push the connection\n  self.connectingConnections.push(connection);\n\n  // Handle any errors\n  var tempErrorHandler = function(_connection) {\n    return function() {\n      // Destroy the connection\n      _connection.destroy();\n      // Remove the connection from the connectingConnections list\n      removeConnection(self, _connection);\n      // Start reconnection attempts\n      if (!self.reconnectId && self.options.reconnect) {\n        self.reconnectId = setTimeout(attemptReconnect(self), self.options.reconnectInterval);\n      }\n    };\n  };\n\n  // Handle successful connection\n  var tempConnectHandler = function(_connection) {\n    return function() {\n      // Destroyed state return\n      if (self.state === DESTROYED || self.state === DESTROYING) {\n        // Remove the connection from the list\n        removeConnection(self, _connection);\n        return _connection.destroy();\n      }\n\n      // Destroy all event emitters\n      handlers.forEach(function(e) {\n        _connection.removeAllListeners(e);\n      });\n\n      // Add the final handlers\n      _connection.once('close', connectionFailureHandler(self, 'close'));\n      _connection.once('error', connectionFailureHandler(self, 'error'));\n      _connection.once('timeout', connectionFailureHandler(self, 'timeout'));\n      _connection.once('parseError', connectionFailureHandler(self, 'parseError'));\n\n      // Signal\n      reauthenticate(self, _connection, function(err) {\n        if (self.state === DESTROYED || self.state === DESTROYING) {\n          return _connection.destroy();\n        }\n        // Remove the connection from the connectingConnections list\n        removeConnection(self, _connection);\n\n        // Handle error\n        if (err) {\n          return _connection.destroy();\n        }\n\n        // If we are c at the moment\n        // Do not automatially put in available connections\n        // As we need to apply the credentials first\n        if (self.authenticating) {\n          self.nonAuthenticatedConnections.push(_connection);\n        } else {\n          // Push to available\n          self.availableConnections.push(_connection);\n          // Execute any work waiting\n          _execute(self)();\n        }\n      });\n    };\n  };\n\n  // Add all handlers\n  connection.once('close', tempErrorHandler(connection));\n  connection.once('error', tempErrorHandler(connection));\n  connection.once('timeout', tempErrorHandler(connection));\n  connection.once('parseError', tempErrorHandler(connection));\n  connection.once('connect', tempConnectHandler(connection));\n\n  // Start connection\n  connection.connect();\n}\n\nfunction flushMonitoringOperations(queue) {\n  for (var i = 0; i < queue.length; i++) {\n    if (queue[i].monitoring) {\n      var workItem = queue[i];\n      queue.splice(i, 1);\n      workItem.cb(\n        new MongoError({ message: 'no connection available for monitoring', driver: true })\n      );\n    }\n  }\n}\n\nfunction _execute(self) {\n  return function() {\n    if (self.state === DESTROYED) return;\n    // Already executing, skip\n    if (self.executing) return;\n    // Set pool as executing\n    self.executing = true;\n\n    // Wait for auth to clear before continuing\n    function waitForAuth(cb) {\n      if (!self.authenticating) return cb();\n      // Wait for a milisecond and try again\n      setTimeout(function() {\n        waitForAuth(cb);\n      }, 1);\n    }\n\n    // Block on any auth in process\n    waitForAuth(function() {\n      // New pool connections are in progress, wait them to finish\n      // before executing any more operation to ensure distribution of\n      // operations\n      if (self.connectingConnections.length > 0) {\n        return;\n      }\n\n      // As long as we have available connections\n      // eslint-disable-next-line\n      while (true) {\n        // Total availble connections\n        var totalConnections =\n          self.availableConnections.length +\n          self.connectingConnections.length +\n          self.inUseConnections.length;\n\n        // No available connections available, flush any monitoring ops\n        if (self.availableConnections.length === 0) {\n          // Flush any monitoring operations\n          flushMonitoringOperations(self.queue);\n          break;\n        }\n\n        // No queue break\n        if (self.queue.length === 0) {\n          break;\n        }\n\n        // Get a connection\n        var connection = null;\n\n        // Locate all connections that have no work\n        var connections = [];\n        // Get a list of all connections\n        for (var i = 0; i < self.availableConnections.length; i++) {\n          if (self.availableConnections[i].workItems.length === 0) {\n            connections.push(self.availableConnections[i]);\n          }\n        }\n\n        // No connection found that has no work on it, just pick one for pipelining\n        if (connections.length === 0) {\n          connection =\n            self.availableConnections[self.connectionIndex++ % self.availableConnections.length];\n        } else {\n          connection = connections[self.connectionIndex++ % connections.length];\n        }\n\n        // Is the connection connected\n        if (connection.isConnected()) {\n          // Get the next work item\n          var workItem = self.queue.shift();\n\n          // If we are monitoring we need to use a connection that is not\n          // running another operation to avoid socket timeout changes\n          // affecting an existing operation\n          if (workItem.monitoring) {\n            var foundValidConnection = false;\n\n            for (i = 0; i < self.availableConnections.length; i++) {\n              // If the connection is connected\n              // And there are no pending workItems on it\n              // Then we can safely use it for monitoring.\n              if (\n                self.availableConnections[i].isConnected() &&\n                self.availableConnections[i].workItems.length === 0\n              ) {\n                foundValidConnection = true;\n                connection = self.availableConnections[i];\n                break;\n              }\n            }\n\n            // No safe connection found, attempt to grow the connections\n            // if possible and break from the loop\n            if (!foundValidConnection) {\n              // Put workItem back on the queue\n              self.queue.unshift(workItem);\n\n              // Attempt to grow the pool if it's not yet maxsize\n              if (totalConnections < self.options.size && self.queue.length > 0) {\n                // Create a new connection\n                _createConnection(self);\n              }\n\n              // Re-execute the operation\n              setTimeout(function() {\n                _execute(self)();\n              }, 10);\n\n              break;\n            }\n          }\n\n          // Don't execute operation until we have a full pool\n          if (totalConnections < self.options.size) {\n            // Connection has work items, then put it back on the queue\n            // and create a new connection\n            if (connection.workItems.length > 0) {\n              // Lets put the workItem back on the list\n              self.queue.unshift(workItem);\n              // Create a new connection\n              _createConnection(self);\n              // Break from the loop\n              break;\n            }\n          }\n\n          // Get actual binary commands\n          var buffer = workItem.buffer;\n\n          // Set current status of authentication process\n          workItem.authenticating = self.authenticating;\n          workItem.authenticatingTimestamp = self.authenticatingTimestamp;\n\n          // If we are monitoring take the connection of the availableConnections\n          if (workItem.monitoring) {\n            moveConnectionBetween(connection, self.availableConnections, self.inUseConnections);\n          }\n\n          // Track the executing commands on the mongo server\n          // as long as there is an expected response\n          if (!workItem.noResponse) {\n            connection.workItems.push(workItem);\n          }\n\n          // We have a custom socketTimeout\n          if (!workItem.immediateRelease && typeof workItem.socketTimeout === 'number') {\n            connection.setSocketTimeout(workItem.socketTimeout);\n          }\n\n          // Capture if write was successful\n          var writeSuccessful = true;\n\n          // Put operation on the wire\n          if (Array.isArray(buffer)) {\n            for (i = 0; i < buffer.length; i++) {\n              writeSuccessful = connection.write(buffer[i]);\n            }\n          } else {\n            writeSuccessful = connection.write(buffer);\n          }\n\n          if (writeSuccessful && workItem.immediateRelease && self.authenticating) {\n            removeConnection(self, connection);\n            self.nonAuthenticatedConnections.push(connection);\n          } else if (writeSuccessful === false) {\n            // If write not successful put back on queue\n            self.queue.unshift(workItem);\n            // Remove the disconnected connection\n            removeConnection(self, connection);\n            // Flush any monitoring operations in the queue, failing fast\n            flushMonitoringOperations(self.queue);\n          }\n        } else {\n          // Remove the disconnected connection\n          removeConnection(self, connection);\n          // Flush any monitoring operations in the queue, failing fast\n          flushMonitoringOperations(self.queue);\n        }\n      }\n    });\n\n    self.executing = false;\n  };\n}\n\n// Make execution loop available for testing\nPool._execute = _execute;\n\n/**\n * A server connect event, used to verify that the connection is up and running\n *\n * @event Pool#connect\n * @type {Pool}\n */\n\n/**\n * A server reconnect event, used to verify that pool reconnected.\n *\n * @event Pool#reconnect\n * @type {Pool}\n */\n\n/**\n * The server connection closed, all pool connections closed\n *\n * @event Pool#close\n * @type {Pool}\n */\n\n/**\n * The server connection caused an error, all pool connections closed\n *\n * @event Pool#error\n * @type {Pool}\n */\n\n/**\n * The server connection timed out, all pool connections closed\n *\n * @event Pool#timeout\n * @type {Pool}\n */\n\n/**\n * The driver experienced an invalid message, all pool connections closed\n *\n * @event Pool#parseError\n * @type {Pool}\n */\n\n/**\n * The driver attempted to reconnect\n *\n * @event Pool#attemptReconnect\n * @type {Pool}\n */\n\n/**\n * The driver exhausted all reconnect attempts\n *\n * @event Pool#reconnectFailed\n * @type {Pool}\n */\n\nmodule.exports = Pool;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/connection/pool.js\n// module id = 163\n// module chunks = 0","'use strict';\n\nconst retrieveBSON = require('./connection/utils').retrieveBSON,\n  EventEmitter = require('events'),\n  BSON = retrieveBSON(),\n  Binary = BSON.Binary,\n  uuidV4 = require('./utils').uuidV4;\n\n/**\n *\n */\nclass ClientSession extends EventEmitter {\n  constructor(topology, sessionPool, options) {\n    super();\n\n    if (topology == null) {\n      throw new Error('ClientSession requires a topology');\n    }\n\n    if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n      throw new Error('ClientSession requires a ServerSessionPool');\n    }\n\n    options = options || {};\n    this.topology = topology;\n    this.sessionPool = sessionPool;\n    this.hasEnded = false;\n    this.serverSession = sessionPool.acquire();\n\n    this.supports = {\n      causalConsistency: !!options.causalConsistency\n    };\n\n    options = options || {};\n    if (typeof options.initialClusterTime !== 'undefined') {\n      this.clusterTime = options.initialClusterTime;\n    } else {\n      this.clusterTime = null;\n    }\n\n    this.operationTime = null;\n  }\n\n  /**\n   *\n   */\n  endSession(options, callback) {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options || {};\n\n    if (this.hasEnded) {\n      if (typeof callback === 'function') callback(null, null);\n      return;\n    }\n\n    if (!options.skipCommand) {\n      // send the `endSessions` command\n      this.topology.endSessions(this.id);\n    }\n\n    // mark the session as ended, and emit a signal\n    this.hasEnded = true;\n    this.emit('ended', this);\n\n    // release the server session back to the pool\n    this.sessionPool.release(this.serverSession);\n\n    // spec indicates that we should ignore all errors for `endSessions`\n    if (typeof callback === 'function') callback(null, null);\n  }\n\n  /**\n   * Advances the operationTime for a ClientSession.\n   *\n   * @param {object} operationTime the `BSON.Timestamp` of the operation type it is desired to advance to\n   */\n  advanceOperationTime(operationTime) {\n    if (this.operationTime == null) {\n      this.operationTime = operationTime;\n      return;\n    }\n\n    if (operationTime.greaterThan(this.operationTime)) {\n      this.operationTime = operationTime;\n    }\n  }\n\n  /**\n   * Used to determine if this session equals another\n   */\n  equals(session) {\n    if (!(session instanceof ClientSession)) {\n      return false;\n    }\n\n    return this.id.id.buffer.equals(session.id.id.buffer);\n  }\n}\n\nObject.defineProperty(ClientSession.prototype, 'id', {\n  get: function() {\n    return this.serverSession.id;\n  }\n});\n\n/**\n *\n */\nclass ServerSession {\n  constructor() {\n    this.id = { id: new Binary(uuidV4(), Binary.SUBTYPE_UUID) };\n    this.lastUse = Date.now();\n    this.txnNumber = 0;\n  }\n\n  /**\n   *\n   * @param {*} sessionTimeoutMinutes\n   */\n  hasTimedOut(sessionTimeoutMinutes) {\n    // Take the difference of the lastUse timestamp and now, which will result in a value in\n    // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n    const idleTimeMinutes = Math.round(\n      (((Date.now() - this.lastUse) % 86400000) % 3600000) / 60000\n    );\n\n    return idleTimeMinutes > sessionTimeoutMinutes - 1;\n  }\n}\n\n/**\n *\n */\nclass ServerSessionPool {\n  constructor(topology) {\n    if (topology == null) {\n      throw new Error('ServerSessionPool requires a topology');\n    }\n\n    this.topology = topology;\n    this.sessions = [];\n  }\n\n  endAllPooledSessions() {\n    if (this.sessions.length) {\n      this.topology.endSessions(this.sessions.map(session => session.id));\n      this.sessions = [];\n    }\n  }\n\n  /**\n   * @returns {ServerSession}\n   */\n  acquire() {\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;\n    while (this.sessions.length) {\n      const session = this.sessions.shift();\n      if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n        return session;\n      }\n    }\n\n    return new ServerSession();\n  }\n\n  /**\n   *\n   * @param {*} session\n   */\n  release(session) {\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;\n    while (this.sessions.length) {\n      const session = this.sessions[this.sessions.length - 1];\n      if (session.hasTimedOut(sessionTimeoutMinutes)) {\n        this.sessions.pop();\n      } else {\n        break;\n      }\n    }\n\n    if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n      this.sessions.unshift(session);\n    }\n  }\n}\n\nmodule.exports = {\n  ClientSession: ClientSession,\n  ServerSession: ServerSession,\n  ServerSessionPool: ServerSessionPool\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/sessions.js\n// module id = 164\n// module chunks = 0","'use strict';\n\nconst inherits = require('util').inherits,\n  f = require('util').format,\n  EventEmitter = require('events').EventEmitter,\n  BasicCursor = require('../cursor'),\n  Logger = require('../connection/logger'),\n  retrieveBSON = require('../connection/utils').retrieveBSON,\n  MongoError = require('../error').MongoError,\n  errors = require('../error'),\n  Server = require('./server'),\n  clone = require('./shared').clone,\n  diff = require('./shared').diff,\n  cloneOptions = require('./shared').cloneOptions,\n  createClientInfo = require('./shared').createClientInfo,\n  SessionMixins = require('./shared').SessionMixins,\n  isRetryableWritesSupported = require('./shared').isRetryableWritesSupported,\n  getNextTransactionNumber = require('./shared').getNextTransactionNumber;\n\nconst BSON = retrieveBSON();\n\n/**\n * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is\n * used to construct connections.\n *\n * @example\n * var Mongos = require('mongodb-core').Mongos\n *   , ReadPreference = require('mongodb-core').ReadPreference\n *   , assert = require('assert');\n *\n * var server = new Mongos([{host: 'localhost', port: 30000}]);\n * // Wait for the connection event\n * server.on('connect', function(server) {\n *   server.destroy();\n * });\n *\n * // Start connecting\n * server.connect();\n */\n\nvar MongoCR = require('../auth/mongocr'),\n  X509 = require('../auth/x509'),\n  Plain = require('../auth/plain'),\n  GSSAPI = require('../auth/gssapi'),\n  SSPI = require('../auth/sspi'),\n  ScramSHA1 = require('../auth/scram');\n\n//\n// States\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar UNREFERENCED = 'unreferenced';\nvar DESTROYED = 'destroyed';\n\nfunction stateTransition(self, newState) {\n  var legalTransitions = {\n    disconnected: [CONNECTING, DESTROYED, DISCONNECTED],\n    connecting: [CONNECTING, DESTROYED, CONNECTED, DISCONNECTED],\n    connected: [CONNECTED, DISCONNECTED, DESTROYED, UNREFERENCED],\n    unreferenced: [UNREFERENCED, DESTROYED],\n    destroyed: [DESTROYED]\n  };\n\n  // Get current state\n  var legalStates = legalTransitions[self.state];\n  if (legalStates && legalStates.indexOf(newState) !== -1) {\n    self.state = newState;\n  } else {\n    self.logger.error(\n      f(\n        'Pool with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]',\n        self.id,\n        self.state,\n        newState,\n        legalStates\n      )\n    );\n  }\n}\n\n//\n// ReplSet instance id\nvar id = 1;\nvar handlers = ['connect', 'close', 'error', 'timeout', 'parseError'];\n\n/**\n * Creates a new Mongos instance\n * @class\n * @param {array} seedlist A list of seeds for the replicaset\n * @param {number} [options.haInterval=5000] The High availability period for replicaset inquiry\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {number} [options.localThresholdMS=15] Cutoff latency point in MS for MongoS proxy selection\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=1000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.singleBufferSerializtion=true] Serialize into single buffer, trade of peak memory for serialization speed\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @return {Mongos} A cursor instance\n * @fires Mongos#connect\n * @fires Mongos#reconnect\n * @fires Mongos#joined\n * @fires Mongos#left\n * @fires Mongos#failed\n * @fires Mongos#fullsetup\n * @fires Mongos#all\n * @fires Mongos#serverHeartbeatStarted\n * @fires Mongos#serverHeartbeatSucceeded\n * @fires Mongos#serverHeartbeatFailed\n * @fires Mongos#topologyOpening\n * @fires Mongos#topologyClosed\n * @fires Mongos#topologyDescriptionChanged\n * @property {string} type the topology type.\n * @property {string} parserType the parser type used (c++ or js).\n */\nvar Mongos = function(seedlist, options) {\n  options = options || {};\n\n  // Get replSet Id\n  this.id = id++;\n\n  // Internal state\n  this.s = {\n    options: Object.assign({}, options),\n    // BSON instance\n    bson:\n      options.bson ||\n      new BSON([\n        BSON.Binary,\n        BSON.Code,\n        BSON.DBRef,\n        BSON.Decimal128,\n        BSON.Double,\n        BSON.Int32,\n        BSON.Long,\n        BSON.Map,\n        BSON.MaxKey,\n        BSON.MinKey,\n        BSON.ObjectId,\n        BSON.BSONRegExp,\n        BSON.Symbol,\n        BSON.Timestamp\n      ]),\n    // Factory overrides\n    Cursor: options.cursorFactory || BasicCursor,\n    // Logger instance\n    logger: Logger('Mongos', options),\n    // Seedlist\n    seedlist: seedlist,\n    // Ha interval\n    haInterval: options.haInterval ? options.haInterval : 10000,\n    // Disconnect handler\n    disconnectHandler: options.disconnectHandler,\n    // Server selection index\n    index: 0,\n    // Connect function options passed in\n    connectOptions: {},\n    // Are we running in debug mode\n    debug: typeof options.debug === 'boolean' ? options.debug : false,\n    // localThresholdMS\n    localThresholdMS: options.localThresholdMS || 15,\n    // Client info\n    clientInfo: createClientInfo(options),\n    // Authentication context\n    authenticationContexts: []\n  };\n\n  // Set the client info\n  this.s.options.clientInfo = createClientInfo(options);\n\n  // Log info warning if the socketTimeout < haInterval as it will cause\n  // a lot of recycled connections to happen.\n  if (\n    this.s.logger.isWarn() &&\n    this.s.options.socketTimeout !== 0 &&\n    this.s.options.socketTimeout < this.s.haInterval\n  ) {\n    this.s.logger.warn(\n      f(\n        'warning socketTimeout %s is less than haInterval %s. This might cause unnecessary server reconnections due to socket timeouts',\n        this.s.options.socketTimeout,\n        this.s.haInterval\n      )\n    );\n  }\n\n  // All the authProviders\n  this.authProviders = options.authProviders || {\n    mongocr: new MongoCR(this.s.bson),\n    x509: new X509(this.s.bson),\n    plain: new Plain(this.s.bson),\n    gssapi: new GSSAPI(this.s.bson),\n    sspi: new SSPI(this.s.bson),\n    'scram-sha-1': new ScramSHA1(this.s.bson)\n  };\n\n  // Disconnected state\n  this.state = DISCONNECTED;\n\n  // Current proxies we are connecting to\n  this.connectingProxies = [];\n  // Currently connected proxies\n  this.connectedProxies = [];\n  // Disconnected proxies\n  this.disconnectedProxies = [];\n  // Are we authenticating\n  this.authenticating = false;\n  // Index of proxy to run operations against\n  this.index = 0;\n  // High availability timeout id\n  this.haTimeoutId = null;\n  // Last ismaster\n  this.ismaster = null;\n\n  // Description of the Replicaset\n  this.topologyDescription = {\n    topologyType: 'Unknown',\n    servers: []\n  };\n\n  // Highest clusterTime seen in responses from the current deployment\n  this.clusterTime = null;\n\n  // Add event listener\n  EventEmitter.call(this);\n};\n\ninherits(Mongos, EventEmitter);\nObject.assign(Mongos.prototype, SessionMixins);\n\nObject.defineProperty(Mongos.prototype, 'type', {\n  enumerable: true,\n  get: function() {\n    return 'mongos';\n  }\n});\n\nObject.defineProperty(Mongos.prototype, 'parserType', {\n  enumerable: true,\n  get: function() {\n    return BSON.native ? 'c++' : 'js';\n  }\n});\n\nObject.defineProperty(Mongos.prototype, 'logicalSessionTimeoutMinutes', {\n  enumerable: true,\n  get: function() {\n    if (!this.ismaster) return null;\n    return this.ismaster.logicalSessionTimeoutMinutes || null;\n  }\n});\n\n/**\n * Emit event if it exists\n * @method\n */\nfunction emitSDAMEvent(self, event, description) {\n  if (self.listeners(event).length > 0) {\n    self.emit(event, description);\n  }\n}\n\n/**\n * Initiate server connect\n * @method\n * @param {array} [options.auth=null] Array of auth options to apply on connect\n */\nMongos.prototype.connect = function(options) {\n  var self = this;\n  // Add any connect level options to the internal state\n  this.s.connectOptions = options || {};\n  // Set connecting state\n  stateTransition(this, CONNECTING);\n  // Create server instances\n  var servers = this.s.seedlist.map(function(x) {\n    return new Server(\n      Object.assign({}, self.s.options, x, {\n        authProviders: self.authProviders,\n        reconnect: false,\n        monitoring: false,\n        parent: self,\n        clientInfo: clone(self.s.clientInfo)\n      })\n    );\n  });\n\n  const serverDescriptionChangedCallback = event => {\n    self.emit('serverDescriptionChanged', event);\n  };\n\n  servers.forEach(function(server) {\n    server.on('serverDescriptionChanged', serverDescriptionChangedCallback);\n    server.on('destroy', () =>\n      server.removeListener('serverDescriptionChanged', serverDescriptionChangedCallback)\n    );\n  });\n\n  // Emit the topology opening event\n  emitSDAMEvent(this, 'topologyOpening', { topologyId: this.id });\n\n  // Start all server connections\n  connectProxies(self, servers);\n};\n\nfunction handleEvent(self) {\n  return function() {\n    if (self.state === DESTROYED) return;\n    // Move to list of disconnectedProxies\n    moveServerFrom(self.connectedProxies, self.disconnectedProxies, this);\n    // Emit the initial topology\n    emitTopologyDescriptionChanged(self);\n    // Emit the left signal\n    self.emit('left', 'mongos', this);\n    // Emit the sdam event\n    self.emit('serverClosed', {\n      topologyId: self.id,\n      address: this.name\n    });\n  };\n}\n\nfunction handleInitialConnectEvent(self, event) {\n  return function() {\n    var _this = this;\n\n    // Destroy the instance\n    if (self.state === DESTROYED) {\n      // Emit the initial topology\n      emitTopologyDescriptionChanged(self);\n      // Move from connectingProxies\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this);\n      return this.destroy();\n    }\n\n    // Check the type of server\n    if (event === 'connect') {\n      // Do we have authentication contexts that need to be applied\n      applyAuthenticationContexts(self, _this, function() {\n        // Get last known ismaster\n        self.ismaster = _this.lastIsMaster();\n\n        // Is this not a proxy, remove t\n        if (self.ismaster.msg === 'isdbgrid') {\n          // Add to the connectd list\n          for (var i = 0; i < self.connectedProxies.length; i++) {\n            if (self.connectedProxies[i].name === _this.name) {\n              // Move from connectingProxies\n              moveServerFrom(self.connectingProxies, self.disconnectedProxies, _this);\n              // Emit the initial topology\n              emitTopologyDescriptionChanged(self);\n              _this.destroy();\n              return self.emit('failed', _this);\n            }\n          }\n\n          // Remove the handlers\n          for (i = 0; i < handlers.length; i++) {\n            _this.removeAllListeners(handlers[i]);\n          }\n\n          // Add stable state handlers\n          _this.on('error', handleEvent(self, 'error'));\n          _this.on('close', handleEvent(self, 'close'));\n          _this.on('timeout', handleEvent(self, 'timeout'));\n          _this.on('parseError', handleEvent(self, 'parseError'));\n\n          // Move from connecting proxies connected\n          moveServerFrom(self.connectingProxies, self.connectedProxies, _this);\n          // Emit the joined event\n          self.emit('joined', 'mongos', _this);\n        } else {\n          // Print warning if we did not find a mongos proxy\n          if (self.s.logger.isWarn()) {\n            var message = 'expected mongos proxy, but found replicaset member mongod for server %s';\n            // We have a standalone server\n            if (!self.ismaster.hosts) {\n              message = 'expected mongos proxy, but found standalone mongod for server %s';\n            }\n\n            self.s.logger.warn(f(message, _this.name));\n          }\n\n          // This is not a mongos proxy, remove it completely\n          removeProxyFrom(self.connectingProxies, _this);\n          // Emit the left event\n          self.emit('left', 'server', _this);\n          // Emit failed event\n          self.emit('failed', _this);\n        }\n      });\n    } else {\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this);\n      // Emit the left event\n      self.emit('left', 'mongos', this);\n      // Emit failed event\n      self.emit('failed', this);\n    }\n\n    // Emit the initial topology\n    emitTopologyDescriptionChanged(self);\n\n    // Trigger topologyMonitor\n    if (self.connectingProxies.length === 0) {\n      // Emit connected if we are connected\n      if (self.connectedProxies.length > 0 && self.state === CONNECTING) {\n        // Set the state to connected\n        stateTransition(self, CONNECTED);\n        // Emit the connect event\n        self.emit('connect', self);\n        self.emit('fullsetup', self);\n        self.emit('all', self);\n      } else if (self.disconnectedProxies.length === 0) {\n        // Print warning if we did not find a mongos proxy\n        if (self.s.logger.isWarn()) {\n          self.s.logger.warn(\n            f('no mongos proxies found in seed list, did you mean to connect to a replicaset')\n          );\n        }\n\n        // Emit the error that no proxies were found\n        return self.emit('error', new MongoError('no mongos proxies found in seed list'));\n      }\n\n      // Topology monitor\n      topologyMonitor(self, { firstConnect: true });\n    }\n  };\n}\n\nfunction connectProxies(self, servers) {\n  // Update connectingProxies\n  self.connectingProxies = self.connectingProxies.concat(servers);\n\n  // Index used to interleaf the server connects, avoiding\n  // runtime issues on io constrained vm's\n  var timeoutInterval = 0;\n\n  function connect(server, timeoutInterval) {\n    setTimeout(function() {\n      // Emit opening server event\n      self.emit('serverOpening', {\n        topologyId: self.id,\n        address: server.name\n      });\n\n      // Emit the initial topology\n      emitTopologyDescriptionChanged(self);\n\n      // Add event handlers\n      server.once('close', handleInitialConnectEvent(self, 'close'));\n      server.once('timeout', handleInitialConnectEvent(self, 'timeout'));\n      server.once('parseError', handleInitialConnectEvent(self, 'parseError'));\n      server.once('error', handleInitialConnectEvent(self, 'error'));\n      server.once('connect', handleInitialConnectEvent(self, 'connect'));\n      // Start connection\n      server.connect(self.s.connectOptions);\n    }, timeoutInterval);\n  }\n  // Start all the servers\n  while (servers.length > 0) {\n    connect(servers.shift(), timeoutInterval++);\n  }\n}\n\nfunction pickProxy(self) {\n  // Get the currently connected Proxies\n  var connectedProxies = self.connectedProxies.slice(0);\n\n  // Set lower bound\n  var lowerBoundLatency = Number.MAX_VALUE;\n\n  // Determine the lower bound for the Proxies\n  for (var i = 0; i < connectedProxies.length; i++) {\n    if (connectedProxies[i].lastIsMasterMS < lowerBoundLatency) {\n      lowerBoundLatency = connectedProxies[i].lastIsMasterMS;\n    }\n  }\n\n  // Filter out the possible servers\n  connectedProxies = connectedProxies.filter(function(server) {\n    if (\n      server.lastIsMasterMS <= lowerBoundLatency + self.s.localThresholdMS &&\n      server.isConnected()\n    ) {\n      return true;\n    }\n  });\n\n  // We have no connectedProxies pick first of the connected ones\n  if (connectedProxies.length === 0) {\n    return self.connectedProxies[0];\n  }\n\n  // Get proxy\n  var proxy = connectedProxies[self.index % connectedProxies.length];\n  // Update the index\n  self.index = (self.index + 1) % connectedProxies.length;\n  // Return the proxy\n  return proxy;\n}\n\nfunction moveServerFrom(from, to, proxy) {\n  for (var i = 0; i < from.length; i++) {\n    if (from[i].name === proxy.name) {\n      from.splice(i, 1);\n    }\n  }\n\n  for (i = 0; i < to.length; i++) {\n    if (to[i].name === proxy.name) {\n      to.splice(i, 1);\n    }\n  }\n\n  to.push(proxy);\n}\n\nfunction removeProxyFrom(from, proxy) {\n  for (var i = 0; i < from.length; i++) {\n    if (from[i].name === proxy.name) {\n      from.splice(i, 1);\n    }\n  }\n}\n\nfunction reconnectProxies(self, proxies, callback) {\n  // Count lefts\n  var count = proxies.length;\n\n  // Handle events\n  var _handleEvent = function(self, event) {\n    return function() {\n      var _self = this;\n      count = count - 1;\n\n      // Destroyed\n      if (self.state === DESTROYED || self.state === UNREFERENCED) {\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n        // Return destroy\n        return this.destroy();\n      }\n\n      if (event === 'connect' && !self.authenticating) {\n        // Do we have authentication contexts that need to be applied\n        applyAuthenticationContexts(self, _self, function() {\n          // Destroyed\n          if (self.state === DESTROYED || self.state === UNREFERENCED) {\n            moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n            return _self.destroy();\n          }\n\n          // Remove the handlers\n          for (var i = 0; i < handlers.length; i++) {\n            _self.removeAllListeners(handlers[i]);\n          }\n\n          // Add stable state handlers\n          _self.on('error', handleEvent(self, 'error'));\n          _self.on('close', handleEvent(self, 'close'));\n          _self.on('timeout', handleEvent(self, 'timeout'));\n          _self.on('parseError', handleEvent(self, 'parseError'));\n\n          // Move to the connected servers\n          moveServerFrom(self.disconnectedProxies, self.connectedProxies, _self);\n          // Emit topology Change\n          emitTopologyDescriptionChanged(self);\n          // Emit joined event\n          self.emit('joined', 'mongos', _self);\n        });\n      } else if (event === 'connect' && self.authenticating) {\n        // Move from connectingProxies\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n        this.destroy();\n      }\n\n      // Are we done finish up callback\n      if (count === 0) {\n        callback();\n      }\n    };\n  };\n\n  // No new servers\n  if (count === 0) {\n    return callback();\n  }\n\n  // Execute method\n  function execute(_server, i) {\n    setTimeout(function() {\n      // Destroyed\n      if (self.state === DESTROYED || self.state === UNREFERENCED) {\n        return;\n      }\n\n      // Create a new server instance\n      var server = new Server(\n        Object.assign({}, self.s.options, {\n          host: _server.name.split(':')[0],\n          port: parseInt(_server.name.split(':')[1], 10),\n          authProviders: self.authProviders,\n          reconnect: false,\n          monitoring: false,\n          parent: self,\n          clientInfo: clone(self.s.clientInfo)\n        })\n      );\n\n      // Relay the server description change\n      server.on('serverDescriptionChanged', function(event) {\n        self.emit('serverDescriptionChanged', event);\n      });\n\n      // Emit opening server event\n      self.emit('serverOpening', {\n        topologyId: server.s.topologyId !== -1 ? server.s.topologyId : self.id,\n        address: server.name\n      });\n\n      // Add temp handlers\n      server.once('connect', _handleEvent(self, 'connect'));\n      server.once('close', _handleEvent(self, 'close'));\n      server.once('timeout', _handleEvent(self, 'timeout'));\n      server.once('error', _handleEvent(self, 'error'));\n      server.once('parseError', _handleEvent(self, 'parseError'));\n\n      // Connect to proxy\n      server.connect(self.s.connectOptions);\n    }, i);\n  }\n\n  // Create new instances\n  for (var i = 0; i < proxies.length; i++) {\n    execute(proxies[i], i);\n  }\n}\n\nfunction applyAuthenticationContexts(self, server, callback) {\n  if (self.s.authenticationContexts.length === 0) {\n    return callback();\n  }\n\n  // Copy contexts to ensure no modificiation in the middle of\n  // auth process.\n  var authContexts = self.s.authenticationContexts.slice(0);\n\n  // Apply one of the contexts\n  function applyAuth(authContexts, server, callback) {\n    if (authContexts.length === 0) return callback();\n    // Get the first auth context\n    var authContext = authContexts.shift();\n    // Copy the params\n    var customAuthContext = authContext.slice(0);\n    // Push our callback handler\n    customAuthContext.push(function(/* err */) {\n      applyAuth(authContexts, server, callback);\n    });\n\n    // Attempt authentication\n    server.auth.apply(server, customAuthContext);\n  }\n\n  // Apply all auth contexts\n  applyAuth(authContexts, server, callback);\n}\n\nfunction topologyMonitor(self, options) {\n  options = options || {};\n\n  // Set momitoring timeout\n  self.haTimeoutId = setTimeout(function() {\n    if (self.state === DESTROYED || self.state === UNREFERENCED) return;\n    // If we have a primary and a disconnect handler, execute\n    // buffered operations\n    if (self.isConnected() && self.s.disconnectHandler) {\n      self.s.disconnectHandler.execute();\n    }\n\n    // Get the connectingServers\n    var proxies = self.connectedProxies.slice(0);\n    // Get the count\n    var count = proxies.length;\n\n    // If the count is zero schedule a new fast\n    function pingServer(_self, _server, cb) {\n      // Measure running time\n      var start = new Date().getTime();\n\n      // Emit the server heartbeat start\n      emitSDAMEvent(self, 'serverHeartbeatStarted', { connectionId: _server.name });\n\n      // Execute ismaster\n      _server.command(\n        'admin.$cmd',\n        {\n          ismaster: true\n        },\n        {\n          monitoring: true,\n          socketTimeout: self.s.options.connectionTimeout || 2000\n        },\n        function(err, r) {\n          if (self.state === DESTROYED || self.state === UNREFERENCED) {\n            // Move from connectingProxies\n            moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\n            _server.destroy();\n            return cb(err, r);\n          }\n\n          // Calculate latency\n          var latencyMS = new Date().getTime() - start;\n\n          // We had an error, remove it from the state\n          if (err) {\n            // Emit the server heartbeat failure\n            emitSDAMEvent(self, 'serverHeartbeatFailed', {\n              durationMS: latencyMS,\n              failure: err,\n              connectionId: _server.name\n            });\n            // Move from connected proxies to disconnected proxies\n            moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\n          } else {\n            // Update the server ismaster\n            _server.ismaster = r.result;\n            _server.lastIsMasterMS = latencyMS;\n\n            // Server heart beat event\n            emitSDAMEvent(self, 'serverHeartbeatSucceeded', {\n              durationMS: latencyMS,\n              reply: r.result,\n              connectionId: _server.name\n            });\n          }\n\n          cb(err, r);\n        }\n      );\n    }\n\n    // No proxies initiate monitor again\n    if (proxies.length === 0) {\n      // Emit close event if any listeners registered\n      if (self.listeners('close').length > 0 && self.state === CONNECTING) {\n        self.emit('error', new MongoError('no mongos proxy available'));\n      } else {\n        self.emit('close', self);\n      }\n\n      // Attempt to connect to any unknown servers\n      return reconnectProxies(self, self.disconnectedProxies, function() {\n        if (self.state === DESTROYED || self.state === UNREFERENCED) return;\n\n        // Are we connected ? emit connect event\n        if (self.state === CONNECTING && options.firstConnect) {\n          self.emit('connect', self);\n          self.emit('fullsetup', self);\n          self.emit('all', self);\n        } else if (self.isConnected()) {\n          self.emit('reconnect', self);\n        } else if (!self.isConnected() && self.listeners('close').length > 0) {\n          self.emit('close', self);\n        }\n\n        // Perform topology monitor\n        topologyMonitor(self);\n      });\n    }\n\n    // Ping all servers\n    for (var i = 0; i < proxies.length; i++) {\n      pingServer(self, proxies[i], function() {\n        count = count - 1;\n\n        if (count === 0) {\n          if (self.state === DESTROYED || self.state === UNREFERENCED) return;\n\n          // Attempt to connect to any unknown servers\n          reconnectProxies(self, self.disconnectedProxies, function() {\n            if (self.state === DESTROYED || self.state === UNREFERENCED) return;\n            // Perform topology monitor\n            topologyMonitor(self);\n          });\n        }\n      });\n    }\n  }, self.s.haInterval);\n}\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nMongos.prototype.lastIsMaster = function() {\n  return this.ismaster;\n};\n\n/**\n * Unref all connections belong to this server\n * @method\n */\nMongos.prototype.unref = function() {\n  // Transition state\n  stateTransition(this, UNREFERENCED);\n  // Get all proxies\n  var proxies = this.connectedProxies.concat(this.connectingProxies);\n  proxies.forEach(function(x) {\n    x.unref();\n  });\n\n  clearTimeout(this.haTimeoutId);\n};\n\n/**\n * Destroy the server connection\n * @param {boolean} [options.force=false] Force destroy the pool\n * @method\n */\nMongos.prototype.destroy = function(options) {\n  var self = this;\n  // Transition state\n  stateTransition(this, DESTROYED);\n  // Get all proxies\n  var proxies = this.connectedProxies.concat(this.connectingProxies);\n  // Clear out any monitoring process\n  if (this.haTimeoutId) clearTimeout(this.haTimeoutId);\n  // Clear out authentication contexts\n  this.s.authenticationContexts = [];\n\n  // Destroy all connecting servers\n  proxies.forEach(function(x) {\n    // Emit the sdam event\n    self.emit('serverClosed', {\n      topologyId: self.id,\n      address: x.name\n    });\n\n    // Destroy the server\n    x.destroy(options);\n    // Move to list of disconnectedProxies\n    moveServerFrom(self.connectedProxies, self.disconnectedProxies, x);\n  });\n  // Emit the final topology change\n  emitTopologyDescriptionChanged(self);\n  // Emit toplogy closing event\n  emitSDAMEvent(this, 'topologyClosed', { topologyId: this.id });\n};\n\n/**\n * Figure out if the server is connected\n * @method\n * @return {boolean}\n */\nMongos.prototype.isConnected = function() {\n  return this.connectedProxies.length > 0;\n};\n\n/**\n * Figure out if the server instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nMongos.prototype.isDestroyed = function() {\n  return this.state === DESTROYED;\n};\n\n//\n// Operations\n//\n\n// Execute write operation\nvar executeWriteOperation = function(self, op, ns, ops, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // Pick a server\n  let server = pickProxy(self);\n  // No server found error out\n  if (!server) return callback(new MongoError('no mongos proxy available'));\n\n  if (!options.retryWrites || !options.session || !isRetryableWritesSupported(self)) {\n    // Execute the command\n    return server[op](ns, ops, options, callback);\n  }\n\n  // increment and assign txnNumber\n  options.txnNumber = getNextTransactionNumber(options.session);\n\n  server[op](ns, ops, options, (err, result) => {\n    if (!err) return callback(null, result);\n    if (!(err instanceof errors.MongoNetworkError) && !err.message.match(/not master/)) {\n      return callback(err);\n    }\n\n    // Pick another server\n    server = pickProxy(self);\n\n    // No server found error out with original error\n    if (!server || !isRetryableWritesSupported(server)) {\n      return callback(err);\n    }\n\n    // rerun the operation\n    server[op](ns, ops, options, callback);\n  });\n};\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.insert = function(ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  if (this.state === DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n\n  // Not connected but we have a disconnecthandler\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('insert', ns, ops, options, callback);\n  }\n\n  // No mongos proxy available\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Execute write operation\n  executeWriteOperation(this, 'insert', ns, ops, options, callback);\n};\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.update = function(ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  if (this.state === DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n\n  // Not connected but we have a disconnecthandler\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('update', ns, ops, options, callback);\n  }\n\n  // No mongos proxy available\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Execute write operation\n  executeWriteOperation(this, 'update', ns, ops, options, callback);\n};\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.remove = function(ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  if (this.state === DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n\n  // Not connected but we have a disconnecthandler\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('remove', ns, ops, options, callback);\n  }\n\n  // No mongos proxy available\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Execute write operation\n  executeWriteOperation(this, 'remove', ns, ops, options, callback);\n};\n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Connection} [options.connection] Specify connection object to execute command against\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.command = function(ns, cmd, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  if (this.state === DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  var self = this;\n\n  // Pick a proxy\n  var server = pickProxy(self);\n\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if ((server == null || !server.isConnected()) && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  }\n\n  // No server returned we had an error\n  if (server == null) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Cloned options\n  var clonedOptions = cloneOptions(options);\n  clonedOptions.topology = self;\n\n  // Execute the command\n  server.command(ns, cmd, clonedOptions, callback);\n};\n\n/**\n * Get a new cursor\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options] Options for the cursor\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {object} [options.topology] The internal topology of the created cursor\n * @returns {Cursor}\n */\nMongos.prototype.cursor = function(ns, cmd, options) {\n  options = options || {};\n  const topology = options.topology || this;\n\n  // Set up final cursor type\n  var FinalCursor = options.cursorFactory || this.s.Cursor;\n\n  // Return the cursor\n  return new FinalCursor(this.s.bson, ns, cmd, options, topology, this.s.options);\n};\n\n/**\n * Authenticate using a specified mechanism\n * @method\n * @param {string} mechanism The Auth mechanism we are invoking\n * @param {string} db The db we are invoking the mechanism against\n * @param {...object} param Parameters for the specific mechanism\n * @param {authResultCallback} callback A callback function\n */\nMongos.prototype.auth = function(mechanism, db) {\n  var allArgs = Array.prototype.slice.call(arguments, 0).slice(0);\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 2);\n  var callback = args.pop();\n  var currentContextIndex = 0;\n\n  // If we don't have the mechanism fail\n  if (this.authProviders[mechanism] == null && mechanism !== 'default') {\n    return callback(new MongoError(f('auth provider %s does not exist', mechanism)));\n  }\n\n  // Are we already authenticating, throw\n  if (this.authenticating) {\n    return callback(new MongoError('authentication or logout allready in process'));\n  }\n\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if (!self.isConnected() && self.s.disconnectHandler != null) {\n    return self.s.disconnectHandler.add('auth', db, allArgs, {}, callback);\n  }\n\n  // Set to authenticating\n  this.authenticating = true;\n  // All errors\n  var errors = [];\n\n  // Get all the servers\n  var servers = this.connectedProxies.slice(0);\n  // No servers return\n  if (servers.length === 0) {\n    this.authenticating = false;\n    callback(null, true);\n  }\n\n  // Authenticate\n  function auth(server) {\n    // Arguments without a callback\n    var argsWithoutCallback = [mechanism, db].concat(args.slice(0));\n    // Create arguments\n    var finalArguments = argsWithoutCallback.concat([\n      function(err) {\n        count = count - 1;\n        // Save all the errors\n        if (err) errors.push({ name: server.name, err: err });\n        // We are done\n        if (count === 0) {\n          // Auth is done\n          self.authenticating = false;\n\n          // Return the auth error\n          if (errors.length) {\n            // Remove the entry from the stored authentication contexts\n            self.s.authenticationContexts.splice(currentContextIndex, 0);\n            // Return error\n            return callback(\n              new MongoError({\n                message: 'authentication fail',\n                errors: errors\n              }),\n              false\n            );\n          }\n\n          // Successfully authenticated session\n          callback(null, self);\n        }\n      }\n    ]);\n\n    // Execute the auth only against non arbiter servers\n    if (!server.lastIsMaster().arbiterOnly) {\n      server.auth.apply(server, finalArguments);\n    }\n  }\n\n  // Save current context index\n  currentContextIndex = this.s.authenticationContexts.length;\n  // Store the auth context and return the last index\n  this.s.authenticationContexts.push([mechanism, db].concat(args.slice(0)));\n\n  // Get total count\n  var count = servers.length;\n  // Authenticate against all servers\n  while (servers.length > 0) {\n    auth(servers.shift());\n  }\n};\n\n/**\n * Logout from a database\n * @method\n * @param {string} db The db we are logging out from\n * @param {authResultCallback} callback A callback function\n */\nMongos.prototype.logout = function(dbName, callback) {\n  var self = this;\n  // Are we authenticating or logging out, throw\n  if (this.authenticating) {\n    throw new MongoError('authentication or logout allready in process');\n  }\n\n  // Ensure no new members are processed while logging out\n  this.authenticating = true;\n\n  // Remove from all auth providers (avoid any reaplication of the auth details)\n  var providers = Object.keys(this.authProviders);\n  for (var i = 0; i < providers.length; i++) {\n    this.authProviders[providers[i]].logout(dbName);\n  }\n\n  // Now logout all the servers\n  var servers = this.connectedProxies.slice(0);\n  var count = servers.length;\n  if (count === 0) return callback();\n  var errors = [];\n\n  function logoutServer(_server, cb) {\n    _server.logout(dbName, function(err) {\n      if (err) errors.push({ name: _server.name, err: err });\n      cb();\n    });\n  }\n\n  // Execute logout on all server instances\n  for (i = 0; i < servers.length; i++) {\n    logoutServer(servers[i], function() {\n      count = count - 1;\n\n      if (count === 0) {\n        // Do not block new operations\n        self.authenticating = false;\n        // If we have one or more errors\n        if (errors.length)\n          return callback(\n            new MongoError({\n              message: f('logout failed against db %s', dbName),\n              errors: errors\n            }),\n            false\n          );\n\n        // No errors\n        callback();\n      }\n    });\n  }\n};\n\n/**\n * Get server\n * @method\n * @return {Server}\n */\nMongos.prototype.getServer = function() {\n  var server = pickProxy(this);\n  if (this.s.debug) this.emit('pickedServer', null, server);\n  return server;\n};\n\n/**\n * Get a direct connection\n * @method\n * @return {Connection}\n */\nMongos.prototype.getConnection = function() {\n  var server = this.getServer();\n  if (server) return server.getConnection();\n};\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nMongos.prototype.connections = function() {\n  var connections = [];\n\n  for (var i = 0; i < this.connectedProxies.length; i++) {\n    connections = connections.concat(this.connectedProxies[i].connections());\n  }\n\n  return connections;\n};\n\nfunction emitTopologyDescriptionChanged(self) {\n  if (self.listeners('topologyDescriptionChanged').length > 0) {\n    var topology = 'Unknown';\n    if (self.connectedProxies.length > 0) {\n      topology = 'Sharded';\n    }\n\n    // Generate description\n    var description = {\n      topologyType: topology,\n      servers: []\n    };\n\n    // All proxies\n    var proxies = self.disconnectedProxies.concat(self.connectingProxies);\n\n    // Add all the disconnected proxies\n    description.servers = description.servers.concat(\n      proxies.map(function(x) {\n        var description = x.getDescription();\n        description.type = 'Unknown';\n        return description;\n      })\n    );\n\n    // Add all the connected proxies\n    description.servers = description.servers.concat(\n      self.connectedProxies.map(function(x) {\n        var description = x.getDescription();\n        description.type = 'Mongos';\n        return description;\n      })\n    );\n\n    // Get the diff\n    var diffResult = diff(self.topologyDescription, description);\n\n    // Create the result\n    var result = {\n      topologyId: self.id,\n      previousDescription: self.topologyDescription,\n      newDescription: description,\n      diff: diffResult\n    };\n\n    // Emit the topologyDescription change\n    if (diffResult.servers.length > 0) {\n      self.emit('topologyDescriptionChanged', result);\n    }\n\n    // Set the new description\n    self.topologyDescription = description;\n  }\n}\n\n/**\n * A mongos connect event, used to verify that the connection is up and running\n *\n * @event Mongos#connect\n * @type {Mongos}\n */\n\n/**\n * A mongos reconnect event, used to verify that the mongos topology has reconnected\n *\n * @event Mongos#reconnect\n * @type {Mongos}\n */\n\n/**\n * A mongos fullsetup event, used to signal that all topology members have been contacted.\n *\n * @event Mongos#fullsetup\n * @type {Mongos}\n */\n\n/**\n * A mongos all event, used to signal that all topology members have been contacted.\n *\n * @event Mongos#all\n * @type {Mongos}\n */\n\n/**\n * A server member left the mongos list\n *\n * @event Mongos#left\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the mongos list\n *\n * @event Mongos#joined\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that joined\n */\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event Mongos#serverOpening\n * @type {object}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Mongos#serverClosed\n * @type {object}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Mongos#serverDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Mongos#topologyOpening\n * @type {object}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Mongos#topologyClosed\n * @type {object}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Mongos#topologyDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event Mongos#serverHeartbeatStarted\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event Mongos#serverHeartbeatFailed\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event Mongos#serverHeartbeatSucceeded\n * @type {object}\n */\n\nmodule.exports = Mongos;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/topologies/mongos.js\n// module id = 165\n// module chunks = 0","'use strict';\n\nvar inherits = require('util').inherits,\n  f = require('util').format,\n  EventEmitter = require('events').EventEmitter,\n  ReadPreference = require('./read_preference'),\n  BasicCursor = require('../cursor'),\n  retrieveBSON = require('../connection/utils').retrieveBSON,\n  Logger = require('../connection/logger'),\n  MongoError = require('../error').MongoError,\n  errors = require('../error'),\n  Server = require('./server'),\n  ReplSetState = require('./replset_state'),\n  clone = require('./shared').clone,\n  Timeout = require('./shared').Timeout,\n  Interval = require('./shared').Interval,\n  createClientInfo = require('./shared').createClientInfo,\n  SessionMixins = require('./shared').SessionMixins,\n  isRetryableWritesSupported = require('./shared').isRetryableWritesSupported,\n  getNextTransactionNumber = require('./shared').getNextTransactionNumber;\n\nvar MongoCR = require('../auth/mongocr'),\n  X509 = require('../auth/x509'),\n  Plain = require('../auth/plain'),\n  GSSAPI = require('../auth/gssapi'),\n  SSPI = require('../auth/sspi'),\n  ScramSHA1 = require('../auth/scram');\n\nvar BSON = retrieveBSON();\n\n//\n// States\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar UNREFERENCED = 'unreferenced';\nvar DESTROYED = 'destroyed';\n\nfunction stateTransition(self, newState) {\n  var legalTransitions = {\n    disconnected: [CONNECTING, DESTROYED, DISCONNECTED],\n    connecting: [CONNECTING, DESTROYED, CONNECTED, DISCONNECTED],\n    connected: [CONNECTED, DISCONNECTED, DESTROYED, UNREFERENCED],\n    unreferenced: [UNREFERENCED, DESTROYED],\n    destroyed: [DESTROYED]\n  };\n\n  // Get current state\n  var legalStates = legalTransitions[self.state];\n  if (legalStates && legalStates.indexOf(newState) !== -1) {\n    self.state = newState;\n  } else {\n    self.s.logger.error(\n      f(\n        'Pool with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]',\n        self.id,\n        self.state,\n        newState,\n        legalStates\n      )\n    );\n  }\n}\n\n//\n// ReplSet instance id\nvar id = 1;\nvar handlers = ['connect', 'close', 'error', 'timeout', 'parseError'];\n\n/**\n * Creates a new Replset instance\n * @class\n * @param {array} seedlist A list of seeds for the replicaset\n * @param {boolean} options.setName The Replicaset set name\n * @param {boolean} [options.secondaryOnlyConnectionAllowed=false] Allow connection to a secondary only replicaset\n * @param {number} [options.haInterval=10000] The High availability period for replicaset inquiry\n * @param {boolean} [options.emitError=false] Server will emit errors events\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=10000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.singleBufferSerializtion=true] Serialize into single buffer, trade of peak memory for serialization speed\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {number} [options.pingInterval=5000] Ping interval to check the response time to the different servers\n * @param {number} [options.localThresholdMS=15] Cutoff latency point in MS for Replicaset member selection\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @return {ReplSet} A cursor instance\n * @fires ReplSet#connect\n * @fires ReplSet#ha\n * @fires ReplSet#joined\n * @fires ReplSet#left\n * @fires ReplSet#failed\n * @fires ReplSet#fullsetup\n * @fires ReplSet#all\n * @fires ReplSet#error\n * @fires ReplSet#serverHeartbeatStarted\n * @fires ReplSet#serverHeartbeatSucceeded\n * @fires ReplSet#serverHeartbeatFailed\n * @fires ReplSet#topologyOpening\n * @fires ReplSet#topologyClosed\n * @fires ReplSet#topologyDescriptionChanged\n * @property {string} type the topology type.\n * @property {string} parserType the parser type used (c++ or js).\n */\nvar ReplSet = function(seedlist, options) {\n  var self = this;\n  options = options || {};\n\n  // Validate seedlist\n  if (!Array.isArray(seedlist)) throw new MongoError('seedlist must be an array');\n  // Validate list\n  if (seedlist.length === 0) throw new MongoError('seedlist must contain at least one entry');\n  // Validate entries\n  seedlist.forEach(function(e) {\n    if (typeof e.host !== 'string' || typeof e.port !== 'number')\n      throw new MongoError('seedlist entry must contain a host and port');\n  });\n\n  // Add event listener\n  EventEmitter.call(this);\n\n  // Get replSet Id\n  this.id = id++;\n\n  // Get the localThresholdMS\n  var localThresholdMS = options.localThresholdMS || 15;\n  // Backward compatibility\n  if (options.acceptableLatency) localThresholdMS = options.acceptableLatency;\n\n  // Create a logger\n  var logger = Logger('ReplSet', options);\n\n  // Internal state\n  this.s = {\n    options: Object.assign({}, options),\n    // BSON instance\n    bson:\n      options.bson ||\n      new BSON([\n        BSON.Binary,\n        BSON.Code,\n        BSON.DBRef,\n        BSON.Decimal128,\n        BSON.Double,\n        BSON.Int32,\n        BSON.Long,\n        BSON.Map,\n        BSON.MaxKey,\n        BSON.MinKey,\n        BSON.ObjectId,\n        BSON.BSONRegExp,\n        BSON.Symbol,\n        BSON.Timestamp\n      ]),\n    // Factory overrides\n    Cursor: options.cursorFactory || BasicCursor,\n    // Logger instance\n    logger: logger,\n    // Seedlist\n    seedlist: seedlist,\n    // Replicaset state\n    replicaSetState: new ReplSetState({\n      id: this.id,\n      setName: options.setName,\n      acceptableLatency: localThresholdMS,\n      heartbeatFrequencyMS: options.haInterval ? options.haInterval : 10000,\n      logger: logger\n    }),\n    // Current servers we are connecting to\n    connectingServers: [],\n    // Ha interval\n    haInterval: options.haInterval ? options.haInterval : 10000,\n    // Minimum heartbeat frequency used if we detect a server close\n    minHeartbeatFrequencyMS: 500,\n    // Disconnect handler\n    disconnectHandler: options.disconnectHandler,\n    // Server selection index\n    index: 0,\n    // Connect function options passed in\n    connectOptions: {},\n    // Are we running in debug mode\n    debug: typeof options.debug === 'boolean' ? options.debug : false,\n    // Client info\n    clientInfo: createClientInfo(options),\n    // Authentication context\n    authenticationContexts: []\n  };\n\n  // Add handler for topology change\n  this.s.replicaSetState.on('topologyDescriptionChanged', function(r) {\n    self.emit('topologyDescriptionChanged', r);\n  });\n\n  // Log info warning if the socketTimeout < haInterval as it will cause\n  // a lot of recycled connections to happen.\n  if (\n    this.s.logger.isWarn() &&\n    this.s.options.socketTimeout !== 0 &&\n    this.s.options.socketTimeout < this.s.haInterval\n  ) {\n    this.s.logger.warn(\n      f(\n        'warning socketTimeout %s is less than haInterval %s. This might cause unnecessary server reconnections due to socket timeouts',\n        this.s.options.socketTimeout,\n        this.s.haInterval\n      )\n    );\n  }\n\n  // All the authProviders\n  this.authProviders = options.authProviders || {\n    mongocr: new MongoCR(this.s.bson),\n    x509: new X509(this.s.bson),\n    plain: new Plain(this.s.bson),\n    gssapi: new GSSAPI(this.s.bson),\n    sspi: new SSPI(this.s.bson),\n    'scram-sha-1': new ScramSHA1(this.s.bson)\n  };\n\n  // Add forwarding of events from state handler\n  var types = ['joined', 'left'];\n  types.forEach(function(x) {\n    self.s.replicaSetState.on(x, function(t, s) {\n      self.emit(x, t, s);\n    });\n  });\n\n  // Connect stat\n  this.initialConnectState = {\n    connect: false,\n    fullsetup: false,\n    all: false\n  };\n\n  // Disconnected state\n  this.state = DISCONNECTED;\n  this.haTimeoutId = null;\n  // Are we authenticating\n  this.authenticating = false;\n  // Last ismaster\n  this.ismaster = null;\n  // Contains the intervalId\n  this.intervalIds = [];\n\n  // Highest clusterTime seen in responses from the current deployment\n  this.clusterTime = null;\n};\n\ninherits(ReplSet, EventEmitter);\nObject.assign(ReplSet.prototype, SessionMixins);\n\nObject.defineProperty(ReplSet.prototype, 'type', {\n  enumerable: true,\n  get: function() {\n    return 'replset';\n  }\n});\n\nObject.defineProperty(ReplSet.prototype, 'parserType', {\n  enumerable: true,\n  get: function() {\n    return BSON.native ? 'c++' : 'js';\n  }\n});\n\nObject.defineProperty(ReplSet.prototype, 'logicalSessionTimeoutMinutes', {\n  enumerable: true,\n  get: function() {\n    return this.s.replicaSetState.logicalSessionTimeoutMinutes || null;\n  }\n});\n\nfunction rexecuteOperations(self) {\n  // If we have a primary and a disconnect handler, execute\n  // buffered operations\n  if (self.s.replicaSetState.hasPrimaryAndSecondary() && self.s.disconnectHandler) {\n    self.s.disconnectHandler.execute();\n  } else if (self.s.replicaSetState.hasPrimary() && self.s.disconnectHandler) {\n    self.s.disconnectHandler.execute({ executePrimary: true });\n  } else if (self.s.replicaSetState.hasSecondary() && self.s.disconnectHandler) {\n    self.s.disconnectHandler.execute({ executeSecondary: true });\n  }\n}\n\nfunction connectNewServers(self, servers, callback) {\n  // Count lefts\n  var count = servers.length;\n  var error = null;\n\n  // Handle events\n  var _handleEvent = function(self, event) {\n    return function(err) {\n      var _self = this;\n      count = count - 1;\n\n      // Destroyed\n      if (self.state === DESTROYED || self.state === UNREFERENCED) {\n        return this.destroy({ force: true });\n      }\n\n      if (event === 'connect' && !self.authenticating) {\n        // Destroyed\n        if (self.state === DESTROYED || self.state === UNREFERENCED) {\n          return _self.destroy({ force: true });\n        }\n\n        // Do we have authentication contexts that need to be applied\n        applyAuthenticationContexts(self, _self, function() {\n          // Destroy the instance\n          if (self.state === DESTROYED || self.state === UNREFERENCED) {\n            return _self.destroy({ force: true });\n          }\n\n          // Update the state\n          var result = self.s.replicaSetState.update(_self);\n          // Update the state with the new server\n          if (result) {\n            // Primary lastIsMaster store it\n            if (_self.lastIsMaster() && _self.lastIsMaster().ismaster) {\n              self.ismaster = _self.lastIsMaster();\n            }\n\n            // Remove the handlers\n            for (var i = 0; i < handlers.length; i++) {\n              _self.removeAllListeners(handlers[i]);\n            }\n\n            // Add stable state handlers\n            _self.on('error', handleEvent(self, 'error'));\n            _self.on('close', handleEvent(self, 'close'));\n            _self.on('timeout', handleEvent(self, 'timeout'));\n            _self.on('parseError', handleEvent(self, 'parseError'));\n\n            // Enalbe the monitoring of the new server\n            monitorServer(_self.lastIsMaster().me, self, {});\n\n            // Rexecute any stalled operation\n            rexecuteOperations(self);\n          } else {\n            _self.destroy({ force: true });\n          }\n        });\n      } else if (event === 'connect' && self.authenticating) {\n        this.destroy({ force: true });\n      } else if (event === 'error') {\n        error = err;\n      }\n\n      // Rexecute any stalled operation\n      rexecuteOperations(self);\n\n      // Are we done finish up callback\n      if (count === 0) {\n        callback(error);\n      }\n    };\n  };\n\n  // No new servers\n  if (count === 0) return callback();\n\n  // Execute method\n  function execute(_server, i) {\n    setTimeout(function() {\n      // Destroyed\n      if (self.state === DESTROYED || self.state === UNREFERENCED) {\n        return;\n      }\n\n      // Create a new server instance\n      var server = new Server(\n        Object.assign({}, self.s.options, {\n          host: _server.split(':')[0],\n          port: parseInt(_server.split(':')[1], 10),\n          authProviders: self.authProviders,\n          reconnect: false,\n          monitoring: false,\n          parent: self,\n          clientInfo: clone(self.s.clientInfo)\n        })\n      );\n\n      // Add temp handlers\n      server.once('connect', _handleEvent(self, 'connect'));\n      server.once('close', _handleEvent(self, 'close'));\n      server.once('timeout', _handleEvent(self, 'timeout'));\n      server.once('error', _handleEvent(self, 'error'));\n      server.once('parseError', _handleEvent(self, 'parseError'));\n\n      // SDAM Monitoring events\n      server.on('serverOpening', function(e) {\n        self.emit('serverOpening', e);\n      });\n      server.on('serverDescriptionChanged', function(e) {\n        self.emit('serverDescriptionChanged', e);\n      });\n      server.on('serverClosed', function(e) {\n        self.emit('serverClosed', e);\n      });\n      server.connect(self.s.connectOptions);\n    }, i);\n  }\n\n  // Create new instances\n  for (var i = 0; i < servers.length; i++) {\n    execute(servers[i], i);\n  }\n}\n\n// Ping the server\nvar pingServer = function(self, server, cb) {\n  // Measure running time\n  var start = new Date().getTime();\n\n  // Emit the server heartbeat start\n  emitSDAMEvent(self, 'serverHeartbeatStarted', { connectionId: server.name });\n\n  // Execute ismaster\n  // Set the socketTimeout for a monitoring message to a low number\n  // Ensuring ismaster calls are timed out quickly\n  server.command(\n    'admin.$cmd',\n    {\n      ismaster: true\n    },\n    {\n      monitoring: true,\n      socketTimeout: self.s.options.connectionTimeout || 2000\n    },\n    function(err, r) {\n      if (self.state === DESTROYED || self.state === UNREFERENCED) {\n        server.destroy({ force: true });\n        return cb(err, r);\n      }\n\n      // Calculate latency\n      var latencyMS = new Date().getTime() - start;\n      // Set the last updatedTime\n      var hrTime = process.hrtime();\n      // Calculate the last update time\n      server.lastUpdateTime = hrTime[0] * 1000 + Math.round(hrTime[1] / 1000);\n\n      // We had an error, remove it from the state\n      if (err) {\n        // Emit the server heartbeat failure\n        emitSDAMEvent(self, 'serverHeartbeatFailed', {\n          durationMS: latencyMS,\n          failure: err,\n          connectionId: server.name\n        });\n\n        // Remove server from the state\n        self.s.replicaSetState.remove(server);\n      } else {\n        // Update the server ismaster\n        server.ismaster = r.result;\n\n        // Check if we have a lastWriteDate convert it to MS\n        // and store on the server instance for later use\n        if (server.ismaster.lastWrite && server.ismaster.lastWrite.lastWriteDate) {\n          server.lastWriteDate = server.ismaster.lastWrite.lastWriteDate.getTime();\n        }\n\n        // Do we have a brand new server\n        if (server.lastIsMasterMS === -1) {\n          server.lastIsMasterMS = latencyMS;\n        } else if (server.lastIsMasterMS) {\n          // After the first measurement, average RTT MUST be computed using an\n          // exponentially-weighted moving average formula, with a weighting factor (alpha) of 0.2.\n          // If the prior average is denoted old_rtt, then the new average (new_rtt) is\n          // computed from a new RTT measurement (x) using the following formula:\n          // alpha = 0.2\n          // new_rtt = alpha * x + (1 - alpha) * old_rtt\n          server.lastIsMasterMS = 0.2 * latencyMS + (1 - 0.2) * server.lastIsMasterMS;\n        }\n\n        if (self.s.replicaSetState.update(server)) {\n          // Primary lastIsMaster store it\n          if (server.lastIsMaster() && server.lastIsMaster().ismaster) {\n            self.ismaster = server.lastIsMaster();\n          }\n        }\n\n        // Server heart beat event\n        emitSDAMEvent(self, 'serverHeartbeatSucceeded', {\n          durationMS: latencyMS,\n          reply: r.result,\n          connectionId: server.name\n        });\n      }\n\n      // Calculate the staleness for this server\n      self.s.replicaSetState.updateServerMaxStaleness(server, self.s.haInterval);\n\n      // Callback\n      cb(err, r);\n    }\n  );\n};\n\n// Each server is monitored in parallel in their own timeout loop\nvar monitorServer = function(host, self, options) {\n  // If this is not the initial scan\n  // Is this server already being monitoried, then skip monitoring\n  if (!options.haInterval) {\n    for (var i = 0; i < self.intervalIds.length; i++) {\n      if (self.intervalIds[i].__host === host) {\n        return;\n      }\n    }\n  }\n\n  // Get the haInterval\n  var _process = options.haInterval ? Timeout : Interval;\n  var _haInterval = options.haInterval ? options.haInterval : self.s.haInterval;\n\n  // Create the interval\n  var intervalId = new _process(function() {\n    if (self.state === DESTROYED || self.state === UNREFERENCED) {\n      // clearInterval(intervalId);\n      intervalId.stop();\n      return;\n    }\n\n    // Do we already have server connection available for this host\n    var _server = self.s.replicaSetState.get(host);\n\n    // Check if we have a known server connection and reuse\n    if (_server) {\n      // Ping the server\n      return pingServer(self, _server, function(err) {\n        if (err) {\n          // NOTE: should something happen here?\n          return;\n        }\n\n        if (self.state === DESTROYED || self.state === UNREFERENCED) {\n          intervalId.stop();\n          return;\n        }\n\n        // Filter out all called intervaliIds\n        self.intervalIds = self.intervalIds.filter(function(intervalId) {\n          return intervalId.isRunning();\n        });\n\n        // Initial sweep\n        if (_process === Timeout) {\n          if (\n            self.state === CONNECTING &&\n            ((self.s.replicaSetState.hasSecondary() &&\n              self.s.options.secondaryOnlyConnectionAllowed) ||\n              self.s.replicaSetState.hasPrimary())\n          ) {\n            self.state = CONNECTED;\n\n            // Emit connected sign\n            process.nextTick(function() {\n              self.emit('connect', self);\n            });\n\n            // Start topology interval check\n            topologyMonitor(self, {});\n          }\n        } else {\n          if (\n            self.state === DISCONNECTED &&\n            ((self.s.replicaSetState.hasSecondary() &&\n              self.s.options.secondaryOnlyConnectionAllowed) ||\n              self.s.replicaSetState.hasPrimary())\n          ) {\n            self.state = CONNECTED;\n\n            // Rexecute any stalled operation\n            rexecuteOperations(self);\n\n            // Emit connected sign\n            process.nextTick(function() {\n              self.emit('reconnect', self);\n            });\n          }\n        }\n\n        if (\n          self.initialConnectState.connect &&\n          !self.initialConnectState.fullsetup &&\n          self.s.replicaSetState.hasPrimaryAndSecondary()\n        ) {\n          // Set initial connect state\n          self.initialConnectState.fullsetup = true;\n          self.initialConnectState.all = true;\n\n          process.nextTick(function() {\n            self.emit('fullsetup', self);\n            self.emit('all', self);\n          });\n        }\n      });\n    }\n  }, _haInterval);\n\n  // Start the interval\n  intervalId.start();\n  // Add the intervalId host name\n  intervalId.__host = host;\n  // Add the intervalId to our list of intervalIds\n  self.intervalIds.push(intervalId);\n};\n\nfunction topologyMonitor(self, options) {\n  if (self.state === DESTROYED || self.state === UNREFERENCED) return;\n  options = options || {};\n\n  // Get the servers\n  var servers = Object.keys(self.s.replicaSetState.set);\n\n  // Get the haInterval\n  var _process = options.haInterval ? Timeout : Interval;\n  var _haInterval = options.haInterval ? options.haInterval : self.s.haInterval;\n\n  if (_process === Timeout) {\n    return connectNewServers(self, self.s.replicaSetState.unknownServers, function(err) {\n      // Don't emit errors if the connection was already\n      if (self.state === DESTROYED || self.state === UNREFERENCED) {\n        return;\n      }\n\n      if (!self.s.replicaSetState.hasPrimary() && !self.s.options.secondaryOnlyConnectionAllowed) {\n        if (err) {\n          return self.emit('error', err);\n        }\n\n        self.emit(\n          'error',\n          new MongoError('no primary found in replicaset or invalid replica set name')\n        );\n        return self.destroy({ force: true });\n      } else if (\n        !self.s.replicaSetState.hasSecondary() &&\n        self.s.options.secondaryOnlyConnectionAllowed\n      ) {\n        if (err) {\n          return self.emit('error', err);\n        }\n\n        self.emit(\n          'error',\n          new MongoError('no secondary found in replicaset or invalid replica set name')\n        );\n        return self.destroy({ force: true });\n      }\n\n      for (var i = 0; i < servers.length; i++) {\n        monitorServer(servers[i], self, options);\n      }\n    });\n  } else {\n    for (var i = 0; i < servers.length; i++) {\n      monitorServer(servers[i], self, options);\n    }\n  }\n\n  // Run the reconnect process\n  function executeReconnect(self) {\n    return function() {\n      if (self.state === DESTROYED || self.state === UNREFERENCED) {\n        return;\n      }\n\n      connectNewServers(self, self.s.replicaSetState.unknownServers, function() {\n        var monitoringFrequencey = self.s.replicaSetState.hasPrimary()\n          ? _haInterval\n          : self.s.minHeartbeatFrequencyMS;\n\n        // Create a timeout\n        self.intervalIds.push(new Timeout(executeReconnect(self), monitoringFrequencey).start());\n      });\n    };\n  }\n\n  // Decide what kind of interval to use\n  var intervalTime = !self.s.replicaSetState.hasPrimary()\n    ? self.s.minHeartbeatFrequencyMS\n    : _haInterval;\n\n  self.intervalIds.push(new Timeout(executeReconnect(self), intervalTime).start());\n}\n\nfunction addServerToList(list, server) {\n  for (var i = 0; i < list.length; i++) {\n    if (list[i].name.toLowerCase() === server.name.toLowerCase()) return true;\n  }\n\n  list.push(server);\n}\n\nfunction handleEvent(self, event) {\n  return function() {\n    if (self.state === DESTROYED || self.state === UNREFERENCED) return;\n    // Debug log\n    if (self.s.logger.isDebug()) {\n      self.s.logger.debug(\n        f('handleEvent %s from server %s in replset with id %s', event, this.name, self.id)\n      );\n    }\n\n    // Remove from the replicaset state\n    self.s.replicaSetState.remove(this);\n\n    // Are we in a destroyed state return\n    if (self.state === DESTROYED || self.state === UNREFERENCED) return;\n\n    // If no primary and secondary available\n    if (\n      !self.s.replicaSetState.hasPrimary() &&\n      !self.s.replicaSetState.hasSecondary() &&\n      self.s.options.secondaryOnlyConnectionAllowed\n    ) {\n      stateTransition(self, DISCONNECTED);\n    } else if (!self.s.replicaSetState.hasPrimary()) {\n      stateTransition(self, DISCONNECTED);\n    }\n\n    addServerToList(self.s.connectingServers, this);\n  };\n}\n\nfunction applyAuthenticationContexts(self, server, callback) {\n  if (self.s.authenticationContexts.length === 0) {\n    return callback();\n  }\n\n  // Do not apply any auth contexts if it's an arbiter\n  if (server.lastIsMaster() && server.lastIsMaster().arbiterOnly) {\n    return callback();\n  }\n\n  // Copy contexts to ensure no modificiation in the middle of\n  // auth process.\n  var authContexts = self.s.authenticationContexts.slice(0);\n\n  // Apply one of the contexts\n  function applyAuth(authContexts, server, callback) {\n    if (authContexts.length === 0) return callback();\n    // Get the first auth context\n    var authContext = authContexts.shift();\n    // Copy the params\n    var customAuthContext = authContext.slice(0);\n    // Push our callback handler\n    customAuthContext.push(function(/* err */) {\n      applyAuth(authContexts, server, callback);\n    });\n\n    // Attempt authentication\n    server.auth.apply(server, customAuthContext);\n  }\n\n  // Apply all auth contexts\n  applyAuth(authContexts, server, callback);\n}\n\nfunction shouldTriggerConnect(self) {\n  const isConnecting = self.state === CONNECTING;\n  const hasPrimary = self.s.replicaSetState.hasPrimary();\n  const hasSecondary = self.s.replicaSetState.hasSecondary();\n  const secondaryOnlyConnectionAllowed = self.s.options.secondaryOnlyConnectionAllowed;\n  const readPreferenceSecondary =\n    self.s.connectOptions.readPreference &&\n    self.s.connectOptions.readPreference.equals(ReadPreference.secondary);\n\n  return (\n    (isConnecting &&\n      ((readPreferenceSecondary && hasSecondary) || (!readPreferenceSecondary && hasPrimary))) ||\n    (hasSecondary && secondaryOnlyConnectionAllowed)\n  );\n}\n\nfunction handleInitialConnectEvent(self, event) {\n  return function() {\n    var _this = this;\n    // Debug log\n    if (self.s.logger.isDebug()) {\n      self.s.logger.debug(\n        f(\n          'handleInitialConnectEvent %s from server %s in replset with id %s',\n          event,\n          this.name,\n          self.id\n        )\n      );\n    }\n\n    // Destroy the instance\n    if (self.state === DESTROYED || self.state === UNREFERENCED) {\n      return this.destroy({ force: true });\n    }\n\n    // Check the type of server\n    if (event === 'connect') {\n      // Do we have authentication contexts that need to be applied\n      applyAuthenticationContexts(self, _this, function() {\n        // Destroy the instance\n        if (self.state === DESTROYED || self.state === UNREFERENCED) {\n          return _this.destroy({ force: true });\n        }\n\n        // Update the state\n        var result = self.s.replicaSetState.update(_this);\n        if (result === true) {\n          // Primary lastIsMaster store it\n          if (_this.lastIsMaster() && _this.lastIsMaster().ismaster) {\n            self.ismaster = _this.lastIsMaster();\n          }\n\n          // Debug log\n          if (self.s.logger.isDebug()) {\n            self.s.logger.debug(\n              f(\n                'handleInitialConnectEvent %s from server %s in replset with id %s has state [%s]',\n                event,\n                _this.name,\n                self.id,\n                JSON.stringify(self.s.replicaSetState.set)\n              )\n            );\n          }\n\n          // Remove the handlers\n          for (var i = 0; i < handlers.length; i++) {\n            _this.removeAllListeners(handlers[i]);\n          }\n\n          // Add stable state handlers\n          _this.on('error', handleEvent(self, 'error'));\n          _this.on('close', handleEvent(self, 'close'));\n          _this.on('timeout', handleEvent(self, 'timeout'));\n          _this.on('parseError', handleEvent(self, 'parseError'));\n\n          // Do we have a primary or primaryAndSecondary\n          if (shouldTriggerConnect(self)) {\n            // We are connected\n            self.state = CONNECTED;\n\n            // Set initial connect state\n            self.initialConnectState.connect = true;\n            // Emit connect event\n            process.nextTick(function() {\n              self.emit('connect', self);\n            });\n\n            topologyMonitor(self, {});\n          }\n        } else if (result instanceof MongoError) {\n          _this.destroy({ force: true });\n          self.destroy({ force: true });\n          return self.emit('error', result);\n        } else {\n          _this.destroy({ force: true });\n        }\n      });\n    } else {\n      // Emit failure to connect\n      self.emit('failed', this);\n\n      addServerToList(self.s.connectingServers, this);\n      // Remove from the state\n      self.s.replicaSetState.remove(this);\n    }\n\n    if (\n      self.initialConnectState.connect &&\n      !self.initialConnectState.fullsetup &&\n      self.s.replicaSetState.hasPrimaryAndSecondary()\n    ) {\n      // Set initial connect state\n      self.initialConnectState.fullsetup = true;\n      self.initialConnectState.all = true;\n\n      process.nextTick(function() {\n        self.emit('fullsetup', self);\n        self.emit('all', self);\n      });\n    }\n\n    // Remove from the list from connectingServers\n    for (var i = 0; i < self.s.connectingServers.length; i++) {\n      if (self.s.connectingServers[i].equals(this)) {\n        self.s.connectingServers.splice(i, 1);\n      }\n    }\n\n    // Trigger topologyMonitor\n    if (self.s.connectingServers.length === 0 && self.state === CONNECTING) {\n      topologyMonitor(self, { haInterval: 1 });\n    }\n  };\n}\n\nfunction connectServers(self, servers) {\n  // Update connectingServers\n  self.s.connectingServers = self.s.connectingServers.concat(servers);\n\n  // Index used to interleaf the server connects, avoiding\n  // runtime issues on io constrained vm's\n  var timeoutInterval = 0;\n\n  function connect(server, timeoutInterval) {\n    setTimeout(function() {\n      // Add the server to the state\n      if (self.s.replicaSetState.update(server)) {\n        // Primary lastIsMaster store it\n        if (server.lastIsMaster() && server.lastIsMaster().ismaster) {\n          self.ismaster = server.lastIsMaster();\n        }\n      }\n\n      // Add event handlers\n      server.once('close', handleInitialConnectEvent(self, 'close'));\n      server.once('timeout', handleInitialConnectEvent(self, 'timeout'));\n      server.once('parseError', handleInitialConnectEvent(self, 'parseError'));\n      server.once('error', handleInitialConnectEvent(self, 'error'));\n      server.once('connect', handleInitialConnectEvent(self, 'connect'));\n      // SDAM Monitoring events\n      server.on('serverOpening', function(e) {\n        self.emit('serverOpening', e);\n      });\n      server.on('serverDescriptionChanged', function(e) {\n        self.emit('serverDescriptionChanged', e);\n      });\n      server.on('serverClosed', function(e) {\n        self.emit('serverClosed', e);\n      });\n      // Start connection\n      server.connect(self.s.connectOptions);\n    }, timeoutInterval);\n  }\n\n  // Start all the servers\n  while (servers.length > 0) {\n    connect(servers.shift(), timeoutInterval++);\n  }\n}\n\n/**\n * Emit event if it exists\n * @method\n */\nfunction emitSDAMEvent(self, event, description) {\n  if (self.listeners(event).length > 0) {\n    self.emit(event, description);\n  }\n}\n\n/**\n * Initiate server connect\n * @method\n * @param {array} [options.auth=null] Array of auth options to apply on connect\n */\nReplSet.prototype.connect = function(options) {\n  var self = this;\n  // Add any connect level options to the internal state\n  this.s.connectOptions = options || {};\n  // Set connecting state\n  stateTransition(this, CONNECTING);\n  // Create server instances\n  var servers = this.s.seedlist.map(function(x) {\n    return new Server(\n      Object.assign({}, self.s.options, x, {\n        authProviders: self.authProviders,\n        reconnect: false,\n        monitoring: false,\n        parent: self,\n        clientInfo: clone(self.s.clientInfo)\n      })\n    );\n  });\n\n  // Error out as high availbility interval must be < than socketTimeout\n  if (\n    this.s.options.socketTimeout > 0 &&\n    this.s.options.socketTimeout <= this.s.options.haInterval\n  ) {\n    return self.emit(\n      'error',\n      new MongoError(\n        f(\n          'haInterval [%s] MS must be set to less than socketTimeout [%s] MS',\n          this.s.options.haInterval,\n          this.s.options.socketTimeout\n        )\n      )\n    );\n  }\n\n  // Emit the topology opening event\n  emitSDAMEvent(this, 'topologyOpening', { topologyId: this.id });\n  // Start all server connections\n  connectServers(self, servers);\n};\n\n/**\n * Destroy the server connection\n * @param {boolean} [options.force=false] Force destroy the pool\n * @method\n */\nReplSet.prototype.destroy = function(options) {\n  options = options || {};\n  // Transition state\n  stateTransition(this, DESTROYED);\n  // Clear out any monitoring process\n  if (this.haTimeoutId) clearTimeout(this.haTimeoutId);\n  // Destroy the replicaset\n  this.s.replicaSetState.destroy(options);\n  // Clear out authentication contexts\n  this.s.authenticationContexts = [];\n\n  // Destroy all connecting servers\n  this.s.connectingServers.forEach(function(x) {\n    x.destroy(options);\n  });\n\n  // Clear out all monitoring\n  for (var i = 0; i < this.intervalIds.length; i++) {\n    this.intervalIds[i].stop();\n    this.intervalIds[i].stop();\n  }\n\n  // Reset list of intervalIds\n  this.intervalIds = [];\n\n  // Emit toplogy closing event\n  emitSDAMEvent(this, 'topologyClosed', { topologyId: this.id });\n};\n\n/**\n * Unref all connections belong to this server\n * @method\n */\nReplSet.prototype.unref = function() {\n  // Transition state\n  stateTransition(this, UNREFERENCED);\n\n  this.s.replicaSetState.allServers().forEach(function(x) {\n    x.unref();\n  });\n\n  clearTimeout(this.haTimeoutId);\n};\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nReplSet.prototype.lastIsMaster = function() {\n  // If secondaryOnlyConnectionAllowed and no primary but secondary\n  // return the secondaries ismaster result.\n  if (\n    this.s.options.secondaryOnlyConnectionAllowed &&\n    !this.s.replicaSetState.hasPrimary() &&\n    this.s.replicaSetState.hasSecondary()\n  ) {\n    return this.s.replicaSetState.secondaries[0].lastIsMaster();\n  }\n\n  return this.s.replicaSetState.primary\n    ? this.s.replicaSetState.primary.lastIsMaster()\n    : this.ismaster;\n};\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nReplSet.prototype.connections = function() {\n  var servers = this.s.replicaSetState.allServers();\n  var connections = [];\n  for (var i = 0; i < servers.length; i++) {\n    connections = connections.concat(servers[i].connections());\n  }\n\n  return connections;\n};\n\n/**\n * Figure out if the server is connected\n * @method\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @return {boolean}\n */\nReplSet.prototype.isConnected = function(options) {\n  options = options || {};\n\n  // If we are authenticating signal not connected\n  // To avoid interleaving of operations\n  if (this.authenticating) return false;\n\n  // If we specified a read preference check if we are connected to something\n  // than can satisfy this\n  if (options.readPreference && options.readPreference.equals(ReadPreference.secondary)) {\n    return this.s.replicaSetState.hasSecondary();\n  }\n\n  if (options.readPreference && options.readPreference.equals(ReadPreference.primary)) {\n    return this.s.replicaSetState.hasPrimary();\n  }\n\n  if (options.readPreference && options.readPreference.equals(ReadPreference.primaryPreferred)) {\n    return this.s.replicaSetState.hasSecondary() || this.s.replicaSetState.hasPrimary();\n  }\n\n  if (options.readPreference && options.readPreference.equals(ReadPreference.secondaryPreferred)) {\n    return this.s.replicaSetState.hasSecondary() || this.s.replicaSetState.hasPrimary();\n  }\n\n  if (this.s.options.secondaryOnlyConnectionAllowed && this.s.replicaSetState.hasSecondary()) {\n    return true;\n  }\n\n  return this.s.replicaSetState.hasPrimary();\n};\n\n/**\n * Figure out if the replicaset instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nReplSet.prototype.isDestroyed = function() {\n  return this.state === DESTROYED;\n};\n\n/**\n * Get server\n * @method\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @return {Server}\n */\nReplSet.prototype.getServer = function(options) {\n  // Ensure we have no options\n  options = options || {};\n  // Pick the right server based on readPreference\n  var server = this.s.replicaSetState.pickServer(options.readPreference);\n  if (this.s.debug) this.emit('pickedServer', options.readPreference, server);\n  return server;\n};\n\n/**\n * Get a direct connection\n * @method\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @return {Connection}\n */\nReplSet.prototype.getConnection = function(options) {\n  var server = this.getServer(options);\n  if (server) return server.getConnection();\n};\n\n/**\n * Get all connected servers\n * @method\n * @return {Server[]}\n */\nReplSet.prototype.getServers = function() {\n  return this.s.replicaSetState.allServers();\n};\n\n//\n// Execute write operation\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // TODO: once we drop Node 4, use destructuring either here or in arguments.\n  const self = args.self;\n  const op = args.op;\n  const ns = args.ns;\n  const ops = args.ops;\n\n  if (self.state === DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n\n  const willRetryWrite =\n    !args.retrying && options.retryWrites && options.session && isRetryableWritesSupported(self);\n\n  if (!self.s.replicaSetState.hasPrimary()) {\n    if (self.s.disconnectHandler) {\n      // Not connected but we have a disconnecthandler\n      return self.s.disconnectHandler.add(op, ns, ops, options, callback);\n    } else if (!willRetryWrite) {\n      // No server returned we had an error\n      return callback(new MongoError('no primary server found'));\n    }\n  }\n\n  const handler = (err, result) => {\n    if (!err) return callback(null, result);\n    if (!(err instanceof errors.MongoNetworkError) && !err.message.match(/not master/)) {\n      return callback(err);\n    }\n\n    if (willRetryWrite) {\n      const newArgs = Object.assign({}, args, { retrying: true });\n      return executeWriteOperation(newArgs, options, callback);\n    }\n\n    // Per SDAM, remove primary from replicaset\n    self.s.replicaSetState.remove(self.s.replicaSetState.primary, { force: true });\n\n    return callback(err);\n  };\n\n  if (callback.operationId) {\n    handler.operationId = callback.operationId;\n  }\n\n  // increment and assign txnNumber\n  if (willRetryWrite) {\n    options.txnNumber = getNextTransactionNumber(options.session);\n  }\n\n  return self.s.replicaSetState.primary[op](ns, ops, options, handler);\n}\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.insert = function(ns, ops, options, callback) {\n  // Execute write operation\n  executeWriteOperation({ self: this, op: 'insert', ns, ops }, options, callback);\n};\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.update = function(ns, ops, options, callback) {\n  // Execute write operation\n  executeWriteOperation({ self: this, op: 'update', ns, ops }, options, callback);\n};\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.remove = function(ns, ops, options, callback) {\n  // Execute write operation\n  executeWriteOperation({ self: this, op: 'remove', ns, ops }, options, callback);\n};\n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Connection} [options.connection] Specify connection object to execute command against\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.command = function(ns, cmd, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  if (this.state === DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  var self = this;\n\n  // Establish readPreference\n  var readPreference = options.readPreference ? options.readPreference : ReadPreference.primary;\n\n  // If the readPreference is primary and we have no primary, store it\n  if (\n    readPreference.preference === 'primary' &&\n    !this.s.replicaSetState.hasPrimary() &&\n    this.s.disconnectHandler != null\n  ) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  } else if (\n    readPreference.preference === 'secondary' &&\n    !this.s.replicaSetState.hasSecondary() &&\n    this.s.disconnectHandler != null\n  ) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  } else if (\n    readPreference.preference !== 'primary' &&\n    !this.s.replicaSetState.hasSecondary() &&\n    !this.s.replicaSetState.hasPrimary() &&\n    this.s.disconnectHandler != null\n  ) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  }\n\n  // Pick a server\n  var server = this.s.replicaSetState.pickServer(readPreference);\n  // We received an error, return it\n  if (!(server instanceof Server)) return callback(server);\n  // Emit debug event\n  if (self.s.debug) self.emit('pickedServer', ReadPreference.primary, server);\n\n  // No server returned we had an error\n  if (server == null) {\n    return callback(\n      new MongoError(\n        f('no server found that matches the provided readPreference %s', readPreference)\n      )\n    );\n  }\n\n  // Execute the command\n  server.command(ns, cmd, options, callback);\n};\n\n/**\n * Authenticate using a specified mechanism\n * @method\n * @param {string} mechanism The Auth mechanism we are invoking\n * @param {string} db The db we are invoking the mechanism against\n * @param {...object} param Parameters for the specific mechanism\n * @param {authResultCallback} callback A callback function\n */\nReplSet.prototype.auth = function(mechanism, db) {\n  var allArgs = Array.prototype.slice.call(arguments, 0).slice(0);\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 2);\n  var callback = args.pop();\n  var currentContextIndex = 0;\n\n  // If we don't have the mechanism fail\n  if (this.authProviders[mechanism] == null && mechanism !== 'default') {\n    return callback(new MongoError(f('auth provider %s does not exist', mechanism)));\n  }\n\n  // Are we already authenticating, throw\n  if (this.authenticating) {\n    return callback(new MongoError('authentication or logout allready in process'));\n  }\n\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if (self.s.disconnectHandler != null) {\n    if (!self.s.replicaSetState.hasPrimary() && !self.s.options.secondaryOnlyConnectionAllowed) {\n      return self.s.disconnectHandler.add('auth', db, allArgs, {}, callback);\n    } else if (\n      !self.s.replicaSetState.hasSecondary() &&\n      self.s.options.secondaryOnlyConnectionAllowed\n    ) {\n      return self.s.disconnectHandler.add('auth', db, allArgs, {}, callback);\n    }\n  }\n\n  // Set to authenticating\n  this.authenticating = true;\n  // All errors\n  var errors = [];\n\n  // Get all the servers\n  var servers = this.s.replicaSetState.allServers();\n  // No servers return\n  if (servers.length === 0) {\n    this.authenticating = false;\n    callback(null, true);\n  }\n\n  // Authenticate\n  function auth(server) {\n    // Arguments without a callback\n    var argsWithoutCallback = [mechanism, db].concat(args.slice(0));\n    // Create arguments\n    var finalArguments = argsWithoutCallback.concat([\n      function(err) {\n        count = count - 1;\n        // Save all the errors\n        if (err) errors.push({ name: server.name, err: err });\n        // We are done\n        if (count === 0) {\n          // Auth is done\n          self.authenticating = false;\n\n          // Return the auth error\n          if (errors.length) {\n            // Remove the entry from the stored authentication contexts\n            self.s.authenticationContexts.splice(currentContextIndex, 0);\n            // Return error\n            return callback(\n              new MongoError({\n                message: 'authentication fail',\n                errors: errors\n              }),\n              false\n            );\n          }\n\n          // Successfully authenticated session\n          callback(null, self);\n        }\n      }\n    ]);\n\n    if (!server.lastIsMaster().arbiterOnly) {\n      // Execute the auth only against non arbiter servers\n      server.auth.apply(server, finalArguments);\n    } else {\n      // If we are authenticating against an arbiter just ignore it\n      finalArguments.pop()(null);\n    }\n  }\n\n  // Get total count\n  var count = servers.length;\n\n  // Save current context index\n  currentContextIndex = this.s.authenticationContexts.length;\n\n  // Store the auth context and return the last index\n  this.s.authenticationContexts.push([mechanism, db].concat(args.slice(0)));\n\n  // Authenticate against all servers\n  while (servers.length > 0) {\n    auth(servers.shift());\n  }\n};\n\n/**\n * Logout from a database\n * @method\n * @param {string} db The db we are logging out from\n * @param {authResultCallback} callback A callback function\n */\nReplSet.prototype.logout = function(dbName, callback) {\n  var self = this;\n  // Are we authenticating or logging out, throw\n  if (this.authenticating) {\n    throw new MongoError('authentication or logout allready in process');\n  }\n\n  // Ensure no new members are processed while logging out\n  this.authenticating = true;\n\n  // Remove from all auth providers (avoid any reaplication of the auth details)\n  var providers = Object.keys(this.authProviders);\n  for (var i = 0; i < providers.length; i++) {\n    this.authProviders[providers[i]].logout(dbName);\n  }\n\n  // Clear out any contexts associated with the db\n  self.s.authenticationContexts = self.s.authenticationContexts.filter(function(context) {\n    return context[1] !== dbName;\n  });\n\n  // Now logout all the servers\n  var servers = this.s.replicaSetState.allServers();\n  var count = servers.length;\n  if (count === 0) return callback();\n  var errors = [];\n\n  function logoutServer(_server, cb) {\n    _server.logout(dbName, function(err) {\n      if (err) errors.push({ name: _server.name, err: err });\n      cb();\n    });\n  }\n\n  // Execute logout on all server instances\n  for (i = 0; i < servers.length; i++) {\n    logoutServer(servers[i], function() {\n      count = count - 1;\n\n      if (count === 0) {\n        // Do not block new operations\n        self.authenticating = false;\n        // If we have one or more errors\n        if (errors.length)\n          return callback(\n            new MongoError({\n              message: f('logout failed against db %s', dbName),\n              errors: errors\n            }),\n            false\n          );\n\n        // No errors\n        callback();\n      }\n    });\n  }\n};\n\n/**\n * Get a new cursor\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options] Options for the cursor\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {object} [options.topology] The internal topology of the created cursor\n * @returns {Cursor}\n */\nReplSet.prototype.cursor = function(ns, cmd, options) {\n  options = options || {};\n  const topology = options.topology || this;\n\n  // Set up final cursor type\n  var FinalCursor = options.cursorFactory || this.s.Cursor;\n\n  // Return the cursor\n  return new FinalCursor(this.s.bson, ns, cmd, options, topology, this.s.options);\n};\n\n/**\n * A replset connect event, used to verify that the connection is up and running\n *\n * @event ReplSet#connect\n * @type {ReplSet}\n */\n\n/**\n * A replset reconnect event, used to verify that the topology reconnected\n *\n * @event ReplSet#reconnect\n * @type {ReplSet}\n */\n\n/**\n * A replset fullsetup event, used to signal that all topology members have been contacted.\n *\n * @event ReplSet#fullsetup\n * @type {ReplSet}\n */\n\n/**\n * A replset all event, used to signal that all topology members have been contacted.\n *\n * @event ReplSet#all\n * @type {ReplSet}\n */\n\n/**\n * A replset failed event, used to signal that initial replset connection failed.\n *\n * @event ReplSet#failed\n * @type {ReplSet}\n */\n\n/**\n * A server member left the replicaset\n *\n * @event ReplSet#left\n * @type {function}\n * @param {string} type The type of member that left (primary|secondary|arbiter)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the replicaset\n *\n * @event ReplSet#joined\n * @type {function}\n * @param {string} type The type of member that joined (primary|secondary|arbiter)\n * @param {Server} server The server object that joined\n */\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event ReplSet#serverOpening\n * @type {object}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event ReplSet#serverClosed\n * @type {object}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event ReplSet#serverDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event ReplSet#topologyOpening\n * @type {object}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event ReplSet#topologyClosed\n * @type {object}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event ReplSet#topologyDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event ReplSet#serverHeartbeatStarted\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event ReplSet#serverHeartbeatFailed\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event ReplSet#serverHeartbeatSucceeded\n * @type {object}\n */\n\nmodule.exports = ReplSet;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/topologies/replset.js\n// module id = 166\n// module chunks = 0","'use strict';\n\nvar inherits = require('util').inherits,\n  f = require('util').format,\n  diff = require('./shared').diff,\n  EventEmitter = require('events').EventEmitter,\n  Logger = require('../connection/logger'),\n  ReadPreference = require('./read_preference'),\n  MongoError = require('../error').MongoError;\n\nvar TopologyType = {\n  Single: 'Single',\n  ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n  ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n  Sharded: 'Sharded',\n  Unknown: 'Unknown'\n};\n\nvar ServerType = {\n  Standalone: 'Standalone',\n  Mongos: 'Mongos',\n  PossiblePrimary: 'PossiblePrimary',\n  RSPrimary: 'RSPrimary',\n  RSSecondary: 'RSSecondary',\n  RSArbiter: 'RSArbiter',\n  RSOther: 'RSOther',\n  RSGhost: 'RSGhost',\n  Unknown: 'Unknown'\n};\n\nvar ReplSetState = function(options) {\n  options = options || {};\n  // Add event listener\n  EventEmitter.call(this);\n  // Topology state\n  this.topologyType = TopologyType.ReplicaSetNoPrimary;\n  this.setName = options.setName;\n\n  // Server set\n  this.set = {};\n\n  // Unpacked options\n  this.id = options.id;\n  this.setName = options.setName;\n\n  // Replicaset logger\n  this.logger = options.logger || Logger('ReplSet', options);\n\n  // Server selection index\n  this.index = 0;\n  // Acceptable latency\n  this.acceptableLatency = options.acceptableLatency || 15;\n\n  // heartbeatFrequencyMS\n  this.heartbeatFrequencyMS = options.heartbeatFrequencyMS || 10000;\n\n  // Server side\n  this.primary = null;\n  this.secondaries = [];\n  this.arbiters = [];\n  this.passives = [];\n  this.ghosts = [];\n  // Current unknown hosts\n  this.unknownServers = [];\n  // In set status\n  this.set = {};\n  // Status\n  this.maxElectionId = null;\n  this.maxSetVersion = 0;\n  // Description of the Replicaset\n  this.replicasetDescription = {\n    topologyType: 'Unknown',\n    servers: []\n  };\n\n  this.logicalSessionTimeoutMinutes = undefined;\n};\n\ninherits(ReplSetState, EventEmitter);\n\nReplSetState.prototype.hasPrimaryAndSecondary = function() {\n  return this.primary != null && this.secondaries.length > 0;\n};\n\nReplSetState.prototype.hasPrimaryOrSecondary = function() {\n  return this.hasPrimary() || this.hasSecondary();\n};\n\nReplSetState.prototype.hasPrimary = function() {\n  return this.primary != null;\n};\n\nReplSetState.prototype.hasSecondary = function() {\n  return this.secondaries.length > 0;\n};\n\nReplSetState.prototype.get = function(host) {\n  var servers = this.allServers();\n\n  for (var i = 0; i < servers.length; i++) {\n    if (servers[i].name.toLowerCase() === host.toLowerCase()) {\n      return servers[i];\n    }\n  }\n\n  return null;\n};\n\nReplSetState.prototype.allServers = function(options) {\n  options = options || {};\n  var servers = this.primary ? [this.primary] : [];\n  servers = servers.concat(this.secondaries);\n  if (!options.ignoreArbiters) servers = servers.concat(this.arbiters);\n  servers = servers.concat(this.passives);\n  return servers;\n};\n\nReplSetState.prototype.destroy = function(options) {\n  // Destroy all sockets\n  if (this.primary) this.primary.destroy(options);\n  this.secondaries.forEach(function(x) {\n    x.destroy(options);\n  });\n  this.arbiters.forEach(function(x) {\n    x.destroy(options);\n  });\n  this.passives.forEach(function(x) {\n    x.destroy(options);\n  });\n  this.ghosts.forEach(function(x) {\n    x.destroy(options);\n  });\n  // Clear out the complete state\n  this.secondaries = [];\n  this.arbiters = [];\n  this.passives = [];\n  this.ghosts = [];\n  this.unknownServers = [];\n  this.set = {};\n  this.primary = null;\n  // Emit the topology changed\n  emitTopologyDescriptionChanged(this);\n};\n\nReplSetState.prototype.remove = function(server, options) {\n  options = options || {};\n\n  // Get the server name and lowerCase it\n  var serverName = server.name.toLowerCase();\n\n  // Only remove if the current server is not connected\n  var servers = this.primary ? [this.primary] : [];\n  servers = servers.concat(this.secondaries);\n  servers = servers.concat(this.arbiters);\n  servers = servers.concat(this.passives);\n\n  // Check if it's active and this is just a failed connection attempt\n  for (var i = 0; i < servers.length; i++) {\n    if (\n      !options.force &&\n      servers[i].equals(server) &&\n      servers[i].isConnected &&\n      servers[i].isConnected()\n    ) {\n      return;\n    }\n  }\n\n  // If we have it in the set remove it\n  if (this.set[serverName]) {\n    this.set[serverName].type = ServerType.Unknown;\n    this.set[serverName].electionId = null;\n    this.set[serverName].setName = null;\n    this.set[serverName].setVersion = null;\n  }\n\n  // Remove type\n  var removeType = null;\n\n  // Remove from any lists\n  if (this.primary && this.primary.equals(server)) {\n    this.primary = null;\n    this.topologyType = TopologyType.ReplicaSetNoPrimary;\n    removeType = 'primary';\n  }\n\n  // Remove from any other server lists\n  removeType = removeFrom(server, this.secondaries) ? 'secondary' : removeType;\n  removeType = removeFrom(server, this.arbiters) ? 'arbiter' : removeType;\n  removeType = removeFrom(server, this.passives) ? 'secondary' : removeType;\n  removeFrom(server, this.ghosts);\n  removeFrom(server, this.unknownServers);\n\n  // Push to unknownServers\n  this.unknownServers.push(serverName);\n\n  // Do we have a removeType\n  if (removeType) {\n    this.emit('left', removeType, server);\n  }\n};\n\nconst isArbiter = ismaster => ismaster.arbiterOnly && ismaster.setName;\n\nReplSetState.prototype.update = function(server) {\n  var self = this;\n  // Get the current ismaster\n  var ismaster = server.lastIsMaster();\n\n  // Get the server name and lowerCase it\n  var serverName = server.name.toLowerCase();\n\n  //\n  // Add any hosts\n  //\n  if (ismaster) {\n    // Join all the possible new hosts\n    var hosts = Array.isArray(ismaster.hosts) ? ismaster.hosts : [];\n    hosts = hosts.concat(Array.isArray(ismaster.arbiters) ? ismaster.arbiters : []);\n    hosts = hosts.concat(Array.isArray(ismaster.passives) ? ismaster.passives : []);\n    hosts = hosts.map(function(s) {\n      return s.toLowerCase();\n    });\n\n    // Add all hosts as unknownServers\n    for (var i = 0; i < hosts.length; i++) {\n      // Add to the list of unknown server\n      if (\n        this.unknownServers.indexOf(hosts[i]) === -1 &&\n        (!this.set[hosts[i]] || this.set[hosts[i]].type === ServerType.Unknown)\n      ) {\n        this.unknownServers.push(hosts[i].toLowerCase());\n      }\n\n      if (!this.set[hosts[i]]) {\n        this.set[hosts[i]] = {\n          type: ServerType.Unknown,\n          electionId: null,\n          setName: null,\n          setVersion: null\n        };\n      }\n    }\n  }\n\n  //\n  // Unknown server\n  //\n  if (!ismaster && !inList(ismaster, server, this.unknownServers)) {\n    self.set[serverName] = {\n      type: ServerType.Unknown,\n      setVersion: null,\n      electionId: null,\n      setName: null\n    };\n    // Update set information about the server instance\n    self.set[serverName].type = ServerType.Unknown;\n    self.set[serverName].electionId = ismaster ? ismaster.electionId : ismaster;\n    self.set[serverName].setName = ismaster ? ismaster.setName : ismaster;\n    self.set[serverName].setVersion = ismaster ? ismaster.setVersion : ismaster;\n\n    if (self.unknownServers.indexOf(server.name) === -1) {\n      self.unknownServers.push(serverName);\n    }\n\n    // Set the topology\n    return false;\n  }\n\n  // Update logicalSessionTimeoutMinutes\n  if (ismaster.logicalSessionTimeoutMinutes !== undefined && !isArbiter(ismaster)) {\n    if (\n      self.logicalSessionTimeoutMinutes === undefined ||\n      ismaster.logicalSessionTimeoutMinutes === null\n    ) {\n      self.logicalSessionTimeoutMinutes = ismaster.logicalSessionTimeoutMinutes;\n    } else {\n      self.logicalSessionTimeoutMinutes = Math.min(\n        self.logicalSessionTimeoutMinutes,\n        ismaster.logicalSessionTimeoutMinutes\n      );\n    }\n  }\n\n  //\n  // Is this a mongos\n  //\n  if (ismaster && ismaster.msg === 'isdbgrid') {\n    return false;\n  }\n\n  // A RSOther instance\n  if (\n    (ismaster.setName && ismaster.hidden) ||\n    (ismaster.setName &&\n      !ismaster.ismaster &&\n      !ismaster.secondary &&\n      !ismaster.arbiterOnly &&\n      !ismaster.passive)\n  ) {\n    self.set[serverName] = {\n      type: ServerType.RSOther,\n      setVersion: null,\n      electionId: null,\n      setName: ismaster.setName\n    };\n    // Set the topology\n    this.topologyType = this.primary\n      ? TopologyType.ReplicaSetWithPrimary\n      : TopologyType.ReplicaSetNoPrimary;\n    if (ismaster.setName) this.setName = ismaster.setName;\n    return false;\n  }\n\n  // A RSGhost instance\n  if (ismaster.isreplicaset) {\n    self.set[serverName] = {\n      type: ServerType.RSGhost,\n      setVersion: null,\n      electionId: null,\n      setName: null\n    };\n\n    // Set the topology\n    this.topologyType = this.primary\n      ? TopologyType.ReplicaSetWithPrimary\n      : TopologyType.ReplicaSetNoPrimary;\n    if (ismaster.setName) this.setName = ismaster.setName;\n\n    // Set the topology\n    return false;\n  }\n\n  //\n  // Standalone server, destroy and return\n  //\n  if (ismaster && ismaster.ismaster && !ismaster.setName) {\n    this.topologyType = this.primary ? TopologyType.ReplicaSetWithPrimary : TopologyType.Unknown;\n    this.remove(server, { force: true });\n    return false;\n  }\n\n  //\n  // Server in maintanance mode\n  //\n  if (ismaster && !ismaster.ismaster && !ismaster.secondary && !ismaster.arbiterOnly) {\n    this.remove(server, { force: true });\n    return false;\n  }\n\n  //\n  // If the .me field does not match the passed in server\n  //\n  if (ismaster.me && ismaster.me.toLowerCase() !== serverName) {\n    if (this.logger.isWarn()) {\n      this.logger.warn(\n        f(\n          'the seedlist server was removed due to its address %s not matching its ismaster.me address %s',\n          server.name,\n          ismaster.me\n        )\n      );\n    }\n\n    // Delete from the set\n    delete this.set[serverName];\n    // Delete unknown servers\n    removeFrom(server, self.unknownServers);\n\n    // Destroy the instance\n    server.destroy();\n\n    // Set the type of topology we have\n    if (this.primary && !this.primary.equals(server)) {\n      this.topologyType = TopologyType.ReplicaSetWithPrimary;\n    } else {\n      this.topologyType = TopologyType.ReplicaSetNoPrimary;\n    }\n\n    //\n    // We have a potential primary\n    //\n    if (!this.primary && ismaster.primary) {\n      this.set[ismaster.primary.toLowerCase()] = {\n        type: ServerType.PossiblePrimary,\n        setName: null,\n        electionId: null,\n        setVersion: null\n      };\n    }\n\n    return false;\n  }\n\n  //\n  // Primary handling\n  //\n  if (!this.primary && ismaster.ismaster && ismaster.setName) {\n    var ismasterElectionId = server.lastIsMaster().electionId;\n    if (this.setName && this.setName !== ismaster.setName) {\n      this.topologyType = TopologyType.ReplicaSetNoPrimary;\n      return new MongoError(\n        f(\n          'setName from ismaster does not match provided connection setName [%s] != [%s]',\n          ismaster.setName,\n          this.setName\n        )\n      );\n    }\n\n    if (!this.maxElectionId && ismasterElectionId) {\n      this.maxElectionId = ismasterElectionId;\n    } else if (this.maxElectionId && ismasterElectionId) {\n      var result = compareObjectIds(this.maxElectionId, ismasterElectionId);\n      // Get the electionIds\n      var ismasterSetVersion = server.lastIsMaster().setVersion;\n\n      if (result === 1) {\n        this.topologyType = TopologyType.ReplicaSetNoPrimary;\n        return false;\n      } else if (result === 0 && ismasterSetVersion) {\n        if (ismasterSetVersion < this.maxSetVersion) {\n          this.topologyType = TopologyType.ReplicaSetNoPrimary;\n          return false;\n        }\n      }\n\n      this.maxSetVersion = ismasterSetVersion;\n      this.maxElectionId = ismasterElectionId;\n    }\n\n    // Hande normalization of server names\n    var normalizedHosts = ismaster.hosts.map(function(x) {\n      return x.toLowerCase();\n    });\n    var locationIndex = normalizedHosts.indexOf(serverName);\n\n    // Validate that the server exists in the host list\n    if (locationIndex !== -1) {\n      self.primary = server;\n      self.set[serverName] = {\n        type: ServerType.RSPrimary,\n        setVersion: ismaster.setVersion,\n        electionId: ismaster.electionId,\n        setName: ismaster.setName\n      };\n\n      // Set the topology\n      this.topologyType = TopologyType.ReplicaSetWithPrimary;\n      if (ismaster.setName) this.setName = ismaster.setName;\n      removeFrom(server, self.unknownServers);\n      removeFrom(server, self.secondaries);\n      removeFrom(server, self.passives);\n      self.emit('joined', 'primary', server);\n    } else {\n      this.topologyType = TopologyType.ReplicaSetNoPrimary;\n    }\n\n    emitTopologyDescriptionChanged(self);\n    return true;\n  } else if (ismaster.ismaster && ismaster.setName) {\n    // Get the electionIds\n    var currentElectionId = self.set[self.primary.name.toLowerCase()].electionId;\n    var currentSetVersion = self.set[self.primary.name.toLowerCase()].setVersion;\n    var currentSetName = self.set[self.primary.name.toLowerCase()].setName;\n    ismasterElectionId = server.lastIsMaster().electionId;\n    ismasterSetVersion = server.lastIsMaster().setVersion;\n    var ismasterSetName = server.lastIsMaster().setName;\n\n    // Is it the same server instance\n    if (this.primary.equals(server) && currentSetName === ismasterSetName) {\n      return false;\n    }\n\n    // If we do not have the same rs name\n    if (currentSetName && currentSetName !== ismasterSetName) {\n      if (!this.primary.equals(server)) {\n        this.topologyType = TopologyType.ReplicaSetWithPrimary;\n      } else {\n        this.topologyType = TopologyType.ReplicaSetNoPrimary;\n      }\n\n      return false;\n    }\n\n    // Check if we need to replace the server\n    if (currentElectionId && ismasterElectionId) {\n      result = compareObjectIds(currentElectionId, ismasterElectionId);\n\n      if (result === 1) {\n        return false;\n      } else if (result === 0 && currentSetVersion > ismasterSetVersion) {\n        return false;\n      }\n    } else if (!currentElectionId && ismasterElectionId && ismasterSetVersion) {\n      if (ismasterSetVersion < this.maxSetVersion) {\n        return false;\n      }\n    }\n\n    if (!this.maxElectionId && ismasterElectionId) {\n      this.maxElectionId = ismasterElectionId;\n    } else if (this.maxElectionId && ismasterElectionId) {\n      result = compareObjectIds(this.maxElectionId, ismasterElectionId);\n\n      if (result === 1) {\n        return false;\n      } else if (result === 0 && currentSetVersion && ismasterSetVersion) {\n        if (ismasterSetVersion < this.maxSetVersion) {\n          return false;\n        }\n      } else {\n        if (ismasterSetVersion < this.maxSetVersion) {\n          return false;\n        }\n      }\n\n      this.maxElectionId = ismasterElectionId;\n      this.maxSetVersion = ismasterSetVersion;\n    } else {\n      this.maxSetVersion = ismasterSetVersion;\n    }\n\n    // Modify the entry to unknown\n    self.set[self.primary.name.toLowerCase()] = {\n      type: ServerType.Unknown,\n      setVersion: null,\n      electionId: null,\n      setName: null\n    };\n\n    // Signal primary left\n    self.emit('left', 'primary', this.primary);\n    // Destroy the instance\n    self.primary.destroy();\n    // Set the new instance\n    self.primary = server;\n    // Set the set information\n    self.set[serverName] = {\n      type: ServerType.RSPrimary,\n      setVersion: ismaster.setVersion,\n      electionId: ismaster.electionId,\n      setName: ismaster.setName\n    };\n\n    // Set the topology\n    this.topologyType = TopologyType.ReplicaSetWithPrimary;\n    if (ismaster.setName) this.setName = ismaster.setName;\n    removeFrom(server, self.unknownServers);\n    removeFrom(server, self.secondaries);\n    removeFrom(server, self.passives);\n    self.emit('joined', 'primary', server);\n    emitTopologyDescriptionChanged(self);\n    return true;\n  }\n\n  // A possible instance\n  if (!this.primary && ismaster.primary) {\n    self.set[ismaster.primary.toLowerCase()] = {\n      type: ServerType.PossiblePrimary,\n      setVersion: null,\n      electionId: null,\n      setName: null\n    };\n  }\n\n  //\n  // Secondary handling\n  //\n  if (\n    ismaster.secondary &&\n    ismaster.setName &&\n    !inList(ismaster, server, this.secondaries) &&\n    this.setName &&\n    this.setName === ismaster.setName\n  ) {\n    addToList(self, ServerType.RSSecondary, ismaster, server, this.secondaries);\n    // Set the topology\n    this.topologyType = this.primary\n      ? TopologyType.ReplicaSetWithPrimary\n      : TopologyType.ReplicaSetNoPrimary;\n    if (ismaster.setName) this.setName = ismaster.setName;\n    removeFrom(server, self.unknownServers);\n\n    // Remove primary\n    if (this.primary && this.primary.name.toLowerCase() === serverName) {\n      server.destroy();\n      this.primary = null;\n      self.emit('left', 'primary', server);\n    }\n\n    // Emit secondary joined replicaset\n    self.emit('joined', 'secondary', server);\n    emitTopologyDescriptionChanged(self);\n    return true;\n  }\n\n  //\n  // Arbiter handling\n  //\n  if (\n    isArbiter(ismaster) &&\n    !inList(ismaster, server, this.arbiters) &&\n    this.setName &&\n    this.setName === ismaster.setName\n  ) {\n    addToList(self, ServerType.RSArbiter, ismaster, server, this.arbiters);\n    // Set the topology\n    this.topologyType = this.primary\n      ? TopologyType.ReplicaSetWithPrimary\n      : TopologyType.ReplicaSetNoPrimary;\n    if (ismaster.setName) this.setName = ismaster.setName;\n    removeFrom(server, self.unknownServers);\n    self.emit('joined', 'arbiter', server);\n    emitTopologyDescriptionChanged(self);\n    return true;\n  }\n\n  //\n  // Passive handling\n  //\n  if (\n    ismaster.passive &&\n    ismaster.setName &&\n    !inList(ismaster, server, this.passives) &&\n    this.setName &&\n    this.setName === ismaster.setName\n  ) {\n    addToList(self, ServerType.RSSecondary, ismaster, server, this.passives);\n    // Set the topology\n    this.topologyType = this.primary\n      ? TopologyType.ReplicaSetWithPrimary\n      : TopologyType.ReplicaSetNoPrimary;\n    if (ismaster.setName) this.setName = ismaster.setName;\n    removeFrom(server, self.unknownServers);\n\n    // Remove primary\n    if (this.primary && this.primary.name.toLowerCase() === serverName) {\n      server.destroy();\n      this.primary = null;\n      self.emit('left', 'primary', server);\n    }\n\n    self.emit('joined', 'secondary', server);\n    emitTopologyDescriptionChanged(self);\n    return true;\n  }\n\n  //\n  // Remove the primary\n  //\n  if (this.set[serverName] && this.set[serverName].type === ServerType.RSPrimary) {\n    self.emit('left', 'primary', this.primary);\n    this.primary.destroy();\n    this.primary = null;\n    this.topologyType = TopologyType.ReplicaSetNoPrimary;\n    return false;\n  }\n\n  this.topologyType = this.primary\n    ? TopologyType.ReplicaSetWithPrimary\n    : TopologyType.ReplicaSetNoPrimary;\n  return false;\n};\n\n/**\n * Recalculate single server max staleness\n * @method\n */\nReplSetState.prototype.updateServerMaxStaleness = function(server, haInterval) {\n  // Locate the max secondary lastwrite\n  var max = 0;\n  // Go over all secondaries\n  for (var i = 0; i < this.secondaries.length; i++) {\n    max = Math.max(max, this.secondaries[i].lastWriteDate);\n  }\n\n  // Perform this servers staleness calculation\n  if (server.ismaster.maxWireVersion >= 5 && server.ismaster.secondary && this.hasPrimary()) {\n    server.staleness =\n      server.lastUpdateTime -\n      server.lastWriteDate -\n      (this.primary.lastUpdateTime - this.primary.lastWriteDate) +\n      haInterval;\n  } else if (server.ismaster.maxWireVersion >= 5 && server.ismaster.secondary) {\n    server.staleness = max - server.lastWriteDate + haInterval;\n  }\n};\n\n/**\n * Recalculate all the staleness values for secodaries\n * @method\n */\nReplSetState.prototype.updateSecondariesMaxStaleness = function(haInterval) {\n  for (var i = 0; i < this.secondaries.length; i++) {\n    this.updateServerMaxStaleness(this.secondaries[i], haInterval);\n  }\n};\n\n/**\n * Pick a server by the passed in ReadPreference\n * @method\n * @param {ReadPreference} readPreference The ReadPreference instance to use\n */\nReplSetState.prototype.pickServer = function(readPreference) {\n  // If no read Preference set to primary by default\n  readPreference = readPreference || ReadPreference.primary;\n\n  // maxStalenessSeconds is not allowed with a primary read\n  if (readPreference.preference === 'primary' && readPreference.maxStalenessSeconds != null) {\n    return new MongoError('primary readPreference incompatible with maxStalenessSeconds');\n  }\n\n  // Check if we have any non compatible servers for maxStalenessSeconds\n  var allservers = this.primary ? [this.primary] : [];\n  allservers = allservers.concat(this.secondaries);\n\n  // Does any of the servers not support the right wire protocol version\n  // for maxStalenessSeconds when maxStalenessSeconds specified on readPreference. Then error out\n  if (readPreference.maxStalenessSeconds != null) {\n    for (var i = 0; i < allservers.length; i++) {\n      if (allservers[i].ismaster.maxWireVersion < 5) {\n        return new MongoError(\n          'maxStalenessSeconds not supported by at least one of the replicaset members'\n        );\n      }\n    }\n  }\n\n  // Do we have the nearest readPreference\n  if (readPreference.preference === 'nearest' && readPreference.maxStalenessSeconds == null) {\n    return pickNearest(this, readPreference);\n  } else if (\n    readPreference.preference === 'nearest' &&\n    readPreference.maxStalenessSeconds != null\n  ) {\n    return pickNearestMaxStalenessSeconds(this, readPreference);\n  }\n\n  // Get all the secondaries\n  var secondaries = this.secondaries;\n\n  // Check if we can satisfy and of the basic read Preferences\n  if (readPreference.equals(ReadPreference.secondary) && secondaries.length === 0) {\n    return new MongoError('no secondary server available');\n  }\n\n  if (\n    readPreference.equals(ReadPreference.secondaryPreferred) &&\n    secondaries.length === 0 &&\n    this.primary == null\n  ) {\n    return new MongoError('no secondary or primary server available');\n  }\n\n  if (readPreference.equals(ReadPreference.primary) && this.primary == null) {\n    return new MongoError('no primary server available');\n  }\n\n  // Secondary preferred or just secondaries\n  if (\n    readPreference.equals(ReadPreference.secondaryPreferred) ||\n    readPreference.equals(ReadPreference.secondary)\n  ) {\n    if (secondaries.length > 0 && readPreference.maxStalenessSeconds == null) {\n      // Pick nearest of any other servers available\n      var server = pickNearest(this, readPreference);\n      // No server in the window return primary\n      if (server) {\n        return server;\n      }\n    } else if (secondaries.length > 0 && readPreference.maxStalenessSeconds != null) {\n      // Pick nearest of any other servers available\n      server = pickNearestMaxStalenessSeconds(this, readPreference);\n      // No server in the window return primary\n      if (server) {\n        return server;\n      }\n    }\n\n    if (readPreference.equals(ReadPreference.secondaryPreferred)) {\n      return this.primary;\n    }\n\n    return null;\n  }\n\n  // Primary preferred\n  if (readPreference.equals(ReadPreference.primaryPreferred)) {\n    server = null;\n\n    // We prefer the primary if it's available\n    if (this.primary) {\n      return this.primary;\n    }\n\n    // Pick a secondary\n    if (secondaries.length > 0 && readPreference.maxStalenessSeconds == null) {\n      server = pickNearest(this, readPreference);\n    } else if (secondaries.length > 0 && readPreference.maxStalenessSeconds != null) {\n      server = pickNearestMaxStalenessSeconds(this, readPreference);\n    }\n\n    //  Did we find a server\n    if (server) return server;\n  }\n\n  // Return the primary\n  return this.primary;\n};\n\n//\n// Filter serves by tags\nvar filterByTags = function(readPreference, servers) {\n  if (readPreference.tags == null) return servers;\n  var filteredServers = [];\n  var tagsArray = Array.isArray(readPreference.tags) ? readPreference.tags : [readPreference.tags];\n\n  // Iterate over the tags\n  for (var j = 0; j < tagsArray.length; j++) {\n    var tags = tagsArray[j];\n\n    // Iterate over all the servers\n    for (var i = 0; i < servers.length; i++) {\n      var serverTag = servers[i].lastIsMaster().tags || {};\n\n      // Did we find the a matching server\n      var found = true;\n      // Check if the server is valid\n      for (var name in tags) {\n        if (serverTag[name] !== tags[name]) {\n          found = false;\n        }\n      }\n\n      // Add to candidate list\n      if (found) {\n        filteredServers.push(servers[i]);\n      }\n    }\n  }\n\n  // Returned filtered servers\n  return filteredServers;\n};\n\nfunction pickNearestMaxStalenessSeconds(self, readPreference) {\n  // Only get primary and secondaries as seeds\n  var servers = [];\n\n  // Get the maxStalenessMS\n  var maxStalenessMS = readPreference.maxStalenessSeconds * 1000;\n\n  // Check if the maxStalenessMS > 90 seconds\n  if (maxStalenessMS < 90 * 1000) {\n    return new MongoError('maxStalenessSeconds must be set to at least 90 seconds');\n  }\n\n  // Add primary to list if not a secondary read preference\n  if (\n    self.primary &&\n    readPreference.preference !== 'secondary' &&\n    readPreference.preference !== 'secondaryPreferred'\n  ) {\n    servers.push(self.primary);\n  }\n\n  // Add all the secondaries\n  for (var i = 0; i < self.secondaries.length; i++) {\n    servers.push(self.secondaries[i]);\n  }\n\n  // If we have a secondaryPreferred readPreference and no server add the primary\n  if (self.primary && servers.length === 0 && readPreference.preference !== 'secondaryPreferred') {\n    servers.push(self.primary);\n  }\n\n  // Filter by tags\n  servers = filterByTags(readPreference, servers);\n\n  //\n  // Locate lowest time (picked servers are lowest time + acceptable Latency margin)\n  // var lowest = servers.length > 0 ? servers[0].lastIsMasterMS : 0;\n\n  // Filter by latency\n  servers = servers.filter(function(s) {\n    return s.staleness <= maxStalenessMS;\n  });\n\n  // Sort by time\n  servers.sort(function(a, b) {\n    // return a.time > b.time;\n    return a.lastIsMasterMS > b.lastIsMasterMS;\n  });\n\n  // No servers, default to primary\n  if (servers.length === 0) {\n    return null;\n  }\n\n  // Ensure index does not overflow the number of available servers\n  self.index = self.index % servers.length;\n\n  // Get the server\n  var server = servers[self.index];\n  // Add to the index\n  self.index = self.index + 1;\n  // Return the first server of the sorted and filtered list\n  return server;\n}\n\nfunction pickNearest(self, readPreference) {\n  // Only get primary and secondaries as seeds\n  var servers = [];\n\n  // Add primary to list if not a secondary read preference\n  if (\n    self.primary &&\n    readPreference.preference !== 'secondary' &&\n    readPreference.preference !== 'secondaryPreferred'\n  ) {\n    servers.push(self.primary);\n  }\n\n  // Add all the secondaries\n  for (var i = 0; i < self.secondaries.length; i++) {\n    servers.push(self.secondaries[i]);\n  }\n\n  // If we have a secondaryPreferred readPreference and no server add the primary\n  if (servers.length === 0 && self.primary && readPreference.preference !== 'secondaryPreferred') {\n    servers.push(self.primary);\n  }\n\n  // Filter by tags\n  servers = filterByTags(readPreference, servers);\n\n  // Sort by time\n  servers.sort(function(a, b) {\n    // return a.time > b.time;\n    return a.lastIsMasterMS > b.lastIsMasterMS;\n  });\n\n  // Locate lowest time (picked servers are lowest time + acceptable Latency margin)\n  var lowest = servers.length > 0 ? servers[0].lastIsMasterMS : 0;\n\n  // Filter by latency\n  servers = servers.filter(function(s) {\n    return s.lastIsMasterMS <= lowest + self.acceptableLatency;\n  });\n\n  // No servers, default to primary\n  if (servers.length === 0) {\n    return null;\n  }\n\n  // Ensure index does not overflow the number of available servers\n  self.index = self.index % servers.length;\n  // Get the server\n  var server = servers[self.index];\n  // Add to the index\n  self.index = self.index + 1;\n  // Return the first server of the sorted and filtered list\n  return server;\n}\n\nfunction inList(ismaster, server, list) {\n  for (var i = 0; i < list.length; i++) {\n    if (list[i] && list[i].name && list[i].name.toLowerCase() === server.name.toLowerCase())\n      return true;\n  }\n\n  return false;\n}\n\nfunction addToList(self, type, ismaster, server, list) {\n  var serverName = server.name.toLowerCase();\n  // Update set information about the server instance\n  self.set[serverName].type = type;\n  self.set[serverName].electionId = ismaster ? ismaster.electionId : ismaster;\n  self.set[serverName].setName = ismaster ? ismaster.setName : ismaster;\n  self.set[serverName].setVersion = ismaster ? ismaster.setVersion : ismaster;\n  // Add to the list\n  list.push(server);\n}\n\nfunction compareObjectIds(id1, id2) {\n  var a = new Buffer(id1.toHexString(), 'hex');\n  var b = new Buffer(id2.toHexString(), 'hex');\n\n  if (a === b) {\n    return 0;\n  }\n\n  if (typeof Buffer.compare === 'function') {\n    return Buffer.compare(a, b);\n  }\n\n  var x = a.length;\n  var y = b.length;\n  var len = Math.min(x, y);\n\n  for (var i = 0; i < len; i++) {\n    if (a[i] !== b[i]) {\n      break;\n    }\n  }\n\n  if (i !== len) {\n    x = a[i];\n    y = b[i];\n  }\n\n  return x < y ? -1 : y < x ? 1 : 0;\n}\n\nfunction removeFrom(server, list) {\n  for (var i = 0; i < list.length; i++) {\n    if (list[i].equals && list[i].equals(server)) {\n      list.splice(i, 1);\n      return true;\n    } else if (typeof list[i] === 'string' && list[i].toLowerCase() === server.name.toLowerCase()) {\n      list.splice(i, 1);\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction emitTopologyDescriptionChanged(self) {\n  if (self.listeners('topologyDescriptionChanged').length > 0) {\n    var topology = 'Unknown';\n    var setName = self.setName;\n\n    if (self.hasPrimaryAndSecondary()) {\n      topology = 'ReplicaSetWithPrimary';\n    } else if (!self.hasPrimary() && self.hasSecondary()) {\n      topology = 'ReplicaSetNoPrimary';\n    }\n\n    // Generate description\n    var description = {\n      topologyType: topology,\n      setName: setName,\n      servers: []\n    };\n\n    // Add the primary to the list\n    if (self.hasPrimary()) {\n      var desc = self.primary.getDescription();\n      desc.type = 'RSPrimary';\n      description.servers.push(desc);\n    }\n\n    // Add all the secondaries\n    description.servers = description.servers.concat(\n      self.secondaries.map(function(x) {\n        var description = x.getDescription();\n        description.type = 'RSSecondary';\n        return description;\n      })\n    );\n\n    // Add all the arbiters\n    description.servers = description.servers.concat(\n      self.arbiters.map(function(x) {\n        var description = x.getDescription();\n        description.type = 'RSArbiter';\n        return description;\n      })\n    );\n\n    // Add all the passives\n    description.servers = description.servers.concat(\n      self.passives.map(function(x) {\n        var description = x.getDescription();\n        description.type = 'RSSecondary';\n        return description;\n      })\n    );\n\n    // Get the diff\n    var diffResult = diff(self.replicasetDescription, description);\n\n    // Create the result\n    var result = {\n      topologyId: self.id,\n      previousDescription: self.replicasetDescription,\n      newDescription: description,\n      diff: diffResult\n    };\n\n    // Emit the topologyDescription change\n    // if(diffResult.servers.length > 0) {\n    self.emit('topologyDescriptionChanged', result);\n    // }\n\n    // Set the new description\n    self.replicasetDescription = description;\n  }\n}\n\nmodule.exports = ReplSetState;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/topologies/replset_state.js\n// module id = 167\n// module chunks = 0","'use strict';\nconst URL = require('url');\nconst qs = require('querystring');\nconst dns = require('dns');\nconst MongoParseError = require('./error').MongoParseError;\n\n/**\n * The following regular expression validates a connection string and breaks the\n * provide string into the following capture groups: [protocol, username, password, hosts]\n */\nconst HOSTS_RX = /(mongodb(?:\\+srv|)):\\/\\/(?: (?:[^:]*) (?: : ([^@]*) )? @ )?([^/?]*)(?:\\/|)(.*)/;\n\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param {String} srvAddress The address to check against a domain\n * @param {String} parentDomain The domain to check the provided address against\n * @return {Boolean} Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n\n/**\n * Lookup an `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param {string} uri The connection string to parse\n * @param {object} options Optional user provided connection string options\n * @param {function} callback\n */\nfunction parseSrvConnectionString(uri, options, callback) {\n  const result = URL.parse(uri, true);\n\n  if (result.hostname.split('.').length < 3) {\n    return callback(new MongoParseError('URI does not have hostname, domain name and tld'));\n  }\n\n  result.domainLength = result.hostname.split('.').length;\n  if (result.pathname && result.pathname.match(',')) {\n    return callback(new MongoParseError('Invalid URI, cannot contain multiple hostnames'));\n  }\n\n  if (result.port) {\n    return callback(new MongoParseError(`Ports not accepted with '${PROTOCOL_MONGODB_SRV}' URIs`));\n  }\n\n  let srvAddress = `_mongodb._tcp.${result.host}`;\n  dns.resolveSrv(srvAddress, (err, addresses) => {\n    if (err) return callback(err);\n\n    if (addresses.length === 0) {\n      return callback(new MongoParseError('No addresses found at host'));\n    }\n\n    for (let i = 0; i < addresses.length; i++) {\n      if (!matchesParentDomain(addresses[i].name, result.hostname, result.domainLength)) {\n        return callback(\n          new MongoParseError('Server record does not share hostname with parent URI')\n        );\n      }\n    }\n\n    let base = result.auth ? `mongodb://${result.auth}@` : `mongodb://`;\n    let connectionStrings = addresses.map(\n      (address, i) =>\n        i === 0 ? `${base}${address.name}:${address.port}` : `${address.name}:${address.port}`\n    );\n\n    let connectionString = connectionStrings.join(',') + '/';\n    let connectionStringOptions = [];\n\n    // Default to SSL true\n    if (!options.ssl && (!result.search || result.query['ssl'] == null)) {\n      connectionStringOptions.push('ssl=true');\n    }\n\n    // Keep original uri options\n    if (result.search) {\n      connectionStringOptions.push(result.search.replace('?', ''));\n    }\n\n    dns.resolveTxt(result.host, (err, record) => {\n      if (err) {\n        if (err.code !== 'ENODATA') {\n          return callback(err);\n        }\n        record = null;\n      }\n\n      if (record) {\n        if (record.length > 1) {\n          return callback(new MongoParseError('Multiple text records not allowed'));\n        }\n\n        record = record[0];\n        record = record.length > 1 ? record.join('') : record[0];\n        if (!record.includes('authSource') && !record.includes('replicaSet')) {\n          return callback(\n            new MongoParseError('Text record must only set `authSource` or `replicaSet`')\n          );\n        }\n\n        connectionStringOptions.push(record);\n      }\n\n      // Add any options to the connection string\n      if (connectionStringOptions.length) {\n        connectionString += `?${connectionStringOptions.join('&')}`;\n      }\n\n      parseConnectionString(connectionString, callback);\n    });\n  });\n}\n\n/**\n * Parses a query string item according to the connection string spec\n *\n * @param {Array|String} value The value to parse\n * @return {Array|Object|String} The parsed value\n */\nfunction parseQueryStringItemValue(value) {\n  if (Array.isArray(value)) {\n    // deduplicate and simplify arrays\n    value = value.filter((value, idx) => value.indexOf(value) === idx);\n    if (value.length === 1) value = value[0];\n  } else if (value.indexOf(':') > 0) {\n    value = value.split(',').reduce((result, pair) => {\n      const parts = pair.split(':');\n      result[parts[0]] = parseQueryStringItemValue(parts[1]);\n      return result;\n    }, {});\n  } else if (value.toLowerCase() === 'true' || value.toLowerCase() === 'false') {\n    value = value.toLowerCase() === 'true';\n  } else if (!Number.isNaN(value)) {\n    const numericValue = parseFloat(value);\n    if (!Number.isNaN(numericValue)) {\n      value = parseFloat(value);\n    }\n  }\n\n  return value;\n}\n\n/**\n * Parses a query string according the connection string spec.\n *\n * @param {String} query The query string to parse\n * @return {Object|Error} The parsed query string as an object, or an error if one was encountered\n */\nfunction parseQueryString(query) {\n  const result = {};\n  let parsedQueryString = qs.parse(query);\n\n  for (const key in parsedQueryString) {\n    const value = parsedQueryString[key];\n    if (value === '' || value == null) {\n      return new MongoParseError('Incomplete key value pair for option');\n    }\n\n    result[key.toLowerCase()] = parseQueryStringItemValue(value);\n  }\n\n  // special cases for known deprecated options\n  if (result.wtimeout && result.wtimeoutms) {\n    delete result.wtimeout;\n    console.warn('Unsupported option `wtimeout` specified');\n  }\n\n  return Object.keys(result).length ? result : null;\n}\n\nconst PROTOCOL_MONGODB = 'mongodb';\nconst PROTOCOL_MONGODB_SRV = 'mongodb+srv';\nconst SUPPORTED_PROTOCOLS = [PROTOCOL_MONGODB, PROTOCOL_MONGODB_SRV];\n\n/**\n * Parses a MongoDB connection string\n *\n * @param {*} uri the MongoDB connection string to parse\n * @param {object} [options] Optional settings.\n * @param {parseCallback} callback\n */\nfunction parseConnectionString(uri, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // Check for bad uris before we parse\n  try {\n    URL.parse(uri);\n  } catch (e) {\n    return callback(new MongoParseError('URI malformed, cannot be parsed'));\n  }\n\n  const cap = uri.match(HOSTS_RX);\n  if (!cap) {\n    return callback(new MongoParseError('Invalid connection string'));\n  }\n\n  const protocol = cap[1];\n  if (SUPPORTED_PROTOCOLS.indexOf(protocol) === -1) {\n    return callback(new MongoParseError('Invalid protocol provided'));\n  }\n\n  if (protocol === PROTOCOL_MONGODB_SRV) {\n    return parseSrvConnectionString(uri, options, callback);\n  }\n\n  const dbAndQuery = cap[4].split('?');\n  const db = dbAndQuery.length > 0 ? dbAndQuery[0] : null;\n  const query = dbAndQuery.length > 1 ? dbAndQuery[1] : null;\n  let parsedOptions = parseQueryString(query);\n  if (parsedOptions instanceof MongoParseError) {\n    return callback(parsedOptions);\n  }\n\n  parsedOptions = Object.assign({}, parsedOptions, options);\n  const auth = { username: null, password: null, db: db && db !== '' ? qs.unescape(db) : null };\n  if (cap[4].split('?')[0].indexOf('@') !== -1) {\n    return callback(new MongoParseError('Unescaped slash in userinfo section'));\n  }\n\n  const authorityParts = cap[3].split('@');\n  if (authorityParts.length > 2) {\n    return callback(new MongoParseError('Unescaped at-sign in authority section'));\n  }\n\n  if (authorityParts.length > 1) {\n    const authParts = authorityParts.shift().split(':');\n    if (authParts.length > 2) {\n      return callback(new MongoParseError('Unescaped colon in authority section'));\n    }\n\n    auth.username = qs.unescape(authParts[0]);\n    auth.password = authParts[1] ? qs.unescape(authParts[1]) : null;\n  }\n\n  let hostParsingError = null;\n  const hosts = authorityParts\n    .shift()\n    .split(',')\n    .map(host => {\n      let parsedHost = URL.parse(`mongodb://${host}`);\n      if (parsedHost.path === '/:') {\n        hostParsingError = new MongoParseError('Double colon in host identifier');\n        return null;\n      }\n\n      // heuristically determine if we're working with a domain socket\n      if (host.match(/\\.sock/)) {\n        parsedHost.hostname = qs.unescape(host);\n        parsedHost.port = null;\n      }\n\n      if (Number.isNaN(parsedHost.port)) {\n        hostParsingError = new MongoParseError('Invalid port (non-numeric string)');\n        return;\n      }\n\n      const result = {\n        host: parsedHost.hostname,\n        port: parsedHost.port ? parseInt(parsedHost.port) : null\n      };\n\n      if (result.port === 0) {\n        hostParsingError = new MongoParseError('Invalid port (zero) with hostname');\n        return;\n      }\n\n      if (result.port > 65535) {\n        hostParsingError = new MongoParseError('Invalid port (larger than 65535) with hostname');\n        return;\n      }\n\n      if (result.port < 0) {\n        hostParsingError = new MongoParseError('Invalid port (negative number)');\n        return;\n      }\n\n      return result;\n    })\n    .filter(host => !!host);\n\n  if (hostParsingError) {\n    return callback(hostParsingError);\n  }\n\n  if (hosts.length === 0 || hosts[0].host === '' || hosts[0].host === null) {\n    return callback(new MongoParseError('No hostname or hostnames provided in connection string'));\n  }\n\n  callback(null, {\n    hosts: hosts,\n    auth: auth.db || auth.username ? auth : null,\n    options: Object.keys(parsedOptions).length ? parsedOptions : null\n  });\n}\n\nmodule.exports = parseConnectionString;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/uri_parser.js\n// module id = 168\n// module chunks = 0","'use strict';\n\nconst crypto = require('crypto');\n\nconst uuidV4 = () => {\n  const result = crypto.randomBytes(16);\n  result[6] = (result[6] & 0x0f) | 0x40;\n  result[8] = (result[8] & 0x3f) | 0x80;\n  return result;\n};\n\nmodule.exports = {\n  uuidV4: uuidV4\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/utils.js\n// module id = 169\n// module chunks = 0","'use strict';\n\nvar copy = require('../connection/utils').copy,\n  retrieveBSON = require('../connection/utils').retrieveBSON,\n  KillCursor = require('../connection/commands').KillCursor,\n  GetMore = require('../connection/commands').GetMore,\n  Query = require('../connection/commands').Query,\n  f = require('util').format,\n  MongoError = require('../error').MongoError,\n  getReadPreference = require('./shared').getReadPreference;\n\nvar BSON = retrieveBSON(),\n  Long = BSON.Long;\n\nvar WireProtocol = function() {};\n\n//\n// Execute a write operation\nvar executeWrite = function(pool, bson, type, opsField, ns, ops, options, callback) {\n  if (ops.length === 0) throw new MongoError('insert must contain at least one document');\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n    options = options || {};\n  }\n\n  // Split the ns up to get db and collection\n  var p = ns.split('.');\n  var d = p.shift();\n  // Options\n  var ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n  var writeConcern = options.writeConcern;\n\n  // return skeleton\n  var writeCommand = {};\n  writeCommand[type] = p.join('.');\n  writeCommand[opsField] = ops;\n  writeCommand.ordered = ordered;\n\n  // Did we specify a write concern\n  if (writeConcern && Object.keys(writeConcern).length > 0) {\n    writeCommand.writeConcern = writeConcern;\n  }\n\n  // Do we have bypassDocumentValidation set, then enable it on the write command\n  if (typeof options.bypassDocumentValidation === 'boolean') {\n    writeCommand.bypassDocumentValidation = options.bypassDocumentValidation;\n  }\n\n  // Options object\n  var opts = { command: true };\n  if (typeof options.session !== 'undefined') opts.session = options.session;\n  var queryOptions = { checkKeys: false, numberToSkip: 0, numberToReturn: 1 };\n  if (type === 'insert') queryOptions.checkKeys = false;\n  if (typeof options.checkKeys === 'boolean') queryOptions.checkKeys = options.checkKeys;\n  // Ensure we support serialization of functions\n  if (options.serializeFunctions) queryOptions.serializeFunctions = options.serializeFunctions;\n  // Do not serialize the undefined fields\n  if (options.ignoreUndefined) queryOptions.ignoreUndefined = options.ignoreUndefined;\n\n  try {\n    // Create write command\n    var cmd = new Query(bson, f('%s.$cmd', d), writeCommand, queryOptions);\n    // Execute command\n    pool.write(cmd, opts, callback);\n  } catch (err) {\n    callback(err);\n  }\n};\n\n//\n// Needs to support legacy mass insert as well as ordered/unordered legacy\n// emulation\n//\nWireProtocol.prototype.insert = function(pool, ismaster, ns, bson, ops, options, callback) {\n  executeWrite(pool, bson, 'insert', 'documents', ns, ops, options, callback);\n};\n\nWireProtocol.prototype.update = function(pool, ismaster, ns, bson, ops, options, callback) {\n  executeWrite(pool, bson, 'update', 'updates', ns, ops, options, callback);\n};\n\nWireProtocol.prototype.remove = function(pool, ismaster, ns, bson, ops, options, callback) {\n  executeWrite(pool, bson, 'delete', 'deletes', ns, ops, options, callback);\n};\n\nWireProtocol.prototype.killCursor = function(bson, ns, cursorState, pool, callback) {\n  var cursorId = cursorState.cursorId;\n  // Create a kill cursor command\n  var killCursor = new KillCursor(bson, [cursorId]);\n\n  // Build killCursor options\n  const options = {\n    immediateRelease: true,\n    noResponse: true\n  };\n\n  if (typeof cursorState.session === 'object') {\n    options.session = cursorState.session;\n  }\n\n  // Execute the kill cursor command\n  if (pool && pool.isConnected()) {\n    try {\n      pool.write(killCursor, options, callback);\n    } catch (err) {\n      callback(err, null);\n    }\n  }\n\n  // Callback\n  if (typeof callback === 'function') callback(null, null);\n};\n\nWireProtocol.prototype.getMore = function(\n  bson,\n  ns,\n  cursorState,\n  batchSize,\n  raw,\n  connection,\n  options,\n  callback\n) {\n  // Create getMore command\n  var getMore = new GetMore(bson, ns, cursorState.cursorId, { numberToReturn: batchSize });\n\n  // Query callback\n  var queryCallback = function(err, result) {\n    if (err) return callback(err);\n    // Get the raw message\n    var r = result.message;\n\n    // If we have a timed out query or a cursor that was killed\n    if ((r.responseFlags & (1 << 0)) !== 0) {\n      return callback(new MongoError('cursor does not exist, was killed or timed out'), null);\n    }\n\n    // Ensure we have a Long valie cursor id\n    var cursorId = typeof r.cursorId === 'number' ? Long.fromNumber(r.cursorId) : r.cursorId;\n\n    // Set all the values\n    cursorState.documents = r.documents;\n    cursorState.cursorId = cursorId;\n\n    // Return\n    callback(null, null, r.connection);\n  };\n\n  // Contains any query options\n  var queryOptions = {};\n\n  // If we have a raw query decorate the function\n  if (raw) {\n    queryOptions.raw = raw;\n  }\n\n  // Check if we need to promote longs\n  if (typeof cursorState.promoteLongs === 'boolean') {\n    queryOptions.promoteLongs = cursorState.promoteLongs;\n  }\n\n  if (typeof cursorState.promoteValues === 'boolean') {\n    queryOptions.promoteValues = cursorState.promoteValues;\n  }\n\n  if (typeof cursorState.promoteBuffers === 'boolean') {\n    queryOptions.promoteBuffers = cursorState.promoteBuffers;\n  }\n\n  if (typeof cursorState.session === 'object') {\n    queryOptions.session = cursorState.session;\n  }\n\n  // Write out the getMore command\n  connection.write(getMore, queryOptions, queryCallback);\n};\n\nWireProtocol.prototype.command = function(bson, ns, cmd, cursorState, topology, options) {\n  // Establish type of command\n  if (cmd.find) {\n    return setupClassicFind(bson, ns, cmd, cursorState, topology, options);\n  } else if (cursorState.cursorId != null) {\n    return;\n  } else if (cmd) {\n    return setupCommand(bson, ns, cmd, cursorState, topology, options);\n  } else {\n    throw new MongoError(f('command %s does not return a cursor', JSON.stringify(cmd)));\n  }\n};\n\n//\n// Execute a find command\nvar setupClassicFind = function(bson, ns, cmd, cursorState, topology, options) {\n  // Ensure we have at least some options\n  options = options || {};\n  // Get the readPreference\n  var readPreference = getReadPreference(cmd, options);\n  // Set the optional batchSize\n  cursorState.batchSize = cmd.batchSize || cursorState.batchSize;\n  var numberToReturn = 0;\n\n  // Unpack the limit and batchSize values\n  if (cursorState.limit === 0) {\n    numberToReturn = cursorState.batchSize;\n  } else if (\n    cursorState.limit < 0 ||\n    cursorState.limit < cursorState.batchSize ||\n    (cursorState.limit > 0 && cursorState.batchSize === 0)\n  ) {\n    numberToReturn = cursorState.limit;\n  } else {\n    numberToReturn = cursorState.batchSize;\n  }\n\n  var numberToSkip = cursorState.skip || 0;\n  // Build actual find command\n  var findCmd = {};\n  // Using special modifier\n  var usesSpecialModifier = false;\n\n  // We have a Mongos topology, check if we need to add a readPreference\n  if (topology.type === 'mongos' && readPreference) {\n    findCmd['$readPreference'] = readPreference.toJSON();\n    usesSpecialModifier = true;\n  }\n\n  // Add special modifiers to the query\n  if (cmd.sort) (findCmd['orderby'] = cmd.sort), (usesSpecialModifier = true);\n  if (cmd.hint) (findCmd['$hint'] = cmd.hint), (usesSpecialModifier = true);\n  if (cmd.snapshot) (findCmd['$snapshot'] = cmd.snapshot), (usesSpecialModifier = true);\n  if (cmd.returnKey) (findCmd['$returnKey'] = cmd.returnKey), (usesSpecialModifier = true);\n  if (cmd.maxScan) (findCmd['$maxScan'] = cmd.maxScan), (usesSpecialModifier = true);\n  if (cmd.min) (findCmd['$min'] = cmd.min), (usesSpecialModifier = true);\n  if (cmd.max) (findCmd['$max'] = cmd.max), (usesSpecialModifier = true);\n  if (cmd.showDiskLoc) (findCmd['$showDiskLoc'] = cmd.showDiskLoc), (usesSpecialModifier = true);\n  if (cmd.comment) (findCmd['$comment'] = cmd.comment), (usesSpecialModifier = true);\n  if (cmd.maxTimeMS) (findCmd['$maxTimeMS'] = cmd.maxTimeMS), (usesSpecialModifier = true);\n\n  if (cmd.explain) {\n    // nToReturn must be 0 (match all) or negative (match N and close cursor)\n    // nToReturn > 0 will give explain results equivalent to limit(0)\n    numberToReturn = -Math.abs(cmd.limit || 0);\n    usesSpecialModifier = true;\n    findCmd['$explain'] = true;\n  }\n\n  // If we have a special modifier\n  if (usesSpecialModifier) {\n    findCmd['$query'] = cmd.query;\n  } else {\n    findCmd = cmd.query;\n  }\n\n  // Throw on majority readConcern passed in\n  if (cmd.readConcern && cmd.readConcern.level !== 'local') {\n    throw new MongoError(\n      f('server find command does not support a readConcern level of %s', cmd.readConcern.level)\n    );\n  }\n\n  // Remove readConcern, ensure no failing commands\n  if (cmd.readConcern) {\n    cmd = copy(cmd);\n    delete cmd['readConcern'];\n  }\n\n  // Serialize functions\n  var serializeFunctions =\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  var ignoreUndefined =\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n\n  // Build Query object\n  var query = new Query(bson, ns, findCmd, {\n    numberToSkip: numberToSkip,\n    numberToReturn: numberToReturn,\n    checkKeys: false,\n    returnFieldSelector: cmd.fields,\n    serializeFunctions: serializeFunctions,\n    ignoreUndefined: ignoreUndefined\n  });\n\n  // Set query flags\n  query.slaveOk = readPreference.slaveOk();\n\n  // Set up the option bits for wire protocol\n  if (typeof cmd.tailable === 'boolean') {\n    query.tailable = cmd.tailable;\n  }\n\n  if (typeof cmd.oplogReplay === 'boolean') {\n    query.oplogReplay = cmd.oplogReplay;\n  }\n\n  if (typeof cmd.noCursorTimeout === 'boolean') {\n    query.noCursorTimeout = cmd.noCursorTimeout;\n  }\n\n  if (typeof cmd.awaitData === 'boolean') {\n    query.awaitData = cmd.awaitData;\n  }\n\n  if (typeof cmd.partial === 'boolean') {\n    query.partial = cmd.partial;\n  }\n\n  // Return the query\n  return query;\n};\n\n//\n// Set up a command cursor\nvar setupCommand = function(bson, ns, cmd, cursorState, topology, options) {\n  // Set empty options object\n  options = options || {};\n  // Get the readPreference\n  var readPreference = getReadPreference(cmd, options);\n\n  // Final query\n  var finalCmd = {};\n  for (var name in cmd) {\n    finalCmd[name] = cmd[name];\n  }\n\n  // Build command namespace\n  var parts = ns.split(/\\./);\n\n  // Serialize functions\n  var serializeFunctions =\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n\n  var ignoreUndefined =\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n\n  // Throw on majority readConcern passed in\n  if (cmd.readConcern && cmd.readConcern.level !== 'local') {\n    throw new MongoError(\n      f(\n        'server %s command does not support a readConcern level of %s',\n        JSON.stringify(cmd),\n        cmd.readConcern.level\n      )\n    );\n  }\n\n  // Remove readConcern, ensure no failing commands\n  if (cmd.readConcern) delete cmd['readConcern'];\n\n  // We have a Mongos topology, check if we need to add a readPreference\n  if (topology.type === 'mongos' && readPreference && readPreference.preference !== 'primary') {\n    finalCmd = {\n      $query: finalCmd,\n      $readPreference: readPreference.toJSON()\n    };\n  }\n\n  // Build Query object\n  var query = new Query(bson, f('%s.$cmd', parts.shift()), finalCmd, {\n    numberToSkip: 0,\n    numberToReturn: -1,\n    checkKeys: false,\n    serializeFunctions: serializeFunctions,\n    ignoreUndefined: ignoreUndefined\n  });\n\n  // Set query flags\n  query.slaveOk = readPreference.slaveOk();\n\n  // Return the query\n  return query;\n};\n\nmodule.exports = WireProtocol;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/wireprotocol/2_6_support.js\n// module id = 170\n// module chunks = 0","'use strict';\n\nvar Query = require('../connection/commands').Query,\n  retrieveBSON = require('../connection/utils').retrieveBSON,\n  f = require('util').format,\n  MongoError = require('../error').MongoError,\n  MongoNetworkError = require('../error').MongoNetworkError,\n  getReadPreference = require('./shared').getReadPreference;\n\nvar BSON = retrieveBSON(),\n  Long = BSON.Long;\n\nvar WireProtocol = function(legacyWireProtocol) {\n  this.legacyWireProtocol = legacyWireProtocol;\n};\n\n//\n// Execute a write operation\nvar executeWrite = function(pool, bson, type, opsField, ns, ops, options, callback) {\n  if (ops.length === 0) throw new MongoError('insert must contain at least one document');\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n    options = options || {};\n  }\n\n  // Split the ns up to get db and collection\n  var p = ns.split('.');\n  var d = p.shift();\n  // Options\n  var ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n  var writeConcern = options.writeConcern;\n\n  // return skeleton\n  var writeCommand = {};\n  writeCommand[type] = p.join('.');\n  writeCommand[opsField] = ops;\n  writeCommand.ordered = ordered;\n\n  // Did we specify a write concern\n  if (writeConcern && Object.keys(writeConcern).length > 0) {\n    writeCommand.writeConcern = writeConcern;\n  }\n\n  // If we have collation passed in\n  if (options.collation) {\n    for (var i = 0; i < writeCommand[opsField].length; i++) {\n      if (!writeCommand[opsField][i].collation) {\n        writeCommand[opsField][i].collation = options.collation;\n      }\n    }\n  }\n\n  // Do we have bypassDocumentValidation set, then enable it on the write command\n  if (typeof options.bypassDocumentValidation === 'boolean') {\n    writeCommand.bypassDocumentValidation = options.bypassDocumentValidation;\n  }\n\n  // optionally add a `txnNumber` if retryable writes are being attempted\n  if (typeof options.txnNumber !== 'undefined') {\n    writeCommand.txnNumber = options.txnNumber;\n  }\n\n  // Options object\n  var opts = { command: true };\n  if (typeof options.session !== 'undefined') opts.session = options.session;\n  var queryOptions = { checkKeys: false, numberToSkip: 0, numberToReturn: 1 };\n  if (type === 'insert') queryOptions.checkKeys = false;\n  if (typeof options.checkKeys === 'boolean') queryOptions.checkKeys = options.checkKeys;\n\n  // Ensure we support serialization of functions\n  if (options.serializeFunctions) queryOptions.serializeFunctions = options.serializeFunctions;\n  // Do not serialize the undefined fields\n  if (options.ignoreUndefined) queryOptions.ignoreUndefined = options.ignoreUndefined;\n\n  try {\n    // Create write command\n    var cmd = new Query(bson, f('%s.$cmd', d), writeCommand, queryOptions);\n    // Execute command\n    pool.write(cmd, opts, callback);\n  } catch (err) {\n    callback(err);\n  }\n};\n\n//\n// Needs to support legacy mass insert as well as ordered/unordered legacy\n// emulation\n//\nWireProtocol.prototype.insert = function(pool, ismaster, ns, bson, ops, options, callback) {\n  executeWrite(pool, bson, 'insert', 'documents', ns, ops, options, callback);\n};\n\nWireProtocol.prototype.update = function(pool, ismaster, ns, bson, ops, options, callback) {\n  executeWrite(pool, bson, 'update', 'updates', ns, ops, options, callback);\n};\n\nWireProtocol.prototype.remove = function(pool, ismaster, ns, bson, ops, options, callback) {\n  executeWrite(pool, bson, 'delete', 'deletes', ns, ops, options, callback);\n};\n\nWireProtocol.prototype.killCursor = function(bson, ns, cursorState, pool, callback) {\n  // Build command namespace\n  var parts = ns.split(/\\./);\n  // Command namespace\n  var commandns = f('%s.$cmd', parts.shift());\n  const cursorId = cursorState.cursorId;\n  // Create killCursor command\n  var killcursorCmd = {\n    killCursors: parts.join('.'),\n    cursors: [cursorId]\n  };\n\n  // Build Query object\n  var query = new Query(bson, commandns, killcursorCmd, {\n    numberToSkip: 0,\n    numberToReturn: -1,\n    checkKeys: false,\n    returnFieldSelector: null\n  });\n\n  // Set query flags\n  query.slaveOk = true;\n\n  // Kill cursor callback\n  var killCursorCallback = function(err, result) {\n    if (err) {\n      if (typeof callback !== 'function') return;\n      return callback(err);\n    }\n\n    // Result\n    var r = result.message;\n    // If we have a timed out query or a cursor that was killed\n    if ((r.responseFlags & (1 << 0)) !== 0) {\n      if (typeof callback !== 'function') return;\n      return callback(new MongoNetworkError('cursor killed or timed out'), null);\n    }\n\n    if (!Array.isArray(r.documents) || r.documents.length === 0) {\n      if (typeof callback !== 'function') return;\n      return callback(\n        new MongoError(f('invalid killCursors result returned for cursor id %s', cursorId))\n      );\n    }\n\n    // Return the result\n    if (typeof callback === 'function') {\n      callback(null, r.documents[0]);\n    }\n  };\n\n  const options = { command: true };\n  if (typeof cursorState.session === 'object') {\n    options.session = cursorState.session;\n  }\n\n  // Execute the kill cursor command\n  if (pool && pool.isConnected()) {\n    try {\n      pool.write(query, options, killCursorCallback);\n    } catch (err) {\n      killCursorCallback(err, null);\n    }\n\n    return;\n  }\n\n  // Callback\n  if (typeof callback === 'function') callback(null, null);\n};\n\nWireProtocol.prototype.getMore = function(\n  bson,\n  ns,\n  cursorState,\n  batchSize,\n  raw,\n  connection,\n  options,\n  callback\n) {\n  options = options || {};\n  // Build command namespace\n  var parts = ns.split(/\\./);\n  // Command namespace\n  var commandns = f('%s.$cmd', parts.shift());\n\n  // Create getMore command\n  var getMoreCmd = {\n    getMore: cursorState.cursorId,\n    collection: parts.join('.'),\n    batchSize: Math.abs(batchSize)\n  };\n\n  if (cursorState.cmd.tailable && typeof cursorState.cmd.maxAwaitTimeMS === 'number') {\n    getMoreCmd.maxTimeMS = cursorState.cmd.maxAwaitTimeMS;\n  }\n\n  // Build Query object\n  var query = new Query(bson, commandns, getMoreCmd, {\n    numberToSkip: 0,\n    numberToReturn: -1,\n    checkKeys: false,\n    returnFieldSelector: null\n  });\n\n  // Set query flags\n  query.slaveOk = true;\n\n  // Query callback\n  var queryCallback = function(err, result) {\n    if (err) return callback(err);\n    // Get the raw message\n    var r = result.message;\n\n    // If we have a timed out query or a cursor that was killed\n    if ((r.responseFlags & (1 << 0)) !== 0) {\n      return callback(new MongoNetworkError('cursor killed or timed out'), null);\n    }\n\n    // Raw, return all the extracted documents\n    if (raw) {\n      cursorState.documents = r.documents;\n      cursorState.cursorId = r.cursorId;\n      return callback(null, r.documents);\n    }\n\n    // We have an error detected\n    if (r.documents[0].ok === 0) {\n      return callback(new MongoError(r.documents[0]));\n    }\n\n    // Ensure we have a Long valid cursor id\n    var cursorId =\n      typeof r.documents[0].cursor.id === 'number'\n        ? Long.fromNumber(r.documents[0].cursor.id)\n        : r.documents[0].cursor.id;\n\n    // Set all the values\n    cursorState.documents = r.documents[0].cursor.nextBatch;\n    cursorState.cursorId = cursorId;\n\n    // Return the result\n    callback(null, r.documents[0], r.connection);\n  };\n\n  // Query options\n  var queryOptions = { command: true };\n\n  // If we have a raw query decorate the function\n  if (raw) {\n    queryOptions.raw = raw;\n  }\n\n  // Add the result field needed\n  queryOptions.documentsReturnedIn = 'nextBatch';\n\n  // Check if we need to promote longs\n  if (typeof cursorState.promoteLongs === 'boolean') {\n    queryOptions.promoteLongs = cursorState.promoteLongs;\n  }\n\n  if (typeof cursorState.promoteValues === 'boolean') {\n    queryOptions.promoteValues = cursorState.promoteValues;\n  }\n\n  if (typeof cursorState.promoteBuffers === 'boolean') {\n    queryOptions.promoteBuffers = cursorState.promoteBuffers;\n  }\n\n  if (typeof cursorState.session === 'object') {\n    queryOptions.session = cursorState.session;\n  }\n\n  // Write out the getMore command\n  connection.write(query, queryOptions, queryCallback);\n};\n\nWireProtocol.prototype.command = function(bson, ns, cmd, cursorState, topology, options) {\n  options = options || {};\n  // Check if this is a wire protocol command or not\n  var wireProtocolCommand =\n    typeof options.wireProtocolCommand === 'boolean' ? options.wireProtocolCommand : true;\n\n  // Establish type of command\n  if (cmd.find && wireProtocolCommand) {\n    // Create the find command\n    var query = executeFindCommand(bson, ns, cmd, cursorState, topology, options);\n    // Mark the cmd as virtual\n    cmd.virtual = false;\n    // Signal the documents are in the firstBatch value\n    query.documentsReturnedIn = 'firstBatch';\n    // Return the query\n    return query;\n  } else if (cursorState.cursorId != null) {\n    return;\n  } else if (cmd) {\n    return setupCommand(bson, ns, cmd, cursorState, topology, options);\n  } else {\n    throw new MongoError(f('command %s does not return a cursor', JSON.stringify(cmd)));\n  }\n};\n\n// // Command\n// {\n//     find: ns\n//   , query: <object>\n//   , limit: <n>\n//   , fields: <object>\n//   , skip: <n>\n//   , hint: <string>\n//   , explain: <boolean>\n//   , snapshot: <boolean>\n//   , batchSize: <n>\n//   , returnKey: <boolean>\n//   , maxScan: <n>\n//   , min: <n>\n//   , max: <n>\n//   , showDiskLoc: <boolean>\n//   , comment: <string>\n//   , maxTimeMS: <n>\n//   , raw: <boolean>\n//   , readPreference: <ReadPreference>\n//   , tailable: <boolean>\n//   , oplogReplay: <boolean>\n//   , noCursorTimeout: <boolean>\n//   , awaitdata: <boolean>\n//   , exhaust: <boolean>\n//   , partial: <boolean>\n// }\n\n// FIND/GETMORE SPEC\n// {\n//     “find”: <string>,\n//     “filter”: { ... },\n//     “sort”: { ... },\n//     “projection”: { ... },\n//     “hint”: { ... },\n//     “skip”: <int>,\n//     “limit”: <int>,\n//     “batchSize”: <int>,\n//     “singleBatch”: <bool>,\n//     “comment”: <string>,\n//     “maxScan”: <int>,\n//     “maxTimeMS”: <int>,\n//     “max”: { ... },\n//     “min”: { ... },\n//     “returnKey”: <bool>,\n//     “showRecordId”: <bool>,\n//     “snapshot”: <bool>,\n//     “tailable”: <bool>,\n//     “oplogReplay”: <bool>,\n//     “noCursorTimeout”: <bool>,\n//     “awaitData”: <bool>,\n//     “partial”: <bool>,\n//     “$readPreference”: { ... }\n// }\n\n//\n// Execute a find command\nvar executeFindCommand = function(bson, ns, cmd, cursorState, topology, options) {\n  // Ensure we have at least some options\n  options = options || {};\n  // Get the readPreference\n  var readPreference = getReadPreference(cmd, options);\n  // Set the optional batchSize\n  cursorState.batchSize = cmd.batchSize || cursorState.batchSize;\n\n  // Build command namespace\n  var parts = ns.split(/\\./);\n  // Command namespace\n  var commandns = f('%s.$cmd', parts.shift());\n\n  // Build actual find command\n  var findCmd = {\n    find: parts.join('.')\n  };\n\n  // I we provided a filter\n  if (cmd.query) {\n    // Check if the user is passing in the $query parameter\n    if (cmd.query['$query']) {\n      findCmd.filter = cmd.query['$query'];\n    } else {\n      findCmd.filter = cmd.query;\n    }\n  }\n\n  // Sort value\n  var sortValue = cmd.sort;\n\n  // Handle issue of sort being an Array\n  if (Array.isArray(sortValue)) {\n    var sortObject = {};\n\n    if (sortValue.length > 0 && !Array.isArray(sortValue[0])) {\n      var sortDirection = sortValue[1];\n      // Translate the sort order text\n      if (sortDirection === 'asc') {\n        sortDirection = 1;\n      } else if (sortDirection === 'desc') {\n        sortDirection = -1;\n      }\n\n      // Set the sort order\n      sortObject[sortValue[0]] = sortDirection;\n    } else {\n      for (var i = 0; i < sortValue.length; i++) {\n        sortDirection = sortValue[i][1];\n        // Translate the sort order text\n        if (sortDirection === 'asc') {\n          sortDirection = 1;\n        } else if (sortDirection === 'desc') {\n          sortDirection = -1;\n        }\n\n        // Set the sort order\n        sortObject[sortValue[i][0]] = sortDirection;\n      }\n    }\n\n    sortValue = sortObject;\n  }\n\n  // Add sort to command\n  if (cmd.sort) findCmd.sort = sortValue;\n  // Add a projection to the command\n  if (cmd.fields) findCmd.projection = cmd.fields;\n  // Add a hint to the command\n  if (cmd.hint) findCmd.hint = cmd.hint;\n  // Add a skip\n  if (cmd.skip) findCmd.skip = cmd.skip;\n  // Add a limit\n  if (cmd.limit) findCmd.limit = cmd.limit;\n\n  // Check if we wish to have a singleBatch\n  if (cmd.limit < 0) {\n    findCmd.limit = Math.abs(cmd.limit);\n    findCmd.singleBatch = true;\n  }\n\n  // Add a batchSize\n  if (typeof cmd.batchSize === 'number') {\n    if (cmd.batchSize < 0) {\n      if (cmd.limit !== 0 && Math.abs(cmd.batchSize) < Math.abs(cmd.limit)) {\n        findCmd.limit = Math.abs(cmd.batchSize);\n      }\n\n      findCmd.singleBatch = true;\n    }\n\n    findCmd.batchSize = Math.abs(cmd.batchSize);\n  }\n\n  // If we have comment set\n  if (cmd.comment) findCmd.comment = cmd.comment;\n\n  // If we have maxScan\n  if (cmd.maxScan) findCmd.maxScan = cmd.maxScan;\n\n  // If we have maxTimeMS set\n  if (cmd.maxTimeMS) findCmd.maxTimeMS = cmd.maxTimeMS;\n\n  // If we have min\n  if (cmd.min) findCmd.min = cmd.min;\n\n  // If we have max\n  if (cmd.max) findCmd.max = cmd.max;\n\n  // If we have returnKey set\n  if (cmd.returnKey) findCmd.returnKey = cmd.returnKey;\n\n  // If we have showDiskLoc set\n  if (cmd.showDiskLoc) findCmd.showRecordId = cmd.showDiskLoc;\n\n  // If we have snapshot set\n  if (cmd.snapshot) findCmd.snapshot = cmd.snapshot;\n\n  // If we have tailable set\n  if (cmd.tailable) findCmd.tailable = cmd.tailable;\n\n  // If we have oplogReplay set\n  if (cmd.oplogReplay) findCmd.oplogReplay = cmd.oplogReplay;\n\n  // If we have noCursorTimeout set\n  if (cmd.noCursorTimeout) findCmd.noCursorTimeout = cmd.noCursorTimeout;\n\n  // If we have awaitData set\n  if (cmd.awaitData) findCmd.awaitData = cmd.awaitData;\n  if (cmd.awaitdata) findCmd.awaitData = cmd.awaitdata;\n\n  // If we have partial set\n  if (cmd.partial) findCmd.partial = cmd.partial;\n\n  // If we have collation passed in\n  if (cmd.collation) findCmd.collation = cmd.collation;\n\n  // If we have explain, we need to rewrite the find command\n  // to wrap it in the explain command\n  if (cmd.explain) {\n    findCmd = {\n      explain: findCmd\n    };\n  }\n\n  // Did we provide a readConcern\n  if (cmd.readConcern) findCmd.readConcern = cmd.readConcern;\n\n  // Set up the serialize and ignoreUndefined fields\n  var serializeFunctions =\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  var ignoreUndefined =\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n\n  // We have a Mongos topology, check if we need to add a readPreference\n  if (topology.type === 'mongos' && readPreference && readPreference.preference !== 'primary') {\n    findCmd = {\n      $query: findCmd,\n      $readPreference: readPreference.toJSON()\n    };\n  }\n\n  // Build Query object\n  var query = new Query(bson, commandns, findCmd, {\n    numberToSkip: 0,\n    numberToReturn: 1,\n    checkKeys: false,\n    returnFieldSelector: null,\n    serializeFunctions: serializeFunctions,\n    ignoreUndefined: ignoreUndefined\n  });\n\n  // Set query flags\n  query.slaveOk = readPreference.slaveOk();\n\n  // Return the query\n  return query;\n};\n\n//\n// Set up a command cursor\nvar setupCommand = function(bson, ns, cmd, cursorState, topology, options) {\n  // Set empty options object\n  options = options || {};\n  // Get the readPreference\n  var readPreference = getReadPreference(cmd, options);\n\n  // Final query\n  var finalCmd = {};\n  for (var name in cmd) {\n    finalCmd[name] = cmd[name];\n  }\n\n  // Build command namespace\n  var parts = ns.split(/\\./);\n\n  // Serialize functions\n  var serializeFunctions =\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n\n  // Set up the serialize and ignoreUndefined fields\n  var ignoreUndefined =\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n\n  // We have a Mongos topology, check if we need to add a readPreference\n  if (topology.type === 'mongos' && readPreference && readPreference.preference !== 'primary') {\n    finalCmd = {\n      $query: finalCmd,\n      $readPreference: readPreference.toJSON()\n    };\n  }\n\n  // Build Query object\n  var query = new Query(bson, f('%s.$cmd', parts.shift()), finalCmd, {\n    numberToSkip: 0,\n    numberToReturn: -1,\n    checkKeys: false,\n    serializeFunctions: serializeFunctions,\n    ignoreUndefined: ignoreUndefined\n  });\n\n  // Set query flags\n  query.slaveOk = readPreference.slaveOk();\n\n  // Return the query\n  return query;\n};\n\nmodule.exports = WireProtocol;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb-core@3.0.4@mongodb-core/lib/wireprotocol/3_2_support.js\n// module id = 171\n// module chunks = 0","'use strict';\n\nvar EventEmitter = require('events').EventEmitter,\n  inherits = require('util').inherits;\n\n// Get prototypes\nvar AggregationCursor = require('./aggregation_cursor'),\n  CommandCursor = require('./command_cursor'),\n  OrderedBulkOperation = require('./bulk/ordered').OrderedBulkOperation,\n  UnorderedBulkOperation = require('./bulk/unordered').UnorderedBulkOperation,\n  GridStore = require('./gridfs/grid_store'),\n  Cursor = require('./cursor'),\n  Collection = require('./collection'),\n  Db = require('./db');\n\nvar basicOperationIdGenerator = {\n  operationId: 1,\n\n  next: function() {\n    return this.operationId++;\n  }\n};\n\nvar basicTimestampGenerator = {\n  current: function() {\n    return new Date().getTime();\n  },\n\n  duration: function(start, end) {\n    return end - start;\n  }\n};\n\nvar senstiveCommands = [\n  'authenticate',\n  'saslStart',\n  'saslContinue',\n  'getnonce',\n  'createUser',\n  'updateUser',\n  'copydbgetnonce',\n  'copydbsaslstart',\n  'copydb'\n];\n\nvar Instrumentation = function(core, options, callback) {\n  options = options || {};\n\n  // Optional id generators\n  var operationIdGenerator = options.operationIdGenerator || basicOperationIdGenerator;\n  // Optional timestamp generator\n  var timestampGenerator = options.timestampGenerator || basicTimestampGenerator;\n  // Extend with event emitter functionality\n  EventEmitter.call(this);\n\n  // Contains all the instrumentation overloads\n  this.overloads = [];\n\n  // ---------------------------------------------------------\n  //\n  // Instrument prototype\n  //\n  // ---------------------------------------------------------\n\n  var instrumentPrototype = function(callback) {\n    var instrumentations = [];\n\n    // Classes to support\n    var classes = [\n      GridStore,\n      OrderedBulkOperation,\n      UnorderedBulkOperation,\n      CommandCursor,\n      AggregationCursor,\n      Cursor,\n      Collection,\n      Db\n    ];\n\n    // Add instrumentations to the available list\n    for (var i = 0; i < classes.length; i++) {\n      if (classes[i].define) {\n        instrumentations.push(classes[i].define.generate());\n      }\n    }\n\n    // Return the list of instrumentation points\n    callback(null, instrumentations);\n  };\n\n  // Did the user want to instrument the prototype\n  if (typeof callback === 'function') {\n    instrumentPrototype(callback);\n  }\n\n  // ---------------------------------------------------------\n  //\n  // Server\n  //\n  // ---------------------------------------------------------\n\n  // Reference\n  var self = this;\n  // Names of methods we need to wrap\n  var methods = ['command', 'insert', 'update', 'remove'];\n  // Prototype\n  var proto = core.Server.prototype;\n  // Core server method we are going to wrap\n  methods.forEach(function(x) {\n    var func = proto[x];\n\n    // Add to overloaded methods\n    self.overloads.push({ proto: proto, name: x, func: func });\n\n    // The actual prototype\n    proto[x] = function() {\n      var requestId = core.Query.nextRequestId();\n      // Get the aruments\n      var args = Array.prototype.slice.call(arguments, 0);\n      var ns = args[0];\n      var commandObj = args[1];\n      var options = args[2] || {};\n      var keys = Object.keys(commandObj);\n      var commandName = keys[0];\n      var db = ns.split('.')[0];\n\n      // Get the collection\n      var col = ns.split('.');\n      col.shift();\n      col = col.join('.');\n\n      // Do we have a legacy insert/update/remove command\n      if (x === 'insert') {\n        //} && !this.lastIsMaster().maxWireVersion) {\n        commandName = 'insert';\n\n        // Re-write the command\n        commandObj = {\n          insert: col,\n          documents: commandObj\n        };\n\n        if (options.writeConcern && Object.keys(options.writeConcern).length > 0) {\n          commandObj.writeConcern = options.writeConcern;\n        }\n\n        commandObj.ordered = options.ordered !== undefined ? options.ordered : true;\n      } else if (x === 'update') {\n        // && !this.lastIsMaster().maxWireVersion) {\n        commandName = 'update';\n\n        // Re-write the command\n        commandObj = {\n          update: col,\n          updates: commandObj\n        };\n\n        if (options.writeConcern && Object.keys(options.writeConcern).length > 0) {\n          commandObj.writeConcern = options.writeConcern;\n        }\n\n        commandObj.ordered = options.ordered !== undefined ? options.ordered : true;\n      } else if (x === 'remove') {\n        //&& !this.lastIsMaster().maxWireVersion) {\n        commandName = 'delete';\n\n        // Re-write the command\n        commandObj = {\n          delete: col,\n          deletes: commandObj\n        };\n\n        if (options.writeConcern && Object.keys(options.writeConcern).length > 0) {\n          commandObj.writeConcern = options.writeConcern;\n        }\n\n        commandObj.ordered = options.ordered !== undefined ? options.ordered : true;\n      }\n\n      // Get the callback\n      var callback = args.pop();\n      // Set current callback operation id from the current context or create\n      // a new one\n      var ourOpId = callback.operationId || operationIdGenerator.next();\n\n      // Get a connection reference for this server instance\n      var connection = this.s.pool.get();\n\n      // Emit the start event for the command\n      var command = {\n        // Returns the command.\n        command: commandObj,\n        // Returns the database name.\n        databaseName: db,\n        // Returns the command name.\n        commandName: commandName,\n        // Returns the driver generated request id.\n        requestId: requestId,\n        // Returns the driver generated operation id.\n        // This is used to link events together such as bulk write operations. OPTIONAL.\n        operationId: ourOpId,\n        // Returns the connection id for the command. For languages that do not have this,\n        // this MUST return the driver equivalent which MUST include the server address and port.\n        // The name of this field is flexible to match the object that is returned from the driver.\n        connectionId: connection\n      };\n\n      // Filter out any sensitive commands\n      if (senstiveCommands.indexOf(commandName.toLowerCase()) !== -1) {\n        command.commandObj = {};\n        command.commandObj[commandName] = true;\n      }\n\n      // Emit the started event\n      self.emit('started', command);\n\n      // Start time\n      var startTime = timestampGenerator.current();\n\n      // Push our handler callback\n      args.push(function(err, r) {\n        var endTime = timestampGenerator.current();\n        var command = {\n          duration: timestampGenerator.duration(startTime, endTime),\n          commandName: commandName,\n          requestId: requestId,\n          operationId: ourOpId,\n          connectionId: connection\n        };\n\n        // If we have an error\n        if (err || (r && r.result && r.result.ok === 0)) {\n          command.failure = err || r.result.writeErrors || r.result;\n\n          // Filter out any sensitive commands\n          if (senstiveCommands.indexOf(commandName.toLowerCase()) !== -1) {\n            command.failure = {};\n          }\n\n          self.emit('failed', command);\n        } else if (commandObj && commandObj.writeConcern && commandObj.writeConcern.w === 0) {\n          // If we have write concern 0\n          command.reply = { ok: 1 };\n          self.emit('succeeded', command);\n        } else {\n          command.reply = r && r.result ? r.result : r;\n\n          // Filter out any sensitive commands\n          if (senstiveCommands.indexOf(commandName.toLowerCase()) !== -1) {\n            command.reply = {};\n          }\n\n          self.emit('succeeded', command);\n        }\n\n        // Return to caller\n        callback(err, r);\n      });\n\n      // Apply the call\n      func.apply(this, args);\n    };\n  });\n\n  // ---------------------------------------------------------\n  //\n  // Bulk Operations\n  //\n  // ---------------------------------------------------------\n\n  // Inject ourselves into the Bulk methods\n  methods = ['execute'];\n  var prototypes = [\n    require('./bulk/ordered').Bulk.prototype,\n    require('./bulk/unordered').Bulk.prototype\n  ];\n\n  prototypes.forEach(function(proto) {\n    // Core server method we are going to wrap\n    methods.forEach(function(x) {\n      var func = proto[x];\n\n      // Add to overloaded methods\n      self.overloads.push({ proto: proto, name: x, func: func });\n\n      // The actual prototype\n      proto[x] = function() {\n        // Get the aruments\n        var args = Array.prototype.slice.call(arguments, 0);\n        // Set an operation Id on the bulk object\n        this.operationId = operationIdGenerator.next();\n\n        // Get the callback\n        var callback = args.pop();\n        // If we have a callback use this\n        if (typeof callback === 'function') {\n          args.push(function(err, r) {\n            // Return to caller\n            callback(err, r);\n          });\n\n          // Apply the call\n          func.apply(this, args);\n        } else {\n          return func.apply(this, args);\n        }\n      };\n    });\n  });\n\n  // ---------------------------------------------------------\n  //\n  // Cursor\n  //\n  // ---------------------------------------------------------\n\n  // Inject ourselves into the Cursor methods\n  methods = ['_find', '_getmore', '_killcursor'];\n  prototypes = [\n    require('./cursor').prototype,\n    require('./command_cursor').prototype,\n    require('./aggregation_cursor').prototype\n  ];\n\n  // Command name translation\n  var commandTranslation = {\n    _find: 'find',\n    _getmore: 'getMore',\n    _killcursor: 'killCursors',\n    _explain: 'explain'\n  };\n\n  prototypes.forEach(function(proto) {\n    // Core server method we are going to wrap\n    methods.forEach(function(x) {\n      var func = proto[x];\n\n      // Add to overloaded methods\n      self.overloads.push({ proto: proto, name: x, func: func });\n\n      // The actual prototype\n      proto[x] = function() {\n        var cursor = this;\n        var requestId = core.Query.nextRequestId();\n        var ourOpId = operationIdGenerator.next();\n        var parts = this.ns.split('.');\n        var db = parts[0];\n\n        // Get the collection\n        parts.shift();\n        var collection = parts.join('.');\n\n        // Set the command\n        var command = this.query;\n        var cmd = this.s.cmd;\n\n        // If we have a find method, set the operationId on the cursor\n        if (x === '_find') {\n          cursor.operationId = ourOpId;\n        }\n\n        // Do we have a find command rewrite it\n        if (x === '_getmore') {\n          command = {\n            getMore: this.cursorState.cursorId,\n            collection: collection,\n            batchSize: cmd.batchSize\n          };\n\n          if (cmd.maxTimeMS) command.maxTimeMS = cmd.maxTimeMS;\n        } else if (x === '_killcursor') {\n          command = {\n            killCursors: collection,\n            cursors: [this.cursorState.cursorId]\n          };\n        } else if (cmd.find) {\n          command = {\n            find: collection,\n            filter: cmd.query\n          };\n\n          if (cmd.sort) command.sort = cmd.sort;\n          if (cmd.fields) command.projection = cmd.fields;\n          if (cmd.limit && cmd.limit < 0) {\n            command.limit = Math.abs(cmd.limit);\n            command.singleBatch = true;\n          } else if (cmd.limit) {\n            command.limit = Math.abs(cmd.limit);\n          }\n\n          // Options\n          if (cmd.skip) command.skip = cmd.skip;\n          if (cmd.hint) command.hint = cmd.hint;\n          if (cmd.batchSize) command.batchSize = cmd.batchSize;\n          if (typeof cmd.returnKey === 'boolean') command.returnKey = cmd.returnKey;\n          if (cmd.comment) command.comment = cmd.comment;\n          if (cmd.min) command.min = cmd.min;\n          if (cmd.max) command.max = cmd.max;\n          if (cmd.maxScan) command.maxScan = cmd.maxScan;\n          if (cmd.maxTimeMS) command.maxTimeMS = cmd.maxTimeMS;\n\n          // Flags\n          if (typeof cmd.awaitData === 'boolean') command.awaitData = cmd.awaitData;\n          if (typeof cmd.snapshot === 'boolean') command.snapshot = cmd.snapshot;\n          if (typeof cmd.tailable === 'boolean') command.tailable = cmd.tailable;\n          if (typeof cmd.oplogReplay === 'boolean') command.oplogReplay = cmd.oplogReplay;\n          if (typeof cmd.noCursorTimeout === 'boolean')\n            command.noCursorTimeout = cmd.noCursorTimeout;\n          if (typeof cmd.partial === 'boolean') command.partial = cmd.partial;\n          if (typeof cmd.showDiskLoc === 'boolean') command.showRecordId = cmd.showDiskLoc;\n\n          // Read Concern\n          if (cmd.readConcern) command.readConcern = cmd.readConcern;\n\n          // Override method\n          if (cmd.explain) command.explain = cmd.explain;\n          if (cmd.exhaust) command.exhaust = cmd.exhaust;\n\n          // If we have a explain flag\n          if (cmd.explain) {\n            // Create fake explain command\n            command = {\n              explain: command,\n              verbosity: 'allPlansExecution'\n            };\n\n            // Set readConcern on the command if available\n            if (cmd.readConcern) command.readConcern = cmd.readConcern;\n\n            // Set up the _explain name for the command\n            x = '_explain';\n          }\n        } else {\n          command = cmd;\n        }\n\n        // Set up the connection\n        var connectionId = null;\n\n        // Set local connection\n        if (this.connection) connectionId = this.connection;\n        if (!connectionId && this.topology && this.topology.getConnection)\n          connectionId = this.topology.getConnection();\n\n        // Get the command Name\n        var commandName = x === '_find' ? Object.keys(command)[0] : commandTranslation[x];\n\n        // Emit the start event for the command\n        command = {\n          // Returns the command.\n          command: command,\n          // Returns the database name.\n          databaseName: db,\n          // Returns the command name.\n          commandName: commandName,\n          // Returns the driver generated request id.\n          requestId: requestId,\n          // Returns the driver generated operation id.\n          // This is used to link events together such as bulk write operations. OPTIONAL.\n          operationId: this.operationId,\n          // Returns the connection id for the command. For languages that do not have this,\n          // this MUST return the driver equivalent which MUST include the server address and port.\n          // The name of this field is flexible to match the object that is returned from the driver.\n          connectionId: connectionId\n        };\n\n        // Get the aruments\n        var args = Array.prototype.slice.call(arguments, 0);\n\n        // Get the callback\n        var callback = args.pop();\n\n        // We do not have a callback but a Promise\n        if (typeof callback === 'function' || command.commandName === 'killCursors') {\n          var startTime = timestampGenerator.current();\n          // Emit the started event\n          self.emit('started', command);\n\n          // Emit succeeded event with killcursor if we have a legacy protocol\n          if (\n            command.commandName === 'killCursors' &&\n            this.topology.lastIsMaster() &&\n            this.topology.lastIsMaster().maxWireVersion < 4\n          ) {\n            // Emit the succeeded command\n            command = {\n              duration: timestampGenerator.duration(startTime, timestampGenerator.current()),\n              commandName: commandName,\n              requestId: requestId,\n              operationId: cursor.operationId,\n              connectionId: cursor.topology.getConnection(),\n              reply: [{ ok: 1 }]\n            };\n\n            // Apply callback to the list of args\n            args.push(callback);\n            // Apply the call\n            func.apply(this, args);\n            // Emit the command\n            return self.emit('succeeded', command);\n          }\n\n          // Add our callback handler\n          args.push(function(err, r) {\n            if (err) {\n              // Command\n              var command = {\n                duration: timestampGenerator.duration(startTime, timestampGenerator.current()),\n                commandName: commandName,\n                requestId: requestId,\n                operationId: ourOpId,\n                connectionId: cursor.topology.getConnection(),\n                failure: err\n              };\n\n              // Emit the command\n              self.emit('failed', command);\n            } else {\n              if (r && r.documents) {\n                r = r.documents[0];\n              }\n\n              if (commandName.toLowerCase() === 'getmore' && (r == null || r.cursor == null)) {\n                r = {\n                  cursor: {\n                    id: cursor.cursorState.cursorId,\n                    ns: cursor.ns,\n                    nextBatch: cursor.cursorState.documents\n                  },\n                  ok: 1\n                };\n              } else if (\n                (commandName.toLowerCase() === 'find' ||\n                  commandName.toLowerCase() === 'aggregate' ||\n                  commandName.toLowerCase() === 'listcollections') &&\n                (r == null || r.cursor == null)\n              ) {\n                r = {\n                  cursor: {\n                    id: cursor.cursorState.cursorId,\n                    ns: cursor.ns,\n                    firstBatch: cursor.cursorState.documents\n                  },\n                  ok: 1\n                };\n              } else if (commandName.toLowerCase() === 'killcursors' && r == null) {\n                r = {\n                  cursorsUnknown: [cursor.cursorState.lastCursorId],\n                  ok: 1\n                };\n              }\n\n              // cursor id is zero, we can issue success command\n              command = {\n                duration: timestampGenerator.duration(startTime, timestampGenerator.current()),\n                commandName: commandName,\n                requestId: requestId,\n                operationId: cursor.operationId,\n                connectionId: cursor.topology.getConnection(),\n                reply: r && r.result ? r.result : r\n              };\n\n              // Emit the command\n              self.emit('succeeded', command);\n            }\n\n            // Return\n            if (!callback) return;\n\n            // Return to caller\n            callback(err, r);\n          });\n\n          // Apply the call\n          func.apply(this, args);\n        } else {\n          // Assume promise, push back the missing value\n          args.push(callback);\n          // Get the promise\n          var promise = func.apply(this, args);\n          // Return a new promise\n          return new cursor.s.promiseLibrary(function(resolve, reject) {\n            var startTime = timestampGenerator.current();\n            // Emit the started event\n            self.emit('started', command);\n            // Execute the function\n            promise\n              .then(function() {\n                // cursor id is zero, we can issue success command\n                var command = {\n                  duration: timestampGenerator.duration(startTime, timestampGenerator.current()),\n                  commandName: commandName,\n                  requestId: requestId,\n                  operationId: cursor.operationId,\n                  connectionId: cursor.topology.getConnection(),\n                  reply: cursor.cursorState.documents\n                };\n\n                // Emit the command\n                self.emit('succeeded', command);\n              })\n              .catch(function(err) {\n                // Command\n                var command = {\n                  duration: timestampGenerator.duration(startTime, timestampGenerator.current()),\n                  commandName: commandName,\n                  requestId: requestId,\n                  operationId: ourOpId,\n                  connectionId: cursor.topology.getConnection(),\n                  failure: err\n                };\n\n                // Emit the command\n                self.emit('failed', command);\n                // reject the promise\n                reject(err);\n              });\n          });\n        }\n      };\n    });\n  });\n};\n\ninherits(Instrumentation, EventEmitter);\n\nInstrumentation.prototype.uninstrument = function() {\n  for (var i = 0; i < this.overloads.length; i++) {\n    var obj = this.overloads[i];\n    obj.proto[obj.name] = obj.func;\n  }\n\n  // Remove all listeners\n  this.removeAllListeners('started');\n  this.removeAllListeners('succeeded');\n  this.removeAllListeners('failed');\n};\n\nmodule.exports = Instrumentation;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/apm.js\n// module id = 172\n// module chunks = 0","'use strict';\n\nvar shallowClone = require('./utils').shallowClone,\n  handleCallback = require('./utils').handleCallback,\n  MongoError = require('mongodb-core').MongoError,\n  f = require('util').format;\n\nvar authenticate = function(client, username, password, options, callback) {\n  // Did the user destroy the topology\n  if (client.topology && client.topology.isDestroyed())\n    return callback(new MongoError('topology was destroyed'));\n\n  // the default db to authenticate against is 'self'\n  // if authententicate is called from a retry context, it may be another one, like admin\n  var authdb = options.dbName;\n  authdb = options.authdb ? options.authdb : authdb;\n  authdb = options.authSource ? options.authSource : authdb;\n\n  // Callback\n  var _callback = function(err, result) {\n    if (client.listeners('authenticated').length > 0) {\n      client.emit('authenticated', err, result);\n    }\n\n    // Return to caller\n    handleCallback(callback, err, result);\n  };\n\n  // authMechanism\n  var authMechanism = options.authMechanism || '';\n  authMechanism = authMechanism.toUpperCase();\n\n  // If classic auth delegate to auth command\n  if (authMechanism === 'MONGODB-CR') {\n    client.topology.auth('mongocr', authdb, username, password, function(err) {\n      if (err) return handleCallback(callback, err, false);\n      _callback(null, true);\n    });\n  } else if (authMechanism === 'PLAIN') {\n    client.topology.auth('plain', authdb, username, password, function(err) {\n      if (err) return handleCallback(callback, err, false);\n      _callback(null, true);\n    });\n  } else if (authMechanism === 'MONGODB-X509') {\n    client.topology.auth('x509', authdb, username, password, function(err) {\n      if (err) return handleCallback(callback, err, false);\n      _callback(null, true);\n    });\n  } else if (authMechanism === 'SCRAM-SHA-1') {\n    client.topology.auth('scram-sha-1', authdb, username, password, function(err) {\n      if (err) return handleCallback(callback, err, false);\n      _callback(null, true);\n    });\n  } else if (authMechanism === 'GSSAPI') {\n    if (process.platform === 'win32') {\n      client.topology.auth('sspi', authdb, username, password, options, function(err) {\n        if (err) return handleCallback(callback, err, false);\n        _callback(null, true);\n      });\n    } else {\n      client.topology.auth('gssapi', authdb, username, password, options, function(err) {\n        if (err) return handleCallback(callback, err, false);\n        _callback(null, true);\n      });\n    }\n  } else if (authMechanism === 'DEFAULT') {\n    client.topology.auth('default', authdb, username, password, function(err) {\n      if (err) return handleCallback(callback, err, false);\n      _callback(null, true);\n    });\n  } else {\n    handleCallback(\n      callback,\n      MongoError.create({\n        message: f('authentication mechanism %s not supported', options.authMechanism),\n        driver: true\n      })\n    );\n  }\n};\n\nmodule.exports = function(self, username, password, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // Shallow copy the options\n  options = shallowClone(options);\n\n  // Set default mechanism\n  if (!options.authMechanism) {\n    options.authMechanism = 'DEFAULT';\n  } else if (\n    options.authMechanism !== 'GSSAPI' &&\n    options.authMechanism !== 'DEFAULT' &&\n    options.authMechanism !== 'MONGODB-CR' &&\n    options.authMechanism !== 'MONGODB-X509' &&\n    options.authMechanism !== 'SCRAM-SHA-1' &&\n    options.authMechanism !== 'PLAIN'\n  ) {\n    return handleCallback(\n      callback,\n      MongoError.create({\n        message:\n          'only DEFAULT, GSSAPI, PLAIN, MONGODB-X509, SCRAM-SHA-1 or MONGODB-CR is supported by authMechanism',\n        driver: true\n      })\n    );\n  }\n\n  // If we have a callback fallback\n  if (typeof callback === 'function')\n    return authenticate(self, username, password, options, function(err, r) {\n      // Support failed auth method\n      if (err && err.message && err.message.indexOf('saslStart') !== -1) err.code = 59;\n      // Reject error\n      if (err) return callback(err, r);\n      callback(null, r);\n    });\n\n  // Return a promise\n  return new self.s.promiseLibrary(function(resolve, reject) {\n    authenticate(self, username, password, options, function(err, r) {\n      // Support failed auth method\n      if (err && err.message && err.message.indexOf('saslStart') !== -1) err.code = 59;\n      // Reject error\n      if (err) return reject(err);\n      resolve(r);\n    });\n  });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/authenticate.js\n// module id = 173\n// module chunks = 0","'use strict';\n\nvar EventEmitter = require('events'),\n  inherits = require('util').inherits,\n  MongoNetworkError = require('mongodb-core').MongoNetworkError;\n\nvar cursorOptionNames = ['maxAwaitTimeMS', 'collation', 'readPreference'];\n\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @class ChangeStream\n * @since 3.0.0\n * @param {(Db|Collection)} changeDomain The collection against which to create the change stream\n * @param {Array} pipeline An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n * @param {object} [options=null] Optional settings\n * @param {string} [options.fullDocument='default'] Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred.\n * @param {number} [options.maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a change stream query\n * @param {object} [options.resumeAfter=null] Specifies the logical starting point for the new change stream. This should be the _id field from a previously returned change stream document.\n * @param {number} [options.batchSize=null] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @param {object} [options.collation=null] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @param {ReadPreference} [options.readPreference=null] The read preference. Defaults to the read preference of the database or collection. See {@link https://docs.mongodb.com/manual/reference/read-preference|read preference documentation}.\n * @fires ChangeStream#close\n * @fires ChangeStream#change\n * @fires ChangeStream#end\n * @fires ChangeStream#error\n * @return {ChangeStream} a ChangeStream instance.\n */\nvar ChangeStream = function(collection, pipeline, options) {\n  var Collection = require('./collection');\n\n  // Ensure the provided collection is actually a collection\n  if (!(collection instanceof Collection)) {\n    throw new Error(\n      'collection provided to ChangeStream constructor is not an instance of Collection'\n    );\n  }\n\n  var self = this;\n  self.pipeline = pipeline || [];\n  self.options = options || {};\n  self.promiseLibrary = collection.s.promiseLibrary;\n\n  // Extract namespace and serverConfig from the collection\n  self.namespace = {\n    collection: collection.collectionName,\n    database: collection.s.db.databaseName\n  };\n\n  self.serverConfig = collection.s.db.serverConfig;\n\n  // Determine correct read preference\n  self.options.readPreference = self.options.readPreference || collection.s.readPreference;\n\n  // Create contained Change Stream cursor\n  self.cursor = createChangeStreamCursor(self);\n\n  // Listen for any `change` listeners being added to ChangeStream\n  self.on('newListener', function(eventName) {\n    if (eventName === 'change' && self.cursor && self.cursor.listenerCount('change') === 0) {\n      self.cursor.on('data', function(change) {\n        processNewChange(self, null, change);\n      });\n    }\n  });\n\n  // Listen for all `change` listeners being removed from ChangeStream\n  self.on('removeListener', function(eventName) {\n    if (eventName === 'change' && self.listenerCount('change') === 0 && self.cursor) {\n      self.cursor.removeAllListeners('data');\n    }\n  });\n};\n\ninherits(ChangeStream, EventEmitter);\n\n// Create a new change stream cursor based on self's configuration\nvar createChangeStreamCursor = function(self) {\n  if (self.resumeToken) {\n    self.options.resumeAfter = self.resumeToken;\n  }\n\n  var changeStreamCursor = buildChangeStreamAggregationCommand(\n    self.serverConfig,\n    self.namespace,\n    self.pipeline,\n    self.resumeToken,\n    self.options\n  );\n\n  /**\n   * Fired for each new matching change in the specified namespace. Attaching a `change` event listener to a Change Stream will switch the stream into flowing mode. Data will then be passed as soon as it is available.\n   *\n   * @event ChangeStream#change\n   * @type {object}\n   */\n  if (self.listenerCount('change') > 0) {\n    changeStreamCursor.on('data', function(change) {\n      processNewChange(self, null, change);\n    });\n  }\n\n  /**\n   * Change stream close event\n   *\n   * @event ChangeStream#close\n   * @type {null}\n   */\n  changeStreamCursor.on('close', function() {\n    self.emit('close');\n  });\n\n  /**\n   * Change stream end event\n   *\n   * @event ChangeStream#end\n   * @type {null}\n   */\n  changeStreamCursor.on('end', function() {\n    self.emit('end');\n  });\n\n  /**\n   * Fired when the stream encounters an error.\n   *\n   * @event ChangeStream#error\n   * @type {Error}\n   */\n  changeStreamCursor.on('error', function(error) {\n    self.emit('error', error);\n  });\n\n  return changeStreamCursor;\n};\n\nvar buildChangeStreamAggregationCommand = function(\n  serverConfig,\n  namespace,\n  pipeline,\n  resumeToken,\n  options\n) {\n  var changeStreamStageOptions = {};\n  if (options.fullDocument) {\n    changeStreamStageOptions.fullDocument = options.fullDocument;\n  }\n\n  if (resumeToken || options.resumeAfter) {\n    changeStreamStageOptions.resumeAfter = resumeToken || options.resumeAfter;\n  }\n\n  // Map cursor options\n  var cursorOptions = {};\n  cursorOptionNames.forEach(function(optionName) {\n    if (options[optionName]) {\n      cursorOptions[optionName] = options[optionName];\n    }\n  });\n\n  var changeStreamPipeline = [{ $changeStream: changeStreamStageOptions }];\n\n  changeStreamPipeline = changeStreamPipeline.concat(pipeline);\n\n  var command = {\n    aggregate: namespace.collection,\n    pipeline: changeStreamPipeline,\n    readConcern: { level: 'majority' },\n    cursor: {\n      batchSize: options.batchSize || 1\n    }\n  };\n\n  // Create and return the cursor\n  return serverConfig.cursor(\n    namespace.database + '.' + namespace.collection,\n    command,\n    cursorOptions\n  );\n};\n\n/**\n * Check if there is any document still available in the Change Stream\n * @function ChangeStream.prototype.hasNext\n * @param {ChangeStream~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\nChangeStream.prototype.hasNext = function(callback) {\n  return this.cursor.hasNext(callback);\n};\n\n/**\n * Get the next available document from the Change Stream, returns null if no more documents are available.\n * @function ChangeStream.prototype.next\n * @param {ChangeStream~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\nChangeStream.prototype.next = function(callback) {\n  var self = this;\n  if (this.isClosed()) {\n    if (callback) return callback(new Error('Change Stream is not open.'), null);\n    return self.promiseLibrary.reject(new Error('Change Stream is not open.'));\n  }\n  return this.cursor\n    .next()\n    .then(function(change) {\n      return processNewChange(self, null, change, callback);\n    })\n    .catch(function(err) {\n      return processNewChange(self, err, null, callback);\n    });\n};\n\n/**\n * Is the cursor closed\n * @method ChangeStream.prototype.isClosed\n * @return {boolean}\n */\nChangeStream.prototype.isClosed = function() {\n  if (this.cursor) {\n    return this.cursor.isClosed();\n  }\n  return true;\n};\n\n/**\n * Close the Change Stream\n * @method ChangeStream.prototype.close\n * @param {ChangeStream~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\nChangeStream.prototype.close = function(callback) {\n  if (!this.cursor) {\n    if (callback) return callback();\n    return this.promiseLibrary.resolve();\n  }\n\n  // Tidy up the existing cursor\n  var cursor = this.cursor;\n  delete this.cursor;\n  return cursor.close(callback);\n};\n\n/**\n * This method pulls all the data out of a readable stream, and writes it to the supplied destination, automatically managing the flow so that the destination is not overwhelmed by a fast readable stream.\n * @method\n * @param {Writable} destination The destination for writing data\n * @param {object} [options] {@link https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options|Pipe options}\n * @return {null}\n */\nChangeStream.prototype.pipe = function(destination, options) {\n  if (!this.pipeDestinations) {\n    this.pipeDestinations = [];\n  }\n  this.pipeDestinations.push(destination);\n  return this.cursor.pipe(destination, options);\n};\n\n/**\n * This method will remove the hooks set up for a previous pipe() call.\n * @param {Writable} [destination] The destination for writing data\n * @return {null}\n */\nChangeStream.prototype.unpipe = function(destination) {\n  if (this.pipeDestinations && this.pipeDestinations.indexOf(destination) > -1) {\n    this.pipeDestinations.splice(this.pipeDestinations.indexOf(destination), 1);\n  }\n  return this.cursor.unpipe(destination);\n};\n\n/**\n * This method will cause a stream in flowing mode to stop emitting data events. Any data that becomes available will remain in the internal buffer.\n * @return {null}\n */\nChangeStream.prototype.pause = function() {\n  return this.cursor.pause();\n};\n\n/**\n * This method will cause the readable stream to resume emitting data events.\n * @return {null}\n */\nChangeStream.prototype.resume = function() {\n  return this.cursor.resume();\n};\n\n/**\n * Return a modified Readable stream including a possible transform method.\n * @method\n * @param {object} [options=null] Optional settings.\n * @param {function} [options.transform=null] A transformation method applied to each document emitted by the stream.\n * @return {Cursor}\n */\nChangeStream.prototype.stream = function(options) {\n  this.streamOptions = options;\n  return this.cursor.stream(options);\n};\n\n// Handle new change events. This method brings together the routes from the callback, event emitter, and promise ways of using ChangeStream.\nvar processNewChange = function(self, err, change, callback) {\n  // Handle errors\n  if (err) {\n    // Handle resumable MongoNetworkErrors\n    if (err instanceof MongoNetworkError && !self.attemptingResume) {\n      self.attemptingResume = true;\n      return self.cursor.close(function(closeErr) {\n        if (closeErr) {\n          if (callback) return callback(err, null);\n          return self.promiseLibrary.reject(err);\n        }\n\n        // Establish a new cursor\n        self.cursor = createChangeStreamCursor(self);\n\n        // Attempt to reconfigure piping\n        if (self.pipeDestinations) {\n          var cursorStream = self.cursor.stream(self.streamOptions);\n          for (var pipeDestination in self.pipeDestinations) {\n            cursorStream.pipe(pipeDestination);\n          }\n        }\n\n        // Attempt the next() operation again\n        if (callback) return self.next(callback);\n        return self.next();\n      });\n    }\n\n    if (typeof callback === 'function') return callback(err, null);\n    if (self.listenerCount('error')) return self.emit('error', err);\n    return self.promiseLibrary.reject(err);\n  }\n  self.attemptingResume = false;\n\n  // Cache the resume token if it is present. If it is not present return an error.\n  if (!change || !change._id) {\n    var noResumeTokenError = new Error(\n      'A change stream document has been received that lacks a resume token (_id).'\n    );\n    if (typeof callback === 'function') return callback(noResumeTokenError, null);\n    if (self.listenerCount('error')) return self.emit('error', noResumeTokenError);\n    return self.promiseLibrary.reject(noResumeTokenError);\n  }\n  self.resumeToken = change._id;\n\n  // Return the change\n  if (typeof callback === 'function') return callback(err, change);\n  if (self.listenerCount('change')) return self.emit('change', change);\n  return self.promiseLibrary.resolve(change);\n};\n\n/**\n * The callback format for results\n * @callback ChangeStream~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {(object|null)} result The result object if the command was executed successfully.\n */\n\nmodule.exports = ChangeStream;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/change_stream.js\n// module id = 174\n// module chunks = 0","'use strict';\n\nvar stream = require('stream'),\n  util = require('util');\n\nmodule.exports = GridFSBucketReadStream;\n\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n *\n * @class\n * @param {Collection} chunks Handle for chunks collection\n * @param {Collection} files Handle for files collection\n * @param {Object} readPreference The read preference to use\n * @param {Object} filter The query to use to find the file document\n * @param {Object} [options=null] Optional settings.\n * @param {Number} [options.sort=null] Optional sort for the file find query\n * @param {Number} [options.skip=null] Optional skip for the file find query\n * @param {Number} [options.start=null] Optional 0-based offset in bytes to start streaming from\n * @param {Number} [options.end=null] Optional 0-based offset in bytes to stop streaming before\n * @fires GridFSBucketReadStream#error\n * @fires GridFSBucketReadStream#file\n * @return {GridFSBucketReadStream} a GridFSBucketReadStream instance.\n */\n\nfunction GridFSBucketReadStream(chunks, files, readPreference, filter, options) {\n  this.s = {\n    bytesRead: 0,\n    chunks: chunks,\n    cursor: null,\n    expected: 0,\n    files: files,\n    filter: filter,\n    init: false,\n    expectedEnd: 0,\n    file: null,\n    options: options,\n    readPreference: readPreference\n  };\n\n  stream.Readable.call(this);\n}\n\nutil.inherits(GridFSBucketReadStream, stream.Readable);\n\n/**\n * An error occurred\n *\n * @event GridFSBucketReadStream#error\n * @type {Error}\n */\n\n/**\n * Fires when the stream loaded the file document corresponding to the\n * provided id.\n *\n * @event GridFSBucketReadStream#file\n * @type {object}\n */\n\n/**\n * Emitted when a chunk of data is available to be consumed.\n *\n * @event GridFSBucketReadStream#data\n * @type {object}\n */\n\n/**\n * Fired when the stream is exhausted (no more data events).\n *\n * @event GridFSBucketReadStream#end\n * @type {object}\n */\n\n/**\n * Fired when the stream is exhausted and the underlying cursor is killed\n *\n * @event GridFSBucketReadStream#close\n * @type {object}\n */\n\n/**\n * Reads from the cursor and pushes to the stream.\n * @method\n */\n\nGridFSBucketReadStream.prototype._read = function() {\n  var _this = this;\n  if (this.destroyed) {\n    return;\n  }\n\n  waitForFile(_this, function() {\n    doRead(_this);\n  });\n};\n\n/**\n * Sets the 0-based offset in bytes to start streaming from. Throws\n * an error if this stream has entered flowing mode\n * (e.g. if you've already called `on('data')`)\n * @method\n * @param {Number} start Offset in bytes to start reading at\n * @return {GridFSBucketReadStream}\n */\n\nGridFSBucketReadStream.prototype.start = function(start) {\n  throwIfInitialized(this);\n  this.s.options.start = start;\n  return this;\n};\n\n/**\n * Sets the 0-based offset in bytes to start streaming from. Throws\n * an error if this stream has entered flowing mode\n * (e.g. if you've already called `on('data')`)\n * @method\n * @param {Number} end Offset in bytes to stop reading at\n * @return {GridFSBucketReadStream}\n */\n\nGridFSBucketReadStream.prototype.end = function(end) {\n  throwIfInitialized(this);\n  this.s.options.end = end;\n  return this;\n};\n\n/**\n * Marks this stream as aborted (will never push another `data` event)\n * and kills the underlying cursor. Will emit the 'end' event, and then\n * the 'close' event once the cursor is successfully killed.\n *\n * @method\n * @param {GridFSBucket~errorCallback} [callback] called when the cursor is successfully closed or an error occurred.\n * @fires GridFSBucketWriteStream#close\n * @fires GridFSBucketWriteStream#end\n */\n\nGridFSBucketReadStream.prototype.abort = function(callback) {\n  var _this = this;\n  this.push(null);\n  this.destroyed = true;\n  if (this.s.cursor) {\n    this.s.cursor.close(function(error) {\n      _this.emit('close');\n      callback && callback(error);\n    });\n  } else {\n    if (!this.s.init) {\n      // If not initialized, fire close event because we will never\n      // get a cursor\n      _this.emit('close');\n    }\n    callback && callback();\n  }\n};\n\n/**\n * @ignore\n */\n\nfunction throwIfInitialized(self) {\n  if (self.s.init) {\n    throw new Error('You cannot change options after the stream has entered' + 'flowing mode!');\n  }\n}\n\n/**\n * @ignore\n */\n\nfunction doRead(_this) {\n  if (_this.destroyed) {\n    return;\n  }\n\n  _this.s.cursor.next(function(error, doc) {\n    if (_this.destroyed) {\n      return;\n    }\n    if (error) {\n      return __handleError(_this, error);\n    }\n    if (!doc) {\n      _this.push(null);\n      return _this.s.cursor.close(function(error) {\n        if (error) {\n          return __handleError(_this, error);\n        }\n        _this.emit('close');\n      });\n    }\n\n    var bytesRemaining = _this.s.file.length - _this.s.bytesRead;\n    var expectedN = _this.s.expected++;\n    var expectedLength = Math.min(_this.s.file.chunkSize, bytesRemaining);\n\n    if (doc.n > expectedN) {\n      var errmsg = 'ChunkIsMissing: Got unexpected n: ' + doc.n + ', expected: ' + expectedN;\n      return __handleError(_this, new Error(errmsg));\n    }\n\n    if (doc.n < expectedN) {\n      errmsg = 'ExtraChunk: Got unexpected n: ' + doc.n + ', expected: ' + expectedN;\n      return __handleError(_this, new Error(errmsg));\n    }\n\n    var buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n\n    if (buf.length !== expectedLength) {\n      if (bytesRemaining <= 0) {\n        errmsg = 'ExtraChunk: Got unexpected n: ' + doc.n;\n        return __handleError(_this, new Error(errmsg));\n      }\n\n      errmsg =\n        'ChunkIsWrongSize: Got unexpected length: ' + buf.length + ', expected: ' + expectedLength;\n      return __handleError(_this, new Error(errmsg));\n    }\n\n    _this.s.bytesRead += buf.length;\n\n    if (buf.length === 0) {\n      return _this.push(null);\n    }\n\n    var sliceStart = null;\n    var sliceEnd = null;\n\n    if (_this.s.bytesToSkip != null) {\n      sliceStart = _this.s.bytesToSkip;\n      _this.s.bytesToSkip = 0;\n    }\n\n    if (expectedN === _this.s.expectedEnd && _this.s.bytesToTrim != null) {\n      sliceEnd = _this.s.bytesToTrim;\n    }\n\n    // If the remaining amount of data left is < chunkSize read the right amount of data\n    if (_this.s.options.end && _this.s.options.end - _this.s.bytesToSkip < buf.length) {\n      sliceEnd = _this.s.options.end - _this.s.bytesToSkip;\n    }\n\n    if (sliceStart != null || sliceEnd != null) {\n      buf = buf.slice(sliceStart || 0, sliceEnd || buf.length);\n    }\n\n    _this.push(buf);\n  });\n}\n\n/**\n * @ignore\n */\n\nfunction init(self) {\n  var findOneOptions = {};\n  if (self.s.readPreference) {\n    findOneOptions.readPreference = self.s.readPreference;\n  }\n  if (self.s.options && self.s.options.sort) {\n    findOneOptions.sort = self.s.options.sort;\n  }\n  if (self.s.options && self.s.options.skip) {\n    findOneOptions.skip = self.s.options.skip;\n  }\n\n  self.s.files.findOne(self.s.filter, findOneOptions, function(error, doc) {\n    if (error) {\n      return __handleError(self, error);\n    }\n    if (!doc) {\n      var identifier = self.s.filter._id ? self.s.filter._id.toString() : self.s.filter.filename;\n      var errmsg = 'FileNotFound: file ' + identifier + ' was not found';\n      var err = new Error(errmsg);\n      err.code = 'ENOENT';\n      return __handleError(self, err);\n    }\n\n    // If document is empty, kill the stream immediately and don't\n    // execute any reads\n    if (doc.length <= 0) {\n      self.push(null);\n      return;\n    }\n\n    if (self.destroyed) {\n      // If user destroys the stream before we have a cursor, wait\n      // until the query is done to say we're 'closed' because we can't\n      // cancel a query.\n      self.emit('close');\n      return;\n    }\n\n    self.s.bytesToSkip = handleStartOption(self, doc, self.s.options);\n\n    var filter = { files_id: doc._id };\n\n    // Currently (MongoDB 3.4.4) skip function does not support the index,\n    // it needs to retrieve all the documents first and then skip them. (CS-25811)\n    // As work around we use $gte on the \"n\" field.\n    if (self.s.options && self.s.options.start != null) {\n      var skip = Math.floor(self.s.options.start / doc.chunkSize);\n      if (skip > 0) {\n        filter['n'] = { $gte: skip };\n      }\n    }\n    self.s.cursor = self.s.chunks.find(filter).sort({ n: 1 });\n\n    if (self.s.readPreference) {\n      self.s.cursor.setReadPreference(self.s.readPreference);\n    }\n\n    self.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n    self.s.file = doc;\n    self.s.bytesToTrim = handleEndOption(self, doc, self.s.cursor, self.s.options);\n    self.emit('file', doc);\n  });\n}\n\n/**\n * @ignore\n */\n\nfunction waitForFile(_this, callback) {\n  if (_this.s.file) {\n    return callback();\n  }\n\n  if (!_this.s.init) {\n    init(_this);\n    _this.s.init = true;\n  }\n\n  _this.once('file', function() {\n    callback();\n  });\n}\n\n/**\n * @ignore\n */\n\nfunction handleStartOption(stream, doc, options) {\n  if (options && options.start != null) {\n    if (options.start > doc.length) {\n      throw new Error(\n        'Stream start (' +\n          options.start +\n          ') must not be ' +\n          'more than the length of the file (' +\n          doc.length +\n          ')'\n      );\n    }\n    if (options.start < 0) {\n      throw new Error('Stream start (' + options.start + ') must not be ' + 'negative');\n    }\n    if (options.end != null && options.end < options.start) {\n      throw new Error(\n        'Stream start (' +\n          options.start +\n          ') must not be ' +\n          'greater than stream end (' +\n          options.end +\n          ')'\n      );\n    }\n\n    stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n    stream.s.expected = Math.floor(options.start / doc.chunkSize);\n\n    return options.start - stream.s.bytesRead;\n  }\n}\n\n/**\n * @ignore\n */\n\nfunction handleEndOption(stream, doc, cursor, options) {\n  if (options && options.end != null) {\n    if (options.end > doc.length) {\n      throw new Error(\n        'Stream end (' +\n          options.end +\n          ') must not be ' +\n          'more than the length of the file (' +\n          doc.length +\n          ')'\n      );\n    }\n    if (options.start < 0) {\n      throw new Error('Stream end (' + options.end + ') must not be ' + 'negative');\n    }\n\n    var start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n\n    cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n\n    stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n\n    return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n  }\n}\n\n/**\n * @ignore\n */\n\nfunction __handleError(_this, error) {\n  _this.emit('error', error);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/gridfs-stream/download.js\n// module id = 175\n// module chunks = 0","'use strict';\n\nvar Emitter = require('events').EventEmitter;\nvar GridFSBucketReadStream = require('./download');\nvar GridFSBucketWriteStream = require('./upload');\nvar shallowClone = require('../utils').shallowClone;\nvar toError = require('../utils').toError;\nvar util = require('util');\nvar executeOperation = require('../utils').executeOperation;\n\nvar DEFAULT_GRIDFS_BUCKET_OPTIONS = {\n  bucketName: 'fs',\n  chunkSizeBytes: 255 * 1024\n};\n\nmodule.exports = GridFSBucket;\n\n/**\n * Constructor for a streaming GridFS interface\n * @class\n * @param {Db} db A db handle\n * @param {object} [options=null] Optional settings.\n * @param {string} [options.bucketName=\"fs\"] The 'files' and 'chunks' collections will be prefixed with the bucket name followed by a dot.\n * @param {number} [options.chunkSizeBytes=255 * 1024] Number of bytes stored in each chunk. Defaults to 255KB\n * @param {object} [options.writeConcern=null] Optional write concern to be passed to write operations, for instance `{ w: 1 }`\n * @param {object} [options.readPreference=null] Optional read preference to be passed to read operations\n * @fires GridFSBucketWriteStream#index\n * @return {GridFSBucket}\n */\n\nfunction GridFSBucket(db, options) {\n  Emitter.apply(this);\n  this.setMaxListeners(0);\n\n  if (options && typeof options === 'object') {\n    options = shallowClone(options);\n    var keys = Object.keys(DEFAULT_GRIDFS_BUCKET_OPTIONS);\n    for (var i = 0; i < keys.length; ++i) {\n      if (!options[keys[i]]) {\n        options[keys[i]] = DEFAULT_GRIDFS_BUCKET_OPTIONS[keys[i]];\n      }\n    }\n  } else {\n    options = DEFAULT_GRIDFS_BUCKET_OPTIONS;\n  }\n\n  this.s = {\n    db: db,\n    options: options,\n    _chunksCollection: db.collection(options.bucketName + '.chunks'),\n    _filesCollection: db.collection(options.bucketName + '.files'),\n    checkedIndexes: false,\n    calledOpenUploadStream: false,\n    promiseLibrary: db.s.promiseLibrary || Promise\n  };\n}\n\nutil.inherits(GridFSBucket, Emitter);\n\n/**\n * When the first call to openUploadStream is made, the upload stream will\n * check to see if it needs to create the proper indexes on the chunks and\n * files collections. This event is fired either when 1) it determines that\n * no index creation is necessary, 2) when it successfully creates the\n * necessary indexes.\n *\n * @event GridFSBucket#index\n * @type {Error}\n */\n\n/**\n * Returns a writable stream (GridFSBucketWriteStream) for writing\n * buffers to GridFS. The stream's 'id' property contains the resulting\n * file's id.\n * @method\n * @param {string} filename The value of the 'filename' key in the files doc\n * @param {object} [options=null] Optional settings.\n * @param {number} [options.chunkSizeBytes=null] Optional overwrite this bucket's chunkSizeBytes for this file\n * @param {object} [options.metadata=null] Optional object to store in the file document's `metadata` field\n * @param {string} [options.contentType=null] Optional string to store in the file document's `contentType` field\n * @param {array} [options.aliases=null] Optional array of strings to store in the file document's `aliases` field\n * @return {GridFSBucketWriteStream}\n */\n\nGridFSBucket.prototype.openUploadStream = function(filename, options) {\n  if (options) {\n    options = shallowClone(options);\n  } else {\n    options = {};\n  }\n  if (!options.chunkSizeBytes) {\n    options.chunkSizeBytes = this.s.options.chunkSizeBytes;\n  }\n  return new GridFSBucketWriteStream(this, filename, options);\n};\n\n/**\n * Returns a writable stream (GridFSBucketWriteStream) for writing\n * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n * file's id.\n * @method\n * @param {string|number|object} id A custom id used to identify the file\n * @param {string} filename The value of the 'filename' key in the files doc\n * @param {object} [options=null] Optional settings.\n * @param {number} [options.chunkSizeBytes=null] Optional overwrite this bucket's chunkSizeBytes for this file\n * @param {object} [options.metadata=null] Optional object to store in the file document's `metadata` field\n * @param {string} [options.contentType=null] Optional string to store in the file document's `contentType` field\n * @param {array} [options.aliases=null] Optional array of strings to store in the file document's `aliases` field\n * @return {GridFSBucketWriteStream}\n */\n\nGridFSBucket.prototype.openUploadStreamWithId = function(id, filename, options) {\n  if (options) {\n    options = shallowClone(options);\n  } else {\n    options = {};\n  }\n\n  if (!options.chunkSizeBytes) {\n    options.chunkSizeBytes = this.s.options.chunkSizeBytes;\n  }\n\n  options.id = id;\n\n  return new GridFSBucketWriteStream(this, filename, options);\n};\n\n/**\n * Returns a readable stream (GridFSBucketReadStream) for streaming file\n * data from GridFS.\n * @method\n * @param {ObjectId} id The id of the file doc\n * @param {Object} [options=null] Optional settings.\n * @param {Number} [options.start=null] Optional 0-based offset in bytes to start streaming from\n * @param {Number} [options.end=null] Optional 0-based offset in bytes to stop streaming before\n * @return {GridFSBucketReadStream}\n */\n\nGridFSBucket.prototype.openDownloadStream = function(id, options) {\n  var filter = { _id: id };\n  options = {\n    start: options && options.start,\n    end: options && options.end\n  };\n\n  return new GridFSBucketReadStream(\n    this.s._chunksCollection,\n    this.s._filesCollection,\n    this.s.options.readPreference,\n    filter,\n    options\n  );\n};\n\n/**\n * Deletes a file with the given id\n * @method\n * @param {ObjectId} id The id of the file doc\n * @param {GridFSBucket~errorCallback} [callback]\n */\n\nGridFSBucket.prototype.delete = function(id, callback) {\n  return executeOperation(this.s.db.s.topology, _delete, [this, id, callback], {\n    skipSessions: true\n  });\n};\n\n/**\n * @ignore\n */\n\nfunction _delete(_this, id, callback) {\n  _this.s._filesCollection.deleteOne({ _id: id }, function(error, res) {\n    if (error) {\n      return callback(error);\n    }\n\n    _this.s._chunksCollection.deleteMany({ files_id: id }, function(error) {\n      if (error) {\n        return callback(error);\n      }\n\n      // Delete orphaned chunks before returning FileNotFound\n      if (!res.result.n) {\n        var errmsg = 'FileNotFound: no file with id ' + id + ' found';\n        return callback(new Error(errmsg));\n      }\n\n      callback();\n    });\n  });\n}\n\n/**\n * Convenience wrapper around find on the files collection\n * @method\n * @param {Object} filter\n * @param {Object} [options=null] Optional settings for cursor\n * @param {number} [options.batchSize=null] Optional batch size for cursor\n * @param {number} [options.limit=null] Optional limit for cursor\n * @param {number} [options.maxTimeMS=null] Optional maxTimeMS for cursor\n * @param {boolean} [options.noCursorTimeout=null] Optionally set cursor's `noCursorTimeout` flag\n * @param {number} [options.skip=null] Optional skip for cursor\n * @param {object} [options.sort=null] Optional sort for cursor\n * @return {Cursor}\n */\n\nGridFSBucket.prototype.find = function(filter, options) {\n  filter = filter || {};\n  options = options || {};\n\n  var cursor = this.s._filesCollection.find(filter);\n\n  if (options.batchSize != null) {\n    cursor.batchSize(options.batchSize);\n  }\n  if (options.limit != null) {\n    cursor.limit(options.limit);\n  }\n  if (options.maxTimeMS != null) {\n    cursor.maxTimeMS(options.maxTimeMS);\n  }\n  if (options.noCursorTimeout != null) {\n    cursor.addCursorFlag('noCursorTimeout', options.noCursorTimeout);\n  }\n  if (options.skip != null) {\n    cursor.skip(options.skip);\n  }\n  if (options.sort != null) {\n    cursor.sort(options.sort);\n  }\n\n  return cursor;\n};\n\n/**\n * Returns a readable stream (GridFSBucketReadStream) for streaming the\n * file with the given name from GridFS. If there are multiple files with\n * the same name, this will stream the most recent file with the given name\n * (as determined by the `uploadDate` field). You can set the `revision`\n * option to change this behavior.\n * @method\n * @param {String} filename The name of the file to stream\n * @param {Object} [options=null] Optional settings\n * @param {number} [options.revision=-1] The revision number relative to the oldest file with the given filename. 0 gets you the oldest file, 1 gets you the 2nd oldest, -1 gets you the newest.\n * @param {Number} [options.start=null] Optional 0-based offset in bytes to start streaming from\n * @param {Number} [options.end=null] Optional 0-based offset in bytes to stop streaming before\n * @return {GridFSBucketReadStream}\n */\n\nGridFSBucket.prototype.openDownloadStreamByName = function(filename, options) {\n  var sort = { uploadDate: -1 };\n  var skip = null;\n  if (options && options.revision != null) {\n    if (options.revision >= 0) {\n      sort = { uploadDate: 1 };\n      skip = options.revision;\n    } else {\n      skip = -options.revision - 1;\n    }\n  }\n\n  var filter = { filename: filename };\n  options = {\n    sort: sort,\n    skip: skip,\n    start: options && options.start,\n    end: options && options.end\n  };\n  return new GridFSBucketReadStream(\n    this.s._chunksCollection,\n    this.s._filesCollection,\n    this.s.options.readPreference,\n    filter,\n    options\n  );\n};\n\n/**\n * Renames the file with the given _id to the given string\n * @method\n * @param {ObjectId} id the id of the file to rename\n * @param {String} filename new name for the file\n * @param {GridFSBucket~errorCallback} [callback]\n */\n\nGridFSBucket.prototype.rename = function(id, filename, callback) {\n  return executeOperation(this.s.db.s.topology, _rename, [this, id, filename, callback], {\n    skipSessions: true\n  });\n};\n\n/**\n * @ignore\n */\n\nfunction _rename(_this, id, filename, callback) {\n  var filter = { _id: id };\n  var update = { $set: { filename: filename } };\n  _this.s._filesCollection.updateOne(filter, update, function(error, res) {\n    if (error) {\n      return callback(error);\n    }\n    if (!res.result.n) {\n      return callback(toError('File with id ' + id + ' not found'));\n    }\n    callback();\n  });\n}\n\n/**\n * Removes this bucket's files collection, followed by its chunks collection.\n * @method\n * @param {GridFSBucket~errorCallback} [callback]\n */\n\nGridFSBucket.prototype.drop = function(callback) {\n  return executeOperation(this.s.db.s.topology, _drop, [this, callback], {\n    skipSessions: true\n  });\n};\n\n/**\n * @ignore\n */\n\nfunction _drop(_this, callback) {\n  _this.s._filesCollection.drop(function(error) {\n    if (error) {\n      return callback(error);\n    }\n    _this.s._chunksCollection.drop(function(error) {\n      if (error) {\n        return callback(error);\n      }\n\n      return callback();\n    });\n  });\n}\n\n/**\n * Callback format for all GridFSBucket methods that can accept a callback.\n * @callback GridFSBucket~errorCallback\n * @param {MongoError} error An error instance representing any errors that occurred\n */\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/gridfs-stream/index.js\n// module id = 176\n// module chunks = 0","'use strict';\n\nvar core = require('mongodb-core');\nvar crypto = require('crypto');\nvar stream = require('stream');\nvar util = require('util');\n\nvar ERROR_NAMESPACE_NOT_FOUND = 26;\n\nmodule.exports = GridFSBucketWriteStream;\n\n/**\n * A writable stream that enables you to write buffers to GridFS.\n *\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\n *\n * @class\n * @param {GridFSBucket} bucket Handle for this stream's corresponding bucket\n * @param {string} filename The value of the 'filename' key in the files doc\n * @param {object} [options=null] Optional settings.\n * @param {string|number|object} [options.id=null] Custom file id for the GridFS file.\n * @param {number} [options.chunkSizeBytes=null] The chunk size to use, in bytes\n * @param {number} [options.w=null] The write concern\n * @param {number} [options.wtimeout=null] The write concern timeout\n * @param {number} [options.j=null] The journal write concern\n * @fires GridFSBucketWriteStream#error\n * @fires GridFSBucketWriteStream#finish\n * @return {GridFSBucketWriteStream} a GridFSBucketWriteStream instance.\n */\n\nfunction GridFSBucketWriteStream(bucket, filename, options) {\n  options = options || {};\n  this.bucket = bucket;\n  this.chunks = bucket.s._chunksCollection;\n  this.filename = filename;\n  this.files = bucket.s._filesCollection;\n  this.options = options;\n  // Signals the write is all done\n  this.done = false;\n\n  this.id = options.id ? options.id : core.BSON.ObjectId();\n  this.chunkSizeBytes = this.options.chunkSizeBytes;\n  this.bufToStore = new Buffer(this.chunkSizeBytes);\n  this.length = 0;\n  this.md5 = crypto.createHash('md5');\n  this.n = 0;\n  this.pos = 0;\n  this.state = {\n    streamEnd: false,\n    outstandingRequests: 0,\n    errored: false,\n    aborted: false,\n    promiseLibrary: this.bucket.s.promiseLibrary\n  };\n\n  if (!this.bucket.s.calledOpenUploadStream) {\n    this.bucket.s.calledOpenUploadStream = true;\n\n    var _this = this;\n    checkIndexes(this, function() {\n      _this.bucket.s.checkedIndexes = true;\n      _this.bucket.emit('index');\n    });\n  }\n}\n\nutil.inherits(GridFSBucketWriteStream, stream.Writable);\n\n/**\n * An error occurred\n *\n * @event GridFSBucketWriteStream#error\n * @type {Error}\n */\n\n/**\n * `end()` was called and the write stream successfully wrote the file\n * metadata and all the chunks to MongoDB.\n *\n * @event GridFSBucketWriteStream#finish\n * @type {object}\n */\n\n/**\n * Write a buffer to the stream.\n *\n * @method\n * @param {Buffer} chunk Buffer to write\n * @param {String} encoding Optional encoding for the buffer\n * @param {Function} callback Function to call when the chunk was added to the buffer, or if the entire chunk was persisted to MongoDB if this chunk caused a flush.\n * @return {Boolean} False if this write required flushing a chunk to MongoDB. True otherwise.\n */\n\nGridFSBucketWriteStream.prototype.write = function(chunk, encoding, callback) {\n  var _this = this;\n  return waitForIndexes(this, function() {\n    return doWrite(_this, chunk, encoding, callback);\n  });\n};\n\n/**\n * Places this write stream into an aborted state (all future writes fail)\n * and deletes all chunks that have already been written.\n *\n * @method\n * @param {GridFSBucket~errorCallback} callback called when chunks are successfully removed or error occurred\n * @return {Promise} if no callback specified\n */\n\nGridFSBucketWriteStream.prototype.abort = function(callback) {\n  if (this.state.streamEnd) {\n    var error = new Error('Cannot abort a stream that has already completed');\n    if (typeof callback === 'function') {\n      return callback(error);\n    }\n    return this.state.promiseLibrary.reject(error);\n  }\n  if (this.state.aborted) {\n    error = new Error('Cannot call abort() on a stream twice');\n    if (typeof callback === 'function') {\n      return callback(error);\n    }\n    return this.state.promiseLibrary.reject(error);\n  }\n  this.state.aborted = true;\n  this.chunks.deleteMany({ files_id: this.id }, function(error) {\n    if (typeof callback === 'function') callback(error);\n  });\n};\n\n/**\n * Tells the stream that no more data will be coming in. The stream will\n * persist the remaining data to MongoDB, write the files document, and\n * then emit a 'finish' event.\n *\n * @method\n * @param {Buffer} chunk Buffer to write\n * @param {String} encoding Optional encoding for the buffer\n * @param {Function} callback Function to call when all files and chunks have been persisted to MongoDB\n */\n\nGridFSBucketWriteStream.prototype.end = function(chunk, encoding, callback) {\n  var _this = this;\n  if (typeof chunk === 'function') {\n    (callback = chunk), (chunk = null), (encoding = null);\n  } else if (typeof encoding === 'function') {\n    (callback = encoding), (encoding = null);\n  }\n\n  if (checkAborted(this, callback)) {\n    return;\n  }\n  this.state.streamEnd = true;\n\n  if (callback) {\n    this.once('finish', function(result) {\n      callback(null, result);\n    });\n  }\n\n  if (!chunk) {\n    waitForIndexes(this, function() {\n      writeRemnant(_this);\n    });\n    return;\n  }\n\n  this.write(chunk, encoding, function() {\n    writeRemnant(_this);\n  });\n};\n\n/**\n * @ignore\n */\n\nfunction __handleError(_this, error, callback) {\n  if (_this.state.errored) {\n    return;\n  }\n  _this.state.errored = true;\n  if (callback) {\n    return callback(error);\n  }\n  _this.emit('error', error);\n}\n\n/**\n * @ignore\n */\n\nfunction createChunkDoc(filesId, n, data) {\n  return {\n    _id: core.BSON.ObjectId(),\n    files_id: filesId,\n    n: n,\n    data: data\n  };\n}\n\n/**\n * @ignore\n */\n\nfunction checkChunksIndex(_this, callback) {\n  _this.chunks.listIndexes().toArray(function(error, indexes) {\n    if (error) {\n      // Collection doesn't exist so create index\n      if (error.code === ERROR_NAMESPACE_NOT_FOUND) {\n        var index = { files_id: 1, n: 1 };\n        _this.chunks.createIndex(index, { background: false, unique: true }, function(error) {\n          if (error) {\n            return callback(error);\n          }\n\n          callback();\n        });\n        return;\n      }\n      return callback(error);\n    }\n\n    var hasChunksIndex = false;\n    indexes.forEach(function(index) {\n      if (index.key) {\n        var keys = Object.keys(index.key);\n        if (keys.length === 2 && index.key.files_id === 1 && index.key.n === 1) {\n          hasChunksIndex = true;\n        }\n      }\n    });\n\n    if (hasChunksIndex) {\n      callback();\n    } else {\n      index = { files_id: 1, n: 1 };\n      var indexOptions = getWriteOptions(_this);\n\n      indexOptions.background = false;\n      indexOptions.unique = true;\n\n      _this.chunks.createIndex(index, indexOptions, function(error) {\n        if (error) {\n          return callback(error);\n        }\n\n        callback();\n      });\n    }\n  });\n}\n\n/**\n * @ignore\n */\n\nfunction checkDone(_this, callback) {\n  if (_this.done) return true;\n  if (_this.state.streamEnd && _this.state.outstandingRequests === 0 && !_this.state.errored) {\n    // Set done so we dont' trigger duplicate createFilesDoc\n    _this.done = true;\n    // Create a new files doc\n    var filesDoc = createFilesDoc(\n      _this.id,\n      _this.length,\n      _this.chunkSizeBytes,\n      _this.md5.digest('hex'),\n      _this.filename,\n      _this.options.contentType,\n      _this.options.aliases,\n      _this.options.metadata\n    );\n\n    if (checkAborted(_this, callback)) {\n      return false;\n    }\n\n    _this.files.insert(filesDoc, getWriteOptions(_this), function(error) {\n      if (error) {\n        return __handleError(_this, error, callback);\n      }\n      _this.emit('finish', filesDoc);\n    });\n\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * @ignore\n */\n\nfunction checkIndexes(_this, callback) {\n  _this.files.findOne({}, { _id: 1 }, function(error, doc) {\n    if (error) {\n      return callback(error);\n    }\n    if (doc) {\n      return callback();\n    }\n\n    _this.files.listIndexes().toArray(function(error, indexes) {\n      if (error) {\n        // Collection doesn't exist so create index\n        if (error.code === ERROR_NAMESPACE_NOT_FOUND) {\n          var index = { filename: 1, uploadDate: 1 };\n          _this.files.createIndex(index, { background: false }, function(error) {\n            if (error) {\n              return callback(error);\n            }\n\n            checkChunksIndex(_this, callback);\n          });\n          return;\n        }\n        return callback(error);\n      }\n\n      var hasFileIndex = false;\n      indexes.forEach(function(index) {\n        var keys = Object.keys(index.key);\n        if (keys.length === 2 && index.key.filename === 1 && index.key.uploadDate === 1) {\n          hasFileIndex = true;\n        }\n      });\n\n      if (hasFileIndex) {\n        checkChunksIndex(_this, callback);\n      } else {\n        index = { filename: 1, uploadDate: 1 };\n\n        var indexOptions = getWriteOptions(_this);\n\n        indexOptions.background = false;\n\n        _this.files.createIndex(index, indexOptions, function(error) {\n          if (error) {\n            return callback(error);\n          }\n\n          checkChunksIndex(_this, callback);\n        });\n      }\n    });\n  });\n}\n\n/**\n * @ignore\n */\n\nfunction createFilesDoc(_id, length, chunkSize, md5, filename, contentType, aliases, metadata) {\n  var ret = {\n    _id: _id,\n    length: length,\n    chunkSize: chunkSize,\n    uploadDate: new Date(),\n    md5: md5,\n    filename: filename\n  };\n\n  if (contentType) {\n    ret.contentType = contentType;\n  }\n\n  if (aliases) {\n    ret.aliases = aliases;\n  }\n\n  if (metadata) {\n    ret.metadata = metadata;\n  }\n\n  return ret;\n}\n\n/**\n * @ignore\n */\n\nfunction doWrite(_this, chunk, encoding, callback) {\n  if (checkAborted(_this, callback)) {\n    return false;\n  }\n\n  var inputBuf = Buffer.isBuffer(chunk) ? chunk : new Buffer(chunk, encoding);\n\n  _this.length += inputBuf.length;\n\n  // Input is small enough to fit in our buffer\n  if (_this.pos + inputBuf.length < _this.chunkSizeBytes) {\n    inputBuf.copy(_this.bufToStore, _this.pos);\n    _this.pos += inputBuf.length;\n\n    callback && callback();\n\n    // Note that we reverse the typical semantics of write's return value\n    // to be compatible with node's `.pipe()` function.\n    // True means client can keep writing.\n    return true;\n  }\n\n  // Otherwise, buffer is too big for current chunk, so we need to flush\n  // to MongoDB.\n  var inputBufRemaining = inputBuf.length;\n  var spaceRemaining = _this.chunkSizeBytes - _this.pos;\n  var numToCopy = Math.min(spaceRemaining, inputBuf.length);\n  var outstandingRequests = 0;\n  while (inputBufRemaining > 0) {\n    var inputBufPos = inputBuf.length - inputBufRemaining;\n    inputBuf.copy(_this.bufToStore, _this.pos, inputBufPos, inputBufPos + numToCopy);\n    _this.pos += numToCopy;\n    spaceRemaining -= numToCopy;\n    if (spaceRemaining === 0) {\n      _this.md5.update(_this.bufToStore);\n      var doc = createChunkDoc(_this.id, _this.n, _this.bufToStore);\n      ++_this.state.outstandingRequests;\n      ++outstandingRequests;\n\n      if (checkAborted(_this, callback)) {\n        return false;\n      }\n\n      _this.chunks.insert(doc, getWriteOptions(_this), function(error) {\n        if (error) {\n          return __handleError(_this, error);\n        }\n        --_this.state.outstandingRequests;\n        --outstandingRequests;\n\n        if (!outstandingRequests) {\n          _this.emit('drain', doc);\n          callback && callback();\n          checkDone(_this);\n        }\n      });\n\n      spaceRemaining = _this.chunkSizeBytes;\n      _this.pos = 0;\n      ++_this.n;\n    }\n    inputBufRemaining -= numToCopy;\n    numToCopy = Math.min(spaceRemaining, inputBufRemaining);\n  }\n\n  // Note that we reverse the typical semantics of write's return value\n  // to be compatible with node's `.pipe()` function.\n  // False means the client should wait for the 'drain' event.\n  return false;\n}\n\n/**\n * @ignore\n */\n\nfunction getWriteOptions(_this) {\n  var obj = {};\n  if (_this.options.writeConcern) {\n    obj.w = _this.options.writeConcern.w;\n    obj.wtimeout = _this.options.writeConcern.wtimeout;\n    obj.j = _this.options.writeConcern.j;\n  }\n  return obj;\n}\n\n/**\n * @ignore\n */\n\nfunction waitForIndexes(_this, callback) {\n  if (_this.bucket.s.checkedIndexes) {\n    return callback(false);\n  }\n\n  _this.bucket.once('index', function() {\n    callback(true);\n  });\n\n  return true;\n}\n\n/**\n * @ignore\n */\n\nfunction writeRemnant(_this, callback) {\n  // Buffer is empty, so don't bother to insert\n  if (_this.pos === 0) {\n    return checkDone(_this, callback);\n  }\n\n  ++_this.state.outstandingRequests;\n\n  // Create a new buffer to make sure the buffer isn't bigger than it needs\n  // to be.\n  var remnant = new Buffer(_this.pos);\n  _this.bufToStore.copy(remnant, 0, 0, _this.pos);\n  _this.md5.update(remnant);\n  var doc = createChunkDoc(_this.id, _this.n, remnant);\n\n  // If the stream was aborted, do not write remnant\n  if (checkAborted(_this, callback)) {\n    return false;\n  }\n\n  _this.chunks.insert(doc, getWriteOptions(_this), function(error) {\n    if (error) {\n      return __handleError(_this, error);\n    }\n    --_this.state.outstandingRequests;\n    checkDone(_this);\n  });\n}\n\n/**\n * @ignore\n */\n\nfunction checkAborted(_this, callback) {\n  if (_this.state.aborted) {\n    if (typeof callback === 'function') {\n      callback(new Error('this stream has been aborted'));\n    }\n    return true;\n  }\n  return false;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongodb@3.0.4@mongodb/lib/gridfs-stream/upload.js\n// module id = 177\n// module chunks = 0","module.exports = pluralize;\n\n/**\n * Pluralization rules.\n *\n * These rules are applied while processing the argument to `toCollectionName`.\n *\n * @deprecated remove in 4.x gh-1350\n */\n\nexports.pluralization = [\n  [/(m)an$/gi, '$1en'],\n  [/(pe)rson$/gi, '$1ople'],\n  [/(child)$/gi, '$1ren'],\n  [/^(ox)$/gi, '$1en'],\n  [/(ax|test)is$/gi, '$1es'],\n  [/(octop|vir)us$/gi, '$1i'],\n  [/(alias|status)$/gi, '$1es'],\n  [/(bu)s$/gi, '$1ses'],\n  [/(buffal|tomat|potat)o$/gi, '$1oes'],\n  [/([ti])um$/gi, '$1a'],\n  [/sis$/gi, 'ses'],\n  [/(?:([^f])fe|([lr])f)$/gi, '$1$2ves'],\n  [/(hive)$/gi, '$1s'],\n  [/([^aeiouy]|qu)y$/gi, '$1ies'],\n  [/(x|ch|ss|sh)$/gi, '$1es'],\n  [/(matr|vert|ind)ix|ex$/gi, '$1ices'],\n  [/([m|l])ouse$/gi, '$1ice'],\n  [/(kn|w|l)ife$/gi, '$1ives'],\n  [/(quiz)$/gi, '$1zes'],\n  [/s$/gi, 's'],\n  [/([^a-z])$/, '$1'],\n  [/$/gi, 's']\n];\nvar rules = exports.pluralization;\n\n/**\n * Uncountable words.\n *\n * These words are applied while processing the argument to `toCollectionName`.\n * @api public\n */\n\nexports.uncountables = [\n  'advice',\n  'energy',\n  'excretion',\n  'digestion',\n  'cooperation',\n  'health',\n  'justice',\n  'labour',\n  'machinery',\n  'equipment',\n  'information',\n  'pollution',\n  'sewage',\n  'paper',\n  'money',\n  'species',\n  'series',\n  'rain',\n  'rice',\n  'fish',\n  'sheep',\n  'moose',\n  'deer',\n  'news',\n  'expertise',\n  'status',\n  'media'\n];\nvar uncountables = exports.uncountables;\n\n/*!\n * Pluralize function.\n *\n * @author TJ Holowaychuk (extracted from _ext.js_)\n * @param {String} string to pluralize\n * @api private\n */\n\nfunction pluralize(str) {\n  var found;\n  str = str.toLowerCase();\n  if (!~uncountables.indexOf(str)) {\n    found = rules.filter(function(rule) {\n      return str.match(rule[0]);\n    });\n    if (found[0]) {\n      return str.replace(found[0][0], found[0][1]);\n    }\n  }\n  return str;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose-legacy-pluralize@1.0.2@mongoose-legacy-pluralize/index.js\n// module id = 178\n// module chunks = 0","\n/**\n * Export lib/mongoose\n *\n */\n\nmodule.exports = require('./lib/');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/index.js\n// module id = 179\n// module chunks = 0","var map = {\n\t\"./connection\": 122,\n\t\"./drivers/node-mongodb-native/connection\": 194\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 180;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib ^.*\\/connection$\n// module id = 180\n// module chunks = 0","/*!\n * Module dependencies.\n */\n\nvar NodeJSDocument = require('./document');\nvar EventEmitter = require('events').EventEmitter;\nvar MongooseError = require('./error');\nvar Schema = require('./schema');\nvar ObjectId = require('./types/objectid');\nvar ValidationError = MongooseError.ValidationError;\nvar InternalCache = require('./internal');\nvar applyHooks = require('./services/model/applyHooks');\nvar utils = require('./utils');\n\n/**\n * Document constructor.\n *\n * @param {Object} obj the values to set\n * @param {Object} [fields] optional object containing the fields which were selected in the query returning this document and any populated paths data\n * @param {Boolean} [skipId] bool, should we auto create an ObjectId _id\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `init`: Emitted on a document after it has was retrieved from the db and fully hydrated by Mongoose.\n * @event `save`: Emitted when the document is successfully saved\n * @api private\n */\n\nfunction Document(obj, schema, fields, skipId, skipInit) {\n  if (!(this instanceof Document)) {\n    return new Document(obj, schema, fields, skipId, skipInit);\n  }\n\n  if (utils.isObject(schema) && !schema.instanceOfSchema) {\n    schema = new Schema(schema);\n  }\n\n  // When creating EmbeddedDocument, it already has the schema and he doesn't need the _id\n  schema = this.schema || schema;\n\n  // Generate ObjectId if it is missing, but it requires a scheme\n  if (!this.schema && schema.options._id) {\n    obj = obj || {};\n\n    if (obj._id === undefined) {\n      obj._id = new ObjectId();\n    }\n  }\n\n  if (!schema) {\n    throw new MongooseError.MissingSchemaError();\n  }\n\n  this.$__setSchema(schema);\n\n  this.$__ = new InternalCache;\n  this.$__.emitter = new EventEmitter();\n  this.isNew = true;\n  this.errors = undefined;\n\n  if (typeof fields === 'boolean') {\n    this.$__.strictMode = fields;\n    fields = undefined;\n  } else {\n    this.$__.strictMode = this.schema.options && this.schema.options.strict;\n    this.$__.selected = fields;\n  }\n\n  var required = this.schema.requiredPaths();\n  for (var i = 0; i < required.length; ++i) {\n    this.$__.activePaths.require(required[i]);\n  }\n\n  this.$__.emitter.setMaxListeners(0);\n  this._doc = this.$__buildDoc(obj, fields, skipId);\n\n  if (!skipInit && obj) {\n    this.init(obj);\n  }\n\n  applyHooks(this, schema, { decorateDoc: true });\n\n  // apply methods\n  for (var m in schema.methods) {\n    this[m] = schema.methods[m];\n  }\n  // apply statics\n  for (var s in schema.statics) {\n    this[s] = schema.statics[s];\n  }\n}\n\n/*!\n * Inherit from the NodeJS document\n */\n\nDocument.prototype = Object.create(NodeJSDocument.prototype);\nDocument.prototype.constructor = Document;\n\n/*!\n * Browser doc exposes the event emitter API\n */\n\nDocument.$emitter = new EventEmitter();\n\nutils.each(\n  ['on', 'once', 'emit', 'listeners', 'removeListener', 'setMaxListeners',\n    'removeAllListeners', 'addListener'],\n  function(emitterFn) {\n    Document[emitterFn] = function() {\n      return Document.$emitter[emitterFn].apply(Document.$emitter, arguments);\n    };\n  });\n\n/*!\n * Module exports.\n */\n\nDocument.ValidationError = ValidationError;\nmodule.exports = exports = Document;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/browserDocument.js\n// module id = 181\n// module chunks = 0","/*!\n * Module dependencies.\n */\n\nvar Readable = require('stream').Readable;\nvar eachAsync = require('../services/cursor/eachAsync');\nvar util = require('util');\nvar utils = require('../utils');\n\n/**\n * An AggregationCursor is a concurrency primitive for processing aggregation\n * results one document at a time. It is analogous to QueryCursor.\n *\n * An AggregationCursor fulfills the Node.js streams3 API,\n * in addition to several other mechanisms for loading documents from MongoDB\n * one at a time.\n *\n * Creating an AggregationCursor executes the model's pre aggregate hooks,\n * but **not** the model's post aggregate hooks.\n *\n * Unless you're an advanced user, do **not** instantiate this class directly.\n * Use [`Aggregate#cursor()`](/docs/api.html#aggregate_Aggregate-cursor) instead.\n *\n * @param {Aggregate} agg\n * @param {Object} options\n * @inherits Readable\n * @event `cursor`: Emitted when the cursor is created\n * @event `error`: Emitted when an error occurred\n * @event `data`: Emitted when the stream is flowing and the next doc is ready\n * @event `end`: Emitted when the stream is exhausted\n * @api public\n */\n\nfunction AggregationCursor(agg) {\n  Readable.call(this, { objectMode: true });\n\n  this.cursor = null;\n  this.agg = agg;\n  this._transforms = [];\n  var model = agg._model;\n  delete agg.options.cursor.useMongooseAggCursor;\n\n  _init(model, this, agg);\n}\n\nutil.inherits(AggregationCursor, Readable);\n\n/*!\n * ignore\n */\n\nfunction _init(model, c, agg) {\n  if (!model.collection.buffer) {\n    model.hooks.execPre('aggregate', agg, function() {\n      c.cursor = model.collection.aggregate(agg._pipeline, agg.options || {});\n      c.emit('cursor', c.cursor);\n    });\n  } else {\n    model.collection.emitter.once('queue', function() {\n      model.hooks.execPre('aggregate', agg, function() {\n        c.cursor = model.collection.aggregate(agg._pipeline, agg.options || {});\n        c.emit('cursor', c.cursor);\n      });\n    });\n  }\n}\n\n/*!\n * Necessary to satisfy the Readable API\n */\n\nAggregationCursor.prototype._read = function() {\n  var _this = this;\n  _next(this, function(error, doc) {\n    if (error) {\n      return _this.emit('error', error);\n    }\n    if (!doc) {\n      _this.push(null);\n      _this.cursor.close(function(error) {\n        if (error) {\n          return _this.emit('error', error);\n        }\n        setTimeout(function() {\n          _this.emit('close');\n        }, 0);\n      });\n      return;\n    }\n    _this.push(doc);\n  });\n};\n\n/**\n * Registers a transform function which subsequently maps documents retrieved\n * via the streams interface or `.next()`\n *\n * ####Example\n *\n *     // Map documents returned by `data` events\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *        doc.foo = \"bar\";\n *        return doc;\n *       })\n *       on('data', function(doc) { console.log(doc.foo); });\n *\n *     // Or map documents returned by `.next()`\n *     var cursor = Thing.find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *         doc.foo = \"bar\";\n *         return doc;\n *       });\n *     cursor.next(function(error, doc) {\n *       console.log(doc.foo);\n *     });\n *\n * @param {Function} fn\n * @return {QueryCursor}\n * @api public\n * @method map\n */\n\nAggregationCursor.prototype.map = function(fn) {\n  this._transforms.push(fn);\n  return this;\n};\n\n/*!\n * Marks this cursor as errored\n */\n\nAggregationCursor.prototype._markError = function(error) {\n  this._error = error;\n  return this;\n};\n\n/**\n * Marks this cursor as closed. Will stop streaming and subsequent calls to\n * `next()` will error.\n *\n * @param {Function} callback\n * @return {Promise}\n * @api public\n * @method close\n * @emits close\n * @see MongoDB driver cursor#close http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#close\n */\n\nAggregationCursor.prototype.close = function(callback) {\n  return utils.promiseOrCallback(callback, cb => {\n    this.cursor.close(error => {\n      if (error) {\n        cb(error);\n        return this.listeners('error').length > 0 && this.emit('error', error);\n      }\n      this.emit('close');\n      cb(null);\n    });\n  });\n};\n\n/**\n * Get the next document from this cursor. Will return `null` when there are\n * no documents left.\n *\n * @param {Function} callback\n * @return {Promise}\n * @api public\n * @method next\n */\n\nAggregationCursor.prototype.next = function(callback) {\n  return utils.promiseOrCallback(callback, cb => {\n    _next(this, cb);\n  });\n};\n\n/**\n * Execute `fn` for every document in the cursor. If `fn` returns a promise,\n * will wait for the promise to resolve before iterating on to the next one.\n * Returns a promise that resolves when done.\n *\n * @param {Function} fn\n * @param {Object} [options]\n * @param {Number} [options.parallel] the number of promises to execute in parallel. Defaults to 1.\n * @param {Function} [callback] executed when all docs have been processed\n * @return {Promise}\n * @api public\n * @method eachAsync\n */\n\nAggregationCursor.prototype.eachAsync = function(fn, opts, callback) {\n  var _this = this;\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  return eachAsync(function(cb) { return _next(_this, cb); }, fn, opts, callback);\n};\n\n/**\n * Adds a [cursor flag](http://mongodb.github.io/node-mongodb-native/2.2/api/Cursor.html#addCursorFlag).\n * Useful for setting the `noCursorTimeout` and `tailable` flags.\n *\n * @param {String} flag\n * @param {Boolean} value\n * @return {AggregationCursor} this\n * @api public\n * @method addCursorFlag\n */\n\nAggregationCursor.prototype.addCursorFlag = function(flag, value) {\n  var _this = this;\n  _waitForCursor(this, function() {\n    _this.cursor.addCursorFlag(flag, value);\n  });\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _waitForCursor(ctx, cb) {\n  if (ctx.cursor) {\n    return cb();\n  }\n  ctx.once('cursor', function() {\n    cb();\n  });\n}\n\n/*!\n * Get the next doc from the underlying cursor and mongooseify it\n * (populate, etc.)\n */\n\nfunction _next(ctx, cb) {\n  var callback = cb;\n  if (ctx._transforms.length) {\n    callback = function(err, doc) {\n      if (err || doc === null) {\n        return cb(err, doc);\n      }\n      cb(err, ctx._transforms.reduce(function(doc, fn) {\n        return fn(doc);\n      }, doc));\n    };\n  }\n\n  if (ctx._error) {\n    return process.nextTick(function() {\n      callback(ctx._error);\n    });\n  }\n\n  if (ctx.cursor) {\n    return ctx.cursor.next(function(error, doc) {\n      if (error) {\n        return callback(error);\n      }\n      if (!doc) {\n        return callback(null, null);\n      }\n\n      callback(null, doc);\n    });\n  } else {\n    ctx.once('cursor', function() {\n      _next(ctx, cb);\n    });\n  }\n}\n\nmodule.exports = AggregationCursor;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/cursor/AggregationCursor.js\n// module id = 182\n// module chunks = 0","'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst EventEmitter = require('events').EventEmitter;\n\n/*!\n * ignore\n */\n\nclass ChangeStream extends EventEmitter {\n  constructor(model, pipeline, options) {\n    super();\n\n    this.driverChangeStream = null;\n\n    // This wrapper is necessary because of buffering.\n    if (model.collection.buffer) {\n      model.collection.addQueue(() => {\n        this.driverChangeStream = model.collection.watch(pipeline, options);\n        this._bindEvents();\n        this.emit('ready');\n      });\n    } else {\n      this.driverChangeStream = model.collection.watch(pipeline, options);\n      this._bindEvents();\n      this.emit('ready');\n    }\n  }\n\n  _bindEvents() {\n    ['close', 'change', 'end', 'error'].forEach(ev => {\n      this.driverChangeStream.on(ev, data => this.emit(ev, data));\n    });\n  }\n\n  _queue(cb) {\n    this.once('ready', () => cb());\n  }\n}\n\n/*!\n * ignore\n */\n\nmodule.exports = ChangeStream;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/cursor/ChangeStream.js\n// module id = 183\n// module chunks = 0","/*!\n * Module dependencies.\n */\n\nvar Readable = require('stream').Readable;\nvar eachAsync = require('../services/cursor/eachAsync');\nvar helpers = require('../queryhelpers');\nvar util = require('util');\nvar utils = require('../utils');\n\n/**\n * A QueryCursor is a concurrency primitive for processing query results\n * one document at a time. A QueryCursor fulfills the Node.js streams3 API,\n * in addition to several other mechanisms for loading documents from MongoDB\n * one at a time.\n *\n * QueryCursors execute the model's pre find hooks, but **not** the model's\n * post find hooks.\n *\n * Unless you're an advanced user, do **not** instantiate this class directly.\n * Use [`Query#cursor()`](/docs/api.html#query_Query-cursor) instead.\n *\n * @param {Query} query\n * @param {Object} options query options passed to `.find()`\n * @inherits Readable\n * @event `cursor`: Emitted when the cursor is created\n * @event `error`: Emitted when an error occurred\n * @event `data`: Emitted when the stream is flowing and the next doc is ready\n * @event `end`: Emitted when the stream is exhausted\n * @api public\n */\n\nfunction QueryCursor(query, options) {\n  Readable.call(this, { objectMode: true });\n\n  this.cursor = null;\n  this.query = query;\n  this._transforms = options.transform ? [options.transform] : [];\n  var _this = this;\n  var model = query.model;\n  model.hooks.execPre('find', query, function() {\n    model.collection.find(query._conditions, options, function(err, cursor) {\n      if (_this._error) {\n        cursor.close(function() {});\n        _this.listeners('error').length > 0 && _this.emit('error', _this._error);\n      }\n      if (err) {\n        return _this.emit('error', err);\n      }\n      _this.cursor = cursor;\n      _this.emit('cursor', cursor);\n    });\n  });\n}\n\nutil.inherits(QueryCursor, Readable);\n\n/*!\n * Necessary to satisfy the Readable API\n */\n\nQueryCursor.prototype._read = function() {\n  var _this = this;\n  _next(this, function(error, doc) {\n    if (error) {\n      return _this.emit('error', error);\n    }\n    if (!doc) {\n      _this.push(null);\n      _this.cursor.close(function(error) {\n        if (error) {\n          return _this.emit('error', error);\n        }\n        setTimeout(function() {\n          _this.emit('close');\n        }, 0);\n      });\n      return;\n    }\n    _this.push(doc);\n  });\n};\n\n/**\n * Registers a transform function which subsequently maps documents retrieved\n * via the streams interface or `.next()`\n *\n * ####Example\n *\n *     // Map documents returned by `data` events\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *        doc.foo = \"bar\";\n *        return doc;\n *       })\n *       on('data', function(doc) { console.log(doc.foo); });\n *\n *     // Or map documents returned by `.next()`\n *     var cursor = Thing.find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *         doc.foo = \"bar\";\n *         return doc;\n *       });\n *     cursor.next(function(error, doc) {\n *       console.log(doc.foo);\n *     });\n *\n * @param {Function} fn\n * @return {QueryCursor}\n * @api public\n * @method map\n */\n\nQueryCursor.prototype.map = function(fn) {\n  this._transforms.push(fn);\n  return this;\n};\n\n/*!\n * Marks this cursor as errored\n */\n\nQueryCursor.prototype._markError = function(error) {\n  this._error = error;\n  return this;\n};\n\n/**\n * Marks this cursor as closed. Will stop streaming and subsequent calls to\n * `next()` will error.\n *\n * @param {Function} callback\n * @return {Promise}\n * @api public\n * @method close\n * @emits close\n * @see MongoDB driver cursor#close http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#close\n */\n\nQueryCursor.prototype.close = function(callback) {\n  return utils.promiseOrCallback(callback, cb => {\n    this.cursor.close(error => {\n      if (error) {\n        cb(error);\n        return this.listeners('error').length > 0 && this.emit('error', error);\n      }\n      this.emit('close');\n      cb(null);\n    });\n  });\n};\n\n/**\n * Get the next document from this cursor. Will return `null` when there are\n * no documents left.\n *\n * @param {Function} callback\n * @return {Promise}\n * @api public\n * @method next\n */\n\nQueryCursor.prototype.next = function(callback) {\n  return utils.promiseOrCallback(callback, cb => {\n    _next(this, function(error, doc) {\n      if (error) {\n        return cb(error);\n      }\n      cb(null, doc);\n    });\n  });\n};\n\n/**\n * Execute `fn` for every document in the cursor. If `fn` returns a promise,\n * will wait for the promise to resolve before iterating on to the next one.\n * Returns a promise that resolves when done.\n *\n * @param {Function} fn\n * @param {Object} [options]\n * @param {Number} [options.parallel] the number of promises to execute in parallel. Defaults to 1.\n * @param {Function} [callback] executed when all docs have been processed\n * @return {Promise}\n * @api public\n * @method eachAsync\n */\n\nQueryCursor.prototype.eachAsync = function(fn, opts, callback) {\n  var _this = this;\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  return eachAsync(function(cb) { return _next(_this, cb); }, fn, opts, callback);\n};\n\n/**\n * Adds a [cursor flag](http://mongodb.github.io/node-mongodb-native/2.2/api/Cursor.html#addCursorFlag).\n * Useful for setting the `noCursorTimeout` and `tailable` flags.\n *\n * @param {String} flag\n * @param {Boolean} value\n * @return {AggregationCursor} this\n * @api public\n * @method addCursorFlag\n */\n\nQueryCursor.prototype.addCursorFlag = function(flag, value) {\n  var _this = this;\n  _waitForCursor(this, function() {\n    _this.cursor.addCursorFlag(flag, value);\n  });\n  return this;\n};\n\n/*!\n * Get the next doc from the underlying cursor and mongooseify it\n * (populate, etc.)\n */\n\nfunction _next(ctx, cb) {\n  var callback = cb;\n  if (ctx._transforms.length) {\n    callback = function(err, doc) {\n      if (err || doc === null) {\n        return cb(err, doc);\n      }\n      cb(err, ctx._transforms.reduce(function(doc, fn) {\n        return fn(doc);\n      }, doc));\n    };\n  }\n\n  if (ctx._error) {\n    return process.nextTick(function() {\n      callback(ctx._error);\n    });\n  }\n\n  if (ctx.cursor) {\n    return ctx.cursor.next(function(error, doc) {\n      if (error) {\n        return callback(error);\n      }\n      if (!doc) {\n        return callback(null, null);\n      }\n\n      var opts = ctx.query._mongooseOptions;\n      if (!opts.populate) {\n        return opts.lean === true ?\n          callback(null, doc) :\n          _create(ctx, doc, null, callback);\n      }\n\n      var pop = helpers.preparePopulationOptionsMQ(ctx.query,\n        ctx.query._mongooseOptions);\n      pop.__noPromise = true;\n      ctx.query.model.populate(doc, pop, function(err, doc) {\n        if (err) {\n          return callback(err);\n        }\n        return opts.lean === true ?\n          callback(null, doc) :\n          _create(ctx, doc, pop, callback);\n      });\n    });\n  } else {\n    ctx.once('cursor', function() {\n      _next(ctx, cb);\n    });\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _waitForCursor(ctx, cb) {\n  if (ctx.cursor) {\n    return cb();\n  }\n  ctx.once('cursor', function() {\n    cb();\n  });\n}\n\n/*!\n * Convert a raw doc into a full mongoose doc.\n */\n\nfunction _create(ctx, doc, populatedIds, cb) {\n  var instance = helpers.createModel(ctx.query.model, doc, ctx.query._fields);\n  var opts = populatedIds ?\n    { populated: populatedIds } :\n    undefined;\n\n  instance.init(doc, opts, function(err) {\n    if (err) {\n      return cb(err);\n    }\n    cb(null, instance);\n  });\n}\n\nmodule.exports = QueryCursor;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/cursor/QueryCursor.js\n// module id = 184\n// module chunks = 0","function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 185;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/drivers\n// module id = 185\n// module chunks = 0","/*!\n * ignore\n */\n\nmodule.exports = function() {};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/drivers/browser/ReadPreference.js\n// module id = 186\n// module chunks = 0","\n/*!\n * Module dependencies.\n */\n\nvar Binary = require('bson').Binary;\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = Binary;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/drivers/browser/binary.js\n// module id = 187\n// module chunks = 0","/*!\n * ignore\n */\n\nmodule.exports = require('bson').Decimal128;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/drivers/browser/decimal128.js\n// module id = 188\n// module chunks = 0","/*!\n * Module exports.\n */\n\nexports.Binary = require('./binary');\nexports.Decimal128 = require('./decimal128');\nexports.ObjectId = require('./objectid');\nexports.ReadPreference = require('./ReadPreference');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/drivers/browser/index.js\n// module id = 189\n// module chunks = 0","\n/*!\n * [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) ObjectId\n * @constructor NodeMongoDbObjectId\n * @see ObjectId\n */\n\nvar ObjectId = require('bson').ObjectID;\n\n/*!\n * ignore\n */\n\nmodule.exports = exports = ObjectId;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/drivers/browser/objectid.js\n// module id = 190\n// module chunks = 0","/*!\n * Module dependencies.\n */\n\nvar mongodb = require('mongodb');\nvar ReadPref = mongodb.ReadPreference;\n\n/*!\n * Converts arguments to ReadPrefs the driver\n * can understand.\n *\n * @param {String|Array} pref\n * @param {Array} [tags]\n */\n\nmodule.exports = function readPref(pref, tags) {\n  if (Array.isArray(pref)) {\n    tags = pref[1];\n    pref = pref[0];\n  }\n\n  if (pref instanceof ReadPref) {\n    return pref;\n  }\n\n  switch (pref) {\n    case 'p':\n      pref = 'primary';\n      break;\n    case 'pp':\n      pref = 'primaryPreferred';\n      break;\n    case 's':\n      pref = 'secondary';\n      break;\n    case 'sp':\n      pref = 'secondaryPreferred';\n      break;\n    case 'n':\n      pref = 'nearest';\n      break;\n  }\n\n  return new ReadPref(pref, tags);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/drivers/node-mongodb-native/ReadPreference.js\n// module id = 191\n// module chunks = 0","\n/*!\n * Module dependencies.\n */\n\nvar Binary = require('mongodb').Binary;\n\nmodule.exports = exports = Binary;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/drivers/node-mongodb-native/binary.js\n// module id = 192\n// module chunks = 0","/*!\n * Module dependencies.\n */\n\nvar MongooseCollection = require('../../collection');\nvar Collection = require('mongodb').Collection;\nvar utils = require('../../utils');\n\n/**\n * A [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) collection implementation.\n *\n * All methods methods from the [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) driver are copied and wrapped in queue management.\n *\n * @inherits Collection\n * @api private\n */\n\nfunction NativeCollection() {\n  this.collection = null;\n  MongooseCollection.apply(this, arguments);\n}\n\n/*!\n * Inherit from abstract Collection.\n */\n\nNativeCollection.prototype.__proto__ = MongooseCollection.prototype;\n\n/**\n * Called when the connection opens.\n *\n * @api private\n */\n\nNativeCollection.prototype.onOpen = function() {\n  var _this = this;\n\n  // always get a new collection in case the user changed host:port\n  // of parent db instance when re-opening the connection.\n\n  if (!_this.opts.capped.size) {\n    // non-capped\n    callback(null, _this.conn.db.collection(_this.name));\n    return _this.collection;\n  }\n\n  // capped\n  return _this.conn.db.collection(_this.name, function(err, c) {\n    if (err) return callback(err);\n\n    // discover if this collection exists and if it is capped\n    _this.conn.db.listCollections({name: _this.name}).toArray(function(err, docs) {\n      if (err) {\n        return callback(err);\n      }\n      var doc = docs[0];\n      var exists = !!doc;\n\n      if (exists) {\n        if (doc.options && doc.options.capped) {\n          callback(null, c);\n        } else {\n          var msg = 'A non-capped collection exists with the name: ' + _this.name + '\\n\\n'\n              + ' To use this collection as a capped collection, please '\n              + 'first convert it.\\n'\n              + ' http://www.mongodb.org/display/DOCS/Capped+Collections#CappedCollections-Convertingacollectiontocapped';\n          err = new Error(msg);\n          callback(err);\n        }\n      } else {\n        // create\n        var opts = utils.clone(_this.opts.capped);\n        opts.capped = true;\n        _this.conn.db.createCollection(_this.name, opts, callback);\n      }\n    });\n  });\n\n  function callback(err, collection) {\n    if (err) {\n      // likely a strict mode error\n      _this.conn.emit('error', err);\n    } else {\n      _this.collection = collection;\n      MongooseCollection.prototype.onOpen.call(_this);\n    }\n  }\n};\n\n/**\n * Called when the connection closes\n *\n * @api private\n */\n\nNativeCollection.prototype.onClose = function(force) {\n  MongooseCollection.prototype.onClose.call(this, force);\n};\n\n/*!\n * ignore\n */\n\nconst syncCollectionMethods = { watch: true };\n\n/*!\n * Copy the collection methods and make them subject to queues\n */\n\nfunction iter(i) {\n  NativeCollection.prototype[i] = function() {\n    // If user force closed, queueing will hang forever. See #5664\n    if (this.opts.$wasForceClosed) {\n      return this.conn.db.collection(this.name)[i].apply(collection, args);\n    }\n    if (this.buffer) {\n      if (syncCollectionMethods[i]) {\n        throw new Error('Collection method ' + i + ' is synchronous');\n      }\n      this.addQueue(i, arguments);\n      return;\n    }\n\n    var collection = this.collection;\n    var args = arguments;\n    var _this = this;\n    var debug = _this.conn.base.options.debug;\n\n    if (debug) {\n      if (typeof debug === 'function') {\n        debug.apply(_this,\n          [_this.name, i].concat(utils.args(args, 0, args.length - 1)));\n      } else {\n        this.$print(_this.name, i, args);\n      }\n    }\n\n    try {\n      return collection[i].apply(collection, args);\n    } catch (error) {\n      // Collection operation may throw because of max bson size, catch it here\n      // See gh-3906\n      if (args.length > 0 &&\n          typeof args[args.length - 1] === 'function') {\n        args[args.length - 1](error);\n      } else {\n        throw error;\n      }\n    }\n  };\n}\n\nfor (var i in Collection.prototype) {\n  // Janky hack to work around gh-3005 until we can get rid of the mongoose\n  // collection abstraction\n  try {\n    if (typeof Collection.prototype[i] !== 'function') {\n      continue;\n    }\n  } catch (e) {\n    continue;\n  }\n\n  iter(i);\n}\n\n/**\n * Debug print helper\n *\n * @api public\n * @method $print\n */\n\nNativeCollection.prototype.$print = function(name, i, args) {\n  var moduleName = '\\x1B[0;36mMongoose:\\x1B[0m ';\n  var functionCall = [name, i].join('.');\n  var _args = [];\n  for (var j = args.length - 1; j >= 0; --j) {\n    if (this.$format(args[j]) || _args.length) {\n      _args.unshift(this.$format(args[j]));\n    }\n  }\n  var params = '(' + _args.join(', ') + ')';\n\n  console.info(moduleName + functionCall + params);\n};\n\n/**\n * Formatter for debug print args\n *\n * @api public\n * @method $format\n */\n\nNativeCollection.prototype.$format = function(arg) {\n  var type = typeof arg;\n  if (type === 'function' || type === 'undefined') return '';\n  return format(arg);\n};\n\n/*!\n * Debug print helper\n */\n\nfunction map(o) {\n  return format(o, true);\n}\nfunction formatObjectId(x, key) {\n  var representation = 'ObjectId(\"' + x[key].toHexString() + '\")';\n  x[key] = {inspect: function() { return representation; }};\n}\nfunction formatDate(x, key) {\n  var representation = 'new Date(\"' + x[key].toUTCString() + '\")';\n  x[key] = {inspect: function() { return representation; }};\n}\nfunction format(obj, sub) {\n  if (obj && typeof obj.toBSON === 'function') {\n    obj = obj.toBSON();\n  }\n  var x = utils.clone(obj, {transform: false});\n  var representation;\n\n  if (x != null) {\n    if (x.constructor.name === 'Binary') {\n      x = 'BinData(' + x.sub_type + ', \"' + x.toString('base64') + '\")';\n    } else if (x.constructor.name === 'ObjectID') {\n      representation = 'ObjectId(\"' + x.toHexString() + '\")';\n      x = {inspect: function() { return representation; }};\n    } else if (x.constructor.name === 'Date') {\n      representation = 'new Date(\"' + x.toUTCString() + '\")';\n      x = {inspect: function() { return representation; }};\n    } else if (x.constructor.name === 'Object') {\n      var keys = Object.keys(x);\n      var numKeys = keys.length;\n      var key;\n      for (var i = 0; i < numKeys; ++i) {\n        key = keys[i];\n        if (x[key]) {\n          if (typeof x[key].toBSON === 'function') {\n            x[key] = x[key].toBSON();\n          }\n          if (x[key].constructor.name === 'Binary') {\n            x[key] = 'BinData(' + x[key].sub_type + ', \"' +\n              x[key].buffer.toString('base64') + '\")';\n          } else if (x[key].constructor.name === 'Object') {\n            x[key] = format(x[key], true);\n          } else if (x[key].constructor.name === 'ObjectID') {\n            formatObjectId(x, key);\n          } else if (x[key].constructor.name === 'Date') {\n            formatDate(x, key);\n          } else if (Array.isArray(x[key])) {\n            x[key] = x[key].map(map);\n          }\n        }\n      }\n    }\n    if (sub) return x;\n  }\n\n  return require('util')\n    .inspect(x, false, 10, true)\n    .replace(/\\n/g, '')\n    .replace(/\\s{2,}/g, ' ');\n}\n\n/**\n * Retreives information about this collections indexes.\n *\n * @param {Function} callback\n * @method getIndexes\n * @api public\n */\n\nNativeCollection.prototype.getIndexes = NativeCollection.prototype.indexInformation;\n\n/*!\n * Module exports.\n */\n\nmodule.exports = NativeCollection;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/drivers/node-mongodb-native/collection.js\n// module id = 193\n// module chunks = 0","/*!\n * Module dependencies.\n */\n\nvar MongooseConnection = require('../../connection');\nvar STATES = require('../../connectionstate');\n\n/**\n * A [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) connection implementation.\n *\n * @inherits Connection\n * @api private\n */\n\nfunction NativeConnection() {\n  MongooseConnection.apply(this, arguments);\n  this._listening = false;\n}\n\n/**\n * Expose the possible connection states.\n * @api public\n */\n\nNativeConnection.STATES = STATES;\n\n/*!\n * Inherits from Connection.\n */\n\nNativeConnection.prototype.__proto__ = MongooseConnection.prototype;\n\n/**\n * Switches to a different database using the same connection pool.\n *\n * Returns a new connection object, with the new db.\n *\n * @param {String} name The database name\n * @return {Connection} New Connection Object\n * @api public\n */\n\nNativeConnection.prototype.useDb = function(name, options) {\n  // Return immediately if cached\n  if (options && options.useCache && this.relatedDbs[name]) return this.relatedDbs[name];\n\n  // we have to manually copy all of the attributes...\n  var newConn = new this.constructor();\n  newConn.name = name;\n  newConn.base = this.base;\n  newConn.collections = {};\n  newConn.models = {};\n  newConn.replica = this.replica;\n  newConn.hosts = this.hosts;\n  newConn.host = this.host;\n  newConn.port = this.port;\n  newConn.user = this.user;\n  newConn.pass = this.pass;\n  newConn.options = this.options;\n  newConn._readyState = this._readyState;\n  newConn._closeCalled = this._closeCalled;\n  newConn._hasOpened = this._hasOpened;\n  newConn._listening = false;\n\n  // First, when we create another db object, we are not guaranteed to have a\n  // db object to work with. So, in the case where we have a db object and it\n  // is connected, we can just proceed with setting everything up. However, if\n  // we do not have a db or the state is not connected, then we need to wait on\n  // the 'open' event of the connection before doing the rest of the setup\n  // the 'connected' event is the first time we'll have access to the db object\n\n  var _this = this;\n\n  if (this.db && this._readyState === STATES.connected) {\n    wireup();\n  } else {\n    this.once('connected', wireup);\n  }\n\n  function wireup() {\n    newConn.client = _this.client;\n    newConn.db = _this.client.db(name);\n    newConn.onOpen();\n    // setup the events appropriately\n    listen(newConn);\n  }\n\n  newConn.name = name;\n\n  // push onto the otherDbs stack, this is used when state changes\n  this.otherDbs.push(newConn);\n  newConn.otherDbs.push(this);\n\n  // push onto the relatedDbs cache, this is used when state changes\n  if (options && options.useCache) {\n    this.relatedDbs[newConn.name] = newConn;\n    newConn.relatedDbs = this.relatedDbs;\n  }\n\n  return newConn;\n};\n\n/*!\n * Register listeners for important events and bubble appropriately.\n */\n\nfunction listen(conn) {\n  if (conn.db._listening) {\n    return;\n  }\n  conn.db._listening = true;\n\n  conn.db.on('close', function(force) {\n    if (conn._closeCalled) return;\n\n    // the driver never emits an `open` event. auto_reconnect still\n    // emits a `close` event but since we never get another\n    // `open` we can't emit close\n    if (conn.db.serverConfig.autoReconnect) {\n      conn.readyState = STATES.disconnected;\n      conn.emit('close');\n      return;\n    }\n    conn.onClose(force);\n  });\n  conn.db.on('error', function(err) {\n    conn.emit('error', err);\n  });\n  conn.db.on('reconnect', function() {\n    conn.readyState = STATES.connected;\n    conn.emit('reconnect');\n    conn.emit('reconnected');\n    conn.onOpen();\n  });\n  conn.db.on('timeout', function(err) {\n    conn.emit('timeout', err);\n  });\n  conn.db.on('open', function(err, db) {\n    if (STATES.disconnected === conn.readyState && db && db.databaseName) {\n      conn.readyState = STATES.connected;\n      conn.emit('reconnect');\n      conn.emit('reconnected');\n    }\n  });\n  conn.db.on('parseError', function(err) {\n    conn.emit('parseError', err);\n  });\n}\n\n/**\n * Closes the connection\n *\n * @param {Boolean} [force]\n * @param {Function} [fn]\n * @return {Connection} this\n * @api private\n */\n\nNativeConnection.prototype.doClose = function(force, fn) {\n  this.client.close(force, fn);\n  return this;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = NativeConnection;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/drivers/node-mongodb-native/connection.js\n// module id = 194\n// module chunks = 0","/*!\n * ignore\n */\n\nmodule.exports = require('mongodb').Decimal128;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/drivers/node-mongodb-native/decimal128.js\n// module id = 195\n// module chunks = 0","/*!\n * Module exports.\n */\n\nexports.Binary = require('./binary');\nexports.Decimal128 = require('./decimal128');\nexports.ObjectId = require('./objectid');\nexports.ReadPreference = require('./ReadPreference');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/drivers/node-mongodb-native/index.js\n// module id = 196\n// module chunks = 0","\n/*!\n * [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) ObjectId\n * @constructor NodeMongoDbObjectId\n * @see ObjectId\n */\n\nvar ObjectId = require('mongodb').ObjectId;\n\n/*!\n * ignore\n */\n\nmodule.exports = exports = ObjectId;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/drivers/node-mongodb-native/objectid.js\n// module id = 197\n// module chunks = 0","\n/*!\n * Module dependencies.\n */\n\nvar MongooseError = require('./');\n\n/*!\n * DivergentArrayError constructor.\n *\n * @inherits MongooseError\n */\n\nfunction DivergentArrayError(paths) {\n  var msg = 'For your own good, using `document.save()` to update an array '\n          + 'which was selected using an $elemMatch projection OR '\n          + 'populated using skip, limit, query conditions, or exclusion of '\n          + 'the _id field when the operation results in a $pop or $set of '\n          + 'the entire array is not supported. The following '\n          + 'path(s) would have been modified unsafely:\\n'\n          + '  ' + paths.join('\\n  ') + '\\n'\n          + 'Use Model.update() to update these arrays instead.';\n  // TODO write up a docs page (FAQ) and link to it\n\n  MongooseError.call(this, msg);\n  this.name = 'DivergentArrayError';\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this);\n  } else {\n    this.stack = new Error().stack;\n  }\n}\n\n/*!\n * Inherits from MongooseError.\n */\n\nDivergentArrayError.prototype = Object.create(MongooseError.prototype);\nDivergentArrayError.prototype.constructor = MongooseError;\n\n\n/*!\n * exports\n */\n\nmodule.exports = DivergentArrayError;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/error/divergentArray.js\n// module id = 198\n// module chunks = 0","\n/**\n * The default built-in validator error messages. These may be customized.\n *\n *     // customize within each schema or globally like so\n *     var mongoose = require('mongoose');\n *     mongoose.Error.messages.String.enum  = \"Your custom message for {PATH}.\";\n *\n * As you might have noticed, error messages support basic templating\n *\n * - `{PATH}` is replaced with the invalid document path\n * - `{VALUE}` is replaced with the invalid value\n * - `{TYPE}` is replaced with the validator type such as \"regexp\", \"min\", or \"user defined\"\n * - `{MIN}` is replaced with the declared min value for the Number.min validator\n * - `{MAX}` is replaced with the declared max value for the Number.max validator\n *\n * Click the \"show code\" link below to see all defaults.\n *\n * @static messages\n * @receiver MongooseError\n * @api public\n */\n\nvar msg = module.exports = exports = {};\n\nmsg.DocumentNotFoundError = null;\n\nmsg.general = {};\nmsg.general.default = 'Validator failed for path `{PATH}` with value `{VALUE}`';\nmsg.general.required = 'Path `{PATH}` is required.';\n\nmsg.Number = {};\nmsg.Number.min = 'Path `{PATH}` ({VALUE}) is less than minimum allowed value ({MIN}).';\nmsg.Number.max = 'Path `{PATH}` ({VALUE}) is more than maximum allowed value ({MAX}).';\n\nmsg.Date = {};\nmsg.Date.min = 'Path `{PATH}` ({VALUE}) is before minimum allowed value ({MIN}).';\nmsg.Date.max = 'Path `{PATH}` ({VALUE}) is after maximum allowed value ({MAX}).';\n\nmsg.String = {};\nmsg.String.enum = '`{VALUE}` is not a valid enum value for path `{PATH}`.';\nmsg.String.match = 'Path `{PATH}` is invalid ({VALUE}).';\nmsg.String.minlength = 'Path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).';\nmsg.String.maxlength = 'Path `{PATH}` (`{VALUE}`) is longer than the maximum allowed length ({MAXLENGTH}).';\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/error/messages.js\n// module id = 199\n// module chunks = 0","\n/*!\n * Module dependencies.\n */\n\nvar MongooseError = require('./');\n\n/*!\n * MissingSchema Error constructor.\n *\n * @inherits MongooseError\n */\n\nfunction MissingSchemaError(name) {\n  var msg = 'Schema hasn\\'t been registered for model \"' + name + '\".\\n'\n          + 'Use mongoose.model(name, schema)';\n  MongooseError.call(this, msg);\n  this.name = 'MissingSchemaError';\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this);\n  } else {\n    this.stack = new Error().stack;\n  }\n}\n\n/*!\n * Inherits from MongooseError.\n */\n\nMissingSchemaError.prototype = Object.create(MongooseError.prototype);\nMissingSchemaError.prototype.constructor = MongooseError;\n\n/*!\n * exports\n */\n\nmodule.exports = MissingSchemaError;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/error/missingSchema.js\n// module id = 200\n// module chunks = 0","'use strict';\n\n/*!\n * Module dependencies.\n */\n\nvar MongooseError = require('./');\nvar util = require('util');\n\n/*!\n * OverwriteModel Error constructor.\n *\n * @inherits MongooseError\n */\n\nfunction DocumentNotFoundError(query) {\n  var msg;\n  var messages = MongooseError.messages;\n  if (messages.DocumentNotFoundError != null) {\n    msg = typeof messages.DocumentNotFoundError === 'function' ?\n      messages.DocumentNotFoundError(query) :\n      messages.DocumentNotFoundError;\n  } else {\n    msg = 'No document found for query \"' + util.inspect(query) + '\"';\n  }\n\n  MongooseError.call(this, msg);\n\n  this.name = 'DocumentNotFoundError';\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this);\n  } else {\n    this.stack = new Error().stack;\n  }\n\n  this.query = query;\n}\n\n/*!\n * Inherits from MongooseError.\n */\n\nDocumentNotFoundError.prototype = Object.create(MongooseError.prototype);\nDocumentNotFoundError.prototype.constructor = MongooseError;\n\n/*!\n * exports\n */\n\nmodule.exports = DocumentNotFoundError;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/error/notFound.js\n// module id = 201\n// module chunks = 0","/*!\n * Module dependencies.\n */\n\nvar MongooseError = require('./');\n\n/**\n * Strict mode error constructor\n *\n * @param {String} type\n * @param {String} value\n * @inherits MongooseError\n * @api private\n */\n\nfunction ObjectExpectedError(path, val) {\n  MongooseError.call(this, 'Tried to set nested object field `' + path +\n    '` to primitive value `' + val + '` and strict mode is set to throw.');\n  this.name = 'ObjectExpectedError';\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this);\n  } else {\n    this.stack = new Error().stack;\n  }\n  this.path = path;\n}\n\n/*!\n * Inherits from MongooseError.\n */\n\nObjectExpectedError.prototype = Object.create(MongooseError.prototype);\nObjectExpectedError.prototype.constructor = MongooseError;\n\nmodule.exports = ObjectExpectedError;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/error/objectExpected.js\n// module id = 202\n// module chunks = 0","\n/*!\n * Module dependencies.\n */\n\nvar MongooseError = require('./');\n\n/*!\n * OverwriteModel Error constructor.\n *\n * @inherits MongooseError\n */\n\nfunction OverwriteModelError(name) {\n  MongooseError.call(this, 'Cannot overwrite `' + name + '` model once compiled.');\n  this.name = 'OverwriteModelError';\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this);\n  } else {\n    this.stack = new Error().stack;\n  }\n}\n\n/*!\n * Inherits from MongooseError.\n */\n\nOverwriteModelError.prototype = Object.create(MongooseError.prototype);\nOverwriteModelError.prototype.constructor = MongooseError;\n\n/*!\n * exports\n */\n\nmodule.exports = OverwriteModelError;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/error/overwriteModel.js\n// module id = 203\n// module chunks = 0","/*!\n * Module dependencies.\n */\n\nvar MongooseError = require('./');\n\n/**\n * Schema validator error\n *\n * @param {Object} properties\n * @inherits MongooseError\n * @api private\n */\n\nfunction ValidatorError(properties) {\n  var msg = properties.message;\n  if (!msg) {\n    msg = MongooseError.messages.general.default;\n  }\n\n  var message = this.formatMessage(msg, properties);\n  MongooseError.call(this, message);\n  this.name = 'ValidatorError';\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this);\n  } else {\n    this.stack = new Error().stack;\n  }\n  this.properties = properties;\n  this.kind = properties.type;\n  this.path = properties.path;\n  this.value = properties.value;\n  this.reason = properties.reason;\n}\n\n/*!\n * Inherits from MongooseError\n */\n\nValidatorError.prototype = Object.create(MongooseError.prototype);\nValidatorError.prototype.constructor = MongooseError;\n\n/*!\n * The object used to define this validator. Not enumerable to hide\n * it from `require('util').inspect()` output re: gh-3925\n */\n\nObject.defineProperty(ValidatorError.prototype, 'properties', {\n  enumerable: false,\n  writable: true,\n  value: null\n});\n\n/*!\n * Formats error messages\n */\n\nValidatorError.prototype.formatMessage = function(msg, properties) {\n  var propertyNames = Object.keys(properties);\n  for (var i = 0; i < propertyNames.length; ++i) {\n    var propertyName = propertyNames[i];\n    if (propertyName === 'message') {\n      continue;\n    }\n    msg = msg.replace('{' + propertyName.toUpperCase() + '}', properties[propertyName]);\n  }\n  return msg;\n};\n\n/*!\n * toString helper\n */\n\nValidatorError.prototype.toString = function() {\n  return this.message;\n};\n\n/*!\n * exports\n */\n\nmodule.exports = ValidatorError;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/error/validator.js\n// module id = 204\n// module chunks = 0","'use strict';\n\n/*!\n * Module dependencies.\n */\n\nvar MongooseError = require('./');\n\n/**\n * Version Error constructor.\n *\n * @inherits MongooseError\n * @api private\n */\n\nfunction VersionError(doc) {\n  MongooseError.call(this, 'No matching document found for id \"' + doc._id +\n    '\"');\n  this.name = 'VersionError';\n}\n\n/*!\n * Inherits from MongooseError.\n */\n\nVersionError.prototype = Object.create(MongooseError.prototype);\nVersionError.prototype.constructor = MongooseError;\n\n/*!\n * exports\n */\n\nmodule.exports = VersionError;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/error/version.js\n// module id = 205\n// module chunks = 0","'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst Schema = require('./schema');\nconst SchemaType = require('./schematype');\nconst VirtualType = require('./virtualtype');\nconst STATES = require('./connectionstate');\nconst Types = require('./types');\nconst Query = require('./query');\nconst Model = require('./model');\nconst Document = require('./document');\nconst legacyPluralize = require('mongoose-legacy-pluralize');\nconst utils = require('./utils');\nconst pkg = require('../package.json');\n\nconst removeSubdocs = require('./plugins/removeSubdocs');\nconst saveSubdocs = require('./plugins/saveSubdocs');\nconst validateBeforeSave = require('./plugins/validateBeforeSave');\n\nconst Aggregate = require('./aggregate');\nconst PromiseProvider = require('./promise_provider');\nconst shardingPlugin = require('./plugins/sharding');\n\n/**\n * Mongoose constructor.\n *\n * The exports object of the `mongoose` module is an instance of this class.\n * Most apps will only use this one instance.\n *\n * @api public\n */\n\nfunction Mongoose() {\n  this.connections = [];\n  this.models = {};\n  this.modelSchemas = {};\n  // default global options\n  this.options = {\n    pluralization: true\n  };\n  var conn = this.createConnection(); // default connection\n  conn.models = this.models;\n\n  this._pluralize = legacyPluralize;\n\n  Object.defineProperty(this, 'plugins', {\n    configurable: false,\n    enumerable: true,\n    writable: false,\n    value: [\n      [saveSubdocs, { deduplicate: true }],\n      [validateBeforeSave, { deduplicate: true }],\n      [shardingPlugin, { deduplicate: true }],\n      [removeSubdocs, { deduplicate: true }]\n    ]\n  });\n}\n\n/**\n * Expose connection states for user-land\n *\n */\nMongoose.prototype.STATES = STATES;\n\n/**\n * Sets mongoose options\n *\n * ####Example:\n *\n *     mongoose.set('test', value) // sets the 'test' option to `value`\n *\n *     mongoose.set('debug', true) // enable logging collection methods + arguments to the console\n *\n *     mongoose.set('debug', function(collectionName, methodName, arg1, arg2...) {}); // use custom function to log collection methods + arguments\n *\n * Currently supported options are:\n * - 'debug': prints the operations mongoose sends to MongoDB to the console\n * - 'bufferCommands': enable/disable mongoose's buffering mechanism for all connections and models\n * - 'useFindAndModify': true by default. Set to `false` to make `findOneAndUpdate()` and `findOneAndRemove()` use native `findOneAndUpdate()` rather than `findAndModify()`.\n *\n * @param {String} key\n * @param {String|Function|Boolean} value\n * @api public\n */\n\nMongoose.prototype.set = function(key, value) {\n  if (arguments.length === 1) {\n    return this.options[key];\n  }\n\n  this.options[key] = value;\n  return this;\n};\n\n/**\n * Gets mongoose options\n *\n * ####Example:\n *\n *     mongoose.get('test') // returns the 'test' value\n *\n * @param {String} key\n * @method get\n * @api public\n */\n\nMongoose.prototype.get = Mongoose.prototype.set;\n\n/**\n * Creates a Connection instance.\n *\n * Each `connection` instance maps to a single database. This method is helpful when mangaging multiple db connections.\n *\n * If arguments are passed, they are proxied to either [Connection#open](#connection_Connection-open) or [Connection#openSet](#connection_Connection-openSet) appropriately. This means we can pass `db`, `server`, and `replset` options to the driver. _Note that the `safe` option specified in your schema will overwrite the `safe` db option specified here unless you set your schemas `safe` option to `undefined`. See [this](/docs/guide.html#safe) for more information._\n *\n * _Options passed take precedence over options included in connection strings._\n *\n * ####Example:\n *\n *     // with mongodb:// URI\n *     db = mongoose.createConnection('mongodb://user:pass@localhost:port/database');\n *\n *     // and options\n *     var opts = { db: { native_parser: true }}\n *     db = mongoose.createConnection('mongodb://user:pass@localhost:port/database', opts);\n *\n *     // replica sets\n *     db = mongoose.createConnection('mongodb://user:pass@localhost:port,anotherhost:port,yetanother:port/database');\n *\n *     // and options\n *     var opts = { replset: { strategy: 'ping', rs_name: 'testSet' }}\n *     db = mongoose.createConnection('mongodb://user:pass@localhost:port,anotherhost:port,yetanother:port/database', opts);\n *\n *     // with [host, database_name[, port] signature\n *     db = mongoose.createConnection('localhost', 'database', port)\n *\n *     // and options\n *     var opts = { server: { auto_reconnect: false }, user: 'username', pass: 'mypassword' }\n *     db = mongoose.createConnection('localhost', 'database', port, opts)\n *\n *     // initialize now, connect later\n *     db = mongoose.createConnection();\n *     db.open('localhost', 'database', port, [opts]);\n *\n * @param {String} [uri] a mongodb:// URI\n * @param {Object} [options] passed down to the [MongoDB driver's `connect()` function](http://mongodb.github.io/node-mongodb-native/3.0/api/MongoClient.html), except for 4 mongoose-specific options explained below.\n * @param {String} [options.user] username for authentication, equivalent to `options.auth.user`. Maintained for backwards compatibility.\n * @param {String} [options.pass] password for authentication, equivalent to `options.auth.password`. Maintained for backwards compatibility.\n * @param {Boolean} [options.autoIndex=true] Mongoose-specific option. Set to false to disable automatic index creation for all models associated with this connection.\n * @param {Boolean} [options.bufferCommands=true] Mongoose specific option. Set to false to [disable buffering](http://mongoosejs.com/docs/faq.html#callback_never_executes) on all models associated with this connection.\n * @return {Connection} the created Connection object. Connections are thenable, so you can do `await mongoose.createConnection()`\n * @api public\n */\n\nMongoose.prototype.createConnection = function(uri, options, callback) {\n  var conn = new Connection(this);\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n  this.connections.push(conn);\n\n  if (arguments.length > 0) {\n    return conn.openUri(uri, options, callback);\n  }\n\n  return conn;\n};\n\n/**\n * Opens the default mongoose connection.\n *\n * ####Example:\n *\n *     mongoose.connect('mongodb://user:pass@localhost:port/database');\n *\n *     // replica sets\n *     var uri = 'mongodb://user:pass@localhost:port,anotherhost:port,yetanother:port/mydatabase';\n *     mongoose.connect(uri);\n *\n *     // with options\n *     mongoose.connect(uri, options);\n *\n *     // optional callback that gets fired when initial connection completed\n *     var uri = 'mongodb://nonexistent.domain:27000';\n *     mongoose.connect(uri, function(error) {\n *       // if error is truthy, the initial connection failed.\n *     })\n *\n * @param {String} uri(s)\n * @param {Object} [options] passed down to the [MongoDB driver's `connect()` function](http://mongodb.github.io/node-mongodb-native/3.0/api/MongoClient.html), except for 4 mongoose-specific options explained below.\n * @param {String} [options.user] username for authentication, equivalent to `options.auth.user`. Maintained for backwards compatibility.\n * @param {String} [options.pass] password for authentication, equivalent to `options.auth.password`. Maintained for backwards compatibility.\n * @param {Boolean} [options.autoIndex=true] Mongoose-specific option. Set to false to disable automatic index creation for all models associated with this connection.\n * @param {Boolean} [options.bufferCommands=true] Mongoose specific option. Set to false to [disable buffering](http://mongoosejs.com/docs/faq.html#callback_never_executes) on all models associated with this connection.\n * @param {Function} [callback]\n * @see Mongoose#createConnection #index_Mongoose-createConnection\n * @api public\n * @return {Promise} resolves to `this` if connection succeeded\n */\n\nMongoose.prototype.connect = function() {\n  var conn = this.connection;\n  return conn.openUri(arguments[0], arguments[1], arguments[2]).then(() => this);\n};\n\n/**\n * Runs `.close()` on all connections in parallel.\n *\n * @param {Function} [callback] called after all connection close, or when first error occurred.\n * @return {Promise} resolves when all connections are closed, or rejects with the first error that occurred.\n * @api public\n */\n\nMongoose.prototype.disconnect = function(callback) {\n  return utils.promiseOrCallback(callback, cb => {\n    var remaining = this.connections.length;\n    if (remaining <= 0) {\n      return cb(null);\n    }\n    this.connections.forEach(conn => {\n      conn.close(function(error) {\n        if (error) {\n          return cb(error);\n        }\n        if (!--remaining) {\n          cb(null);\n        }\n      });\n    });\n  });\n};\n\n/**\n * Getter/setter around function for pluralizing collection names.\n *\n * @param {Function|null} [fn] overwrites the function used to pluralize connection names\n * @return {Function|null} the current function used to pluralize connection names, `undefined` by default.\n * @api public\n */\n\nMongoose.prototype.pluralize = function(fn) {\n  if (arguments.length > 0) {\n    this._pluralize = fn;\n  }\n  return this._pluralize;\n};\n\n/**\n * Defines a model or retrieves it.\n *\n * Models defined on the `mongoose` instance are available to all connection created by the same `mongoose` instance.\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *\n *     // define an Actor model with this mongoose instance\n *     mongoose.model('Actor', new Schema({ name: String }));\n *\n *     // create a new connection\n *     var conn = mongoose.createConnection(..);\n *\n *     // retrieve the Actor model\n *     var Actor = conn.model('Actor');\n *\n * _When no `collection` argument is passed, Mongoose uses the model name. If you don't like this behavior, either pass a collection name, use `mongoose.pluralize()`, or set your schemas collection name option._\n *\n * ####Example:\n *\n *     var schema = new Schema({ name: String }, { collection: 'actor' });\n *\n *     // or\n *\n *     schema.set('collection', 'actor');\n *\n *     // or\n *\n *     var collectionName = 'actor'\n *     var M = mongoose.model('Actor', schema, collectionName)\n *\n * @param {String|Function} name model name or class extending Model\n * @param {Schema} [schema]\n * @param {String} [collection] name (optional, inferred from model name)\n * @param {Boolean} [skipInit] whether to skip initialization (defaults to false)\n * @return {Model}\n * @api public\n */\n\nMongoose.prototype.model = function(name, schema, collection, skipInit) {\n  var model;\n  if (typeof name === 'function') {\n    model = name;\n    name = model.name;\n    if (!(model.prototype instanceof Model)) {\n      throw new mongoose.Error('The provided class ' + name + ' must extend Model');\n    }\n  }\n\n  if (typeof schema === 'string') {\n    collection = schema;\n    schema = false;\n  }\n\n  if (utils.isObject(schema) && !(schema.instanceOfSchema)) {\n    schema = new Schema(schema);\n  }\n  if (schema && !schema.instanceOfSchema) {\n    throw new Error('The 2nd parameter to `mongoose.model()` should be a ' +\n      'schema or a POJO');\n  }\n\n  if (typeof collection === 'boolean') {\n    skipInit = collection;\n    collection = null;\n  }\n\n  // handle internal options from connection.model()\n  var options;\n  if (skipInit && utils.isObject(skipInit)) {\n    options = skipInit;\n    skipInit = true;\n  } else {\n    options = {};\n  }\n\n  // look up schema for the collection.\n  if (!this.modelSchemas[name]) {\n    if (schema) {\n      // cache it so we only apply plugins once\n      this.modelSchemas[name] = schema;\n    } else {\n      throw new mongoose.Error.MissingSchemaError(name);\n    }\n  }\n\n  if (schema) {\n    this._applyPlugins(schema);\n  }\n\n  var sub;\n\n  // connection.model() may be passing a different schema for\n  // an existing model name. in this case don't read from cache.\n  if (this.models[name] && options.cache !== false) {\n    if (schema && schema.instanceOfSchema && schema !== this.models[name].schema) {\n      throw new mongoose.Error.OverwriteModelError(name);\n    }\n\n    if (collection) {\n      // subclass current model with alternate collection\n      model = this.models[name];\n      schema = model.prototype.schema;\n      sub = model.__subclass(this.connection, schema, collection);\n      // do not cache the sub model\n      return sub;\n    }\n\n    return this.models[name];\n  }\n\n  // ensure a schema exists\n  if (!schema) {\n    schema = this.modelSchemas[name];\n    if (!schema) {\n      throw new mongoose.Error.MissingSchemaError(name);\n    }\n  }\n\n  // Apply relevant \"global\" options to the schema\n  if (!('pluralization' in schema.options)) schema.options.pluralization = this.options.pluralization;\n\n\n  if (!collection) {\n    collection = schema.get('collection') ||\n      utils.toCollectionName(name, this.pluralize());\n  }\n\n  var connection = options.connection || this.connection;\n  model = this.Model.compile(model || name, schema, collection, connection, this);\n\n  if (!skipInit) {\n    model.init();\n  }\n\n  if (options.cache === false) {\n    return model;\n  }\n\n  this.models[name] = model;\n  return this.models[name];\n};\n\n/**\n * Returns an array of model names created on this instance of Mongoose.\n *\n * ####Note:\n *\n * _Does not include names of models created using `connection.model()`._\n *\n * @api public\n * @return {Array}\n */\n\nMongoose.prototype.modelNames = function() {\n  var names = Object.keys(this.models);\n  return names;\n};\n\n/**\n * Applies global plugins to `schema`.\n *\n * @param {Schema} schema\n * @api private\n */\n\nMongoose.prototype._applyPlugins = function(schema) {\n  if (schema.$globalPluginsApplied) {\n    return;\n  }\n  var i;\n  var len;\n  for (i = 0, len = this.plugins.length; i < len; ++i) {\n    schema.plugin(this.plugins[i][0], this.plugins[i][1]);\n  }\n  schema.$globalPluginsApplied = true;\n  for (i = 0, len = schema.childSchemas.length; i < len; ++i) {\n    this._applyPlugins(schema.childSchemas[i].schema);\n  }\n};\n\n/**\n * Declares a global plugin executed on all Schemas.\n *\n * Equivalent to calling `.plugin(fn)` on each Schema you create.\n *\n * @param {Function} fn plugin callback\n * @param {Object} [opts] optional options\n * @return {Mongoose} this\n * @see plugins ./plugins.html\n * @api public\n */\n\nMongoose.prototype.plugin = function(fn, opts) {\n  this.plugins.push([fn, opts]);\n  return this;\n};\n\n/**\n * The default connection of the mongoose module.\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *     mongoose.connect(...);\n *     mongoose.connection.on('error', cb);\n *\n * This is the connection used by default for every model created using [mongoose.model](#index_Mongoose-model).\n *\n * @property connection\n * @return {Connection}\n * @api public\n */\n\nMongoose.prototype.__defineGetter__('connection', function() {\n  return this.connections[0];\n});\n\nMongoose.prototype.__defineSetter__('connection', function(v) {\n  if (v instanceof Connection) {\n    this.connections[0] = v;\n    this.models = v.models;\n  }\n});\n\n/*!\n * Driver dependent APIs\n */\n\nvar driver = global.MONGOOSE_DRIVER_PATH || './drivers/node-mongodb-native';\n\n/*!\n * Connection\n */\n\nvar Connection = require(driver + '/connection');\n\n/*!\n * Collection\n */\n\nvar Collection = require(driver + '/collection');\n\n/**\n * The Mongoose Aggregate constructor\n *\n * @method Aggregate\n * @api public\n */\n\nMongoose.prototype.Aggregate = Aggregate;\n\n/**\n * The Mongoose Collection constructor\n *\n * @method Collection\n * @api public\n */\n\nMongoose.prototype.Collection = Collection;\n\n/**\n * The Mongoose [Connection](#connection_Connection) constructor\n *\n * @method Connection\n * @api public\n */\n\nMongoose.prototype.Connection = Connection;\n\n/**\n * The Mongoose version\n *\n * @property version\n * @api public\n */\n\nMongoose.prototype.version = pkg.version;\n\n/**\n * The Mongoose constructor\n *\n * The exports of the mongoose module is an instance of this class.\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *     var mongoose2 = new mongoose.Mongoose();\n *\n * @method Mongoose\n * @api public\n */\n\nMongoose.prototype.Mongoose = Mongoose;\n\n/**\n * The Mongoose [Schema](#schema_Schema) constructor\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *     var Schema = mongoose.Schema;\n *     var CatSchema = new Schema(..);\n *\n * @method Schema\n * @api public\n */\n\nMongoose.prototype.Schema = Schema;\n\n/**\n * The Mongoose [SchemaType](#schematype_SchemaType) constructor\n *\n * @method SchemaType\n * @api public\n */\n\nMongoose.prototype.SchemaType = SchemaType;\n\n/**\n * The various Mongoose SchemaTypes.\n *\n * ####Note:\n *\n * _Alias of mongoose.Schema.Types for backwards compatibility._\n *\n * @property SchemaTypes\n * @see Schema.SchemaTypes #schema_Schema.Types\n * @api public\n */\n\nMongoose.prototype.SchemaTypes = Schema.Types;\n\n/**\n * The Mongoose [VirtualType](#virtualtype_VirtualType) constructor\n *\n * @method VirtualType\n * @api public\n */\n\nMongoose.prototype.VirtualType = VirtualType;\n\n/**\n * The various Mongoose Types.\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *     var array = mongoose.Types.Array;\n *\n * ####Types:\n *\n * - [ObjectId](#types-objectid-js)\n * - [Buffer](#types-buffer-js)\n * - [SubDocument](#types-embedded-js)\n * - [Array](#types-array-js)\n * - [DocumentArray](#types-documentarray-js)\n *\n * Using this exposed access to the `ObjectId` type, we can construct ids on demand.\n *\n *     var ObjectId = mongoose.Types.ObjectId;\n *     var id1 = new ObjectId;\n *\n * @property Types\n * @api public\n */\n\nMongoose.prototype.Types = Types;\n\n/**\n * The Mongoose [Query](#query_Query) constructor.\n *\n * @method Query\n * @api public\n */\n\nMongoose.prototype.Query = Query;\n\n/**\n * The Mongoose [Promise](#promise_Promise) constructor.\n *\n * @method Promise\n * @api public\n */\n\nObject.defineProperty(Mongoose.prototype, 'Promise', {\n  get: function() {\n    return PromiseProvider.get();\n  },\n  set: function(lib) {\n    PromiseProvider.set(lib);\n  }\n});\n\n/**\n * Storage layer for mongoose promises\n *\n * @method PromiseProvider\n * @api public\n */\n\nMongoose.prototype.PromiseProvider = PromiseProvider;\n\n/**\n * The Mongoose [Model](#model_Model) constructor.\n *\n * @method Model\n * @api public\n */\n\nMongoose.prototype.Model = Model;\n\n/**\n * The Mongoose [Document](#document-js) constructor.\n *\n * @method Document\n * @api public\n */\n\nMongoose.prototype.Document = Document;\n\n/**\n * The Mongoose DocumentProvider constructor.\n *\n * @method DocumentProvider\n * @api public\n */\n\nMongoose.prototype.DocumentProvider = require('./document_provider');\n\n/**\n * The [MongooseError](#error_MongooseError) constructor.\n *\n * @method Error\n * @api public\n */\n\nMongoose.prototype.Error = require('./error');\n\n/**\n * The Mongoose CastError constructor\n *\n * @method CastError\n * @param {String} type The name of the type\n * @param {Any} value The value that failed to cast\n * @param {String} path The path `a.b.c` in the doc where this cast error occurred\n * @param {Error} [reason] The original error that was thrown\n * @api public\n */\n\nMongoose.prototype.CastError = require('./error/cast');\n\n/**\n * The [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) driver Mongoose uses.\n *\n * @property mongo\n * @api public\n */\n\nMongoose.prototype.mongo = require('mongodb');\n\n/**\n * The [mquery](https://github.com/aheckmann/mquery) query builder Mongoose uses.\n *\n * @property mquery\n * @api public\n */\n\nMongoose.prototype.mquery = require('mquery');\n\n/*!\n * The exports object is an instance of Mongoose.\n *\n * @api public\n */\n\nvar mongoose = module.exports = exports = new Mongoose;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/index.js\n// module id = 206\n// module chunks = 0","'use strict';\n\n/*!\n * Module dependencies.\n */\n\nvar Aggregate = require('./aggregate');\nvar ChangeStream = require('./cursor/ChangeStream');\nvar Document = require('./document');\nvar DocumentNotFoundError = require('./error').DocumentNotFoundError;\nvar DivergentArrayError = require('./error').DivergentArrayError;\nvar Error = require('./error');\nvar EventEmitter = require('events').EventEmitter;\nvar OverwriteModelError = require('./error').OverwriteModelError;\nvar PromiseProvider = require('./promise_provider');\nvar Query = require('./query');\nvar Schema = require('./schema');\nvar VersionError = require('./error').VersionError;\nvar applyHooks = require('./services/model/applyHooks');\nvar applyMethods = require('./services/model/applyMethods');\nvar applyStatics = require('./services/model/applyStatics');\nvar cast = require('./cast');\nvar castUpdate = require('./services/query/castUpdate');\nvar discriminator = require('./services/model/discriminator');\nvar getDiscriminatorByValue = require('./queryhelpers').getDiscriminatorByValue;\nvar internalToObjectOptions = require('./options').internalToObjectOptions;\nvar isPathSelectedInclusive = require('./services/projection/isPathSelectedInclusive');\nvar get = require('lodash.get');\nvar getSchemaTypes = require('./services/populate/getSchemaTypes');\nvar mpath = require('mpath');\nvar parallel = require('async/parallel');\nvar parallelLimit = require('async/parallelLimit');\nvar setDefaultsOnInsert = require('./services/setDefaultsOnInsert');\nvar utils = require('./utils');\n\nvar VERSION_WHERE = 1,\n    VERSION_INC = 2,\n    VERSION_ALL = VERSION_WHERE | VERSION_INC;\n\n/**\n * Model constructor\n *\n * Provides the interface to MongoDB collections as well as creates document instances.\n *\n * @param {Object} doc values with which to create the document\n * @inherits Document http://mongoosejs.com/docs/api.html#document-js\n * @event `error`: If listening to this event, 'error' is emitted when a document was saved without passing a callback and an `error` occurred. If not listening, the event bubbles to the connection used to create this Model.\n * @event `index`: Emitted after `Model#ensureIndexes` completes. If an error occurred it is passed with the event.\n * @event `index-single-start`: Emitted when an individual index starts within `Model#ensureIndexes`. The fields and options being used to build the index are also passed with the event.\n * @event `index-single-done`: Emitted when an individual index finishes within `Model#ensureIndexes`. If an error occurred it is passed with the event. The fields, options, and index name are also passed.\n * @api public\n */\n\nfunction Model(doc, fields, skipId) {\n  if (fields instanceof Schema) {\n    throw new TypeError('2nd argument to `Model` must be a POJO or string, ' +\n      '**not** a schema. Make sure you\\'re calling `mongoose.model()`, not ' +\n      '`mongoose.Model()`.');\n  }\n  Document.call(this, doc, fields, skipId, true);\n}\n\n/*!\n * Inherits from Document.\n *\n * All Model.prototype features are available on\n * top level (non-sub) documents.\n */\n\nModel.prototype.__proto__ = Document.prototype;\nModel.prototype.$isMongooseModelPrototype = true;\n\n/**\n * Connection the model uses.\n *\n * @api public\n * @property db\n * @memberOf Model\n */\n\nModel.prototype.db;\n\n/**\n * Collection the model uses.\n *\n * @api public\n * @property collection\n * @memberOf Model\n */\n\nModel.prototype.collection;\n\n/**\n * The name of the model\n *\n * @api public\n * @property modelName\n * @memberOf Model\n */\n\nModel.prototype.modelName;\n\n/**\n * Additional properties to attach to the query when calling `save()` and\n * `isNew` is false.\n *\n * @api public\n * @property $where\n * @memberOf Model\n */\n\nModel.prototype.$where;\n\n/**\n * If this is a discriminator model, `baseModelName` is the name of\n * the base model.\n *\n * @api public\n * @property baseModelName\n * @memberOf Model\n */\n\nModel.prototype.baseModelName;\n\n/*!\n * ignore\n */\n\nModel.prototype.$__handleSave = function(options, callback) {\n  var _this = this;\n  var i;\n  var keys;\n  var len;\n  if (!options.safe && this.schema.options.safe) {\n    options.safe = this.schema.options.safe;\n  }\n  if (typeof options.safe === 'boolean') {\n    options.safe = null;\n  }\n  var safe = options.safe ? utils.clone(options.safe) : options.safe;\n\n  if (this.isNew) {\n    // send entire doc\n    var obj = this.toObject(internalToObjectOptions);\n\n    if ((obj || {})._id === void 0) {\n      // documents must have an _id else mongoose won't know\n      // what to update later if more changes are made. the user\n      // wouldn't know what _id was generated by mongodb either\n      // nor would the ObjectId generated my mongodb necessarily\n      // match the schema definition.\n      setTimeout(function() {\n        callback(new Error('document must have an _id before saving'));\n      }, 0);\n      return;\n    }\n\n    this.$__version(true, obj);\n    this.collection.insert(obj, safe, function(err, ret) {\n      if (err) {\n        _this.isNew = true;\n        _this.emit('isNew', true);\n        _this.constructor.emit('isNew', true);\n\n        callback(err);\n        return;\n      }\n\n      callback(null, ret);\n    });\n    this.$__reset();\n    this.isNew = false;\n    this.emit('isNew', false);\n    this.constructor.emit('isNew', false);\n    // Make it possible to retry the insert\n    this.$__.inserting = true;\n  } else {\n    // Make sure we don't treat it as a new object on error,\n    // since it already exists\n    this.$__.inserting = false;\n\n    var delta = this.$__delta();\n\n    if (delta) {\n      if (delta instanceof Error) {\n        callback(delta);\n        return;\n      }\n\n      var where = this.$__where(delta[0]);\n      if (where instanceof Error) {\n        callback(where);\n        return;\n      }\n\n      if (this.$where) {\n        keys = Object.keys(this.$where);\n        len = keys.length;\n        for (i = 0; i < len; ++i) {\n          where[keys[i]] = this.$where[keys[i]];\n        }\n      }\n\n      this.collection.update(where, delta[1], safe, function(err, ret) {\n        if (err) {\n          callback(err);\n          return;\n        }\n        ret.$where = where;\n        callback(null, ret);\n      });\n    } else {\n      this.$__reset();\n      callback();\n      return;\n    }\n\n    this.emit('isNew', false);\n    this.constructor.emit('isNew', false);\n  }\n};\n\n/*!\n * ignore\n */\n\nModel.prototype.$__save = function(options, callback) {\n  this.$__handleSave(options, (error, result) => {\n    if (error) {\n      return this.schema.s.hooks.execPost('save:error', this, [this], { error: error }, function(error) {\n        callback(error);\n      });\n    }\n\n    this.$__reset();\n\n    let numAffected = 0;\n    if (get(options, 'safe.w') !== 0 && get(options, 'w') !== 0) {\n      // Skip checking if write succeeded if writeConcern is set to\n      // unacknowledged writes, because otherwise `numAffected` will always be 0\n      if (result) {\n        if (Array.isArray(result)) {\n          numAffected = result.length;\n        } else if (result.result && result.result.n !== undefined) {\n          numAffected = result.result.n;\n        } else if (result.result && result.result.nModified !== undefined) {\n          numAffected = result.result.nModified;\n        } else {\n          numAffected = result;\n        }\n      }\n\n      // was this an update that required a version bump?\n      if (this.$__.version && !this.$__.inserting) {\n        let doIncrement = VERSION_INC === (VERSION_INC & this.$__.version);\n        this.$__.version = undefined;\n\n        if (numAffected <= 0) {\n          // the update failed. pass an error back\n          let err = new VersionError(this);\n          return callback(err);\n        }\n\n        // increment version if was successful\n        if (doIncrement) {\n          let key = this.schema.options.versionKey;\n          let version = this.getValue(key) | 0;\n          this.setValue(key, version + 1);\n        }\n      }\n\n      if (result != null && numAffected <= 0) {\n        error = new DocumentNotFoundError(result.$where);\n        return this.schema.s.hooks.execPost('save:error', this, [this], { error: error }, function(error) {\n          callback(error);\n        });\n      }\n    }\n\n    this.emit('save', this, numAffected);\n    this.constructor.emit('save', this, numAffected);\n    callback(null, this);\n  });\n};\n\n/**\n * Saves this document.\n *\n * ####Example:\n *\n *     product.sold = Date.now();\n *     product.save(function (err, product) {\n *       if (err) ..\n *     })\n *\n * The callback will receive three parameters\n *\n * 1. `err` if an error occurred\n * 2. `product` which is the saved `product`\n *\n * As an extra measure of flow control, save will return a Promise.\n * ####Example:\n *     product.save().then(function(product) {\n *        ...\n *     });\n *\n * @param {Object} [options] options optional options\n * @param {Object} [options.safe] overrides [schema's safe option](http://mongoosejs.com//docs/guide.html#safe)\n * @param {Boolean} [options.validateBeforeSave] set to false to save without validating.\n * @param {Function} [fn] optional callback\n * @return {Promise} Promise\n * @api public\n * @see middleware http://mongoosejs.com/docs/middleware.html\n */\n\nModel.prototype.save = function(options, fn) {\n  if (typeof options === 'function') {\n    fn = options;\n    options = undefined;\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  if (fn) {\n    fn = this.constructor.$wrapCallback(fn);\n  }\n\n  const originalStack = new Error().stack;\n\n  return utils.promiseOrCallback(fn, cb => {\n    this.$__save(options, error => {\n      if (error) {\n        // gh-2633: since VersionError is very generic, take the\n        // stack trace of the original save() function call rather\n        // than the async trace\n        if (error instanceof VersionError) {\n          error.stack = originalStack;\n        }\n        this.$__handleReject(error);\n        return cb(error);\n      }\n      cb(null, this);\n    });\n  });\n};\n\n/*!\n * Determines whether versioning should be skipped for the given path\n *\n * @param {Document} self\n * @param {String} path\n * @return {Boolean} true if versioning should be skipped for the given path\n */\nfunction shouldSkipVersioning(self, path) {\n  var skipVersioning = self.schema.options.skipVersioning;\n  if (!skipVersioning) return false;\n\n  // Remove any array indexes from the path\n  path = path.replace(/\\.\\d+\\./, '.');\n\n  return skipVersioning[path];\n}\n\n/*!\n * Apply the operation to the delta (update) clause as\n * well as track versioning for our where clause.\n *\n * @param {Document} self\n * @param {Object} where\n * @param {Object} delta\n * @param {Object} data\n * @param {Mixed} val\n * @param {String} [operation]\n */\n\nfunction operand(self, where, delta, data, val, op) {\n  // delta\n  op || (op = '$set');\n  if (!delta[op]) delta[op] = {};\n  delta[op][data.path] = val;\n\n  // disabled versioning?\n  if (self.schema.options.versionKey === false) return;\n\n  // path excluded from versioning?\n  if (shouldSkipVersioning(self, data.path)) return;\n\n  // already marked for versioning?\n  if (VERSION_ALL === (VERSION_ALL & self.$__.version)) return;\n\n  switch (op) {\n    case '$set':\n    case '$unset':\n    case '$pop':\n    case '$pull':\n    case '$pullAll':\n    case '$push':\n    case '$addToSet':\n      break;\n    default:\n      // nothing to do\n      return;\n  }\n\n  // ensure updates sent with positional notation are\n  // editing the correct array element.\n  // only increment the version if an array position changes.\n  // modifying elements of an array is ok if position does not change.\n\n  if (op === '$push' || op === '$addToSet') {\n    self.$__.version = VERSION_INC;\n  } else if (/^\\$p/.test(op)) {\n    // potentially changing array positions\n    self.increment();\n  } else if (Array.isArray(val)) {\n    // $set an array\n    self.increment();\n  } else if (/\\.\\d+\\.|\\.\\d+$/.test(data.path)) {\n    // now handling $set, $unset\n    // subpath of array\n    self.$__.version = VERSION_WHERE;\n  }\n}\n\n/*!\n * Compiles an update and where clause for a `val` with _atomics.\n *\n * @param {Document} self\n * @param {Object} where\n * @param {Object} delta\n * @param {Object} data\n * @param {Array} value\n */\n\nfunction handleAtomics(self, where, delta, data, value) {\n  if (delta.$set && delta.$set[data.path]) {\n    // $set has precedence over other atomics\n    return;\n  }\n\n  if (typeof value.$__getAtomics === 'function') {\n    value.$__getAtomics().forEach(function(atomic) {\n      const op = atomic[0];\n      const val = atomic[1];\n      operand(self, where, delta, data, val, op);\n    });\n    return;\n  }\n\n  // legacy support for plugins\n\n  var atomics = value._atomics,\n      ops = Object.keys(atomics),\n      i = ops.length,\n      val,\n      op;\n\n  if (i === 0) {\n    // $set\n\n    if (utils.isMongooseObject(value)) {\n      value = value.toObject({depopulate: 1, _isNested: true});\n    } else if (value.valueOf) {\n      value = value.valueOf();\n    }\n\n    return operand(self, where, delta, data, value);\n  }\n\n  function iter(mem) {\n    return utils.isMongooseObject(mem)\n      ? mem.toObject({depopulate: 1, _isNested: true})\n      : mem;\n  }\n\n  while (i--) {\n    op = ops[i];\n    val = atomics[op];\n\n    if (utils.isMongooseObject(val)) {\n      val = val.toObject({depopulate: true, transform: false, _isNested: true});\n    } else if (Array.isArray(val)) {\n      val = val.map(iter);\n    } else if (val.valueOf) {\n      val = val.valueOf();\n    }\n\n    if (op === '$addToSet') {\n      val = {$each: val};\n    }\n\n    operand(self, where, delta, data, val, op);\n  }\n}\n\n/**\n * Produces a special query document of the modified properties used in updates.\n *\n * @api private\n * @method $__delta\n * @memberOf Model\n */\n\nModel.prototype.$__delta = function() {\n  var dirty = this.$__dirty();\n  if (!dirty.length && VERSION_ALL !== this.$__.version) return;\n\n  var where = {},\n      delta = {},\n      len = dirty.length,\n      divergent = [],\n      d = 0;\n\n  where._id = this._doc._id;\n  if (where._id.toObject) {\n    where._id = where._id.toObject({ transform: false, depopulate: true });\n  }\n\n  for (; d < len; ++d) {\n    var data = dirty[d];\n    var value = data.value;\n\n    var match = checkDivergentArray(this, data.path, value);\n    if (match) {\n      divergent.push(match);\n      continue;\n    }\n\n    var pop = this.populated(data.path, true);\n    if (!pop && this.$__.selected) {\n      // If any array was selected using an $elemMatch projection, we alter the path and where clause\n      // NOTE: MongoDB only supports projected $elemMatch on top level array.\n      var pathSplit = data.path.split('.');\n      var top = pathSplit[0];\n      if (this.$__.selected[top] && this.$__.selected[top].$elemMatch) {\n        // If the selected array entry was modified\n        if (pathSplit.length > 1 && pathSplit[1] == 0 && typeof where[top] === 'undefined') {\n          where[top] = this.$__.selected[top];\n          pathSplit[1] = '$';\n          data.path = pathSplit.join('.');\n        }\n        // if the selected array was modified in any other way throw an error\n        else {\n          divergent.push(data.path);\n          continue;\n        }\n      }\n    }\n\n    if (divergent.length) continue;\n\n    if (undefined === value) {\n      operand(this, where, delta, data, 1, '$unset');\n    } else if (value === null) {\n      operand(this, where, delta, data, null);\n    } else if (value._path && value._atomics) {\n      // arrays and other custom types (support plugins etc)\n      handleAtomics(this, where, delta, data, value);\n    } else if (value._path && Buffer.isBuffer(value)) {\n      // MongooseBuffer\n      value = value.toObject();\n      operand(this, where, delta, data, value);\n    } else {\n      value = utils.clone(value, {\n        depopulate: true,\n        transform: false,\n        virtuals: false,\n        _isNested: true\n      });\n      operand(this, where, delta, data, value);\n    }\n  }\n\n  if (divergent.length) {\n    return new DivergentArrayError(divergent);\n  }\n\n  if (this.$__.version) {\n    this.$__version(where, delta);\n  }\n\n  return [where, delta];\n};\n\n/*!\n * Determine if array was populated with some form of filter and is now\n * being updated in a manner which could overwrite data unintentionally.\n *\n * @see https://github.com/Automattic/mongoose/issues/1334\n * @param {Document} doc\n * @param {String} path\n * @return {String|undefined}\n */\n\nfunction checkDivergentArray(doc, path, array) {\n  // see if we populated this path\n  var pop = doc.populated(path, true);\n\n  if (!pop && doc.$__.selected) {\n    // If any array was selected using an $elemMatch projection, we deny the update.\n    // NOTE: MongoDB only supports projected $elemMatch on top level array.\n    var top = path.split('.')[0];\n    if (doc.$__.selected[top + '.$']) {\n      return top;\n    }\n  }\n\n  if (!(pop && array && array.isMongooseArray)) return;\n\n  // If the array was populated using options that prevented all\n  // documents from being returned (match, skip, limit) or they\n  // deselected the _id field, $pop and $set of the array are\n  // not safe operations. If _id was deselected, we do not know\n  // how to remove elements. $pop will pop off the _id from the end\n  // of the array in the db which is not guaranteed to be the\n  // same as the last element we have here. $set of the entire array\n  // would be similarily destructive as we never received all\n  // elements of the array and potentially would overwrite data.\n  var check = pop.options.match ||\n      pop.options.options && utils.object.hasOwnProperty(pop.options.options, 'limit') || // 0 is not permitted\n      pop.options.options && pop.options.options.skip || // 0 is permitted\n      pop.options.select && // deselected _id?\n      (pop.options.select._id === 0 ||\n      /\\s?-_id\\s?/.test(pop.options.select));\n\n  if (check) {\n    var atomics = array._atomics;\n    if (Object.keys(atomics).length === 0 || atomics.$set || atomics.$pop) {\n      return path;\n    }\n  }\n}\n\n/**\n * Appends versioning to the where and update clauses.\n *\n * @api private\n * @method $__version\n * @memberOf Model\n */\n\nModel.prototype.$__version = function(where, delta) {\n  var key = this.schema.options.versionKey;\n\n  if (where === true) {\n    // this is an insert\n    if (key) this.setValue(key, delta[key] = 0);\n    return;\n  }\n\n  // updates\n\n  // only apply versioning if our versionKey was selected. else\n  // there is no way to select the correct version. we could fail\n  // fast here and force them to include the versionKey but\n  // thats a bit intrusive. can we do this automatically?\n  if (!this.isSelected(key)) {\n    return;\n  }\n\n  // $push $addToSet don't need the where clause set\n  if (VERSION_WHERE === (VERSION_WHERE & this.$__.version)) {\n    var value = this.getValue(key);\n    if (value != null) where[key] = value;\n  }\n\n  if (VERSION_INC === (VERSION_INC & this.$__.version)) {\n    if (get(delta.$set, key, null) != null) {\n      // Version key is getting set, means we'll increment the doc's version\n      // after a successful save, so we should set the incremented version so\n      // future saves don't fail (gh-5779)\n      ++delta.$set[key];\n    } else {\n      delta.$inc = delta.$inc || {};\n      delta.$inc[key] = 1;\n    }\n  }\n};\n\n/**\n * Signal that we desire an increment of this documents version.\n *\n * ####Example:\n *\n *     Model.findById(id, function (err, doc) {\n *       doc.increment();\n *       doc.save(function (err) { .. })\n *     })\n *\n * @see versionKeys http://mongoosejs.com/docs/guide.html#versionKey\n * @api public\n */\n\nModel.prototype.increment = function increment() {\n  this.$__.version = VERSION_ALL;\n  return this;\n};\n\n/**\n * Returns a query object\n *\n * @api private\n * @method $__where\n * @memberOf Model\n */\n\nModel.prototype.$__where = function _where(where) {\n  where || (where = {});\n\n  if (!where._id) {\n    where._id = this._doc._id;\n  }\n\n  if (this._doc._id == null) {\n    return new Error('No _id found on document!');\n  }\n\n  return where;\n};\n\n/**\n * Removes this document from the db.\n *\n * ####Example:\n *     product.remove(function (err, product) {\n *       if (err) return handleError(err);\n *       Product.findById(product._id, function (err, product) {\n *         console.log(product) // null\n *       })\n *     })\n *\n *\n * As an extra measure of flow control, remove will return a Promise (bound to `fn` if passed) so it could be chained, or hooked to recive errors\n *\n * ####Example:\n *     product.remove().then(function (product) {\n *        ...\n *     }).catch(function (err) {\n *        assert.ok(err)\n *     })\n *\n * @param {function(err,product)} [fn] optional callback\n * @return {Promise} Promise\n * @api public\n */\n\nModel.prototype.remove = function remove(options, fn) {\n  if (typeof options === 'function') {\n    fn = options;\n    options = undefined;\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  if (fn) {\n    fn = this.constructor.$wrapCallback(fn);\n  }\n\n  return utils.promiseOrCallback(fn, cb => {\n    this.$__remove(options, cb);\n  });\n};\n\n/*!\n * ignore\n */\n\nModel.prototype.$__remove = function $__remove(options, cb) {\n  if (this.$__.isDeleted) {\n    return utils.immediate(() => cb(null, this));\n  }\n\n  var where = this.$__where();\n  if (where instanceof Error) {\n    return cb(where);\n  }\n\n  this.collection.remove(where, options, err => {\n    if (!err) {\n      this.$__.isDeleted = true;\n      this.emit('remove', this);\n      this.constructor.emit('remove', this);\n      return cb(null, this);\n    }\n    this.$__.isDeleted = false;\n    cb(err);\n  });\n};\n\n/**\n * Returns another Model instance.\n *\n * ####Example:\n *\n *     var doc = new Tank;\n *     doc.model('User').findById(id, callback);\n *\n * @param {String} name model name\n * @api public\n */\n\nModel.prototype.model = function model(name) {\n  return this.db.model(name);\n};\n\n/**\n * Adds a discriminator type.\n *\n * ####Example:\n *\n *     function BaseSchema() {\n *       Schema.apply(this, arguments);\n *\n *       this.add({\n *         name: String,\n *         createdAt: Date\n *       });\n *     }\n *     util.inherits(BaseSchema, Schema);\n *\n *     var PersonSchema = new BaseSchema();\n *     var BossSchema = new BaseSchema({ department: String });\n *\n *     var Person = mongoose.model('Person', PersonSchema);\n *     var Boss = Person.discriminator('Boss', BossSchema);\n *\n * @param {String} name   discriminator model name\n * @param {Schema} schema discriminator model schema\n * @param {String} value  discriminator model typeKey value\n * @api public\n */\n\nModel.discriminator = function(name, schema, value) {\n  var model;\n  if (typeof name === 'function') {\n    model = name;\n    name = utils.getFunctionName(model);\n    if (!(model.prototype instanceof Model)) {\n      throw new Error('The provided class ' + name + ' must extend Model');\n    }\n  }\n\n  schema = discriminator(this, name, schema, value);\n  if (this.db.models[name]) {\n    throw new OverwriteModelError(name);\n  }\n\n  schema.$isRootDiscriminator = true;\n\n  model = this.db.model(model || name, schema, this.collection.name);\n  this.discriminators[name] = model;\n  var d = this.discriminators[name];\n  d.prototype.__proto__ = this.prototype;\n  Object.defineProperty(d, 'baseModelName', {\n    value: this.modelName,\n    configurable: true,\n    writable: false\n  });\n\n  // apply methods and statics\n  applyMethods(d, schema);\n  applyStatics(d, schema);\n\n  return d;\n};\n\n// Model (class) features\n\n/*!\n * Give the constructor the ability to emit events.\n */\n\nfor (var i in EventEmitter.prototype) {\n  Model[i] = EventEmitter.prototype[i];\n}\n\n/**\n * Performs any async initialization of this model against MongoDB. Currently,\n * this function is only responsible for building [indexes](https://docs.mongodb.com/manual/indexes/),\n * unless [`autoIndex`](http://mongoosejs.com/docs/guide.html#autoIndex) is turned off.\n *\n * This function is called automatically, so you don't need to call it.\n * This function is also idempotent, so you may call it to get back a promise\n * that will resolve when your indexes are finished building as an alternative\n * to `MyModel.on('index')`\n *\n * ####Example:\n *\n *     var eventSchema = new Schema({ thing: { type: 'string', unique: true }})\n *     // This calls `Event.init()` implicitly, so you don't need to call\n *     // `Event.init()` on your own.\n *     var Event = mongoose.model('Event', eventSchema);\n *\n *     Event.init().then(function(Event) {\n *       // You can also use `Event.on('index')` if you prefer event emitters\n *       // over promises.\n *       console.log('Indexes are done building!');\n *     });\n *\n * @api public\n * @param {Function} [callback]\n * @returns {Promise}\n */\n\nModel.init = function init(callback) {\n  this.schema.emit('init', this);\n\n  if (this.$init) {\n    if (callback) {\n      this.$init.then(() => callback(), err => callback(err));\n      return null;\n    }\n    return this.$init;\n  }\n\n  var _this = this;\n  var Promise = PromiseProvider.get();\n  this.$init = new Promise(function(resolve, reject) {\n    if ((_this.schema.options.autoIndex) ||\n        (_this.schema.options.autoIndex == null && _this.db.config.autoIndex)) {\n      _this.ensureIndexes({ _automatic: true }, function(error) {\n        if (error) {\n          return reject(error);\n        }\n        resolve(_this);\n      });\n    } else {\n      resolve(_this);\n    }\n  });\n\n  if (callback) {\n    this.$init.then(() => callback(), err => callback(err));\n    this.$caught = true;\n    return null;\n  } else {\n    const _catch = this.$init.catch;\n    this.$init.catch = function() {\n      this.$caught = true;\n      return _catch.apply(_this.$init, arguments);\n    };\n  }\n\n  return this.$init;\n};\n\n/**\n * Sends `createIndex` commands to mongo for each index declared in the schema.\n * The `createIndex` commands are sent in series.\n *\n * ####Example:\n *\n *     Event.ensureIndexes(function (err) {\n *       if (err) return handleError(err);\n *     });\n *\n * After completion, an `index` event is emitted on this `Model` passing an error if one occurred.\n *\n * ####Example:\n *\n *     var eventSchema = new Schema({ thing: { type: 'string', unique: true }})\n *     var Event = mongoose.model('Event', eventSchema);\n *\n *     Event.on('index', function (err) {\n *       if (err) console.error(err); // error occurred during index creation\n *     })\n *\n * _NOTE: It is not recommended that you run this in production. Index creation may impact database performance depending on your load. Use with caution._\n *\n * @param {Object} [options] internal options\n * @param {Function} [cb] optional callback\n * @return {Promise}\n * @api public\n */\n\nModel.ensureIndexes = function ensureIndexes(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  if (callback) {\n    callback = this.$wrapCallback(callback);\n  }\n\n  return utils.promiseOrCallback(callback, cb => {\n    _ensureIndexes(this, options || {}, error => {\n      if (error) {\n        return cb(error);\n      }\n      cb(null);\n    });\n  });\n};\n\n/**\n * Similar to `ensureIndexes()`, except for it uses the [`createIndex`](http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#createIndex)\n * function. The `ensureIndex()` function checks to see if an index with that\n * name already exists, and, if not, does not attempt to create the index.\n * `createIndex()` bypasses this check.\n *\n * @param {Object} [options] internal options\n * @param {Function} [cb] optional callback\n * @return {Promise}\n * @api public\n */\n\nModel.createIndexes = function createIndexes(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n  options.createIndex = true;\n  return this.ensureIndexes(options, callback);\n};\n\nfunction _ensureIndexes(model, options, callback) {\n  var indexes = model.schema.indexes();\n  options = options || {};\n\n  var done = function(err) {\n    if (err && !model.$caught) {\n      model.emit('error', err);\n    }\n    model.emit('index', err);\n    callback && callback(err);\n  };\n\n  if (!indexes.length) {\n    utils.immediate(function() {\n      done();\n    });\n    return;\n  }\n  // Indexes are created one-by-one to support how MongoDB < 2.4 deals\n  // with background indexes.\n\n  var indexSingleDone = function(err, fields, options, name) {\n    model.emit('index-single-done', err, fields, options, name);\n  };\n  var indexSingleStart = function(fields, options) {\n    model.emit('index-single-start', fields, options);\n  };\n\n  var create = function() {\n    if (options._automatic) {\n      if (model.schema.options.autoIndex === false ||\n          (model.schema.options.autoIndex == null && model.db.config.autoIndex === false)) {\n        return done();\n      }\n    }\n\n    var index = indexes.shift();\n    if (!index) return done();\n\n    var indexFields = index[0];\n    var indexOptions = index[1];\n    _handleSafe(options);\n\n    indexSingleStart(indexFields, options);\n    var methodName = options.createIndex ? 'createIndex' : 'ensureIndex';\n    model.collection[methodName](indexFields, indexOptions, utils.tick(function(err, name) {\n      indexSingleDone(err, indexFields, indexOptions, name);\n      if (err) {\n        return done(err);\n      }\n      create();\n    }));\n  };\n\n  utils.immediate(function() {\n    // If buffering is off, do this manually.\n    if (options._automatic && !model.collection.collection) {\n      model.collection.addQueue(create, []);\n    } else {\n      create();\n    }\n  });\n}\n\nfunction _handleSafe(options) {\n  if (options.safe) {\n    if (typeof options.safe === 'boolean') {\n      options.w = options.safe;\n      delete options.safe;\n    }\n    if (typeof options.safe === 'object') {\n      options.w = options.safe.w;\n      options.j = options.safe.j;\n      options.wtimeout = options.safe.wtimeout;\n      delete options.safe;\n    }\n  }\n}\n\n/**\n * Schema the model uses.\n *\n * @property schema\n * @receiver Model\n * @api public\n * @memberOf Model\n */\n\nModel.schema;\n\n/*!\n * Connection instance the model uses.\n *\n * @property db\n * @api public\n * @memberOf Model\n */\n\nModel.db;\n\n/*!\n * Collection the model uses.\n *\n * @property collection\n * @api public\n * @memberOf Model\n */\n\nModel.collection;\n\n/**\n * Base Mongoose instance the model uses.\n *\n * @property base\n * @api public\n * @memberOf Model\n */\n\nModel.base;\n\n/**\n * Registered discriminators for this model.\n *\n * @property discriminators\n * @api public\n * @memberOf Model\n */\n\nModel.discriminators;\n\n/**\n * Translate any aliases fields/conditions so the final query or document object is pure\n *\n * ####Example:\n *\n *     Character\n *       .find(Character.translateAliases({\n *         '名': 'Eddard Stark' // Alias for 'name'\n *       })\n *       .exec(function(err, characters) {})\n *\n * ####Note:\n * Only translate arguments of object type anything else is returned raw\n *\n * @param {Object} raw fields/conditions that may contain aliased keys\n * @return {Object} the translated 'pure' fields/conditions\n */\nModel.translateAliases = function translateAliases(fields) {\n  var aliases = this.schema.aliases;\n\n  if (typeof fields === 'object') {\n    // Fields is an object (query conditions or document fields)\n    for (var key in fields) {\n      if (aliases[key]) {\n        fields[aliases[key]] = fields[key];\n        delete fields[key];\n      }\n    }\n\n    return fields;\n  } else {\n    // Don't know typeof fields\n    return fields;\n  }\n};\n\n/**\n * Removes all documents that match `conditions` from the collection.\n * To remove just the first document that matches `conditions`, set the `single`\n * option to true.\n *\n * ####Example:\n *\n *     Character.remove({ name: 'Eddard Stark' }, function (err) {});\n *\n * ####Note:\n *\n * This method sends a remove command directly to MongoDB, no Mongoose documents\n * are involved. Because no Mongoose documents are involved, _no middleware\n * (hooks) are executed_.\n *\n * @param {Object} conditions\n * @param {Function} [callback]\n * @return {Query}\n * @api public\n */\n\nModel.remove = function remove(conditions, callback) {\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n  }\n\n  // get the mongodb collection object\n  var mq = new this.Query({}, {}, this, this.collection);\n\n  if (callback) {\n    callback = this.$wrapCallback(callback);\n  }\n\n  return mq.remove(conditions, callback);\n};\n\n/**\n * Deletes the first document that matches `conditions` from the collection.\n * Behaves like `remove()`, but deletes at most one document regardless of the\n * `single` option.\n *\n * ####Example:\n *\n *     Character.deleteOne({ name: 'Eddard Stark' }, function (err) {});\n *\n * ####Note:\n *\n * Like `Model.remove()`, this function does **not** trigger `pre('remove')` or `post('remove')` hooks.\n *\n * @param {Object} conditions\n * @param {Function} [callback]\n * @return {Query}\n * @api public\n */\n\nModel.deleteOne = function deleteOne(conditions, callback) {\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n  }\n\n  // get the mongodb collection object\n  var mq = new this.Query(conditions, {}, this, this.collection);\n\n  if (callback) {\n    callback = this.$wrapCallback(callback);\n  }\n\n  return mq.deleteOne(callback);\n};\n\n/**\n * Deletes all of the documents that match `conditions` from the collection.\n * Behaves like `remove()`, but deletes all documents that match `conditions`\n * regardless of the `single` option.\n *\n * ####Example:\n *\n *     Character.deleteMany({ name: /Stark/, age: { $gte: 18 } }, function (err) {});\n *\n * ####Note:\n *\n * Like `Model.remove()`, this function does **not** trigger `pre('remove')` or `post('remove')` hooks.\n *\n * @param {Object} conditions\n * @param {Function} [callback]\n * @return {Query}\n * @api public\n */\n\nModel.deleteMany = function deleteMany(conditions, callback) {\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n  }\n\n  // get the mongodb collection object\n  var mq = new this.Query(conditions, {}, this, this.collection);\n\n  if (callback) {\n    callback = this.$wrapCallback(callback);\n  }\n\n  return mq.deleteMany(callback);\n};\n\n/**\n * Finds documents\n *\n * The `conditions` are cast to their respective SchemaTypes before the command is sent.\n *\n * ####Examples:\n *\n *     // named john and at least 18\n *     MyModel.find({ name: 'john', age: { $gte: 18 }});\n *\n *     // executes immediately, passing results to callback\n *     MyModel.find({ name: 'john', age: { $gte: 18 }}, function (err, docs) {});\n *\n *     // name LIKE john and only selecting the \"name\" and \"friends\" fields, executing immediately\n *     MyModel.find({ name: /john/i }, 'name friends', function (err, docs) { })\n *\n *     // passing options\n *     MyModel.find({ name: /john/i }, null, { skip: 10 })\n *\n *     // passing options and executing immediately\n *     MyModel.find({ name: /john/i }, null, { skip: 10 }, function (err, docs) {});\n *\n *     // executing a query explicitly\n *     var query = MyModel.find({ name: /john/i }, null, { skip: 10 })\n *     query.exec(function (err, docs) {});\n *\n *     // using the promise returned from executing a query\n *     var query = MyModel.find({ name: /john/i }, null, { skip: 10 });\n *     var promise = query.exec();\n *     promise.addBack(function (err, docs) {});\n *\n * @param {Object} conditions\n * @param {Object} [projection] optional fields to return (http://bit.ly/1HotzBo)\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback]\n * @return {Query}\n * @see field selection #query_Query-select\n * @see promise #promise-js\n * @api public\n */\n\nModel.find = function find(conditions, projection, options, callback) {\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n    projection = null;\n    options = null;\n  } else if (typeof projection === 'function') {\n    callback = projection;\n    projection = null;\n    options = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  var mq = new this.Query({}, {}, this, this.collection);\n  mq.select(projection);\n  mq.setOptions(options);\n  if (this.schema.discriminatorMapping &&\n      this.schema.discriminatorMapping.isRoot &&\n      mq.selectedInclusively()) {\n    // Need to select discriminator key because original schema doesn't have it\n    mq.select(this.schema.options.discriminatorKey);\n  }\n\n  if (callback) {\n    callback = this.$wrapCallback(callback);\n  }\n\n  return mq.find(conditions, callback);\n};\n\n/**\n * Finds a single document by its _id field. `findById(id)` is almost*\n * equivalent to `findOne({ _id: id })`. If you want to query by a document's\n * `_id`, use `findById()` instead of `findOne()`.\n *\n * The `id` is cast based on the Schema before sending the command.\n *\n * This function triggers the following middleware.\n *\n * - `findOne()`\n *\n * \\* Except for how it treats `undefined`. If you use `findOne()`, you'll see\n * that `findOne(undefined)` and `findOne({ _id: undefined })` are equivalent\n * to `findOne({})` and return arbitrary documents. However, mongoose\n * translates `findById(undefined)` into `findOne({ _id: null })`.\n *\n * ####Example:\n *\n *     // find adventure by id and execute immediately\n *     Adventure.findById(id, function (err, adventure) {});\n *\n *     // same as above\n *     Adventure.findById(id).exec(callback);\n *\n *     // select only the adventures name and length\n *     Adventure.findById(id, 'name length', function (err, adventure) {});\n *\n *     // same as above\n *     Adventure.findById(id, 'name length').exec(callback);\n *\n *     // include all properties except for `length`\n *     Adventure.findById(id, '-length').exec(function (err, adventure) {});\n *\n *     // passing options (in this case return the raw js objects, not mongoose documents by passing `lean`\n *     Adventure.findById(id, 'name', { lean: true }, function (err, doc) {});\n *\n *     // same as above\n *     Adventure.findById(id, 'name').lean().exec(function (err, doc) {});\n *\n * @param {Object|String|Number} id value of `_id` to query by\n * @param {Object} [projection] optional fields to return (http://bit.ly/1HotzBo)\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback]\n * @return {Query}\n * @see field selection #query_Query-select\n * @see lean queries #query_Query-lean\n * @api public\n */\n\nModel.findById = function findById(id, projection, options, callback) {\n  if (typeof id === 'undefined') {\n    id = null;\n  }\n\n  if (callback) {\n    callback = this.$wrapCallback(callback);\n  }\n\n  return this.findOne({_id: id}, projection, options, callback);\n};\n\n/**\n * Finds one document.\n *\n * The `conditions` are cast to their respective SchemaTypes before the command is sent.\n *\n * *Note:* `conditions` is optional, and if `conditions` is null or undefined,\n * mongoose will send an empty `findOne` command to MongoDB, which will return\n * an arbitrary document. If you're querying by `_id`, use `findById()` instead.\n *\n * ####Example:\n *\n *     // find one iphone adventures - iphone adventures??\n *     Adventure.findOne({ type: 'iphone' }, function (err, adventure) {});\n *\n *     // same as above\n *     Adventure.findOne({ type: 'iphone' }).exec(function (err, adventure) {});\n *\n *     // select only the adventures name\n *     Adventure.findOne({ type: 'iphone' }, 'name', function (err, adventure) {});\n *\n *     // same as above\n *     Adventure.findOne({ type: 'iphone' }, 'name').exec(function (err, adventure) {});\n *\n *     // specify options, in this case lean\n *     Adventure.findOne({ type: 'iphone' }, 'name', { lean: true }, callback);\n *\n *     // same as above\n *     Adventure.findOne({ type: 'iphone' }, 'name', { lean: true }).exec(callback);\n *\n *     // chaining findOne queries (same as above)\n *     Adventure.findOne({ type: 'iphone' }).select('name').lean().exec(callback);\n *\n * @param {Object} [conditions]\n * @param {Object} [projection] optional fields to return (http://bit.ly/1HotzBo)\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback]\n * @return {Query}\n * @see field selection #query_Query-select\n * @see lean queries #query_Query-lean\n * @api public\n */\n\nModel.findOne = function findOne(conditions, projection, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  } else if (typeof projection === 'function') {\n    callback = projection;\n    projection = null;\n    options = null;\n  } else if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n    projection = null;\n    options = null;\n  }\n\n  // get the mongodb collection object\n  var mq = new this.Query({}, {}, this, this.collection);\n  mq.select(projection);\n  mq.setOptions(options);\n  if (this.schema.discriminatorMapping &&\n      this.schema.discriminatorMapping.isRoot &&\n      mq.selectedInclusively()) {\n    mq.select(this.schema.options.discriminatorKey);\n  }\n\n  if (callback) {\n    callback = this.$wrapCallback(callback);\n  }\n\n  return mq.findOne(conditions, callback);\n};\n\n/**\n * Counts number of matching documents in a database collection.\n *\n * ####Example:\n *\n *     Adventure.count({ type: 'jungle' }, function (err, count) {\n *       if (err) ..\n *       console.log('there are %d jungle adventures', count);\n *     });\n *\n * @param {Object} conditions\n * @param {Function} [callback]\n * @return {Query}\n * @api public\n */\n\nModel.count = function count(conditions, callback) {\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n  }\n\n  // get the mongodb collection object\n  var mq = new this.Query({}, {}, this, this.collection);\n\n  if (callback) {\n    callback = this.$wrapCallback(callback);\n  }\n\n  return mq.count(conditions, callback);\n};\n\n/**\n * Creates a Query for a `distinct` operation.\n *\n * Passing a `callback` immediately executes the query.\n *\n * ####Example\n *\n *     Link.distinct('url', { clicks: {$gt: 100}}, function (err, result) {\n *       if (err) return handleError(err);\n *\n *       assert(Array.isArray(result));\n *       console.log('unique urls with more than 100 clicks', result);\n *     })\n *\n *     var query = Link.distinct('url');\n *     query.exec(callback);\n *\n * @param {String} field\n * @param {Object} [conditions] optional\n * @param {Function} [callback]\n * @return {Query}\n * @api public\n */\n\nModel.distinct = function distinct(field, conditions, callback) {\n  // get the mongodb collection object\n  var mq = new this.Query({}, {}, this, this.collection);\n\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n  }\n  if (callback) {\n    callback = this.$wrapCallback(callback);\n  }\n\n  return mq.distinct(field, conditions, callback);\n};\n\n/**\n * Creates a Query, applies the passed conditions, and returns the Query.\n *\n * For example, instead of writing:\n *\n *     User.find({age: {$gte: 21, $lte: 65}}, callback);\n *\n * we can instead write:\n *\n *     User.where('age').gte(21).lte(65).exec(callback);\n *\n * Since the Query class also supports `where` you can continue chaining\n *\n *     User\n *     .where('age').gte(21).lte(65)\n *     .where('name', /^b/i)\n *     ... etc\n *\n * @param {String} path\n * @param {Object} [val] optional value\n * @return {Query}\n * @api public\n */\n\nModel.where = function where(path, val) {\n  void val; // eslint\n  // get the mongodb collection object\n  var mq = new this.Query({}, {}, this, this.collection).find({});\n  return mq.where.apply(mq, arguments);\n};\n\n/**\n * Creates a `Query` and specifies a `$where` condition.\n *\n * Sometimes you need to query for things in mongodb using a JavaScript expression. You can do so via `find({ $where: javascript })`, or you can use the mongoose shortcut method $where via a Query chain or from your mongoose Model.\n *\n *     Blog.$where('this.username.indexOf(\"val\") !== -1').exec(function (err, docs) {});\n *\n * @param {String|Function} argument is a javascript string or anonymous function\n * @method $where\n * @memberOf Model\n * @return {Query}\n * @see Query.$where #query_Query-%24where\n * @api public\n */\n\nModel.$where = function $where() {\n  var mq = new this.Query({}, {}, this, this.collection).find({});\n  return mq.$where.apply(mq, arguments);\n};\n\n/**\n * Issues a mongodb findAndModify update command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any) to the callback. The query executes immediately if `callback` is passed else a Query object is returned.\n *\n * ####Options:\n *\n * - `new`: bool - if true, return the modified document rather than the original. defaults to false (changed in 4.0)\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\n * - `fields`: {Object|String} - Field selection. Equivalent to `.select(fields).findOneAndUpdate()`\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\n * - `setDefaultsOnInsert`: if this and `upsert` are true, mongoose will apply the [defaults](http://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created. This option only works on MongoDB >= 2.4 because it relies on [MongoDB's `$setOnInsert` operator](https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/).\n * - `rawResult`: if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * - `strict`: overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict) for this update\n *\n * ####Examples:\n *\n *     A.findOneAndUpdate(conditions, update, options, callback) // executes\n *     A.findOneAndUpdate(conditions, update, options)  // returns Query\n *     A.findOneAndUpdate(conditions, update, callback) // executes\n *     A.findOneAndUpdate(conditions, update)           // returns Query\n *     A.findOneAndUpdate()                             // returns Query\n *\n * ####Note:\n *\n * All top level update keys which are not `atomic` operation names are treated as set operations:\n *\n * ####Example:\n *\n *     var query = { name: 'borne' };\n *     Model.findOneAndUpdate(query, { name: 'jason bourne' }, options, callback)\n *\n *     // is sent as\n *     Model.findOneAndUpdate(query, { $set: { name: 'jason bourne' }}, options, callback)\n *\n * This helps prevent accidentally overwriting your document with `{ name: 'jason bourne' }`.\n *\n * ####Note:\n *\n * Values are cast to their appropriate types when using the findAndModify helpers.\n * However, the below are not executed by default.\n *\n * - defaults. Use the `setDefaultsOnInsert` option to override.\n *\n * `findAndModify` helpers support limited validation. You can\n * enable these by setting the `runValidators` options,\n * respectively.\n *\n * If you need full-fledged validation, use the traditional approach of first\n * retrieving the document.\n *\n *     Model.findById(id, function (err, doc) {\n *       if (err) ..\n *       doc.name = 'jason bourne';\n *       doc.save(callback);\n *     });\n *\n * @param {Object} [conditions]\n * @param {Object} [update]\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](http://mongoosejs.com/docs/api.html#query_Query-lean).\n * @param {Function} [callback]\n * @return {Query}\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nModel.findOneAndUpdate = function(conditions, update, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  } else if (arguments.length === 1) {\n    if (typeof conditions === 'function') {\n      var msg = 'Model.findOneAndUpdate(): First argument must not be a function.\\n\\n'\n          + '  ' + this.modelName + '.findOneAndUpdate(conditions, update, options, callback)\\n'\n          + '  ' + this.modelName + '.findOneAndUpdate(conditions, update, options)\\n'\n          + '  ' + this.modelName + '.findOneAndUpdate(conditions, update)\\n'\n          + '  ' + this.modelName + '.findOneAndUpdate(update)\\n'\n          + '  ' + this.modelName + '.findOneAndUpdate()\\n';\n      throw new TypeError(msg);\n    }\n    update = conditions;\n    conditions = undefined;\n  }\n  if (callback) {\n    callback = this.$wrapCallback(callback);\n  }\n\n  var fields;\n  if (options && options.fields) {\n    fields = options.fields;\n  }\n\n  update = utils.clone(update, {depopulate: 1, _isNested: true});\n  if (this.schema.options.versionKey && options && options.upsert) {\n    if (options.overwrite) {\n      update[this.schema.options.versionKey] = 0;\n    } else {\n      if (!update.$setOnInsert) {\n        update.$setOnInsert = {};\n      }\n      update.$setOnInsert[this.schema.options.versionKey] = 0;\n    }\n  }\n\n  var mq = new this.Query({}, {}, this, this.collection);\n  mq.select(fields);\n\n  return mq.findOneAndUpdate(conditions, update, options, callback);\n};\n\n/**\n * Issues a mongodb findAndModify update command by a document's _id field.\n * `findByIdAndUpdate(id, ...)` is equivalent to `findOneAndUpdate({ _id: id }, ...)`.\n *\n * Finds a matching document, updates it according to the `update` arg,\n * passing any `options`, and returns the found document (if any) to the\n * callback. The query executes immediately if `callback` is passed else a\n * Query object is returned.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndUpdate()`\n *\n * ####Options:\n *\n * - `new`: bool - true to return the modified document rather than the original. defaults to false\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\n * - `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\n * - `setDefaultsOnInsert`: if this and `upsert` are true, mongoose will apply the [defaults](http://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created. This option only works on MongoDB >= 2.4 because it relies on [MongoDB's `$setOnInsert` operator](https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/).\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `select`: sets the document fields to return\n * - `rawResult`: if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * - `strict`: overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict) for this update\n *\n * ####Examples:\n *\n *     A.findByIdAndUpdate(id, update, options, callback) // executes\n *     A.findByIdAndUpdate(id, update, options)  // returns Query\n *     A.findByIdAndUpdate(id, update, callback) // executes\n *     A.findByIdAndUpdate(id, update)           // returns Query\n *     A.findByIdAndUpdate()                     // returns Query\n *\n * ####Note:\n *\n * All top level update keys which are not `atomic` operation names are treated as set operations:\n *\n * ####Example:\n *\n *     Model.findByIdAndUpdate(id, { name: 'jason bourne' }, options, callback)\n *\n *     // is sent as\n *     Model.findByIdAndUpdate(id, { $set: { name: 'jason bourne' }}, options, callback)\n *\n * This helps prevent accidentally overwriting your document with `{ name: 'jason bourne' }`.\n *\n * ####Note:\n *\n * Values are cast to their appropriate types when using the findAndModify helpers.\n * However, the below are not executed by default.\n *\n * - defaults. Use the `setDefaultsOnInsert` option to override.\n *\n * `findAndModify` helpers support limited validation. You can\n * enable these by setting the `runValidators` options,\n * respectively.\n *\n * If you need full-fledged validation, use the traditional approach of first\n * retrieving the document.\n *\n *     Model.findById(id, function (err, doc) {\n *       if (err) ..\n *       doc.name = 'jason bourne';\n *       doc.save(callback);\n *     });\n *\n * @param {Object|Number|String} id value of `_id` to query by\n * @param {Object} [update]\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](http://mongoosejs.com/docs/api.html#query_Query-lean).\n * @param {Function} [callback]\n * @return {Query}\n * @see Model.findOneAndUpdate #model_Model.findOneAndUpdate\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nModel.findByIdAndUpdate = function(id, update, options, callback) {\n  if (callback) {\n    callback = this.$wrapCallback(callback);\n  }\n  if (arguments.length === 1) {\n    if (typeof id === 'function') {\n      var msg = 'Model.findByIdAndUpdate(): First argument must not be a function.\\n\\n'\n          + '  ' + this.modelName + '.findByIdAndUpdate(id, callback)\\n'\n          + '  ' + this.modelName + '.findByIdAndUpdate(id)\\n'\n          + '  ' + this.modelName + '.findByIdAndUpdate()\\n';\n      throw new TypeError(msg);\n    }\n    return this.findOneAndUpdate({_id: id}, undefined);\n  }\n\n  // if a model is passed in instead of an id\n  if (id instanceof Document) {\n    id = id._id;\n  }\n\n  return this.findOneAndUpdate.call(this, {_id: id}, update, options, callback);\n};\n\n/**\n * Issue a mongodb findAndModify remove command.\n *\n * Finds a matching document, removes it, passing the found document (if any) to the callback.\n *\n * Executes immediately if `callback` is passed else a Query object is returned.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndRemove()`\n *\n * ####Options:\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\n * - `select`: sets the document fields to return\n * - `rawResult`: if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * - `strict`: overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict) for this update\n *\n * ####Examples:\n *\n *     A.findOneAndRemove(conditions, options, callback) // executes\n *     A.findOneAndRemove(conditions, options)  // return Query\n *     A.findOneAndRemove(conditions, callback) // executes\n *     A.findOneAndRemove(conditions) // returns Query\n *     A.findOneAndRemove()           // returns Query\n *\n * Values are cast to their appropriate types when using the findAndModify helpers.\n * However, the below are not executed by default.\n *\n * - defaults. Use the `setDefaultsOnInsert` option to override.\n *\n * `findAndModify` helpers support limited validation. You can\n * enable these by setting the `runValidators` options,\n * respectively.\n *\n * If you need full-fledged validation, use the traditional approach of first\n * retrieving the document.\n *\n *     Model.findById(id, function (err, doc) {\n *       if (err) ..\n *       doc.name = 'jason bourne';\n *       doc.save(callback);\n *     });\n *\n * @param {Object} conditions\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback]\n * @return {Query}\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nModel.findOneAndRemove = function(conditions, options, callback) {\n  if (arguments.length === 1 && typeof conditions === 'function') {\n    var msg = 'Model.findOneAndRemove(): First argument must not be a function.\\n\\n'\n        + '  ' + this.modelName + '.findOneAndRemove(conditions, callback)\\n'\n        + '  ' + this.modelName + '.findOneAndRemove(conditions)\\n'\n        + '  ' + this.modelName + '.findOneAndRemove()\\n';\n    throw new TypeError(msg);\n  }\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  if (callback) {\n    callback = this.$wrapCallback(callback);\n  }\n\n  var fields;\n  if (options) {\n    fields = options.select;\n    options.select = undefined;\n  }\n\n  var mq = new this.Query({}, {}, this, this.collection);\n  mq.select(fields);\n\n  return mq.findOneAndRemove(conditions, options, callback);\n};\n\n/**\n * Issue a mongodb findAndModify remove command by a document's _id field. `findByIdAndRemove(id, ...)` is equivalent to `findOneAndRemove({ _id: id }, ...)`.\n *\n * Finds a matching document, removes it, passing the found document (if any) to the callback.\n *\n * Executes immediately if `callback` is passed, else a `Query` object is returned.\n *\n * This function triggers the following middleware.\n *\n * - `findOneAndRemove()`\n *\n * ####Options:\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `select`: sets the document fields to return\n * - `rawResult`: if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * - `strict`: overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict) for this update\n *\n * ####Examples:\n *\n *     A.findByIdAndRemove(id, options, callback) // executes\n *     A.findByIdAndRemove(id, options)  // return Query\n *     A.findByIdAndRemove(id, callback) // executes\n *     A.findByIdAndRemove(id) // returns Query\n *     A.findByIdAndRemove()           // returns Query\n *\n * @param {Object|Number|String} id value of `_id` to query by\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback]\n * @return {Query}\n * @see Model.findOneAndRemove #model_Model.findOneAndRemove\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n */\n\nModel.findByIdAndRemove = function(id, options, callback) {\n  if (arguments.length === 1 && typeof id === 'function') {\n    var msg = 'Model.findByIdAndRemove(): First argument must not be a function.\\n\\n'\n        + '  ' + this.modelName + '.findByIdAndRemove(id, callback)\\n'\n        + '  ' + this.modelName + '.findByIdAndRemove(id)\\n'\n        + '  ' + this.modelName + '.findByIdAndRemove()\\n';\n    throw new TypeError(msg);\n  }\n  if (callback) {\n    callback = this.$wrapCallback(callback);\n  }\n\n  return this.findOneAndRemove({_id: id}, options, callback);\n};\n\n/**\n * Shortcut for saving one or more documents to the database.\n * `MyModel.create(docs)` does `new MyModel(doc).save()` for every doc in\n * docs.\n *\n * This function triggers the following middleware.\n *\n * - `save()`\n *\n * ####Example:\n *\n *     // pass individual docs\n *     Candy.create({ type: 'jelly bean' }, { type: 'snickers' }, function (err, jellybean, snickers) {\n *       if (err) // ...\n *     });\n *\n *     // pass an array\n *     var array = [{ type: 'jelly bean' }, { type: 'snickers' }];\n *     Candy.create(array, function (err, candies) {\n *       if (err) // ...\n *\n *       var jellybean = candies[0];\n *       var snickers = candies[1];\n *       // ...\n *     });\n *\n *     // callback is optional; use the returned promise if you like:\n *     var promise = Candy.create({ type: 'jawbreaker' });\n *     promise.then(function (jawbreaker) {\n *       // ...\n *     })\n *\n * @param {Array|Object|*} doc(s)\n * @param {Function} [callback] callback\n * @return {Promise}\n * @api public\n */\n\nModel.create = function create(doc, callback) {\n  var args;\n  var cb;\n  var discriminatorKey = this.schema.options.discriminatorKey;\n\n  if (Array.isArray(doc)) {\n    args = doc;\n    cb = callback;\n  } else {\n    var last = arguments[arguments.length - 1];\n    // Handle falsy callbacks re: #5061\n    if (typeof last === 'function' || !last) {\n      cb = last;\n      args = utils.args(arguments, 0, arguments.length - 1);\n    } else {\n      args = utils.args(arguments);\n    }\n  }\n\n  if (cb) {\n    cb = this.$wrapCallback(cb);\n  }\n\n  return utils.promiseOrCallback(cb, cb => {\n    if (args.length === 0) {\n      return cb(null);\n    }\n\n    var toExecute = [];\n    var firstError;\n    args.forEach(doc => {\n      toExecute.push(callback => {\n        var Model = this.discriminators && doc[discriminatorKey] ?\n          this.discriminators[doc[discriminatorKey]] || getDiscriminatorByValue(this, doc[discriminatorKey]) :\n          this;\n        var toSave = doc;\n        var callbackWrapper = (error, doc) => {\n          if (error) {\n            if (!firstError) {\n              firstError = error;\n            }\n            return callback(null, { error: error });\n          }\n          callback(null, { doc: doc });\n        };\n\n        if (!(toSave instanceof Model)) {\n          try {\n            toSave = new Model(toSave);\n          } catch (error) {\n            return callbackWrapper(error);\n          }\n        }\n\n        toSave.save(callbackWrapper);\n      });\n    });\n\n    parallel(toExecute, (error, res) => {\n      var savedDocs = [];\n      var len = res.length;\n      for (var i = 0; i < len; ++i) {\n        if (res[i].doc) {\n          savedDocs.push(res[i].doc);\n        }\n      }\n\n      if (firstError) {\n        return cb(firstError, savedDocs);\n      }\n\n      if (doc instanceof Array) {\n        cb(null, savedDocs);\n      } else {\n        cb.apply(this, [null].concat(savedDocs));\n      }\n    });\n  });\n};\n\n/**\n * _Requires a replica set running MongoDB >= 3.6.0._ Watches the\n * underlying collection for changes using\n * [MongoDB change streams](https://docs.mongodb.com/manual/changeStreams/).\n *\n * This function does **not** trigger any middleware. In particular, it\n * does **not** trigger aggregate middleware.\n *\n * ####Example:\n *\n *     const doc = await Person.create({ name: 'Ned Stark' });\n *     Person.watch().on('change', change => console.log(change));\n *     // Will print from the above `console.log()`:\n *     // { _id: { _data: ... },\n *     //   operationType: 'delete',\n *     //   ns: { db: 'mydb', coll: 'Person' },\n *     //   documentKey: { _id: 5a51b125c5500f5aa094c7bd } }\n *     await doc.remove();\n *\n * @param {Array} [pipeline]\n * @param {Object} [options] see the [mongodb driver options](http://mongodb.github.io/node-mongodb-native/3.0/api/Collection.html#watch)\n * @return {ChangeStream} mongoose-specific change stream wrapper\n * @api public\n */\n\nModel.watch = function(pipeline, options) {\n  return new ChangeStream(this, pipeline, options);\n};\n\n/**\n * Shortcut for validating an array of documents and inserting them into\n * MongoDB if they're all valid. This function is faster than `.create()`\n * because it only sends one operation to the server, rather than one for each\n * document.\n *\n * Mongoose always validates each document **before** sending `insertMany`\n * to MongoDB. So if one document has a validation error, no documents will\n * be saved, unless you set\n * [the `ordered` option to false](https://docs.mongodb.com/manual/reference/method/db.collection.insertMany/#error-handling).\n *\n * This function does **not** trigger save middleware.\n *\n * This function triggers the following middleware.\n *\n * - `insertMany()`\n *\n * ####Example:\n *\n *     var arr = [{ name: 'Star Wars' }, { name: 'The Empire Strikes Back' }];\n *     Movies.insertMany(arr, function(error, docs) {});\n *\n * @param {Array|Object|*} doc(s)\n * @param {Object} [options] see the [mongodb driver options](http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#insertMany)\n * @param {Boolean} [options.ordered = true] if true, will fail fast on the first error encountered. If false, will insert all the documents it can and report errors later. An `insertMany()` with `ordered = false` is called an \"unordered\" `insertMany()`.\n * @param {Boolean} [options.rawResult = false] if false, the returned promise resolves to the documents that passed mongoose document validation. If `false`, will return the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~insertWriteOpCallback) with a `mongoose` property that contains `validationErrors` if this is an unordered `insertMany`.\n * @param {Function} [callback] callback\n * @return {Promise}\n * @api public\n */\n\nModel.insertMany = function(arr, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n  return utils.promiseOrCallback(callback, cb => {\n    this.$__insertMany(arr, options, cb);\n  });\n};\n\n/*!\n * ignore\n */\n\nModel.$__insertMany = function(arr, options, callback) {\n  var _this = this;\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n  if (callback) {\n    callback = this.$wrapCallback(callback);\n  }\n  callback = callback || utils.noop;\n  options = options || {};\n  var limit = get(options, 'limit', 1000);\n  var rawResult = get(options, 'rawResult', false);\n  var ordered = get(options, 'ordered', true);\n\n  if (!Array.isArray(arr)) {\n    arr = [arr];\n  }\n\n  var toExecute = [];\n  var validationErrors = [];\n  arr.forEach(function(doc) {\n    toExecute.push(function(callback) {\n      doc = new _this(doc);\n      doc.validate({ __noPromise: true }, function(error) {\n        if (error) {\n          // Option `ordered` signals that insert should be continued after reaching\n          // a failing insert. Therefore we delegate \"null\", meaning the validation\n          // failed. It's up to the next function to filter out all failed models\n          if (ordered === false) {\n            validationErrors.push(error);\n            return callback(null, null);\n          }\n          return callback(error);\n        }\n        callback(null, doc);\n      });\n    });\n  });\n\n  parallelLimit(toExecute, limit, function(error, docs) {\n    if (error) {\n      callback && callback(error);\n      return;\n    }\n    // We filter all failed pre-validations by removing nulls\n    var docAttributes = docs.filter(function(doc) {\n      return doc != null;\n    });\n    // Quickly escape while there aren't any valid docAttributes\n    if (docAttributes.length < 1) {\n      callback(null, []);\n      return;\n    }\n    var docObjects = docAttributes.map(function(doc) {\n      if (doc.schema.options.versionKey) {\n        doc[doc.schema.options.versionKey] = 0;\n      }\n      if (doc.initializeTimestamps) {\n        return doc.initializeTimestamps().toObject(internalToObjectOptions);\n      }\n      return doc.toObject(internalToObjectOptions);\n    });\n\n    _this.collection.insertMany(docObjects, options, function(error, res) {\n      if (error) {\n        callback && callback(error);\n        return;\n      }\n      for (var i = 0; i < docAttributes.length; ++i) {\n        docAttributes[i].isNew = false;\n        docAttributes[i].emit('isNew', false);\n        docAttributes[i].constructor.emit('isNew', false);\n      }\n      if (rawResult) {\n        if (ordered === false) {\n          // Decorate with mongoose validation errors in case of unordered,\n          // because then still do `insertMany()`\n          res.mongoose = {\n            validationErrors: validationErrors\n          };\n        }\n        return callback(null, res);\n      }\n      callback(null, docAttributes);\n    });\n  });\n};\n\n/**\n * Sends multiple `insertOne`, `updateOne`, `updateMany`, `replaceOne`,\n * `deleteOne`, and/or `deleteMany` operations to the MongoDB server in one\n * command. This is faster than sending multiple independent operations (like)\n * if you use `create()`) because with `bulkWrite()` there is only one round\n * trip to MongoDB.\n *\n * Mongoose will perform casting on all operations you provide.\n *\n * This function does **not** trigger any middleware, not `save()` nor `update()`.\n * If you need to trigger\n * `save()` middleware for every document use [`create()`](http://mongoosejs.com/docs/api.html#model_Model.create) instead.\n *\n * ####Example:\n *\n *     Character.bulkWrite([\n *       {\n *         insertOne: {\n *           document: {\n *             name: 'Eddard Stark',\n *             title: 'Warden of the North'\n *           }\n *         }\n *       },\n *       {\n *         updateOne: {\n *           filter: { name: 'Eddard Stark' },\n *           // If you were using the MongoDB driver directly, you'd need to do\n *           // `update: { $set: { title: ... } }` but mongoose adds $set for\n *           // you.\n *           update: { title: 'Hand of the King' }\n *         }\n *       },\n *       {\n *         deleteOne: {\n *           {\n *             filter: { name: 'Eddard Stark' }\n *           }\n *         }\n *       }\n *     ]).then(handleResult);\n *\n * @param {Array} ops\n * @param {Object} [options]\n * @param {Function} [callback] callback `function(error, bulkWriteOpResult) {}`\n * @return {Promise} resolves to a `BulkWriteOpResult` if the operation succeeds\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~BulkWriteOpResult\n * @api public\n */\n\nModel.bulkWrite = function(ops, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n  if (callback) {\n    callback = this.$wrapCallback(callback);\n  }\n  options = options || {};\n\n  var validations = ops.map((op) => {\n    if (op['insertOne']) {\n      return (callback) => {\n        op['insertOne']['document'] = new this(op['insertOne']['document']);\n        op['insertOne']['document'].validate({ __noPromise: true }, function(error) {\n          if (error) {\n            return callback(error);\n          }\n          callback(null);\n        });\n      };\n    } else if (op['updateOne']) {\n      op = op['updateOne'];\n      return (callback) => {\n        try {\n          op['filter'] = cast(this.schema, op['filter']);\n          op['update'] = castUpdate(this.schema, op['update'],\n            this.schema.options.strict);\n          if (op.setDefaultsOnInsert) {\n            setDefaultsOnInsert(op['filter'], this.schema, op['update'], {\n              setDefaultsOnInsert: true,\n              upsert: op.upsert\n            });\n          }\n        } catch (error) {\n          return callback(error);\n        }\n\n        callback(null);\n      };\n    } else if (op['updateMany']) {\n      op = op['updateMany'];\n      return (callback) => {\n        try {\n          op['filter'] = cast(this.schema, op['filter']);\n          op['update'] = castUpdate(this.schema, op['update'], {\n            strict: this.schema.options.strict,\n            overwrite: false\n          });\n          if (op.setDefaultsOnInsert) {\n            setDefaultsOnInsert(op['filter'], this.schema, op['update'], {\n              setDefaultsOnInsert: true,\n              upsert: op.upsert\n            });\n          }\n        } catch (error) {\n          return callback(error);\n        }\n\n        callback(null);\n      };\n    } else if (op['replaceOne']) {\n      return (callback) => {\n        try {\n          op['replaceOne']['filter'] = cast(this.schema,\n            op['replaceOne']['filter']);\n        } catch (error) {\n          return callback(error);\n        }\n\n        // set `skipId`, otherwise we get \"_id field cannot be changed\"\n        op['replaceOne']['replacement'] =\n          new this(op['replaceOne']['replacement'], null, true);\n        op['replaceOne']['replacement'].validate({ __noPromise: true }, function(error) {\n          if (error) {\n            return callback(error);\n          }\n          callback(null);\n        });\n      };\n    } else if (op['deleteOne']) {\n      return (callback) => {\n        try {\n          op['deleteOne']['filter'] = cast(this.schema,\n            op['deleteOne']['filter']);\n        } catch (error) {\n          return callback(error);\n        }\n\n        callback(null);\n      };\n    } else if (op['deleteMany']) {\n      return (callback) => {\n        try {\n          op['deleteMany']['filter'] = cast(this.schema,\n            op['deleteMany']['filter']);\n        } catch (error) {\n          return callback(error);\n        }\n\n        callback(null);\n      };\n    } else {\n      return (callback) => {\n        callback(new Error('Invalid op passed to `bulkWrite()`'));\n      };\n    }\n  });\n\n  return utils.promiseOrCallback(callback, cb => {\n    parallel(validations, error => {\n      if (error) {\n        return cb(error);\n      }\n\n      this.collection.bulkWrite(ops, options, (error, res) => {\n        if (error) {\n          return cb(error);\n        }\n\n        cb(null, res);\n      });\n    });\n  });\n};\n\n/**\n * Shortcut for creating a new Document from existing raw data, pre-saved in the DB.\n * The document returned has no paths marked as modified initially.\n *\n * ####Example:\n *\n *     // hydrate previous data into a Mongoose document\n *     var mongooseCandy = Candy.hydrate({ _id: '54108337212ffb6d459f854c', type: 'jelly bean' });\n *\n * @param {Object} obj\n * @return {Model} document instance\n * @api public\n */\n\nModel.hydrate = function(obj) {\n  var model = require('./queryhelpers').createModel(this, obj);\n  model.init(obj);\n  return model;\n};\n\n/**\n * Updates one document in the database without returning it.\n *\n * This function triggers the following middleware.\n *\n * - `update()`\n *\n * ####Examples:\n *\n *     MyModel.update({ age: { $gt: 18 } }, { oldEnough: true }, fn);\n *     MyModel.update({ name: 'Tobi' }, { ferret: true }, { multi: true }, function (err, raw) {\n *       if (err) return handleError(err);\n *       console.log('The raw response from Mongo was ', raw);\n *     });\n *\n * ####Valid options:\n *\n *  - `safe` (boolean) safe mode (defaults to value set in schema (true))\n *  - `upsert` (boolean) whether to create the doc if it doesn't match (false)\n *  - `multi` (boolean) whether multiple documents should be updated (false)\n *  - `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\n *  - `setDefaultsOnInsert`: if this and `upsert` are true, mongoose will apply the [defaults](http://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created. This option only works on MongoDB >= 2.4 because it relies on [MongoDB's `$setOnInsert` operator](https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/).\n *  - `strict` (boolean) overrides the `strict` option for this update\n *  - `overwrite` (boolean) disables update-only mode, allowing you to overwrite the doc (false)\n *\n * All `update` values are cast to their appropriate SchemaTypes before being sent.\n *\n * The `callback` function receives `(err, rawResponse)`.\n *\n * - `err` is the error if any occurred\n * - `rawResponse` is the full response from Mongo\n *\n * ####Note:\n *\n * All top level keys which are not `atomic` operation names are treated as set operations:\n *\n * ####Example:\n *\n *     var query = { name: 'borne' };\n *     Model.update(query, { name: 'jason bourne' }, options, callback)\n *\n *     // is sent as\n *     Model.update(query, { $set: { name: 'jason bourne' }}, options, callback)\n *     // if overwrite option is false. If overwrite is true, sent without the $set wrapper.\n *\n * This helps prevent accidentally overwriting all documents in your collection with `{ name: 'jason bourne' }`.\n *\n * ####Note:\n *\n * Be careful to not use an existing model instance for the update clause (this won't work and can cause weird behavior like infinite loops). Also, ensure that the update clause does not have an _id property, which causes Mongo to return a \"Mod on _id not allowed\" error.\n *\n * ####Note:\n *\n * To update documents without waiting for a response from MongoDB, do not pass a `callback`, then call `exec` on the returned [Query](#query-js):\n *\n *     Comment.update({ _id: id }, { $set: { text: 'changed' }}).exec();\n *\n * ####Note:\n *\n * Although values are casted to their appropriate types when using update, the following are *not* applied:\n *\n * - defaults\n * - setters\n * - validators\n * - middleware\n *\n * If you need those features, use the traditional approach of first retrieving the document.\n *\n *     Model.findOne({ name: 'borne' }, function (err, doc) {\n *       if (err) ..\n *       doc.name = 'jason bourne';\n *       doc.save(callback);\n *     })\n *\n * @see strict http://mongoosejs.com/docs/guide.html#strict\n * @see response http://docs.mongodb.org/v2.6/reference/command/update/#output\n * @param {Object} conditions\n * @param {Object} doc\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback]\n * @return {Query}\n * @api public\n */\n\nModel.update = function update(conditions, doc, options, callback) {\n  return _update(this, 'update', conditions, doc, options, callback);\n};\n\n/**\n * Same as `update()`, except MongoDB will update _all_ documents that match\n * `criteria` (as opposed to just the first one) regardless of the value of\n * the `multi` option.\n *\n * **Note** updateMany will _not_ fire update middleware. Use `pre('updateMany')`\n * and `post('updateMany')` instead.\n *\n * This function triggers the following middleware.\n *\n * - `updateMany()`\n *\n * @param {Object} conditions\n * @param {Object} doc\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback]\n * @return {Query}\n * @api public\n */\n\nModel.updateMany = function updateMany(conditions, doc, options, callback) {\n  return _update(this, 'updateMany', conditions, doc, options, callback);\n};\n\n/**\n * Same as `update()`, except MongoDB will update _only_ the first document that\n * matches `criteria` regardless of the value of the `multi` option.\n *\n * This function triggers the following middleware.\n *\n * - `updateOne()`\n *\n * @param {Object} conditions\n * @param {Object} doc\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback]\n * @return {Query}\n * @api public\n */\n\nModel.updateOne = function updateOne(conditions, doc, options, callback) {\n  return _update(this, 'updateOne', conditions, doc, options, callback);\n};\n\n/**\n * Same as `update()`, except MongoDB replace the existing document with the\n * given document (no atomic operators like `$set`).\n *\n * This function triggers the following middleware.\n *\n * - `replaceOne()`\n *\n * @param {Object} conditions\n * @param {Object} doc\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Function} [callback]\n * @return {Query}\n * @api public\n */\n\nModel.replaceOne = function replaceOne(conditions, doc, options, callback) {\n  return _update(this, 'replaceOne', conditions, doc, options, callback);\n};\n\n/*!\n * ignore\n */\n\nfunction _update(model, op, conditions, doc, options, callback) {\n  var mq = new model.Query({}, {}, model, model.collection);\n  if (callback) {\n    callback = model.$wrapCallback(callback);\n  }\n  // gh-2406\n  // make local deep copy of conditions\n  if (conditions instanceof Document) {\n    conditions = conditions.toObject();\n  } else {\n    conditions = utils.clone(conditions);\n  }\n  options = typeof options === 'function' ? options : utils.clone(options);\n\n  if (model.schema.options.versionKey && options && options.upsert) {\n    if (options.overwrite) {\n      doc[model.schema.options.versionKey] = 0;\n    } else {\n      if (!doc.$setOnInsert) {\n        doc.$setOnInsert = {};\n      }\n      doc.$setOnInsert[model.schema.options.versionKey] = 0;\n    }\n  }\n\n  return mq[op](conditions, doc, options, callback);\n}\n\n/**\n * Executes a mapReduce command.\n *\n * `o` is an object specifying all mapReduce options as well as the map and reduce functions. All options are delegated to the driver implementation. See [node-mongodb-native mapReduce() documentation](http://mongodb.github.io/node-mongodb-native/api-generated/collection.html#mapreduce) for more detail about options.\n *\n * This function does not trigger any middleware.\n *\n * ####Example:\n *\n *     var o = {};\n *     o.map = function () { emit(this.name, 1) }\n *     o.reduce = function (k, vals) { return vals.length }\n *     User.mapReduce(o, function (err, results) {\n *       console.log(results)\n *     })\n *\n * ####Other options:\n *\n * - `query` {Object} query filter object.\n * - `sort` {Object} sort input objects using this key\n * - `limit` {Number} max number of documents\n * - `keeptemp` {Boolean, default:false} keep temporary data\n * - `finalize` {Function} finalize function\n * - `scope` {Object} scope variables exposed to map/reduce/finalize during execution\n * - `jsMode` {Boolean, default:false} it is possible to make the execution stay in JS. Provided in MongoDB > 2.0.X\n * - `verbose` {Boolean, default:false} provide statistics on job execution time.\n * - `readPreference` {String}\n * - `out*` {Object, default: {inline:1}} sets the output target for the map reduce job.\n *\n * ####* out options:\n *\n * - `{inline:1}` the results are returned in an array\n * - `{replace: 'collectionName'}` add the results to collectionName: the results replace the collection\n * - `{reduce: 'collectionName'}` add the results to collectionName: if dups are detected, uses the reducer / finalize functions\n * - `{merge: 'collectionName'}` add the results to collectionName: if dups exist the new docs overwrite the old\n *\n * If `options.out` is set to `replace`, `merge`, or `reduce`, a Model instance is returned that can be used for further querying. Queries run against this model are all executed with the `lean` option; meaning only the js object is returned and no Mongoose magic is applied (getters, setters, etc).\n *\n * ####Example:\n *\n *     var o = {};\n *     o.map = function () { emit(this.name, 1) }\n *     o.reduce = function (k, vals) { return vals.length }\n *     o.out = { replace: 'createdCollectionNameForResults' }\n *     o.verbose = true;\n *\n *     User.mapReduce(o, function (err, model, stats) {\n *       console.log('map reduce took %d ms', stats.processtime)\n *       model.find().where('value').gt(10).exec(function (err, docs) {\n *         console.log(docs);\n *       });\n *     })\n *\n *     // `mapReduce()` returns a promise. However, ES6 promises can only\n *     // resolve to exactly one value,\n *     o.resolveToObject = true;\n *     var promise = User.mapReduce(o);\n *     promise.then(function (res) {\n *       var model = res.model;\n *       var stats = res.stats;\n *       console.log('map reduce took %d ms', stats.processtime)\n *       return model.find().where('value').gt(10).exec();\n *     }).then(function (docs) {\n *        console.log(docs);\n *     }).then(null, handleError).end()\n *\n * @param {Object} o an object specifying map-reduce options\n * @param {Function} [callback] optional callback\n * @see http://www.mongodb.org/display/DOCS/MapReduce\n * @return {Promise}\n * @api public\n */\n\nModel.mapReduce = function mapReduce(o, callback) {\n  if (callback) {\n    callback = this.$wrapCallback(callback);\n  }\n  return utils.promiseOrCallback(callback, cb => {\n    if (!Model.mapReduce.schema) {\n      var opts = {noId: true, noVirtualId: true, strict: false};\n      Model.mapReduce.schema = new Schema({}, opts);\n    }\n\n    if (!o.out) o.out = {inline: 1};\n    if (o.verbose !== false) o.verbose = true;\n\n    o.map = String(o.map);\n    o.reduce = String(o.reduce);\n\n    if (o.query) {\n      var q = new this.Query(o.query);\n      q.cast(this);\n      o.query = q._conditions;\n      q = undefined;\n    }\n\n    this.collection.mapReduce(null, null, o, (err, res) => {\n      if (err) {\n        return cb(err);\n      }\n      if (res.collection) {\n        // returned a collection, convert to Model\n        var model = Model.compile('_mapreduce_' + res.collection.collectionName,\n          Model.mapReduce.schema, res.collection.collectionName, this.db,\n          this.base);\n\n        model._mapreduce = true;\n        res.model = model;\n\n        return cb(null, res);\n      }\n\n      cb(null, res);\n    });\n  });\n};\n\n/**\n * Performs [aggregations](http://docs.mongodb.org/manual/applications/aggregation/) on the models collection.\n *\n * If a `callback` is passed, the `aggregate` is executed and a `Promise` is returned. If a callback is not passed, the `aggregate` itself is returned.\n *\n * This function does not trigger any middleware.\n *\n * ####Example:\n *\n *     // Find the max balance of all accounts\n *     Users.aggregate([\n *       { $group: { _id: null, maxBalance: { $max: '$balance' }}},\n *       { $project: { _id: 0, maxBalance: 1 }}\n *     ]).\n *     then(function (res) {\n *       console.log(res); // [ { maxBalance: 98000 } ]\n *     });\n *\n *     // Or use the aggregation pipeline builder.\n *     Users.aggregate()\n *       .group({ _id: null, maxBalance: { $max: '$balance' } })\n *       .select('-id maxBalance')\n *       .exec(function (err, res) {\n *         if (err) return handleError(err);\n *         console.log(res); // [ { maxBalance: 98 } ]\n *       });\n *\n * ####NOTE:\n *\n * - Arguments are not cast to the model's schema because `$project` operators allow redefining the \"shape\" of the documents at any stage of the pipeline, which may leave documents in an incompatible format.\n * - The documents returned are plain javascript objects, not mongoose documents (since any shape of document can be returned).\n * - Requires MongoDB >= 2.1\n *\n * @see Aggregate #aggregate_Aggregate\n * @see MongoDB http://docs.mongodb.org/manual/applications/aggregation/\n * @param {Array} [pipeline] aggregation pipeline as an array of objects\n * @param {Function} [callback]\n * @return {Aggregate}\n * @api public\n */\n\nModel.aggregate = function aggregate(pipeline, callback) {\n  if (arguments.length > 2) {\n    throw new Error('Mongoose 5.x disallows passing a spread of operators ' +\n      'to `Model.aggregate()`. Instead of ' +\n      '`Model.aggregate({ $match }, { $skip })`, do ' +\n      '`Model.aggregate([{ $match }, { $skip }])`');\n  }\n\n  if (typeof pipeline === 'function') {\n    callback = pipeline;\n    pipeline = [];\n  }\n\n  var aggregate = new Aggregate(pipeline || []);\n  aggregate.model(this);\n\n  if (typeof callback === 'undefined') {\n    return aggregate;\n  }\n\n  if (callback) {\n    callback = this.$wrapCallback(callback);\n  }\n\n  aggregate.exec(callback);\n  return aggregate;\n};\n\n/**\n * Implements `$geoSearch` functionality for Mongoose\n *\n * This function does not trigger any middleware\n *\n * ####Example:\n *\n *     var options = { near: [10, 10], maxDistance: 5 };\n *     Locations.geoSearch({ type : \"house\" }, options, function(err, res) {\n *       console.log(res);\n *     });\n *\n * ####Options:\n * - `near` {Array} x,y point to search for\n * - `maxDistance` {Number} the maximum distance from the point near that a result can be\n * - `limit` {Number} The maximum number of results to return\n * - `lean` {Boolean} return the raw object instead of the Mongoose Model\n *\n * @param {Object} conditions an object that specifies the match condition (required)\n * @param {Object} options for the geoSearch, some (near, maxDistance) are required\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](http://mongoosejs.com/docs/api.html#query_Query-lean).\n * @param {Function} [callback] optional callback\n * @return {Promise}\n * @see http://docs.mongodb.org/manual/reference/command/geoSearch/\n * @see http://docs.mongodb.org/manual/core/geohaystack/\n * @api public\n */\n\nModel.geoSearch = function(conditions, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  if (callback) {\n    callback = this.$wrapCallback(callback);\n  }\n\n  return utils.promiseOrCallback(callback, cb => {\n    var error;\n    if (conditions === undefined || !utils.isObject(conditions)) {\n      error = new Error('Must pass conditions to geoSearch');\n    } else if (!options.near) {\n      error = new Error('Must specify the near option in geoSearch');\n    } else if (!Array.isArray(options.near)) {\n      error = new Error('near option must be an array [x, y]');\n    }\n\n    if (error) {\n      return cb(error);\n    }\n\n    // send the conditions in the options object\n    options.search = conditions;\n\n    this.collection.geoHaystackSearch(options.near[0], options.near[1], options, (err, res) => {\n      if (err) {\n        return cb(err);\n      }\n\n      var count = res.results.length;\n      if (options.lean || count === 0) {\n        return cb(null, res.results);\n      }\n\n      var errSeen = false;\n\n      function init(err) {\n        if (err && !errSeen) {\n          return cb(err);\n        }\n\n        if (!--count && !errSeen) {\n          cb(null, res.results);\n        }\n      }\n\n      for (var i = 0; i < res.results.length; ++i) {\n        var temp = res.results[i];\n        res.results[i] = new this();\n        res.results[i].init(temp, {}, init);\n      }\n    });\n  });\n};\n\n/**\n * Populates document references.\n *\n * ####Available options:\n *\n * - path: space delimited path(s) to populate\n * - select: optional fields to select\n * - match: optional query conditions to match\n * - model: optional name of the model to use for population\n * - options: optional query options like sort, limit, etc\n *\n * ####Examples:\n *\n *     // populates a single object\n *     User.findById(id, function (err, user) {\n *       var opts = [\n *           { path: 'company', match: { x: 1 }, select: 'name' }\n *         , { path: 'notes', options: { limit: 10 }, model: 'override' }\n *       ]\n *\n *       User.populate(user, opts, function (err, user) {\n *         console.log(user);\n *       });\n *     });\n *\n *     // populates an array of objects\n *     User.find(match, function (err, users) {\n *       var opts = [{ path: 'company', match: { x: 1 }, select: 'name' }]\n *\n *       var promise = User.populate(users, opts);\n *       promise.then(console.log).end();\n *     })\n *\n *     // imagine a Weapon model exists with two saved documents:\n *     //   { _id: 389, name: 'whip' }\n *     //   { _id: 8921, name: 'boomerang' }\n *     // and this schema:\n *     // new Schema({\n *     //   name: String,\n *     //   weapon: { type: ObjectId, ref: 'Weapon' }\n *     // });\n *\n *     var user = { name: 'Indiana Jones', weapon: 389 }\n *     Weapon.populate(user, { path: 'weapon', model: 'Weapon' }, function (err, user) {\n *       console.log(user.weapon.name) // whip\n *     })\n *\n *     // populate many plain objects\n *     var users = [{ name: 'Indiana Jones', weapon: 389 }]\n *     users.push({ name: 'Batman', weapon: 8921 })\n *     Weapon.populate(users, { path: 'weapon' }, function (err, users) {\n *       users.forEach(function (user) {\n *         console.log('%s uses a %s', users.name, user.weapon.name)\n *         // Indiana Jones uses a whip\n *         // Batman uses a boomerang\n *       });\n *     });\n *     // Note that we didn't need to specify the Weapon model because\n *     // it is in the schema's ref\n *\n * @param {Document|Array} docs Either a single document or array of documents to populate.\n * @param {Object} options A hash of key/val (path, options) used for population.\n * @param {Function} [callback(err,doc)] Optional callback, executed upon completion. Receives `err` and the `doc(s)`.\n * @return {Promise}\n * @api public\n */\n\nModel.populate = function(docs, paths, callback) {\n  var _this = this;\n  if (callback) {\n    callback = this.$wrapCallback(callback);\n  }\n\n  // normalized paths\n  paths = utils.populate(paths);\n\n  // data that should persist across subPopulate calls\n  var cache = {};\n\n  return utils.promiseOrCallback(callback, cb => {\n    _populate(_this, docs, paths, cache, cb);\n  });\n};\n\n/*!\n * Populate helper\n *\n * @param {Model} model the model to use\n * @param {Document|Array} docs Either a single document or array of documents to populate.\n * @param {Object} paths\n * @param {Function} [cb(err,doc)] Optional callback, executed upon completion. Receives `err` and the `doc(s)`.\n * @return {Function}\n * @api private\n */\n\nfunction _populate(model, docs, paths, cache, callback) {\n  var pending = paths.length;\n\n  if (pending === 0) {\n    return callback(null, docs);\n  }\n\n  // each path has its own query options and must be executed separately\n  var i = pending;\n  var path;\n  while (i--) {\n    path = paths[i];\n    populate(model, docs, path, next);\n  }\n\n  function next(err) {\n    if (err) {\n      return callback(err);\n    }\n    if (--pending) {\n      return;\n    }\n    callback(null, docs);\n  }\n}\n\n/*!\n * Populates `docs`\n */\nvar excludeIdReg = /\\s?-_id\\s?/,\n    excludeIdRegGlobal = /\\s?-_id\\s?/g;\n\nfunction populate(model, docs, options, callback) {\n  var modelsMap;\n\n  // normalize single / multiple docs passed\n  if (!Array.isArray(docs)) {\n    docs = [docs];\n  }\n\n  if (docs.length === 0 || docs.every(utils.isNullOrUndefined)) {\n    return callback();\n  }\n\n  modelsMap = getModelsMapForPopulate(model, docs, options);\n  if (modelsMap instanceof Error) {\n    return utils.immediate(function() {\n      callback(modelsMap);\n    });\n  }\n\n  var i, len = modelsMap.length,\n      mod, match, select, vals = [];\n\n  function flatten(item) {\n    // no need to include undefined values in our query\n    return undefined !== item;\n  }\n\n  var _remaining = len;\n  var hasOne = false;\n  for (i = 0; i < len; i++) {\n    mod = modelsMap[i];\n    select = mod.options.select;\n\n    if (mod.options.match) {\n      match = utils.object.shallowCopy(mod.options.match);\n    } else {\n      match = {};\n    }\n\n    var ids = utils.array.flatten(mod.ids, flatten);\n    ids = utils.array.unique(ids);\n\n    if (ids.length === 0 || ids.every(utils.isNullOrUndefined)) {\n      --_remaining;\n      continue;\n    }\n\n    hasOne = true;\n    if (mod.foreignField !== '_id' || !match['_id']) {\n      match[mod.foreignField] = { $in: ids };\n    }\n\n    var assignmentOpts = {};\n    assignmentOpts.sort = mod.options.options && mod.options.options.sort || undefined;\n    assignmentOpts.excludeId = excludeIdReg.test(select) || (select && select._id === 0);\n\n    if (assignmentOpts.excludeId) {\n      // override the exclusion from the query so we can use the _id\n      // for document matching during assignment. we'll delete the\n      // _id back off before returning the result.\n      if (typeof select === 'string') {\n        select = select.replace(excludeIdRegGlobal, ' ');\n      } else {\n        // preserve original select conditions by copying\n        select = utils.object.shallowCopy(select);\n        delete select._id;\n      }\n    }\n\n    if (mod.options.options && mod.options.options.limit) {\n      assignmentOpts.originalLimit = mod.options.options.limit;\n      mod.options.options.limit = mod.options.options.limit * ids.length;\n    }\n\n    var subPopulate = utils.clone(mod.options.populate, {\n      retainKeyOrder: true\n    });\n    var query = mod.Model.find(match, select, mod.options.options);\n\n    // If we're doing virtual populate and projection is inclusive and foreign\n    // field is not selected, automatically select it because mongoose needs it.\n    // If projection is exclusive and client explicitly unselected the foreign\n    // field, that's the client's fault.\n    if (mod.foreignField !== '_id' && query.selectedInclusively() &&\n      !isPathSelectedInclusive(query._fields, mod.foreignField)) {\n      query.select(mod.foreignField);\n    }\n\n    // If we need to sub-populate, call populate recursively\n    if (subPopulate) {\n      query.populate(subPopulate);\n    }\n\n    query.exec(next.bind(this, mod, assignmentOpts));\n  }\n\n  if (!hasOne) {\n    return callback();\n  }\n\n  function next(options, assignmentOpts, err, valsFromDb) {\n    if (mod.options.options && mod.options.options.limit) {\n      mod.options.options.limit = assignmentOpts.originalLimit;\n    }\n\n    if (err) return callback(err);\n    vals = vals.concat(valsFromDb);\n    _assign(null, vals, options, assignmentOpts);\n    if (--_remaining === 0) {\n      callback();\n    }\n  }\n\n  function _assign(err, vals, mod, assignmentOpts) {\n    if (err) return callback(err);\n\n    var options = mod.options;\n    var isVirtual = mod.isVirtual;\n    var justOne = mod.justOne;\n    var _val;\n    var lean = options.options && options.options.lean;\n    var len = vals.length;\n    var rawOrder = {};\n    var rawDocs = {};\n    var key;\n    var val;\n\n    // Clone because `assignRawDocsToIdStructure` will mutate the array\n    var allIds = [].concat(mod.allIds.map(function(v) {\n      if (Array.isArray(v)) {\n        return [].concat(v);\n      }\n      return v;\n    }));\n\n    // optimization:\n    // record the document positions as returned by\n    // the query result.\n    for (var i = 0; i < len; i++) {\n      val = vals[i];\n      if (val) {\n        _val = utils.getValue(mod.foreignField, val);\n        if (Array.isArray(_val)) {\n          var _valLength = _val.length;\n          for (var j = 0; j < _valLength; ++j) {\n            var __val = _val[j];\n            if (__val instanceof Document) {\n              __val = __val._id;\n            }\n            key = String(__val);\n            if (rawDocs[key]) {\n              if (Array.isArray(rawDocs[key])) {\n                rawDocs[key].push(val);\n                rawOrder[key].push(i);\n              } else {\n                rawDocs[key] = [rawDocs[key], val];\n                rawOrder[key] = [rawOrder[key], i];\n              }\n            } else {\n              if (isVirtual && !justOne) {\n                rawDocs[key] = [val];\n                rawOrder[key] = [i];\n              } else {\n                rawDocs[key] = val;\n                rawOrder[key] = i;\n              }\n            }\n          }\n        } else {\n          if (_val instanceof Document) {\n            _val = _val._id;\n          }\n          key = String(_val);\n          if (rawDocs[key]) {\n            if (Array.isArray(rawDocs[key])) {\n              rawDocs[key].push(val);\n              rawOrder[key].push(i);\n            } else {\n              rawDocs[key] = [rawDocs[key], val];\n              rawOrder[key] = [rawOrder[key], i];\n            }\n          } else {\n            rawDocs[key] = val;\n            rawOrder[key] = i;\n          }\n        }\n        // flag each as result of population\n        if (!lean) {\n          val.$__.wasPopulated = true;\n        }\n      }\n    }\n\n    assignVals({\n      originalModel: model,\n      rawIds: mod.allIds,\n      allIds: allIds,\n      localField: mod.localField,\n      foreignField: mod.foreignField,\n      rawDocs: rawDocs,\n      rawOrder: rawOrder,\n      docs: mod.docs,\n      path: options.path,\n      options: assignmentOpts,\n      justOne: mod.justOne,\n      isVirtual: mod.isVirtual,\n      allOptions: mod\n    });\n  }\n}\n\n/*!\n * Assigns documents returned from a population query back\n * to the original document path.\n */\n\nfunction assignVals(o) {\n  // replace the original ids in our intermediate _ids structure\n  // with the documents found by query\n  assignRawDocsToIdStructure(o.rawIds, o.rawDocs, o.rawOrder, o.options,\n    o.localField, o.foreignField);\n\n  // now update the original documents being populated using the\n  // result structure that contains real documents.\n\n  var docs = o.docs;\n  var rawIds = o.rawIds;\n  var options = o.options;\n\n  function setValue(val) {\n    return valueFilter(val, options);\n  }\n\n  for (var i = 0; i < docs.length; ++i) {\n    if (utils.getValue(o.path, docs[i]) == null &&\n      !o.originalModel.schema._getVirtual(o.path)) {\n      continue;\n    }\n\n    if (o.isVirtual && !o.justOne && !Array.isArray(rawIds[i])) {\n      if (rawIds[i] == null) {\n        rawIds[i] = [];\n      } else {\n        rawIds[i] = [rawIds[i]];\n      }\n    } else if (o.isVirtual && o.justOne && Array.isArray(rawIds[i])) {\n      rawIds[i] = rawIds[i][0];\n    }\n\n    if (o.isVirtual && docs[i].constructor.name === 'model') {\n      // If virtual populate and doc is already init-ed, need to walk through\n      // the actual doc to set rather than setting `_doc` directly\n      mpath.set(o.path, rawIds[i], docs[i]);\n    } else {\n      var parts = o.path.split('.');\n      var cur = docs[i];\n      for (var j = 0; j < parts.length - 1; ++j) {\n        if (cur[parts[j]] == null) {\n          cur[parts[j]] = {};\n        }\n        cur = cur[parts[j]];\n      }\n      if (docs[i].$__) {\n        docs[i].populated(o.path, o.allIds[i], o.allOptions);\n      }\n      utils.setValue(o.path, rawIds[i], docs[i], setValue);\n    }\n  }\n}\n\n/*!\n * Assign `vals` returned by mongo query to the `rawIds`\n * structure returned from utils.getVals() honoring\n * query sort order if specified by user.\n *\n * This can be optimized.\n *\n * Rules:\n *\n *   if the value of the path is not an array, use findOne rules, else find.\n *   for findOne the results are assigned directly to doc path (including null results).\n *   for find, if user specified sort order, results are assigned directly\n *   else documents are put back in original order of array if found in results\n *\n * @param {Array} rawIds\n * @param {Array} vals\n * @param {Boolean} sort\n * @api private\n */\n\nfunction assignRawDocsToIdStructure(rawIds, resultDocs, resultOrder, options, localFields, foreignFields, recursed) {\n  // honor user specified sort order\n  var newOrder = [];\n  var sorting = options.sort && rawIds.length > 1;\n  var doc;\n  var sid;\n  var id;\n\n  for (var i = 0; i < rawIds.length; ++i) {\n    id = rawIds[i];\n\n    if (Array.isArray(id)) {\n      // handle [ [id0, id2], [id3] ]\n      assignRawDocsToIdStructure(id, resultDocs, resultOrder, options, localFields, foreignFields, true);\n      newOrder.push(id);\n      continue;\n    }\n\n    if (id === null && !sorting) {\n      // keep nulls for findOne unless sorting, which always\n      // removes them (backward compat)\n      newOrder.push(id);\n      continue;\n    }\n\n    sid = String(id);\n\n    if (recursed) {\n      // apply find behavior\n\n      // assign matching documents in original order unless sorting\n      doc = resultDocs[sid];\n      if (doc) {\n        if (sorting) {\n          newOrder[resultOrder[sid]] = doc;\n        } else {\n          newOrder.push(doc);\n        }\n      } else {\n        newOrder.push(id);\n      }\n    } else {\n      // apply findOne behavior - if document in results, assign, else assign null\n      newOrder[i] = doc = resultDocs[sid] || null;\n    }\n  }\n\n  rawIds.length = 0;\n  if (newOrder.length) {\n    // reassign the documents based on corrected order\n\n    // forEach skips over sparse entries in arrays so we\n    // can safely use this to our advantage dealing with sorted\n    // result sets too.\n    newOrder.forEach(function(doc, i) {\n      if (!doc) {\n        return;\n      }\n      rawIds[i] = doc;\n    });\n  }\n}\n\nfunction getModelsMapForPopulate(model, docs, options) {\n  var i, doc, len = docs.length,\n      available = {},\n      map = [],\n      modelNameFromQuery = options.model && options.model.modelName || options.model,\n      schema, refPath, Model, currentOptions, modelNames, modelName, discriminatorKey, modelForFindSchema;\n\n  var originalModel = options.model;\n  var isVirtual = false;\n  var isRefPathArray = false;\n  var modelSchema = model.schema;\n\n  for (i = 0; i < len; i++) {\n    doc = docs[i];\n\n    schema = getSchemaTypes(modelSchema, doc, options.path);\n    var isUnderneathDocArray = schema && schema.$isUnderneathDocArray;\n    if (isUnderneathDocArray &&\n        options &&\n        options.options &&\n        options.options.sort) {\n      return new Error('Cannot populate with `sort` on path ' + options.path +\n        ' because it is a subproperty of a document array');\n    }\n\n    if (Array.isArray(schema)) {\n      for (var j = 0; j < schema.length; ++j) {\n        var _modelNames = _getModelNames(doc, schema[j]);\n        if (!_modelNames) {\n          continue;\n        }\n        modelNames = (modelNames || []);\n        for (var x = 0; x < _modelNames.length; ++x) {\n          if (modelNames.indexOf(_modelNames[x]) === -1) {\n            modelNames.push(_modelNames[x]);\n          }\n        }\n      }\n    } else {\n      modelNames = _getModelNames(doc, schema);\n      if (!modelNames) {\n        continue;\n      }\n    }\n\n    var virtual = model.schema._getVirtual(options.path);\n    var localField;\n    if (virtual && virtual.options) {\n      var virtualPrefix = virtual.$nestedSchemaPath ?\n        virtual.$nestedSchemaPath + '.' : '';\n      if (typeof virtual.options.localField === 'function') {\n        localField = virtualPrefix + virtual.options.localField.call(doc, doc);\n      } else {\n        localField = virtualPrefix + virtual.options.localField;\n      }\n    } else {\n      localField = options.path;\n    }\n    var foreignField = virtual && virtual.options ?\n      virtual.options.foreignField :\n      '_id';\n    var justOne = virtual && virtual.options && virtual.options.justOne;\n    if (virtual && virtual.options && virtual.options.ref) {\n      isVirtual = true;\n    }\n\n    if (virtual && (!localField || !foreignField)) {\n      throw new Error('If you are populating a virtual, you must set the ' +\n        'localField and foreignField options');\n    }\n\n    options.isVirtual = isVirtual;\n    if (typeof localField === 'function') {\n      localField = localField.call(doc, doc);\n    }\n    if (typeof foreignField === 'function') {\n      foreignField = foreignField.call(doc);\n    }\n    var ret = convertTo_id(utils.getValue(localField, doc));\n    var id = String(utils.getValue(foreignField, doc));\n    options._docs[id] = Array.isArray(ret) ? ret.slice() : ret;\n\n    var k = modelNames.length;\n    while (k--) {\n      modelName = modelNames[k];\n      if (modelName == null) {\n        continue;\n      }\n      var _doc = Array.isArray(doc) && isRefPathArray ? doc[k] : doc;\n      var _ret = Array.isArray(ret) && isRefPathArray ? ret[k] : ret;\n      try {\n        Model = originalModel && originalModel.modelName ?\n          originalModel :\n          model.db.model(modelName);\n      } catch (error) {\n        return error;\n      }\n\n      if (!available[modelName]) {\n        currentOptions = {\n          model: Model\n        };\n\n        if (isVirtual && virtual.options && virtual.options.options) {\n          currentOptions.options = utils.clone(virtual.options.options);\n        }\n        utils.merge(currentOptions, options);\n        if (schema && !discriminatorKey) {\n          currentOptions.model = Model;\n        }\n        options.model = Model;\n\n        available[modelName] = {\n          Model: Model,\n          options: currentOptions,\n          docs: [_doc],\n          ids: [_ret],\n          allIds: [ret],\n          // Assume only 1 localField + foreignField\n          localField: localField,\n          foreignField: foreignField,\n          justOne: justOne,\n          isVirtual: isVirtual\n        };\n        map.push(available[modelName]);\n      } else {\n        available[modelName].docs.push(_doc);\n        available[modelName].ids.push(_ret);\n        available[modelName].allIds.push(ret);\n      }\n    }\n  }\n\n  function _getModelNames(doc, schema) {\n    var modelNames;\n    var discriminatorKey;\n\n    if (schema && schema.caster) {\n      schema = schema.caster;\n    }\n\n    if (!schema && model.discriminators) {\n      discriminatorKey = model.schema.discriminatorMapping.key;\n    }\n\n    refPath = schema && schema.options && schema.options.refPath;\n\n    if (refPath) {\n      modelNames = utils.getValue(refPath, doc);\n      isRefPathArray = Array.isArray(modelNames);\n    } else {\n      if (!modelNameFromQuery) {\n        var modelForCurrentDoc = model;\n        var schemaForCurrentDoc;\n\n        if (!schema && discriminatorKey) {\n          modelForFindSchema = utils.getValue(discriminatorKey, doc);\n\n          if (modelForFindSchema) {\n            try {\n              modelForCurrentDoc = model.db.model(modelForFindSchema);\n            } catch (error) {\n              return error;\n            }\n\n            schemaForCurrentDoc = modelForCurrentDoc.schema._getSchema(options.path);\n\n            if (schemaForCurrentDoc && schemaForCurrentDoc.caster) {\n              schemaForCurrentDoc = schemaForCurrentDoc.caster;\n            }\n          }\n        } else {\n          schemaForCurrentDoc = schema;\n        }\n        var virtual = modelForCurrentDoc.schema._getVirtual(options.path);\n\n        var ref;\n        if ((ref = get(schemaForCurrentDoc, 'options.ref')) != null) {\n          modelNames = [ref];\n        } else if ((ref = get(virtual, 'options.ref')) != null) {\n          if (typeof ref === 'function') {\n            ref = ref.call(doc, doc);\n          }\n\n          // When referencing nested arrays, the ref should be an Array\n          // of modelNames.\n          if (Array.isArray(ref)) {\n            modelNames = ref;\n          } else {\n            modelNames = [ref];\n          }\n\n          isVirtual = true;\n        } else {\n          // We may have a discriminator, in which case we don't want to\n          // populate using the base model by default\n          modelNames = discriminatorKey ? null : [model.modelName];\n        }\n      } else {\n        modelNames = [modelNameFromQuery]; // query options\n      }\n    }\n\n    if (!modelNames) {\n      return;\n    }\n\n    if (!Array.isArray(modelNames)) {\n      modelNames = [modelNames];\n    }\n\n    return modelNames;\n  }\n\n  return map;\n}\n\n/*!\n * Retrieve the _id of `val` if a Document or Array of Documents.\n *\n * @param {Array|Document|Any} val\n * @return {Array|Document|Any}\n */\n\nfunction convertTo_id(val) {\n  if (val instanceof Model) return val._id;\n\n  if (Array.isArray(val)) {\n    for (var i = 0; i < val.length; ++i) {\n      if (val[i] instanceof Model) {\n        val[i] = val[i]._id;\n      }\n    }\n    if (val.isMongooseArray) {\n      return val._schema.cast(val, val._parent);\n    }\n\n    return [].concat(val);\n  }\n\n  return val;\n}\n\n/*!\n * 1) Apply backwards compatible find/findOne behavior to sub documents\n *\n *    find logic:\n *      a) filter out non-documents\n *      b) remove _id from sub docs when user specified\n *\n *    findOne\n *      a) if no doc found, set to null\n *      b) remove _id from sub docs when user specified\n *\n * 2) Remove _ids when specified by users query.\n *\n * background:\n * _ids are left in the query even when user excludes them so\n * that population mapping can occur.\n */\n\nfunction valueFilter(val, assignmentOpts) {\n  if (Array.isArray(val)) {\n    // find logic\n    var ret = [];\n    var numValues = val.length;\n    for (var i = 0; i < numValues; ++i) {\n      var subdoc = val[i];\n      if (!isDoc(subdoc)) continue;\n      maybeRemoveId(subdoc, assignmentOpts);\n      ret.push(subdoc);\n      if (assignmentOpts.originalLimit &&\n          ret.length >= assignmentOpts.originalLimit) {\n        break;\n      }\n    }\n\n    // Since we don't want to have to create a new mongoosearray, make sure to\n    // modify the array in place\n    while (val.length > ret.length) {\n      Array.prototype.pop.apply(val, []);\n    }\n    for (i = 0; i < ret.length; ++i) {\n      val[i] = ret[i];\n    }\n    return val;\n  }\n\n  // findOne\n  if (isDoc(val)) {\n    maybeRemoveId(val, assignmentOpts);\n    return val;\n  }\n\n  return null;\n}\n\n/*!\n * Remove _id from `subdoc` if user specified \"lean\" query option\n */\n\nfunction maybeRemoveId(subdoc, assignmentOpts) {\n  if (assignmentOpts.excludeId) {\n    if (typeof subdoc.setValue === 'function') {\n      delete subdoc._doc._id;\n    } else {\n      delete subdoc._id;\n    }\n  }\n}\n\n/*!\n * Determine if `doc` is a document returned\n * by a populate query.\n */\n\nfunction isDoc(doc) {\n  if (doc == null) {\n    return false;\n  }\n\n  var type = typeof doc;\n  if (type === 'string') {\n    return false;\n  }\n\n  if (type === 'number') {\n    return false;\n  }\n\n  if (Buffer.isBuffer(doc)) {\n    return false;\n  }\n\n  if (doc.constructor.name === 'ObjectID') {\n    return false;\n  }\n\n  // only docs\n  return true;\n}\n\n/*!\n * Compiler utility.\n *\n * @param {String|Function} name model name or class extending Model\n * @param {Schema} schema\n * @param {String} collectionName\n * @param {Connection} connection\n * @param {Mongoose} base mongoose instance\n */\n\nModel.compile = function compile(name, schema, collectionName, connection, base) {\n  var versioningEnabled = schema.options.versionKey !== false;\n\n  if (versioningEnabled && !schema.paths[schema.options.versionKey]) {\n    // add versioning to top level documents only\n    var o = {};\n    o[schema.options.versionKey] = Number;\n    schema.add(o);\n  }\n\n  var model;\n  if (typeof name === 'function' && name.prototype instanceof Model) {\n    model = name;\n    name = model.name;\n    schema.loadClass(model, false);\n    model.prototype.$isMongooseModelPrototype = true;\n  } else {\n    // generate new class\n    model = function model(doc, fields, skipId) {\n      if (!(this instanceof model)) {\n        return new model(doc, fields, skipId);\n      }\n      Model.call(this, doc, fields, skipId);\n    };\n  }\n\n  model.hooks = schema.s.hooks.clone();\n  model.base = base;\n  model.modelName = name;\n  if (!(model.prototype instanceof Model)) {\n    model.__proto__ = Model;\n    model.prototype.__proto__ = Model.prototype;\n  }\n  model.model = Model.prototype.model;\n  model.db = model.prototype.db = connection;\n  model.discriminators = model.prototype.discriminators = undefined;\n\n  model.prototype.$__setSchema(schema);\n\n  var _userProvidedOptions = schema._userProvidedOptions || {};\n\n  // `bufferCommands` is true by default...\n  var bufferCommands = true;\n  // First, take the global option\n  if (connection.base.get('bufferCommands') != null) {\n    bufferCommands = connection.base.get('bufferCommands');\n  }\n  // Connection-specific overrides the global option\n  if (connection.config.bufferCommands != null) {\n    bufferCommands = connection.config.bufferCommands;\n  }\n  // And schema options override global and connection\n  if (_userProvidedOptions.bufferCommands != null) {\n    bufferCommands = _userProvidedOptions.bufferCommands;\n  }\n\n  var collectionOptions = {\n    bufferCommands: bufferCommands,\n    capped: schema.options.capped\n  };\n\n  model.prototype.collection = connection.collection(\n    collectionName\n    , collectionOptions\n  );\n\n  // apply methods and statics\n  applyMethods(model, schema);\n  applyStatics(model, schema);\n  applyHooks(model, schema);\n\n  model.schema = model.prototype.schema;\n  model.collection = model.prototype.collection;\n\n  // Create custom query constructor\n  model.Query = function() {\n    Query.apply(this, arguments);\n  };\n  model.Query.prototype = Object.create(Query.prototype);\n  model.Query.base = Query.base;\n  applyQueryMiddleware(model.Query, model);\n  applyQueryMethods(model, schema.query);\n\n  var kareemOptions = {\n    useErrorHandlers: true,\n    numCallbackParams: 1\n  };\n  model.$__insertMany = model.hooks.createWrapper('insertMany',\n    model.$__insertMany, model, kareemOptions);\n\n  return model;\n};\n\n/*!\n * Register custom query methods for this model\n *\n * @param {Model} model\n * @param {Schema} schema\n */\n\nfunction applyQueryMethods(model, methods) {\n  for (var i in methods) {\n    model.Query.prototype[i] = methods[i];\n  }\n}\n\n/*!\n * Apply query middleware\n *\n * @param {Model} model\n */\n\nfunction applyQueryMiddleware(Query, model) {\n  const kareemOptions = {\n    useErrorHandlers: true,\n    numCallbackParams: 1,\n    nullResultByDefault: true\n  };\n\n  Query.prototype._count = model.hooks.createWrapper('count',\n    Query.prototype._count, null, kareemOptions);\n  Query.prototype._execUpdate = model.hooks.createWrapper('update',\n    Query.prototype._execUpdate, null, kareemOptions);\n  Query.prototype._find = model.hooks.createWrapper('find',\n    Query.prototype._find, null, kareemOptions);\n  Query.prototype._findOne = model.hooks.createWrapper('findOne',\n    Query.prototype._findOne, null, kareemOptions);\n  Query.prototype._findOneAndRemove = model.hooks.createWrapper('findOneAndRemove',\n    Query.prototype._findOneAndRemove, null, kareemOptions);\n  Query.prototype._findOneAndUpdate = model.hooks.createWrapper('findOneAndUpdate',\n    Query.prototype._findOneAndUpdate, null, kareemOptions);\n  Query.prototype._replaceOne = model.hooks.createWrapper('replaceOne',\n    Query.prototype._replaceOne, null, kareemOptions);\n  Query.prototype._updateMany = model.hooks.createWrapper('updateMany',\n    Query.prototype._updateMany, null, kareemOptions);\n  Query.prototype._updateOne = model.hooks.createWrapper('updateOne',\n    Query.prototype._updateOne, null, kareemOptions);\n}\n\n/*!\n * Subclass this model with `conn`, `schema`, and `collection` settings.\n *\n * @param {Connection} conn\n * @param {Schema} [schema]\n * @param {String} [collection]\n * @return {Model}\n */\n\nModel.__subclass = function subclass(conn, schema, collection) {\n  // subclass model using this connection and collection name\n  var _this = this;\n\n  var Model = function Model(doc, fields, skipId) {\n    if (!(this instanceof Model)) {\n      return new Model(doc, fields, skipId);\n    }\n    _this.call(this, doc, fields, skipId);\n  };\n\n  Model.__proto__ = _this;\n  Model.prototype.__proto__ = _this.prototype;\n  Model.db = Model.prototype.db = conn;\n\n  var s = schema && typeof schema !== 'string'\n    ? schema\n    : _this.prototype.schema;\n\n  var options = s.options || {};\n  var _userProvidedOptions = s._userProvidedOptions || {};\n\n  if (!collection) {\n    collection = _this.prototype.schema.get('collection') ||\n      utils.toCollectionName(_this.modelName, this.base.pluralize());\n  }\n\n  var bufferCommands = true;\n  if (s) {\n    if (conn.config.bufferCommands != null) {\n      bufferCommands = conn.config.bufferCommands;\n    }\n    if (_userProvidedOptions.bufferCommands != null) {\n      bufferCommands = _userProvidedOptions.bufferCommands;\n    }\n  }\n  var collectionOptions = {\n    bufferCommands: bufferCommands,\n    capped: s && options.capped\n  };\n\n  Model.prototype.collection = conn.collection(collection, collectionOptions);\n  Model.collection = Model.prototype.collection;\n  // Errors handled internally, so ignore\n  Model.init(() => {});\n  return Model;\n};\n\nModel.$wrapCallback = function(callback) {\n  var _this = this;\n  return function() {\n    try {\n      callback.apply(null, arguments);\n    } catch (error) {\n      _this.emit('error', error);\n    }\n  };\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = Model;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/model.js\n// module id = 207\n// module chunks = 0","'use strict';\n\n/*!\n * ignore\n */\n\nmodule.exports = function(schema) {\n  // ensure the documents receive an id getter unless disabled\n  var autoIdGetter = !schema.paths['id'] &&\n      (!schema.options.noVirtualId && schema.options.id);\n  if (autoIdGetter) {\n    schema.virtual('id').get(idGetter);\n  }\n};\n\n/*!\n * Returns this documents _id cast to a string.\n */\n\nfunction idGetter() {\n  if (this._id != null) {\n    return String(this._id);\n  }\n\n  return null;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/plugins/idGetter.js\n// module id = 208\n// module chunks = 0","'use strict';\n\nvar each = require('async/each');\n\n/*!\n * ignore\n */\n\nmodule.exports = function(schema) {\n  const unshift = true;\n  schema.s.hooks.pre('remove', false, function(next) {\n    if (this.ownerDocument) {\n      next();\n      return;\n    }\n\n    var _this = this;\n    var subdocs = this.$__getAllSubdocs();\n\n    if (!subdocs.length) {\n      next();\n      return;\n    }\n\n    each(subdocs, function(subdoc, cb) {\n      subdoc.$__remove(function(err) {\n        cb(err);\n      });\n    }, function(error) {\n      if (error) {\n        return _this.schema.s.hooks.execPost('remove:error', _this, [_this], { error: error }, function(error) {\n          next(error);\n        });\n      }\n      next();\n    });\n  }, null, unshift);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/plugins/removeSubdocs.js\n// module id = 209\n// module chunks = 0","'use strict';\n\nvar each = require('async/each');\n\n/*!\n * ignore\n */\n\nmodule.exports = function(schema) {\n  const unshift = true;\n  schema.s.hooks.pre('save', false, function(next) {\n    if (this.ownerDocument) {\n      next();\n      return;\n    }\n\n    var _this = this;\n    var subdocs = this.$__getAllSubdocs();\n\n    if (!subdocs.length) {\n      next();\n      return;\n    }\n\n    each(subdocs, function(subdoc, cb) {\n      subdoc.save(function(err) {\n        cb(err);\n      });\n    }, function(error) {\n      if (error) {\n        return _this.schema.s.hooks.execPost('save:error', _this, [_this], { error: error }, function(error) {\n          next(error);\n        });\n      }\n      next();\n    });\n  }, null, unshift);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/plugins/saveSubdocs.js\n// module id = 210\n// module chunks = 0","'use strict';\n\nvar utils = require('../utils');\n\n/*!\n * ignore\n */\n\nmodule.exports = function shardingPlugin(schema) {\n  schema.post('init', function() {\n    storeShard.call(this);\n    return this;\n  });\n  schema.pre('save', function(next) {\n    applyWhere.call(this);\n    next();\n  });\n  schema.post('save', function() {\n    storeShard.call(this);\n  });\n};\n\n/*!\n * ignore\n */\n\nfunction applyWhere() {\n  var paths;\n  var len;\n\n  if (this.$__.shardval) {\n    paths = Object.keys(this.$__.shardval);\n    len = paths.length;\n\n    this.$where = this.$where || {};\n    for (var i = 0; i < len; ++i) {\n      this.$where[paths[i]] = this.$__.shardval[paths[i]];\n    }\n  }\n}\n\n/*!\n * ignore\n */\n\nmodule.exports.storeShard = storeShard;\n\n/*!\n * ignore\n */\n\nfunction storeShard() {\n  // backwards compat\n  var key = this.schema.options.shardKey || this.schema.options.shardkey;\n  if (!(key && utils.getFunctionName(key.constructor) === 'Object')) {\n    return;\n  }\n\n  var orig = this.$__.shardval = {},\n      paths = Object.keys(key),\n      len = paths.length,\n      val;\n\n  for (var i = 0; i < len; ++i) {\n    val = this.getValue(paths[i]);\n    if (utils.isMongooseObject(val)) {\n      orig[paths[i]] = val.toObject({depopulate: true, _isNested: true});\n    } else if (val !== null && val !== undefined && val.valueOf &&\n    // Explicitly don't take value of dates\n        (!val.constructor || utils.getFunctionName(val.constructor) !== 'Date')) {\n      orig[paths[i]] = val.valueOf();\n    } else {\n      orig[paths[i]] = val;\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/plugins/sharding.js\n// module id = 211\n// module chunks = 0","'use strict';\n\n/*!\n * ignore\n */\n\nmodule.exports = function(schema) {\n  const unshift = true;\n  schema.pre('save', false, function(next, options) {\n    var _this = this;\n    // Nested docs have their own presave\n    if (this.ownerDocument) {\n      return next();\n    }\n\n    var hasValidateBeforeSaveOption = options &&\n        (typeof options === 'object') &&\n        ('validateBeforeSave' in options);\n\n    var shouldValidate;\n    if (hasValidateBeforeSaveOption) {\n      shouldValidate = !!options.validateBeforeSave;\n    } else {\n      shouldValidate = this.schema.options.validateBeforeSave;\n    }\n\n    // Validate\n    if (shouldValidate) {\n      this.validate(function(error) {\n        return _this.schema.s.hooks.execPost('save:error', _this, [ _this], { error: error }, function(error) {\n          next(error);\n        });\n      });\n    } else {\n      next();\n    }\n  }, null, unshift);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/plugins/validateBeforeSave.js\n// module id = 212\n// module chunks = 0","/* eslint no-empty: 1 */\n\n/*!\n * Module dependencies.\n */\n\nvar SchemaType = require('../schematype');\nvar CastError = SchemaType.CastError;\nvar Decimal128Type = require('../types/decimal128');\nvar utils = require('../utils');\nvar Document;\n\n/**\n * Decimal128 SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction Decimal128(key, options) {\n  SchemaType.call(this, key, options, 'Decimal128');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nDecimal128.schemaName = 'Decimal128';\n\n/*!\n * Inherits from SchemaType.\n */\nDecimal128.prototype = Object.create(SchemaType.prototype);\nDecimal128.prototype.constructor = Decimal128;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nDecimal128.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n  return value instanceof Decimal128Type;\n};\n\n/**\n * Casts to Decimal128\n *\n * @param {Object} value\n * @param {Object} doc\n * @param {Boolean} init whether this is an initialization cast\n * @api private\n */\n\nDecimal128.prototype.cast = function(value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n\n    if (value === null || value === undefined) {\n      return value;\n    }\n\n    // lazy load\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    }\n\n    // setting a populated path\n    if (value instanceof Decimal128Type) {\n      return value;\n    } else if (Buffer.isBuffer(value) || !utils.isObject(value)) {\n      throw new CastError('Decimal128', value, this.path);\n    }\n\n    // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n    var path = doc.$__fullPath(this.path);\n    var owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    var pop = owner.populated(path, true);\n    var ret = value;\n    if (!doc.$__.populated ||\n        !doc.$__.populated[path] ||\n        !doc.$__.populated[path].options ||\n        !doc.$__.populated[path].options.options ||\n        !doc.$__.populated[path].options.options.lean) {\n      ret = new pop.options.model(value);\n      ret.$__.wasPopulated = true;\n    }\n\n    return ret;\n  }\n\n  if (value == null) {\n    return value;\n  }\n\n  if (typeof value === 'object' && typeof value.$numberDecimal === 'string') {\n    return Decimal128Type.fromString(value.$numberDecimal);\n  }\n\n  if (value instanceof Decimal128Type) {\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    return Decimal128Type.fromString(value);\n  }\n\n  if (Buffer.isBuffer(value)) {\n    return new Decimal128Type(value);\n  }\n\n  throw new CastError('Decimal128', value, this.path);\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nDecimal128.prototype.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\n      $gt: handleSingle,\n      $gte: handleSingle,\n      $lt: handleSingle,\n      $lte: handleSingle\n    });\n\n/*!\n * Module exports.\n */\n\nmodule.exports = Decimal128;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/schema/decimal128.js\n// module id = 213\n// module chunks = 0","/* eslint no-empty: 1 */\n\n/*!\n * Module dependencies.\n */\n\nvar ArrayType = require('./array');\nvar CastError = require('../error/cast');\nvar Document = require('../document');\nvar EventEmitter = require('events').EventEmitter;\nvar SchemaType = require('../schematype');\nvar discriminator = require('../services/model/discriminator');\nvar util = require('util');\nvar utils = require('../utils');\nvar getDiscriminatorByValue = require('../queryhelpers').getDiscriminatorByValue;\n\nvar MongooseDocumentArray;\nvar Subdocument;\n\n/**\n * SubdocsArray SchemaType constructor\n *\n * @param {String} key\n * @param {Schema} schema\n * @param {Object} options\n * @inherits SchemaArray\n * @api public\n */\n\nfunction DocumentArray(key, schema, options) {\n  var EmbeddedDocument = _createConstructor(schema, options);\n  EmbeddedDocument.prototype.$basePath = key;\n\n  ArrayType.call(this, key, EmbeddedDocument, options);\n\n  this.schema = schema;\n  this.$isMongooseDocumentArray = true;\n  var fn = this.defaultValue;\n\n  if (!('defaultValue' in this) || fn !== void 0) {\n    this.default(function() {\n      var arr = fn.call(this);\n      if (!Array.isArray(arr)) {\n        arr = [arr];\n      }\n      // Leave it up to `cast()` to convert this to a documentarray\n      return arr;\n    });\n  }\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nDocumentArray.schemaName = 'DocumentArray';\n\n/*!\n * Inherits from ArrayType.\n */\nDocumentArray.prototype = Object.create(ArrayType.prototype);\nDocumentArray.prototype.constructor = DocumentArray;\n\n/*!\n * Ignore\n */\n\nfunction _createConstructor(schema, options) {\n  Subdocument || (Subdocument = require('../types/embedded'));\n\n  // compile an embedded document for this schema\n  function EmbeddedDocument() {\n    Subdocument.apply(this, arguments);\n  }\n\n  EmbeddedDocument.prototype = Object.create(Subdocument.prototype);\n  EmbeddedDocument.prototype.$__setSchema(schema);\n  EmbeddedDocument.schema = schema;\n  EmbeddedDocument.prototype.constructor = EmbeddedDocument;\n  EmbeddedDocument.$isArraySubdocument = true;\n\n  // apply methods\n  for (var i in schema.methods) {\n    EmbeddedDocument.prototype[i] = schema.methods[i];\n  }\n\n  // apply statics\n  for (i in schema.statics) {\n    EmbeddedDocument[i] = schema.statics[i];\n  }\n\n  for (i in EventEmitter.prototype) {\n    EmbeddedDocument[i] = EventEmitter.prototype[i];\n  }\n\n  EmbeddedDocument.options = options;\n\n  return EmbeddedDocument;\n}\n\n/*!\n * Ignore\n */\n\nDocumentArray.prototype.discriminator = function(name, schema) {\n  if (typeof name === 'function') {\n    name = utils.getFunctionName(name);\n  }\n\n  schema = discriminator(this.casterConstructor, name, schema);\n\n  var EmbeddedDocument = _createConstructor(schema);\n  EmbeddedDocument.baseCasterConstructor = this.casterConstructor;\n\n  try {\n    Object.defineProperty(EmbeddedDocument, 'name', {\n      value: name\n    });\n  } catch (error) {\n    // Ignore error, only happens on old versions of node\n  }\n\n  this.casterConstructor.discriminators[name] = EmbeddedDocument;\n\n  return this.casterConstructor.discriminators[name];\n};\n\n/**\n * Performs local validations first, then validations on each embedded doc\n *\n * @api private\n */\n\nDocumentArray.prototype.doValidate = function(array, fn, scope, options) {\n  // lazy load\n  MongooseDocumentArray || (MongooseDocumentArray = require('../types/documentarray'));\n\n  var _this = this;\n  SchemaType.prototype.doValidate.call(this, array, function(err) {\n    if (err) {\n      return fn(err);\n    }\n\n    var count = array && array.length;\n    var error;\n\n    if (!count) {\n      return fn();\n    }\n    if (options && options.updateValidator) {\n      return fn();\n    }\n    if (!array.isMongooseDocumentArray) {\n      array = new MongooseDocumentArray(array, _this.path, scope);\n    }\n\n    // handle sparse arrays, do not use array.forEach which does not\n    // iterate over sparse elements yet reports array.length including\n    // them :(\n\n    function callback(err) {\n      if (err) {\n        error = err;\n      }\n      --count || fn(error);\n    }\n\n    for (var i = 0, len = count; i < len; ++i) {\n      // sidestep sparse entries\n      var doc = array[i];\n      if (!doc) {\n        --count || fn(error);\n        continue;\n      }\n\n      // If you set the array index directly, the doc might not yet be\n      // a full fledged mongoose subdoc, so make it into one.\n      if (!(doc instanceof Subdocument)) {\n        doc = array[i] = new _this.casterConstructor(doc, array, undefined,\n          undefined, i);\n      }\n\n      doc.$__validate(callback);\n    }\n  }, scope);\n};\n\n/**\n * Performs local validations first, then validations on each embedded doc.\n *\n * ####Note:\n *\n * This method ignores the asynchronous validators.\n *\n * @return {MongooseError|undefined}\n * @api private\n */\n\nDocumentArray.prototype.doValidateSync = function(array, scope) {\n  var schemaTypeError = SchemaType.prototype.doValidateSync.call(this, array, scope);\n  if (schemaTypeError) {\n    return schemaTypeError;\n  }\n\n  var count = array && array.length,\n      resultError = null;\n\n  if (!count) {\n    return;\n  }\n\n  // handle sparse arrays, do not use array.forEach which does not\n  // iterate over sparse elements yet reports array.length including\n  // them :(\n\n  for (var i = 0, len = count; i < len; ++i) {\n    // only first error\n    if (resultError) {\n      break;\n    }\n    // sidestep sparse entries\n    var doc = array[i];\n    if (!doc) {\n      continue;\n    }\n\n    // If you set the array index directly, the doc might not yet be\n    // a full fledged mongoose subdoc, so make it into one.\n    if (!(doc instanceof Subdocument)) {\n      doc = array[i] = new this.casterConstructor(doc, array, undefined,\n        undefined, i);\n    }\n\n    var subdocValidateError = doc.validateSync();\n\n    if (subdocValidateError) {\n      resultError = subdocValidateError;\n    }\n  }\n\n  return resultError;\n};\n\n/**\n * Casts contents\n *\n * @param {Object} value\n * @param {Document} document that triggers the casting\n * @api private\n */\n\nDocumentArray.prototype.cast = function(value, doc, init, prev, options) {\n  // lazy load\n  MongooseDocumentArray || (MongooseDocumentArray = require('../types/documentarray'));\n\n  var selected;\n  var subdoc;\n  var i;\n  var _opts = { transform: false, virtuals: false };\n\n  if (!Array.isArray(value)) {\n    // gh-2442 mark whole array as modified if we're initializing a doc from\n    // the db and the path isn't an array in the document\n    if (!!doc && init) {\n      doc.markModified(this.path);\n    }\n    return this.cast([value], doc, init, prev);\n  }\n\n  if (!(value && value.isMongooseDocumentArray) &&\n      (!options || !options.skipDocumentArrayCast)) {\n    value = new MongooseDocumentArray(value, this.path, doc);\n    if (prev && prev._handlers) {\n      for (var key in prev._handlers) {\n        doc.removeListener(key, prev._handlers[key]);\n      }\n    }\n  } else if (value && value.isMongooseDocumentArray) {\n    // We need to create a new array, otherwise change tracking will\n    // update the old doc (gh-4449)\n    value = new MongooseDocumentArray(value, this.path, doc);\n  }\n\n  i = value.length;\n\n  while (i--) {\n    if (!value[i]) {\n      continue;\n    }\n\n    var Constructor = this.casterConstructor;\n    if (Constructor.discriminators &&\n        Constructor.schema &&\n        Constructor.schema.options &&\n        typeof value[i][Constructor.schema.options.discriminatorKey] === 'string') {\n      if (Constructor.discriminators[value[i][Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[value[i][Constructor.schema.options.discriminatorKey]];\n      } else {\n        var constructorByValue = getDiscriminatorByValue(Constructor, value[i][Constructor.schema.options.discriminatorKey]);\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n\n    // Check if the document has a different schema (re gh-3701)\n    if ((value[i] instanceof Document) &&\n        value[i].schema !== Constructor.schema) {\n      value[i] = value[i].toObject({ transform: false, virtuals: false });\n    }\n    if (!(value[i] instanceof Subdocument) && value[i]) {\n      if (init) {\n        if (doc) {\n          selected || (selected = scopePaths(this, doc.$__.selected, init));\n        } else {\n          selected = true;\n        }\n\n        subdoc = new Constructor(null, value, true, selected, i);\n        value[i] = subdoc.init(value[i]);\n      } else {\n        if (prev && (subdoc = prev.id(value[i]._id))) {\n          subdoc = prev.id(value[i]._id);\n        }\n\n        if (prev && subdoc && utils.deepEqual(subdoc.toObject(_opts), value[i])) {\n          // handle resetting doc with existing id and same data\n          subdoc.set(value[i]);\n          // if set() is hooked it will have no return value\n          // see gh-746\n          value[i] = subdoc;\n        } else {\n          try {\n            subdoc = new Constructor(value[i], value, undefined,\n              undefined, i);\n            // if set() is hooked it will have no return value\n            // see gh-746\n            value[i] = subdoc;\n          } catch (error) {\n            var valueInErrorMessage = util.inspect(value[i]);\n            throw new CastError('embedded', valueInErrorMessage,\n              value._path, error);\n          }\n        }\n      }\n    }\n  }\n\n  return value;\n};\n\n/*!\n * Scopes paths selected in a query to this array.\n * Necessary for proper default application of subdocument values.\n *\n * @param {DocumentArray} array - the array to scope `fields` paths\n * @param {Object|undefined} fields - the root fields selected in the query\n * @param {Boolean|undefined} init - if we are being created part of a query result\n */\n\nfunction scopePaths(array, fields, init) {\n  if (!(init && fields)) {\n    return undefined;\n  }\n\n  var path = array.path + '.';\n  var keys = Object.keys(fields);\n  var i = keys.length;\n  var selected = {};\n  var hasKeys;\n  var key;\n  var sub;\n\n  while (i--) {\n    key = keys[i];\n    if (key.indexOf(path) === 0) {\n      sub = key.substring(path.length);\n      if (sub === '$') {\n        continue;\n      }\n      if (sub.indexOf('$.') === 0) {\n        sub = sub.substr(2);\n      }\n      hasKeys || (hasKeys = true);\n      selected[sub] = fields[key];\n    }\n  }\n\n  return hasKeys && selected || undefined;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = DocumentArray;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/schema/documentarray.js\n// module id = 214\n// module chunks = 0","'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst $exists = require('./operators/exists');\nconst EventEmitter = require('events').EventEmitter;\nconst SchemaType = require('../schematype');\nconst castToNumber = require('./operators/helpers').castToNumber;\nconst discriminator = require('../services/model/discriminator');\nconst geospatial = require('./operators/geospatial');\nconst internalToObjectOptions = require('../options').internalToObjectOptions;\nvar getDiscriminatorByValue = require('../queryhelpers').getDiscriminatorByValue;\n\nlet Subdocument;\n\nmodule.exports = Embedded;\n\n/**\n * Sub-schema schematype constructor\n *\n * @param {Schema} schema\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction Embedded(schema, path, options) {\n  this.caster = _createConstructor(schema);\n  this.caster.prototype.$basePath = path;\n  this.schema = schema;\n  this.$isSingleNested = true;\n  SchemaType.call(this, path, options, 'Embedded');\n}\n\n/*!\n * ignore\n */\n\nEmbedded.prototype = Object.create(SchemaType.prototype);\n\n/*!\n * ignore\n */\n\nfunction _createConstructor(schema) {\n  // lazy load\n  Subdocument || (Subdocument = require('../types/subdocument'));\n\n  var _embedded = function SingleNested(value, path, parent) {\n    var _this = this;\n\n    this.$parent = parent;\n    Subdocument.apply(this, arguments);\n\n    if (parent) {\n      parent.on('save', function() {\n        _this.emit('save', _this);\n        _this.constructor.emit('save', _this);\n      });\n\n      parent.on('isNew', function(val) {\n        _this.isNew = val;\n        _this.emit('isNew', val);\n        _this.constructor.emit('isNew', val);\n      });\n    }\n  };\n  _embedded.prototype = Object.create(Subdocument.prototype);\n  _embedded.prototype.$__setSchema(schema);\n  _embedded.prototype.constructor = _embedded;\n  _embedded.schema = schema;\n  _embedded.$isSingleNested = true;\n  _embedded.prototype.toBSON = function() {\n    return this.toObject(internalToObjectOptions);\n  };\n\n  // apply methods\n  for (var i in schema.methods) {\n    _embedded.prototype[i] = schema.methods[i];\n  }\n\n  // apply statics\n  for (i in schema.statics) {\n    _embedded[i] = schema.statics[i];\n  }\n\n  for (i in EventEmitter.prototype) {\n    _embedded[i] = EventEmitter.prototype[i];\n  }\n\n  return _embedded;\n}\n\n/*!\n * Special case for when users use a common location schema to represent\n * locations for use with $geoWithin.\n * https://docs.mongodb.org/manual/reference/operator/query/geoWithin/\n *\n * @param {Object} val\n * @api private\n */\n\nEmbedded.prototype.$conditionalHandlers.$geoWithin = function handle$geoWithin(val) {\n  return { $geometry: this.castForQuery(val.$geometry) };\n};\n\n/*!\n * ignore\n */\n\nEmbedded.prototype.$conditionalHandlers.$near =\nEmbedded.prototype.$conditionalHandlers.$nearSphere = geospatial.cast$near;\n\nEmbedded.prototype.$conditionalHandlers.$within =\nEmbedded.prototype.$conditionalHandlers.$geoWithin = geospatial.cast$within;\n\nEmbedded.prototype.$conditionalHandlers.$geoIntersects =\n  geospatial.cast$geoIntersects;\n\nEmbedded.prototype.$conditionalHandlers.$minDistance = castToNumber;\nEmbedded.prototype.$conditionalHandlers.$maxDistance = castToNumber;\n\nEmbedded.prototype.$conditionalHandlers.$exists = $exists;\n\n/**\n * Casts contents\n *\n * @param {Object} value\n * @api private\n */\n\nEmbedded.prototype.cast = function(val, doc, init, priorVal) {\n  if (val && val.$isSingleNested) {\n    return val;\n  }\n\n  var Constructor = this.caster;\n  var discriminatorKey = Constructor.schema.options.discriminatorKey;\n  if (val != null &&\n      Constructor.discriminators &&\n      typeof val[discriminatorKey] === 'string') {\n    if (Constructor.discriminators[val[discriminatorKey]]) {\n      Constructor = Constructor.discriminators[val[discriminatorKey]];\n    } else {\n      var constructorByValue = getDiscriminatorByValue(Constructor, val[discriminatorKey]);\n      if (constructorByValue) {\n        Constructor = constructorByValue;\n      }\n    }\n  }\n\n  var subdoc;\n  if (init) {\n    subdoc = new Constructor(void 0, doc ? doc.$__.selected : void 0, doc);\n    subdoc.init(val);\n  } else {\n    if (Object.keys(val).length === 0) {\n      return new Constructor({}, doc ? doc.$__.selected : void 0, doc);\n    }\n\n    return new Constructor(val, doc ? doc.$__.selected : void 0, doc, undefined, {\n      priorDoc: priorVal\n    });\n  }\n\n  return subdoc;\n};\n\n/**\n * Casts contents for query\n *\n * @param {string} [$conditional] optional query operator (like `$eq` or `$in`)\n * @param {any} value\n * @api private\n */\n\nEmbedded.prototype.castForQuery = function($conditional, val) {\n  var handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional);\n    }\n    return handler.call(this, val);\n  }\n  val = $conditional;\n  if (val == null) {\n    return val;\n  }\n\n  if (this.options.runSetters) {\n    val = this._applySetters(val);\n  }\n\n  var Constructor = this.caster;\n  var discriminatorKey = Constructor.schema.options.discriminatorKey;\n  if (val != null &&\n      Constructor.discriminators &&\n      typeof val[discriminatorKey] === 'string') {\n    if (Constructor.discriminators[val[discriminatorKey]]) {\n      Constructor = Constructor.discriminators[val[discriminatorKey]];\n    } else {\n      var constructorByValue = getDiscriminatorByValue(Constructor, val[discriminatorKey]);\n      if (constructorByValue) {\n        Constructor = constructorByValue;\n      }\n    }\n  }\n\n  return new Constructor(val);\n};\n\n/**\n * Async validation on this single nested doc.\n *\n * @api private\n */\n\nEmbedded.prototype.doValidate = function(value, fn, scope) {\n  var Constructor = this.caster;\n  var discriminatorKey = Constructor.schema.options.discriminatorKey;\n  if (value != null &&\n      Constructor.discriminators &&\n      typeof value[discriminatorKey] === 'string') {\n    if (Constructor.discriminators[value[discriminatorKey]]) {\n      Constructor = Constructor.discriminators[value[discriminatorKey]];\n    } else {\n      var constructorByValue = getDiscriminatorByValue(Constructor, value[discriminatorKey]);\n      if (constructorByValue) {\n        Constructor = constructorByValue;\n      }\n    }\n  }\n\n\n  SchemaType.prototype.doValidate.call(this, value, function(error) {\n    if (error) {\n      return fn(error);\n    }\n    if (!value) {\n      return fn(null);\n    }\n\n    if (!(value instanceof Constructor)) {\n      value = new Constructor(value);\n    }\n    value.validate({__noPromise: true}, fn);\n  }, scope);\n};\n\n/**\n * Synchronously validate this single nested doc\n *\n * @api private\n */\n\nEmbedded.prototype.doValidateSync = function(value, scope) {\n  var schemaTypeError = SchemaType.prototype.doValidateSync.call(this, value, scope);\n  if (schemaTypeError) {\n    return schemaTypeError;\n  }\n  if (!value) {\n    return;\n  }\n  return value.validateSync();\n};\n\n/**\n * Adds a discriminator to this property\n *\n * @param {String} name\n * @param {Schema} schema fields to add to the schema for instances of this sub-class\n * @api public\n */\n\nEmbedded.prototype.discriminator = function(name, schema) {\n  discriminator(this.caster, name, schema);\n\n  this.caster.discriminators[name] = _createConstructor(schema);\n\n  return this.caster.discriminators[name];\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/schema/embedded.js\n// module id = 215\n// module chunks = 0","'use strict';\n\n/*!\n * Register methods for this model\n *\n * @param {Model} model\n * @param {Schema} schema\n */\n\nmodule.exports = function applyMethods(model, schema) {\n  function apply(method, schema) {\n    Object.defineProperty(model.prototype, method, {\n      get: function() {\n        var h = {};\n        for (var k in schema.methods[method]) {\n          h[k] = schema.methods[method][k].bind(this);\n        }\n        return h;\n      },\n      configurable: true\n    });\n  }\n  for (var method in schema.methods) {\n    if (schema.tree.hasOwnProperty(method)) {\n      throw new Error('You have a method and a property in your schema both ' +\n        'named \"' + method + '\"');\n    }\n    if (typeof schema.methods[method] === 'function') {\n      model.prototype[method] = schema.methods[method];\n    } else {\n      apply(method, schema);\n    }\n  }\n\n  // Recursively call `applyMethods()` on child schemas\n  model.$appliedMethods = true;\n  for (var i = 0; i < schema.childSchemas.length; ++i) {\n    if (schema.childSchemas[i].model.$appliedMethods) {\n      continue;\n    }\n    applyMethods(schema.childSchemas[i].model, schema.childSchemas[i].schema);\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/services/model/applyMethods.js\n// module id = 216\n// module chunks = 0","'use strict';\n\n/*!\n * Register statics for this model\n * @param {Model} model\n * @param {Schema} schema\n */\nmodule.exports = function applyStatics(model, schema) {\n  for (var i in schema.statics) {\n    model[i] = schema.statics[i];\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/services/model/applyStatics.js\n// module id = 217\n// module chunks = 0","'use strict';\n\n/*!\n * ignore\n */\n\nvar Mixed = require('../../schema/mixed');\nvar mpath = require('mpath');\n\n/*!\n * @param {Schema} schema\n * @param {Object} doc POJO\n * @param {string} path\n */\n\nmodule.exports = function getSchemaTypes(schema, doc, path) {\n  var pathschema = schema.path(path);\n\n  if (pathschema) {\n    return pathschema;\n  }\n\n  function search(parts, schema) {\n    var p = parts.length + 1;\n    var foundschema;\n    var trypath;\n\n    while (p--) {\n      trypath = parts.slice(0, p).join('.');\n      foundschema = schema.path(trypath);\n      if (foundschema) {\n        if (foundschema.caster) {\n          // array of Mixed?\n          if (foundschema.caster instanceof Mixed) {\n            return foundschema.caster;\n          }\n\n          var schemas = null;\n          if (doc != null && foundschema.schema != null && foundschema.schema.discriminators != null) {\n            var discriminators = foundschema.schema.discriminators;\n            var keys = mpath.get(trypath + '.' + foundschema.schema.options.discriminatorKey,\n              doc);\n            schemas = Object.keys(discriminators).\n              reduce(function(cur, discriminator) {\n                if (keys.indexOf(discriminator) !== -1) {\n                  cur.push(discriminators[discriminator]);\n                }\n                return cur;\n              }, []);\n          }\n\n          // Now that we found the array, we need to check if there\n          // are remaining document paths to look up for casting.\n          // Also we need to handle array.$.path since schema.path\n          // doesn't work for that.\n          // If there is no foundschema.schema we are dealing with\n          // a path like array.$\n          if (p !== parts.length && foundschema.schema) {\n            var ret;\n            if (parts[p] === '$') {\n              if (p + 1 === parts.length) {\n                // comments.$\n                return foundschema;\n              }\n              // comments.$.comments.$.title\n              ret = search(parts.slice(p + 1), schema);\n              if (ret) {\n                ret.$isUnderneathDocArray = ret.$isUnderneathDocArray ||\n                  !foundschema.schema.$isSingleNested;\n              }\n              return ret;\n            }\n\n            if (schemas != null && schemas.length > 0) {\n              ret = [];\n              for (var i = 0; i < schemas.length; ++i) {\n                var _ret = search(parts.slice(p), schemas[i]);\n                if (_ret != null) {\n                  _ret.$isUnderneathDocArray = _ret.$isUnderneathDocArray ||\n                    !foundschema.schema.$isSingleNested;\n                  if (_ret.$isUnderneathDocArray) {\n                    ret.$isUnderneathDocArray = true;\n                  }\n                  ret.push(_ret);\n                }\n              }\n              return ret;\n            } else {\n              ret = search(parts.slice(p), foundschema.schema);\n\n              if (ret) {\n                ret.$isUnderneathDocArray = ret.$isUnderneathDocArray ||\n                  !foundschema.schema.$isSingleNested;\n              }\n\n              return ret;\n            }\n          }\n        }\n\n        return foundschema;\n      }\n    }\n  }\n\n  // look for arrays\n  var parts = path.split('.');\n  for (var i = 0; i < parts.length; ++i) {\n    if (parts[i] === '$') {\n      // Re: gh-5628, because `schema.path()` doesn't take $ into account.\n      parts[i] = '0';\n    }\n  }\n  return search(parts, schema);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/services/populate/getSchemaTypes.js\n// module id = 218\n// module chunks = 0","'use strict';\n\nconst isDefiningProjection = require('./isDefiningProjection');\n\n/*!\n * ignore\n */\n\nmodule.exports = function isExclusive(projection) {\n  let keys = Object.keys(projection);\n  let ki = keys.length;\n  let exclude = null;\n\n  if (ki === 1 && keys[0] === '_id') {\n    exclude = !!projection[keys[ki]];\n  } else {\n    while (ki--) {\n      // Does this projection explicitly define inclusion/exclusion?\n      // Explicitly avoid `$meta` and `$slice`\n      if (keys[ki] !== '_id' && isDefiningProjection(projection[keys[ki]])) {\n        exclude = !projection[keys[ki]];\n        break;\n      }\n    }\n  }\n\n  return exclude;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/services/projection/isExclusive.js\n// module id = 219\n// module chunks = 0","'use strict';\n\nvar isDefiningProjection = require('./isDefiningProjection');\n\n/*!\n * ignore\n */\n\nmodule.exports = function isInclusive(projection) {\n  if (projection == null) {\n    return false;\n  }\n\n  var props = Object.keys(projection);\n  var numProps = props.length;\n  if (numProps === 0) {\n    return false;\n  }\n\n  for (var i = 0; i < numProps; ++i) {\n    var prop = props[i];\n    // If field is truthy (1, true, etc.) and not an object, then this\n    // projection must be inclusive. If object, assume its $meta, $slice, etc.\n    if (isDefiningProjection(projection[prop]) && !!projection[prop]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/services/projection/isInclusive.js\n// module id = 220\n// module chunks = 0","'use strict';\n\n/*!\n * ignore\n */\n\nmodule.exports = function isPathSelectedInclusive(fields, path) {\n  var chunks = path.split('.');\n  var cur = '';\n  var j;\n  var keys;\n  var numKeys;\n  for (var i = 0; i < chunks.length; ++i) {\n    cur += cur.length ? '.' : '' + chunks[i];\n    if (fields[cur]) {\n      keys = Object.keys(fields);\n      numKeys = keys.length;\n      for (j = 0; j < numKeys; ++j) {\n        if (keys[i].indexOf(cur + '.') === 0 && keys[i].indexOf(path) !== 0) {\n          continue;\n        }\n      }\n      return true;\n    }\n  }\n\n  return false;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/services/projection/isPathSelectedInclusive.js\n// module id = 221\n// module chunks = 0","'use strict';\n\n/*!\n * ignore\n */\n\nmodule.exports = function(obj) {\n  var keys = Object.keys(obj);\n  var len = keys.length;\n  for (var i = 0; i < len; ++i) {\n    if (keys[i].charAt(0) === '$') {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/services/query/hasDollarKeys.js\n// module id = 222\n// module chunks = 0","'use strict';\n\n/*!\n * ignore\n */\n\nmodule.exports = function selectPopulatedFields(query) {\n  var opts = query._mongooseOptions;\n\n  if (opts.populate != null) {\n    var paths = Object.keys(opts.populate);\n    var i;\n    var userProvidedFields = query._userProvidedFields || {};\n    if (query.selectedInclusively()) {\n      for (i = 0; i < paths.length; ++i) {\n        if (!isPathInFields(userProvidedFields, paths[i])) {\n          query.select(paths[i]);\n        }\n      }\n    } else if (query.selectedExclusively()) {\n      for (i = 0; i < paths.length; ++i) {\n        if (userProvidedFields[paths[i]] == null) {\n          delete query._fields[paths[i]];\n        }\n      }\n    }\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction isPathInFields(userProvidedFields, path) {\n  var pieces = path.split('.');\n  var len = pieces.length;\n  var cur = pieces[0];\n  for (var i = 1; i < len; ++i) {\n    if (userProvidedFields[cur] != null) {\n      return true;\n    }\n    cur += '.' + pieces[i];\n  }\n  return userProvidedFields[cur] != null;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/services/query/selectPopulatedFields.js\n// module id = 223\n// module chunks = 0","'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst Mixed = require('../schema/mixed');\nconst ValidationError = require('../error/validation');\nconst flatten = require('./common').flatten;\nconst modifiedPaths = require('./common').modifiedPaths;\nconst parallel = require('async/parallel');\n\n/**\n * Applies validators and defaults to update and findOneAndUpdate operations,\n * specifically passing a null doc as `this` to validators and defaults\n *\n * @param {Query} query\n * @param {Schema} schema\n * @param {Object} castedDoc\n * @param {Object} options\n * @method runValidatorsOnUpdate\n * @api private\n */\n\nmodule.exports = function(query, schema, castedDoc, options) {\n  var _keys;\n  var keys = Object.keys(castedDoc || {});\n  var updatedKeys = {};\n  var updatedValues = {};\n  var arrayAtomicUpdates = {};\n  var numKeys = keys.length;\n  var hasDollarUpdate = false;\n  var modified = {};\n  var currentUpdate;\n  var key;\n\n  for (var i = 0; i < numKeys; ++i) {\n    if (keys[i].charAt(0) === '$') {\n      hasDollarUpdate = true;\n      if (keys[i] === '$push' || keys[i] === '$addToSet') {\n        _keys = Object.keys(castedDoc[keys[i]]);\n        for (var ii = 0; ii < _keys.length; ++ii) {\n          currentUpdate = castedDoc[keys[i]][_keys[ii]];\n          if (currentUpdate && currentUpdate.$each) {\n            arrayAtomicUpdates[_keys[ii]] = (arrayAtomicUpdates[_keys[ii]] || []).\n              concat(currentUpdate.$each);\n          } else {\n            arrayAtomicUpdates[_keys[ii]] = (arrayAtomicUpdates[_keys[ii]] || []).\n              concat([currentUpdate]);\n          }\n        }\n        continue;\n      }\n      modifiedPaths(castedDoc[keys[i]], '', modified);\n      var flat = flatten(castedDoc[keys[i]]);\n      var paths = Object.keys(flat);\n      var numPaths = paths.length;\n      for (var j = 0; j < numPaths; ++j) {\n        var updatedPath = paths[j].replace('.$.', '.0.');\n        updatedPath = updatedPath.replace(/\\.\\$$/, '.0');\n        key = keys[i];\n        // With `$pull` we might flatten `$in`. Skip stuff nested under `$in`\n        // for the rest of the logic, it will get handled later.\n        if (updatedPath.indexOf('$') !== -1) {\n          continue;\n        }\n        if (key === '$set' || key === '$setOnInsert' ||\n            key === '$pull' || key === '$pullAll') {\n          updatedValues[updatedPath] = flat[paths[j]];\n        } else if (key === '$unset') {\n          updatedValues[updatedPath] = undefined;\n        }\n        updatedKeys[updatedPath] = true;\n      }\n    }\n  }\n\n  if (!hasDollarUpdate) {\n    modifiedPaths(castedDoc, '', modified);\n    updatedValues = flatten(castedDoc);\n    updatedKeys = Object.keys(updatedValues);\n  }\n\n  var updates = Object.keys(updatedValues);\n  var numUpdates = updates.length;\n  var validatorsToExecute = [];\n  var validationErrors = [];\n  function iter(i, v) {\n    var schemaPath = schema._getSchema(updates[i]);\n    if (schemaPath) {\n      // gh-4305: `_getSchema()` will report all sub-fields of a 'Mixed' path\n      // as 'Mixed', so avoid double validating them.\n      if (schemaPath instanceof Mixed && schemaPath.$fullPath !== updates[i]) {\n        return;\n      }\n\n      if (v && Array.isArray(v.$in)) {\n        v.$in.forEach((v, i) => {\n          validatorsToExecute.push(function(callback) {\n            schemaPath.doValidate(\n              v,\n              function(err) {\n                if (err) {\n                  err.path = updates[i] + '.$in.' + i;\n                  validationErrors.push(err);\n                }\n                callback(null);\n              },\n              options && options.context === 'query' ? query : null,\n              {updateValidator: true});\n          });\n        });\n      } else {\n        validatorsToExecute.push(function(callback) {\n          schemaPath.doValidate(\n            v,\n            function(err) {\n              if (err) {\n                err.path = updates[i];\n                validationErrors.push(err);\n              }\n              callback(null);\n            },\n            options && options.context === 'query' ? query : null,\n            {updateValidator: true});\n        });\n      }\n    }\n  }\n  for (i = 0; i < numUpdates; ++i) {\n    iter(i, updatedValues[updates[i]]);\n  }\n\n  var arrayUpdates = Object.keys(arrayAtomicUpdates);\n  var numArrayUpdates = arrayUpdates.length;\n  for (i = 0; i < numArrayUpdates; ++i) {\n    (function(i) {\n      var schemaPath = schema._getSchema(arrayUpdates[i]);\n      if (schemaPath && schemaPath.$isMongooseDocumentArray) {\n        validatorsToExecute.push(function(callback) {\n          schemaPath.doValidate(\n            arrayAtomicUpdates[arrayUpdates[i]],\n            function(err) {\n              if (err) {\n                err.path = arrayUpdates[i];\n                validationErrors.push(err);\n              }\n              callback(null);\n            },\n            options && options.context === 'query' ? query : null);\n        });\n      } else {\n        schemaPath = schema._getSchema(arrayUpdates[i] + '.0');\n        for (var j = 0; j < arrayAtomicUpdates[arrayUpdates[i]].length; ++j) {\n          (function(j) {\n            validatorsToExecute.push(function(callback) {\n              schemaPath.doValidate(\n                arrayAtomicUpdates[arrayUpdates[i]][j],\n                function(err) {\n                  if (err) {\n                    err.path = arrayUpdates[i];\n                    validationErrors.push(err);\n                  }\n                  callback(null);\n                },\n                options && options.context === 'query' ? query : null,\n                { updateValidator: true });\n            });\n          })(j);\n        }\n      }\n    })(i);\n  }\n\n  return function(callback) {\n    parallel(validatorsToExecute, function() {\n      if (validationErrors.length) {\n        var err = new ValidationError(null);\n        for (var i = 0; i < validationErrors.length; ++i) {\n          err.addError(validationErrors[i].path, validationErrors[i]);\n        }\n        return callback(err);\n      }\n      callback(null);\n    });\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/services/updateValidators.js\n// module id = 224\n// module chunks = 0","\n/*!\n * Module dependencies.\n */\n\nvar utils = require('./utils');\n\n/*!\n * StateMachine represents a minimal `interface` for the\n * constructors it builds via StateMachine.ctor(...).\n *\n * @api private\n */\n\nvar StateMachine = module.exports = exports = function StateMachine() {\n};\n\n/*!\n * StateMachine.ctor('state1', 'state2', ...)\n * A factory method for subclassing StateMachine.\n * The arguments are a list of states. For each state,\n * the constructor's prototype gets state transition\n * methods named after each state. These transition methods\n * place their path argument into the given state.\n *\n * @param {String} state\n * @param {String} [state]\n * @return {Function} subclass constructor\n * @private\n */\n\nStateMachine.ctor = function() {\n  var states = utils.args(arguments);\n\n  var ctor = function() {\n    StateMachine.apply(this, arguments);\n    this.paths = {};\n    this.states = {};\n    this.stateNames = states;\n\n    var i = states.length,\n        state;\n\n    while (i--) {\n      state = states[i];\n      this.states[state] = {};\n    }\n  };\n\n  ctor.prototype = new StateMachine();\n\n  states.forEach(function(state) {\n    // Changes the `path`'s state to `state`.\n    ctor.prototype[state] = function(path) {\n      this._changeState(path, state);\n    };\n  });\n\n  return ctor;\n};\n\n/*!\n * This function is wrapped by the state change functions:\n *\n * - `require(path)`\n * - `modify(path)`\n * - `init(path)`\n *\n * @api private\n */\n\nStateMachine.prototype._changeState = function _changeState(path, nextState) {\n  var prevBucket = this.states[this.paths[path]];\n  if (prevBucket) delete prevBucket[path];\n\n  this.paths[path] = nextState;\n  this.states[nextState][path] = true;\n};\n\n/*!\n * ignore\n */\n\nStateMachine.prototype.clear = function clear(state) {\n  var keys = Object.keys(this.states[state]),\n      i = keys.length,\n      path;\n\n  while (i--) {\n    path = keys[i];\n    delete this.states[state][path];\n    delete this.paths[path];\n  }\n};\n\n/*!\n * Checks to see if at least one path is in the states passed in via `arguments`\n * e.g., this.some('required', 'inited')\n *\n * @param {String} state that we want to check for.\n * @private\n */\n\nStateMachine.prototype.some = function some() {\n  var _this = this;\n  var what = arguments.length ? arguments : this.stateNames;\n  return Array.prototype.some.call(what, function(state) {\n    return Object.keys(_this.states[state]).length;\n  });\n};\n\n/*!\n * This function builds the functions that get assigned to `forEach` and `map`,\n * since both of those methods share a lot of the same logic.\n *\n * @param {String} iterMethod is either 'forEach' or 'map'\n * @return {Function}\n * @api private\n */\n\nStateMachine.prototype._iter = function _iter(iterMethod) {\n  return function() {\n    var numArgs = arguments.length,\n        states = utils.args(arguments, 0, numArgs - 1),\n        callback = arguments[numArgs - 1];\n\n    if (!states.length) states = this.stateNames;\n\n    var _this = this;\n\n    var paths = states.reduce(function(paths, state) {\n      return paths.concat(Object.keys(_this.states[state]));\n    }, []);\n\n    return paths[iterMethod](function(path, i, paths) {\n      return callback(path, i, paths);\n    });\n  };\n};\n\n/*!\n * Iterates over the paths that belong to one of the parameter states.\n *\n * The function profile can look like:\n * this.forEach(state1, fn);         // iterates over all paths in state1\n * this.forEach(state1, state2, fn); // iterates over all paths in state1 or state2\n * this.forEach(fn);                 // iterates over all paths in all states\n *\n * @param {String} [state]\n * @param {String} [state]\n * @param {Function} callback\n * @private\n */\n\nStateMachine.prototype.forEach = function forEach() {\n  this.forEach = this._iter('forEach');\n  return this.forEach.apply(this, arguments);\n};\n\n/*!\n * Maps over the paths that belong to one of the parameter states.\n *\n * The function profile can look like:\n * this.forEach(state1, fn);         // iterates over all paths in state1\n * this.forEach(state1, state2, fn); // iterates over all paths in state1 or state2\n * this.forEach(fn);                 // iterates over all paths in all states\n *\n * @param {String} [state]\n * @param {String} [state]\n * @param {Function} callback\n * @return {Array}\n * @private\n */\n\nStateMachine.prototype.map = function map() {\n  this.map = this._iter('map');\n  return this.map.apply(this, arguments);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mongoose@5.0.11@mongoose/lib/statemachine.js\n// module id = 225\n// module chunks = 0","/**\n * Returns the value of object `o` at the given `path`.\n *\n * ####Example:\n *\n *     var obj = {\n *         comments: [\n *             { title: 'exciting!', _doc: { title: 'great!' }}\n *           , { title: 'number dos' }\n *         ]\n *     }\n *\n *     mpath.get('comments.0.title', o)         // 'exciting!'\n *     mpath.get('comments.0.title', o, '_doc') // 'great!'\n *     mpath.get('comments.title', o)           // ['exciting!', 'number dos']\n *\n *     // summary\n *     mpath.get(path, o)\n *     mpath.get(path, o, special)\n *     mpath.get(path, o, map)\n *     mpath.get(path, o, special, map)\n *\n * @param {String} path\n * @param {Object} o\n * @param {String} [special] When this property name is present on any object in the path, walking will continue on the value of this property.\n * @param {Function} [map] Optional function which receives each individual found value. The value returned from `map` is used in the original values place.\n */\n\nexports.get = function (path, o, special, map) {\n  var lookup;\n\n  if ('function' == typeof special) {\n    if (special.length < 2) {\n      map = special;\n      special = undefined;\n    } else {\n      lookup = special;\n      special = undefined;\n    }\n  }\n\n  map || (map = K);\n\n  var parts = 'string' == typeof path\n    ? path.split('.')\n    : path\n\n  if (!Array.isArray(parts)) {\n    throw new TypeError('Invalid `path`. Must be either string or array');\n  }\n\n  var obj = o\n    , part;\n\n  for (var i = 0; i < parts.length; ++i) {\n    part = parts[i];\n\n    if (Array.isArray(obj) && !/^\\d+$/.test(part)) {\n      // reading a property from the array items\n      var paths = parts.slice(i);\n\n      return obj.map(function (item) {\n        return item\n          ? exports.get(paths, item, special || lookup, map)\n          : map(undefined);\n      });\n    }\n\n    if (lookup) {\n      obj = lookup(obj, part);\n    } else {\n      obj = special && obj[special]\n        ? obj[special][part]\n        : obj[part];\n    }\n\n    if (!obj) return map(obj);\n  }\n\n  return map(obj);\n};\n\n/**\n * Returns true if `in` returns true for every piece of the path\n *\n * @param {String} path\n * @param {Object} o\n */\n\nexports.has = function (path, o) {\n  var parts = typeof path === 'string' ?\n    path.split('.') :\n    path;\n\n  if (!Array.isArray(parts)) {\n    throw new TypeError('Invalid `path`. Must be either string or array');\n  }\n\n  var len = parts.length;\n  var cur = o;\n  for (var i = 0; i < len; ++i) {\n    if (cur == null || typeof cur !== 'object' || !(parts[i] in cur)) {\n      return false;\n    }\n    cur = cur[parts[i]];\n  }\n\n  return true;\n};\n\n/**\n * Deletes the last piece of `path`\n *\n * @param {String} path\n * @param {Object} o\n */\n\nexports.unset = function (path, o) {\n  var parts = typeof path === 'string' ?\n    path.split('.') :\n    path;\n\n  if (!Array.isArray(parts)) {\n    throw new TypeError('Invalid `path`. Must be either string or array');\n  }\n\n  var len = parts.length;\n  var cur = o;\n  for (var i = 0; i < len; ++i) {\n    if (cur == null || typeof cur !== 'object' || !(parts[i] in cur)) {\n      return false;\n    }\n    if (i === len - 1) {\n      delete cur[parts[i]];\n      return true;\n    }\n    cur = cur[parts[i]];\n  }\n\n  return true;\n};\n\n/**\n * Sets the `val` at the given `path` of object `o`.\n *\n * @param {String} path\n * @param {Anything} val\n * @param {Object} o\n * @param {String} [special] When this property name is present on any object in the path, walking will continue on the value of this property.\n * @param {Function} [map] Optional function which is passed each individual value before setting it. The value returned from `map` is used in the original values place.\n */\n\nexports.set = function (path, val, o, special, map, _copying) {\n  var lookup;\n\n  if ('function' == typeof special) {\n    if (special.length < 2) {\n      map = special;\n      special = undefined;\n    } else {\n      lookup = special;\n      special = undefined;\n    }\n  }\n\n  map || (map = K);\n\n  var parts = 'string' == typeof path\n    ? path.split('.')\n    : path\n\n  if (!Array.isArray(parts)) {\n    throw new TypeError('Invalid `path`. Must be either string or array');\n  }\n\n  if (null == o) return;\n\n  // the existance of $ in a path tells us if the user desires\n  // the copying of an array instead of setting each value of\n  // the array to the one by one to matching positions of the\n  // current array.\n  var copy = _copying || /\\$/.test(path)\n    , obj = o\n    , part\n\n  for (var i = 0, len = parts.length - 1; i < len; ++i) {\n    part = parts[i];\n\n    if ('$' == part) {\n      if (i == len - 1) {\n        break;\n      } else {\n        continue;\n      }\n    }\n\n    if (Array.isArray(obj) && !/^\\d+$/.test(part)) {\n      var paths = parts.slice(i);\n      if (!copy && Array.isArray(val)) {\n        for (var j = 0; j < obj.length && j < val.length; ++j) {\n          // assignment of single values of array\n          exports.set(paths, val[j], obj[j], special || lookup, map, copy);\n        }\n      } else {\n        for (var j = 0; j < obj.length; ++j) {\n          // assignment of entire value\n          exports.set(paths, val, obj[j], special || lookup, map, copy);\n        }\n      }\n      return;\n    }\n\n    if (lookup) {\n      obj = lookup(obj, part);\n    } else {\n      obj = special && obj[special]\n        ? obj[special][part]\n        : obj[part];\n    }\n\n    if (!obj) return;\n  }\n\n  // process the last property of the path\n\n  part = parts[len];\n\n  // use the special property if exists\n  if (special && obj[special]) {\n    obj = obj[special];\n  }\n\n  // set the value on the last branch\n  if (Array.isArray(obj) && !/^\\d+$/.test(part)) {\n    if (!copy && Array.isArray(val)) {\n      for (var item, j = 0; j < obj.length && j < val.length; ++j) {\n        item = obj[j];\n        if (item) {\n          if (lookup) {\n            lookup(item, part, map(val[j]));\n          } else {\n            if (item[special]) item = item[special];\n            item[part] = map(val[j]);\n          }\n        }\n      }\n    } else {\n      for (var j = 0; j < obj.length; ++j) {\n        item = obj[j];\n        if (item) {\n          if (lookup) {\n            lookup(item, part, map(val));\n          } else {\n            if (item[special]) item = item[special];\n            item[part] = map(val);\n          }\n        }\n      }\n    }\n  } else {\n    if (lookup) {\n      lookup(obj, part, map(val));\n    } else {\n      obj[part] = map(val);\n    }\n  }\n}\n\n/*!\n * Returns the value passed to it.\n */\n\nfunction K (v) {\n  return v;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mpath@0.3.0@mpath/lib/index.js\n// module id = 226\n// module chunks = 0","'use strict';\n\nvar env = require('../env')\n\nif ('unknown' == env.type) {\n  throw new Error('Unknown environment')\n}\n\nmodule.exports =\n  env.isNode ? require('./node') :\n  env.isMongo ? require('./collection') :\n  require('./collection');\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mquery@3.0.0@mquery/lib/collection/index.js\n// module id = 227\n// module chunks = 0","'use strict';\n\n/**\n * Module dependencies\n */\n\nvar Collection = require('./collection');\nvar utils = require('../utils');\n\nfunction NodeCollection (col) {\n  this.collection = col;\n  this.collectionName = col.collectionName;\n}\n\n/**\n * inherit from collection base class\n */\n\nutils.inherits(NodeCollection, Collection);\n\n/**\n * find(match, options, function(err, docs))\n */\n\nNodeCollection.prototype.find = function (match, options, cb) {\n  this.collection.find(match, options, function (err, cursor) {\n    if (err) return cb(err);\n\n    try {\n      cursor.toArray(cb);\n    } catch (error) {\n      cb(error);\n    }\n  });\n}\n\n/**\n * findOne(match, options, function(err, doc))\n */\n\nNodeCollection.prototype.findOne = function (match, options, cb) {\n  this.collection.findOne(match, options, cb);\n}\n\n/**\n * count(match, options, function(err, count))\n */\n\nNodeCollection.prototype.count = function (match, options, cb) {\n  this.collection.count(match, options, cb);\n}\n\n/**\n * distinct(prop, match, options, function(err, count))\n */\n\nNodeCollection.prototype.distinct  = function (prop, match, options, cb) {\n  this.collection.distinct(prop, match, options, cb);\n}\n\n/**\n * update(match, update, options, function(err[, result]))\n */\n\nNodeCollection.prototype.update = function (match, update, options, cb) {\n  this.collection.update(match, update, options, cb);\n}\n\n/**\n * update(match, update, options, function(err[, result]))\n */\n\nNodeCollection.prototype.updateMany = function (match, update, options, cb) {\n  this.collection.updateMany(match, update, options, cb);\n}\n\n/**\n * update(match, update, options, function(err[, result]))\n */\n\nNodeCollection.prototype.updateOne = function (match, update, options, cb) {\n  this.collection.updateOne(match, update, options, cb);\n}\n\n/**\n * replaceOne(match, update, options, function(err[, result]))\n */\n\nNodeCollection.prototype.replaceOne = function (match, update, options, cb) {\n  this.collection.replaceOne(match, update, options, cb);\n}\n\n/**\n * deleteOne(match, options, function(err[, result])\n */\n\nNodeCollection.prototype.deleteOne = function (match, options, cb) {\n  this.collection.deleteOne(match, options, cb);\n}\n\n/**\n * deleteMany(match, options, function(err[, result])\n */\n\nNodeCollection.prototype.deleteMany = function (match, options, cb) {\n  this.collection.deleteMany(match, options, cb);\n}\n\n/**\n * remove(match, options, function(err[, result])\n */\n\nNodeCollection.prototype.remove = function (match, options, cb) {\n  this.collection.remove(match, options, cb);\n}\n\n/**\n * findAndModify(match, update, options, function(err, doc))\n */\n\nNodeCollection.prototype.findAndModify = function (match, update, options, cb) {\n  var sort = Array.isArray(options.sort) ? options.sort : [];\n  this.collection.findAndModify(match, sort, update, options, cb);\n}\n\n/**\n * var stream = findStream(match, findOptions, streamOptions)\n */\n\nNodeCollection.prototype.findStream = function(match, findOptions, streamOptions) {\n  return this.collection.find(match, findOptions);\n}\n\n/**\n * var cursor = findCursor(match, findOptions)\n */\n\nNodeCollection.prototype.findCursor = function(match, findOptions) {\n  return this.collection.find(match, findOptions);\n}\n\n/**\n * aggregation(operators..., function(err, doc))\n * TODO\n */\n\n/**\n * Expose\n */\n\nmodule.exports = exports = NodeCollection;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mquery@3.0.0@mquery/lib/collection/node.js\n// module id = 228\n// module chunks = 0","'use strict';\n\nvar denied = exports;\n\ndenied.distinct = function (self) {\n  if (self._fields && Object.keys(self._fields).length > 0) {\n    return 'field selection and slice'\n  }\n\n  var keys = Object.keys(denied.distinct);\n  var err;\n\n  keys.every(function (option) {\n    if (self.options[option]) {\n      err = option;\n      return false;\n    }\n    return true;\n  });\n\n  return err;\n};\ndenied.distinct.select =\ndenied.distinct.slice =\ndenied.distinct.sort =\ndenied.distinct.limit =\ndenied.distinct.skip =\ndenied.distinct.batchSize =\ndenied.distinct.comment =\ndenied.distinct.maxScan =\ndenied.distinct.snapshot =\ndenied.distinct.hint =\ndenied.distinct.tailable = true;\n\n\n// aggregation integration\n\n\ndenied.findOneAndUpdate =\ndenied.findOneAndRemove = function (self) {\n  var keys = Object.keys(denied.findOneAndUpdate);\n  var err;\n\n  keys.every(function (option) {\n    if (self.options[option]) {\n      err = option;\n      return false;\n    }\n    return true;\n  });\n\n  return err;\n}\ndenied.findOneAndUpdate.limit =\ndenied.findOneAndUpdate.skip =\ndenied.findOneAndUpdate.batchSize =\ndenied.findOneAndUpdate.maxScan =\ndenied.findOneAndUpdate.snapshot =\ndenied.findOneAndUpdate.hint =\ndenied.findOneAndUpdate.tailable =\ndenied.findOneAndUpdate.comment = true;\n\n\ndenied.count = function (self) {\n  if (self._fields && Object.keys(self._fields).length > 0) {\n    return 'field selection and slice'\n  }\n\n  var keys = Object.keys(denied.count);\n  var err;\n\n  keys.every(function (option) {\n    if (self.options[option]) {\n      err = option;\n      return false;\n    }\n    return true;\n  });\n\n  return err;\n}\n\ndenied.count.slice =\ndenied.count.batchSize =\ndenied.count.comment =\ndenied.count.maxScan =\ndenied.count.snapshot =\ndenied.count.tailable = true;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_mquery@3.0.0@mquery/lib/permissions.js\n// module id = 229\n// module chunks = 0","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: false,\r\n\t\t\tget: function() { return module.l; }\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: false,\r\n\t\t\tget: function() { return module.i; }\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 230\n// module chunks = 0","module.exports = require(\"async\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"async\"\n// module id = 231\n// module chunks = 0","module.exports = require(\"async/parallelLimit\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"async/parallelLimit\"\n// module id = 232\n// module chunks = 0","module.exports = require(\"bluebird\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bluebird\"\n// module id = 233\n// module chunks = 0","module.exports = require(\"debug\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"debug\"\n// module id = 234\n// module chunks = 0","module.exports = require(\"ms\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ms\"\n// module id = 235\n// module chunks = 0","module.exports = require(\"net\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"net\"\n// module id = 236\n// module chunks = 0","module.exports = require(\"path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = 237\n// module chunks = 0","module.exports = require(\"querystring\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"querystring\"\n// module id = 238\n// module chunks = 0","module.exports = require(\"resolve-from\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"resolve-from\"\n// module id = 239\n// module chunks = 0","module.exports = require(\"semver\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"semver\"\n// module id = 240\n// module chunks = 0","module.exports = require(\"tls\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"tls\"\n// module id = 241\n// module chunks = 0"],"sourceRoot":""}